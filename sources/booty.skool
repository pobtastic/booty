@rom
@start
@expand=#DEF(#POKE #LINK:Pokes)
@expand=#DEF(#ANIMATE(delay,count=$50)(name=$a)*$name-1,$delay;#FOR$02,$count||x|$name-x|;||($name-animation))
@set-handle-unsupported-macros=1

; Loading Screen
;
; #UDGTABLE
; { =h Booty Loading Screen. }
; { #SCR$02(loading) }
; UDGTABLE#
@label=Loading
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $4020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$03,$FD,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$80,$70,$00,$00,$00,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4080 DEFB $00,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$F8,$38,$01,$F8,$01,$F8,$07,$C0,$07,$F1,$FE,$00,$00,$00,$07,$FF,$FF,$FF,$FF,$FF,$FF,$00 ;
 $40A0 DEFB $00,$00,$00,$00,$00,$00,$07,$80,$00,$0F,$80,$3E,$F0,$0E,$F0,$0E,$7C,$02,$3C,$0F,$80,$01,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F8,$00,$00,$00,$00,$00,$1F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4100 DEFB $7E,$3E,$7C,$7E,$7C,$3E,$7C,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7E,$3E,$7C,$7E,$7C,$3E,$7C,$78 ;
 $4120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$7E,$00,$00,$FE,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7E,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$80,$F0,$00,$00,$00,$00,$7C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$1C,$07,$9E,$07,$9E,$07,$C0,$03,$C0,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41A0 DEFB $00,$00,$00,$00,$00,$00,$0F,$C0,$00,$0F,$80,$3E,$F0,$1E,$F0,$1E,$7C,$04,$3C,$0F,$80,$03,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$F8,$00,$00,$00,$3F,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4200 DEFB $40,$08,$42,$40,$42,$08,$42,$44,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$42,$40,$42,$08,$42,$44 ;
 $4220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$01,$F8,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$00,$F0,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4280 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$0C,$0F,$0E,$0F,$0E,$0F,$80,$07,$81,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42A0 DEFB $00,$00,$00,$00,$00,$00,$1F,$E0,$00,$1F,$00,$7C,$F0,$3C,$F0,$3C,$F8,$0C,$78,$1F,$00,$07,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$0F,$FF,$FC,$00,$7F,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4300 DEFB $7C,$08,$42,$7C,$7C,$08,$42,$42,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7C,$08,$42,$7C,$7C,$08,$42,$42 ;
 $4320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$01,$F0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$01,$E0,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4380 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$0E,$1E,$07,$1E,$07,$0F,$80,$07,$81,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43A0 DEFB $00,$00,$00,$00,$00,$00,$1F,$E0,$00,$1F,$00,$FC,$E0,$3C,$E0,$3C,$F8,$18,$78,$1F,$00,$07,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$0F,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4400 DEFB $40,$08,$7C,$40,$42,$08,$7C,$42,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$7C,$40,$42,$08,$7C,$42 ;
 $4420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$03,$E0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3E,$03,$C3,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4480 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$E0,$0F,$3C,$07,$3C,$07,$1F,$00,$0F,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44A0 DEFB $00,$00,$00,$00,$00,$00,$1F,$E0,$00,$3E,$01,$F8,$E0,$78,$E0,$78,$F0,$38,$F0,$3E,$00,$07,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$00,$00,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4500 DEFB $40,$08,$44,$40,$42,$08,$44,$44,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$44,$40,$42,$08,$44,$44 ;
 $4520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$03,$E0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4560 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3E,$1F,$C7,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4580 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$E0,$1F,$3C,$07,$3C,$07,$1F,$00,$0F,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45A0 DEFB $00,$00,$00,$00,$00,$00,$1F,$E0,$00,$3F,$87,$F0,$70,$F0,$70,$F0,$78,$70,$F0,$7E,$00,$07,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$80,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4600 DEFB $40,$3E,$42,$7E,$7C,$3E,$42,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$3E,$42,$7E,$7C,$3E,$42,$78 ;
 $4620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$7E,$00,$07,$C0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7E,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4660 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$80,$00,$00,$00,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4680 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$C0,$1F,$78,$0F,$78,$0F,$3E,$00,$1E,$07,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46A0 DEFB $00,$00,$00,$00,$00,$00,$0F,$C0,$00,$7D,$FF,$E0,$79,$E0,$79,$E0,$79,$E0,$78,$FC,$00,$03,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$80,$00,$00,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$07,$C0,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4760 DEFB $00,$7F,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$7C,$7F,$00,$00,$00,$00,$03,$E0,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$FF,$FF,$FF,$FF,$80 ;
 $4780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$C0,$1F,$70,$0F,$70,$0F,$3E,$01,$1E,$07,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47A0 DEFB $00,$00,$00,$00,$00,$00,$07,$80,$00,$FC,$7F,$80,$1F,$80,$1F,$80,$3F,$C0,$1F,$7C,$00,$01,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$00,$00,$00,$00,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4800 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4820 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$06,$8C,$2C,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4840 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$C0,$80,$FF,$C0,$20,$0C,$80,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00 ;
 $4860 DEFB $00,$00,$00,$06,$0C,$01,$FF,$C0,$00,$00,$00,$FF,$C0,$12,$0C,$10,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4880 DEFB $00,$03,$F0,$04,$3F,$F3,$F0,$3F,$00,$00,$00,$6D,$22,$00,$4C,$80,$20,$4C,$81,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00 ;
 $48A0 DEFB $00,$80,$3F,$01,$F9,$E0,$E0,$03,$80,$00,$FF,$FF,$E0,$22,$0C,$30,$01,$FF,$E0,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48C0 DEFB $FC,$3C,$3E,$28,$00,$07,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48E0 DEFB $03,$1F,$E0,$03,$80,$01,$60,$00,$05,$00,$05,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$05,$05,$00,$00,$05,$05,$05,$00,$00,$05,$00,$00 ;
 $4900 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4920 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$19,$FF,$F3,$00,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4940 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$01,$00,$7F,$80,$10,$0C,$80,$00,$00,$00,$00,$00,$00,$03,$FF,$C0,$00,$00,$00,$00 ;
 $4960 DEFB $00,$00,$00,$06,$0E,$03,$FF,$F0,$00,$00,$00,$7F,$80,$64,$1E,$0C,$07,$5C,$10,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4980 DEFB $00,$0F,$C0,$00,$FF,$FF,$80,$03,$E0,$00,$00,$FF,$94,$00,$7F,$80,$40,$4C,$80,$80,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00 ;
 $49A0 DEFB $00,$80,$FF,$81,$E1,$E0,$30,$00,$C0,$00,$FF,$FF,$F0,$12,$0C,$50,$02,$0C,$10,$00,$03,$83,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $49C0 DEFB $FF,$3D,$F8,$08,$00,$07,$80,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $49E0 DEFB $07,$18,$F0,$00,$E0,$01,$60,$00,$00,$05,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$05,$05,$00,$00,$00,$05,$05,$00,$00,$00 ;
 $4A00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$00,$62,$0C,$08,$E0,$CE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$02,$00,$7F,$80,$08,$0C,$40,$00,$00,$00,$00,$00,$00,$0F,$FF,$F0,$00,$00,$00,$00 ;
 $4A60 DEFB $00,$00,$00,$06,$0E,$07,$C0,$18,$00,$00,$FF,$FF,$FF,$C8,$1E,$03,$18,$9E,$08,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4A80 DEFB $00,$1E,$00,$1F,$FF,$FC,$00,$00,$70,$00,$01,$4C,$88,$00,$8C,$40,$80,$7F,$80,$40,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00 ;
 $4AA0 DEFB $00,$83,$F0,$C7,$83,$78,$18,$00,$40,$00,$FF,$FF,$F8,$0B,$FF,$F0,$02,$0C,$10,$00,$00,$7F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4AC0 DEFB $07,$FF,$C0,$08,$00,$07,$80,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4AE0 DEFB $0E,$30,$38,$00,$10,$01,$60,$00,$00,$00,$05,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00 ;
 $4B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$C1,$84,$0C,$04,$1F,$0E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B40 DEFB $00,$00,$00,$00,$F0,$00,$00,$00,$00,$00,$00,$0C,$04,$00,$FF,$80,$04,$FF,$C0,$00,$00,$00,$00,$00,$00,$1F,$FF,$F8,$00,$00,$00,$00 ;
 $4B60 DEFB $00,$00,$00,$06,$0E,$0F,$00,$08,$00,$00,$00,$7F,$C6,$10,$1E,$00,$E1,$1E,$08,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4B80 DEFB $00,$1C,$00,$FF,$FF,$FF,$F8,$00,$10,$00,$02,$4C,$94,$00,$8C,$41,$00,$8C,$40,$20,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00 ;
 $4BA0 DEFB $00,$07,$90,$6C,$03,$3C,$08,$00,$40,$00,$FF,$FF,$FC,$04,$0D,$08,$02,$FF,$F0,$00,$00,$1F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4BC0 DEFB $1F,$FF,$80,$00,$00,$07,$80,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4BE0 DEFB $1C,$70,$1C,$00,$00,$01,$70,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00 ;
 $4C00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$2E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$3E,$08,$0C,$02,$00,$0D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C40 DEFB $00,$00,$00,$03,$F8,$00,$00,$00,$00,$00,$00,$0C,$08,$01,$3F,$00,$02,$7F,$C0,$00,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00 ;
 $4C60 DEFB $00,$00,$03,$FE,$0E,$1E,$00,$04,$00,$00,$00,$3F,$38,$20,$2D,$00,$02,$1E,$04,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4C80 DEFB $00,$78,$03,$F8,$03,$FF,$FF,$80,$10,$00,$04,$7F,$A2,$00,$FF,$C2,$00,$8C,$40,$18,$00,$00,$00,$00,$00,$1F,$FF,$F8,$00,$00,$00,$00 ;
 $4CA0 DEFB $00,$0F,$10,$28,$02,$1C,$08,$00,$00,$00,$FF,$FF,$FE,$06,$0E,$3F,$FF,$0C,$08,$00,$01,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4CC0 DEFB $7F,$FF,$FF,$00,$00,$03,$C0,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4CE0 DEFB $38,$60,$1C,$00,$00,$01,$70,$05,$05,$05,$05,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$05,$05,$05,$00,$05,$05,$05,$00,$05,$05,$00,$00 ;
 $4D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$5D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$10,$0C,$01,$01,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D40 DEFB $00,$00,$00,$03,$B8,$00,$00,$00,$00,$00,$00,$0C,$10,$FF,$FF,$FF,$E1,$7F,$A0,$00,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00 ;
 $4D60 DEFB $00,$00,$3F,$FF,$0E,$3C,$00,$04,$00,$00,$00,$3F,$00,$40,$2D,$00,$04,$2D,$04,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4D80 DEFB $00,$70,$07,$80,$0F,$FF,$0F,$F0,$00,$00,$08,$8C,$41,$01,$0C,$24,$00,$FF,$C0,$06,$00,$00,$00,$00,$00,$0F,$FF,$F0,$00,$00,$00,$00 ;
 $4DA0 DEFB $00,$1E,$10,$3F,$04,$1E,$00,$00,$00,$00,$FF,$FF,$FF,$07,$FF,$FF,$FF,$0C,$08,$00,$1F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4DC0 DEFB $F8,$7F,$FF,$E0,$00,$03,$C0,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4DE0 DEFB $30,$60,$0E,$00,$00,$01,$70,$00,$00,$00,$00,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00,$00 ;
 $4E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$AC,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$20,$0C,$00,$80,$0D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E40 DEFB $00,$00,$00,$03,$1C,$00,$00,$00,$00,$00,$00,$0C,$20,$04,$8C,$40,$00,$FF,$A0,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00 ;
 $4E60 DEFB $00,$00,$FF,$FF,$FE,$F8,$07,$80,$00,$00,$00,$1E,$80,$80,$3F,$00,$08,$2D,$02,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4E80 DEFB $00,$E0,$0C,$00,$7F,$F8,$01,$F8,$00,$00,$10,$8C,$C0,$81,$0C,$28,$01,$0C,$20,$01,$80,$00,$00,$00,$00,$03,$FF,$C0,$00,$00,$00,$00 ;
 $4EA0 DEFB $00,$1C,$01,$F8,$E4,$0E,$00,$00,$00,$00,$FF,$FF,$FF,$88,$8C,$3F,$FF,$FF,$F8,$01,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4EC0 DEFB $E0,$FF,$C1,$F8,$00,$03,$C0,$00,$00,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4EE0 DEFB $60,$E0,$0E,$00,$00,$01,$30,$00,$00,$05,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$00,$00,$00,$05,$00,$00,$00,$00,$05,$05,$00,$01,$00 ;
 $4F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$4C,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$40,$0C,$00,$40,$0C,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F40 DEFB $00,$00,$00,$07,$1C,$00,$7E,$00,$00,$00,$00,$0C,$40,$09,$0C,$20,$00,$7F,$20,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00 ;
 $4F60 DEFB $00,$01,$FE,$07,$FF,$F0,$3F,$F8,$00,$00,$00,$2D,$41,$00,$4C,$80,$10,$3F,$02,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4F80 DEFB $00,$C0,$10,$00,$FF,$FF,$80,$3E,$00,$00,$21,$FF,$C0,$41,$FF,$F0,$01,$0C,$20,$00,$60,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00 ;
 $4FA0 DEFB $F0,$1C,$0F,$28,$14,$0F,$00,$00,$00,$00,$FF,$FF,$FF,$C8,$5C,$3F,$FF,$0C,$04,$1F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FC0 DEFB $81,$CF,$80,$1F,$00,$03,$E0,$00,$00,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FE0 DEFB $60,$C0,$0F,$00,$00,$01,$38,$05,$05,$00,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$05,$00,$00,$05,$05,$05,$05,$00,$00,$01,$00 ;
 $5000 DEFB $60,$C0,$07,$00,$00,$05,$B8,$05,$05,$00,$05,$05,$00,$00,$05,$00,$05,$00,$00,$05,$05,$00,$00,$05,$00,$00,$00,$00,$00,$05,$05,$00 ;
 $5020 DEFB $01,$00,$05,$E0,$05,$05,$9C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$05,$00 ;
 $5040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5080 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5100 DEFB $C1,$C0,$07,$00,$05,$00,$B8,$00,$00,$00,$00,$00,$00,$05,$00,$05,$00,$00,$05,$00,$00,$00,$05,$00,$00,$05,$05,$05,$00,$00,$00,$00 ;
 $5120 DEFB $01,$05,$00,$E0,$00,$00,$9C,$05,$05,$05,$00,$00,$00,$00,$00,$05,$00,$05,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$00,$05,$00,$00 ;
 $5140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5160 DEFB $7C,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7E,$3E,$7C,$7E,$7E,$40,$82 ;
 $5180 DEFB $7C,$00,$10,$00,$00,$00,$00,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$00,$18,$3C,$3C,$08,$00,$02,$00,$7E,$00,$3C,$00,$10,$00 ;
 $51A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5200 DEFB $C1,$80,$07,$80,$00,$05,$B8,$05,$05,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$05,$00,$05,$05,$00,$00,$00,$00,$00 ;
 $5220 DEFB $01,$00,$05,$E0,$00,$00,$9C,$05,$05,$00,$05,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00 ;
 $5240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5260 DEFB $42,$1C,$38,$3C,$1C,$38,$68,$00,$00,$20,$38,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$42,$40,$40,$40,$44 ;
 $5280 DEFB $42,$44,$38,$38,$38,$00,$00,$20,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$9C,$80,$28,$42,$42,$18,$00,$02,$00,$40,$00,$42,$38,$00,$78 ;
 $52A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5300 DEFB $81,$80,$07,$80,$00,$00,$B8,$05,$05,$00,$00,$05,$05,$00,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$05,$05,$00,$00,$00,$05,$00 ;
 $5320 DEFB $01,$00,$00,$E0,$05,$05,$9C,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$00,$00,$00,$05,$05,$00,$05,$05,$05,$05,$05,$00,$00,$05 ;
 $5340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5360 DEFB $42,$20,$44,$44,$20,$04,$54,$10,$00,$3C,$44,$44,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7C,$08,$42,$7C,$7C,$40,$28 ;
 $5380 DEFB $7C,$44,$10,$44,$40,$10,$00,$3C,$20,$00,$00,$00,$00,$00,$00,$00,$00,$A2,$80,$08,$42,$3C,$28,$00,$02,$00,$7C,$00,$40,$04,$30,$44 ;
 $53A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5400 DEFB $81,$80,$07,$C0,$05,$05,$9C,$05,$05,$05,$05,$00,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$05,$05,$05,$05,$05,$00,$05,$05,$00,$00 ;
 $5420 DEFB $01,$05,$05,$F0,$00,$00,$9C,$05,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$05,$00 ;
 $5440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5460 DEFB $7C,$20,$44,$44,$20,$3C,$54,$00,$00,$22,$44,$44,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$7C,$40,$40,$40,$10 ;
 $5480 DEFB $42,$44,$10,$78,$38,$00,$00,$22,$20,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$80,$08,$3E,$42,$48,$00,$42,$00,$40,$00,$40,$3C,$10,$44 ;
 $54A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5500 DEFB $81,$80,$03,$C0,$00,$00,$9C,$00,$00,$00,$00,$05,$00,$05,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$05,$05,$00,$00,$05,$01 ;
 $5520 DEFB $00,$00,$00,$F0,$05,$05,$9C,$00,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$00,$00,$05,$00,$05,$05,$05,$05,$00,$00,$05,$00,$05 ;
 $5540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5560 DEFB $40,$20,$44,$3C,$20,$44,$54,$00,$00,$22,$44,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$44,$40,$40,$40,$10 ;
 $5580 DEFB $42,$3C,$10,$40,$04,$00,$00,$22,$20,$00,$00,$00,$00,$00,$00,$00,$00,$A2,$80,$08,$02,$42,$7E,$00,$42,$00,$40,$00,$42,$44,$10,$44 ;
 $55A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5600 DEFB $01,$00,$03,$C0,$05,$00,$9C,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$05,$00,$00,$00,$05,$00,$00,$05,$05,$05,$00,$00,$00,$01 ;
 $5620 DEFB $00,$05,$00,$F0,$00,$00,$9C,$05,$05,$05,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00 ;
 $5640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5660 DEFB $40,$20,$38,$04,$20,$3C,$54,$10,$00,$3C,$38,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$3E,$42,$7E,$40,$7E,$10 ;
 $5680 DEFB $7C,$04,$0C,$3C,$78,$10,$00,$3C,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$9C,$80,$3E,$3C,$3C,$08,$00,$3C,$00,$40,$00,$3C,$3C,$38,$44 ;
 $56A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5700 DEFB $01,$00,$01,$E0,$00,$00,$9C,$05,$05,$05,$05,$00,$05,$00,$00,$00,$00,$05,$00,$05,$00,$05,$00,$00,$05,$00,$00,$05,$05,$05,$00,$01 ;
 $5720 DEFB $00,$00,$00,$F0,$05,$05,$9C,$05,$05,$00,$00,$05,$05,$05,$00,$00,$00,$00,$00,$05,$05,$00,$05,$00,$05,$05,$05,$05,$05,$00,$00,$00 ;
 $5740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5760 DEFB $00,$00,$00,$38,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5780 DEFB $00,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $5800 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ; {Attributes.
 $5820 DEFB $28,$28,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$28,$28,$28,$28,$28,$28 ;
 $5840 DEFB $28,$28,$28,$28,$28,$28,$28,$2D,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$28,$28,$28,$28 ;
 $5860 DEFB $2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F ;
 $5880 DEFB $2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F ;
 $58A0 DEFB $28,$28,$28,$28,$28,$28,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$28,$28,$28,$28,$28,$28,$28,$28 ;
 $58C0 DEFB $28,$28,$28,$28,$28,$28,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$28,$28,$28,$28,$28,$28,$28,$28,$28 ;
 $58E0 DEFB $28,$28,$28,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$28,$28,$28,$28,$28,$28,$28,$28,$28 ;
 $5900 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$2D,$28,$28,$28,$28,$28,$28,$28,$28,$28 ;
 $5920 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28 ;
 $5940 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$2E,$2E,$2E,$28,$28,$28,$28 ;
 $5960 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$2E,$2E,$2E,$28,$28,$28,$28 ;
 $5980 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$2E,$2E,$2E,$28,$28,$28,$28 ;
 $59A0 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28 ;
 $59C0 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28 ;
 $59E0 DEFB $08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08 ;
 $5A00 DEFB $08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08 ;
 $5A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ;
 $5AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ;
 $5AC0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ;
 $5AE0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ; }

; Unused
u$5B00 DEFB $00

; Game Entry Commands
;
; See #R$6957. This data is copied to #R$CD14 after the game is loaded
; and then becomes the game entry point executable code.
@label=GameEntryCommands
b$5B01 DEFB $21,$FE,$FE,$3E,$C3,$77,$23,$3E
 $5B09 DEFB $69,$77,$23,$3E,$FE,$77,$21,$00
 $5B11 DEFB $F4,$01,$04,$01,$3E,$FE,$77,$23
 $5B19 DEFB $0B,$78,$B1,$20,$F7,$01,$00,$00
 $5B21 DEFB $ED,$43,$FE,$FF,$ED,$43,$FC,$FF
 $5B29 DEFB $ED,$43,$FB,$FF,$F3,$21,$00,$FA
 $5B31 DEFB $22,$F9,$FF,$3E,$F4,$ED,$47,$ED
 $5B39 DEFB $5E,$3E,$03,$32,$F7,$FF

; Pointer: Game Entry Point
@label=Pointer_GameEntryPoint
g$5B3F DEFW $CD14

; Unused
u$5B41 DEFB $01,$00,$FF,$FF,$00,$00,$00,$00
 $5B49 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B51 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B59 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B61 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B69 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B71 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B79 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B81 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B89 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B91 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B99 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC9 DEFB $00,$00,$00

; Active Room: Key Colour
;
; See #R$A900, #R$AB44 and #R$F107.
@label=ActiveRoom_KeyColour
g$5BCC DEFB $00

; Active Room: Closed Door Colour
;
; See #R$A9D1.
@label=ActiveRoom_ClosedDoorColour
g$5BCD DEFB $00

; Unused
u$5BCE DEFB $00

; Active Room: Room Scaffolding Colour
;
; See #R$A921, #R$A997 and #R$A9BF.
@label=ActiveRoom_ScaffoldingColour
g$5BCF DEFB $00

; Active Border Colour
@label=Active_BorderColour
g$5BD0 DEFB $00

; Active Room: Paper Colour
;
; See.
@label=ActiveRoom_PaperColour
g$5BD1 DEFB $00

; Active Room: Ladder Colour
;
; See #R$A952.
@label=ActiveRoom_LadderColour
g$5BD2 DEFB $00

; Current Room: Room ID
@label=CurrentRoom
g$5BD3 DEFB $01

; Temporary: Current Room ID
@label=TempCurrentRoomID
g$5BD4 DEFB $00

; Unused
u$5BD5 DEFB $00

; Reference: Doors
;
; Populated by #R$AB44. See #R$A900 and #R$EE5B for usage.
@label=ReferenceDoors
g$5BD6 DEFW $0000

; Reference: Ladders
;
; Populated by #R$AB44. See #R$A900, #R$ED9A and #R$EE08 for usage.
@label=ReferenceLadders
g$5BD8 DEFW $0000

; Reference: Keys And Locked Doors
;
; Populated by #R$AB44. See #R$A900, #R$E12A, #R$F107, #R$F1AF and #R$F1E5 for
; usage.
@label=ReferenceKeysAndLockedDoors
g$5BDA DEFW $0000

; Reference: Port Hole Reference
;
; Populated by #R$AB44. See #R$F1FC for usage.
@label=ReferencePortHole
g$5BDC DEFW $0000

; Reference: Pirate
;
; Populated by #R$AB44. See #R$F001 for usage.
@label=ReferencePirate
g$5BDE DEFW $0000    ; Reference to Pirate data.

; Reference: Items
;
; Populated by #R$AB44. See #R$A900 and #R$E5F4 for usage.
@label=ReferenceItems
g$5BE0 DEFW $0000

; Reference: Furniture
;
; Populated by #R$AB44. See #R$A900 for usage.
@label=ReferenceFurniture
g$5BE2 DEFW $0000

; Reference: Lifts
;
; Populated by #R$AB44. See #R$E4F1 and #R$E821 for usage.
@label=ReferenceLifts
g$5BE4 DEFW $0000

; Reference: Disappearing Floors
;
; Populated by #R$AB44. See #R$E581 for usage.
@label=ReferenceDisappearingFloors
g$5BE6 DEFW $0000

; Pointer: Current Room Buffer
;
; Initialised at #R$AB44. Used by the routine at #R$A900.
@label=PointerCurrentRoomBuffer
g$5BE8 DEFW $0000    ; Will always be #R$BAD7 when set. Populated by #R$AAF4.
                     ; Used by #R$A900.

; Control Method
;
; #TABLE(default,centre,centre)
; { =h Byte | =h Control Method }
; { #N$0C | Kempston Joystick }
; { #N$14 | Cursor Joystick }
; { #N$1C | Interface 2 Joystick }
; { #N$24 | Keyboard }
; TABLE#
@label=ControlMethod
g$5BEA DEFB $00

; User-Defined Keys
@label=UserDefinedKeys_Left
g$5BEB DEFB $00
@label=UserDefinedKeys_Right
 $5BEC DEFB $00
@label=UserDefinedKeys_Up
 $5BED DEFB $00
@label=UserDefinedKeys_Down
 $5BEE DEFB $00
@label=UserDefinedKeys_Fire
 $5BEF DEFB $00

; Game State
;
; #TABLE(default,centre,centre)
; { =h Byte | =h Meaning }
; { #N$01 | Normal Game }
; { #N$02 | Game Looped Mode }
; { #N$03 | Demo Mode }
; TABLE#
@label=GameState
g$5BF0 DEFB $00

; Player Lives
@label=PlayerLives
g$5BF1 DEFB $00

; Player Treasure
@label=PlayerTreasure
g$5BF2 DEFB $00,$00

; Player Booty
;
; The count of how much booty the player has collected in the current
; game.
; .
; Initialised to #N($0000,$04,$04) in #R$DEA8 at the start of a new game, unless
; #R$5BF0 is set to "Game Looped Mode" (#N$02) in which case the game begins
; with the previous games value continued (but all the booty is respawned).
; .
; Used by the routines at #R$DEA8, #R$E0A9, #R$E12A and #R$E5F4.
@label=PlayerBooty
g$5BF4 DEFB $00,$00

; Unused
u$5BF6 DEFB $00,$00,$00,$00

; Golden Key Timer Frame Skip
;
; Probably could name this better - this represents the number of frames to skip before counting down the actual
; Golden Key Timer at #R$5BFF(#N$5BFF).
@label=TimerGoldenKey_FrameSkip
g$5BFA DEFW $0000

; Golden Key Room ID
@label=GoldenKeyRoom
g$5BFC DEFB $00

; Golden Key Position
@label=PositionGoldenKey
g$5BFD DEFB $00      ; Horizontal position.
 $5BFE DEFB $00      ; Vertical position.

; Golden Key Timer
@label=TimerGoldenKey
g$5BFF DEFB $00

; Unused
u$5C00 DEFB $FF,$00,$00,$00,$FF,$00,$23,$0D
 $5C08 DEFB $0D,$23,$05,$00,$00,$00,$16,$13
 $5C10 DEFB $01,$00,$06,$00,$0B,$00,$01,$00
 $5C18 DEFB $01,$00,$06,$00,$10,$00,$00,$00
 $5C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C30 DEFB $00,$00,$00,$00,$00,$00,$00,$3C
 $5C38 DEFB $40,$00,$FF,$CD,$00,$F3,$68,$00
 $5C40 DEFB $00,$00,$01,$00,$FF,$0A,$00,$09
 $5C48 DEFB $07,$00,$00,$40,$5D,$00,$00,$B6
 $5C50 DEFB $5C,$BB,$5C,$CB,$5C,$3C,$5D,$CA
 $5C58 DEFB $5C,$41,$5D,$44,$5D,$3B,$5D,$9B
 $5C60 DEFB $5D,$46,$5D,$46,$5D,$46,$5D,$2D
 $5C68 DEFB $92,$5C,$00,$02,$00,$00,$00,$00
 $5C70 DEFB $00,$00,$00,$00,$B6,$1A,$07,$00
 $5C78 DEFB $08,$00,$00,$58,$FF,$00,$00,$21
 $5C80 DEFB $00,$5B,$21,$17,$A0,$50,$E0,$50
 $5C88 DEFB $21,$03,$21,$17,$03,$00,$00,$00
 $5C90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CB0 DEFB $00,$00,$F6,$68,$FF,$FF,$F4,$09
 $5CB8 DEFB $A8,$10,$4B,$F4,$09,$C4,$15,$53
 $5CC0 DEFB $81,$0F,$C4,$15,$52,$F4,$09,$C4
 $5CC8 DEFB $15,$50,$80,$00,$0A,$6D,$00,$E7
 $5CD0 DEFB $30,$0E,$00,$00,$00,$00,$00,$3A
 $5CD8 DEFB $DA,$30,$0E,$00,$00,$00,$00,$00
 $5CE0 DEFB $3A,$D9,$30,$0E,$00,$00,$00,$00
 $5CE8 DEFB $00,$3A,$FD,$32,$36,$38,$37,$30
 $5CF0 DEFB $0E,$00,$00,$F6,$68,$00,$3A,$EF
 $5CF8 DEFB $22,$22,$AA,$3A,$F5,$AC,$31,$39
 $5D00 DEFB $0E,$00,$00,$13,$00,$00,$2C,$30
 $5D08 DEFB $0E,$00,$00,$00,$00,$00,$3B,$3A
 $5D10 DEFB $EF,$22,$22,$AF,$32,$36,$38,$38
 $5D18 DEFB $30,$0E,$00,$00,$00,$69,$00,$3A
 $5D20 DEFB $F9,$C0,$32,$36,$38,$38,$30,$0E
 $5D28 DEFB $00,$00,$00,$69,$00,$3A,$F9,$C0
 $5D30 DEFB $35,$32,$35,$30,$30,$0E,$00,$00
 $5D38 DEFB $14,$CD,$00,$0D,$FF,$FF,$C4,$00
 $5D40 DEFB $80,$EF,$22,$22,$0D,$80,$00,$00
 $5D48 DEFB $14,$CD,$00,$20,$20,$20,$20,$20
 $5D50 DEFB $20,$00,$00,$00,$69,$00,$00,$03
 $5D58 DEFB $62,$63,$20,$20,$20,$20,$20,$20
 $5D60 DEFB $20,$20,$FF,$96,$18,$65,$00,$69
 $5D68 DEFB $00,$00,$00,$69,$00,$00,$00,$00
 $5D70 DEFB $00,$00,$20,$20,$20,$FC,$00,$01
 $5D78 DEFB $00,$E9,$00,$0D,$00,$00,$00,$00
 $5D80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DC8 DEFB $00,$00,$00,$00,$00,$00,$00,$40
 $5DD0 DEFB $5D,$00,$00,$FF,$8C,$FF,$00,$00
 $5DD8 DEFB $00,$00,$01,$00,$00,$00,$00

; Messaging: Booty
@label=Messaging_Booty
t$5DDF DEFM "BOOTY     " ; "#STR(#PC,$04,$0A)".

; Data block at 5DE9
b$5DE9 DEFB $FC,$00,$01,$00,$E9,$00,$0D,$00
 $5DF1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DF9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E01 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E09 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E11 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E19 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E21 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E29 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E31 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E39 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E41 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E49 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E51 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E59 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E61 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E69 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E71 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E79 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E81 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E89 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E91 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E99 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F01 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F09 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F11 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F19 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F21 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F29 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F31 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F39 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F41 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F49 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F51 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F59 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F61 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F69 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F71 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F79 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F81 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F89 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F91 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F99 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FA1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FA9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FB1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FB9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FE1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FE9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FF1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FF9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6001 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6009 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6011 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6019 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6021 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6029 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6031 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6039 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6041 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6049 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6051 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6059 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6061 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6069 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6071 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6079 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6081 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6089 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6091 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6099 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6101 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6109 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6111 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6119 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6121 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6129 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6131 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6139 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6141 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6149 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6151 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6159 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6161 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6169 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6171 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6179 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6181 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6189 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6191 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6199 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6201 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6209 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6211 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6219 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6221 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6229 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6231 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6239 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6241 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6249 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6251 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6259 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6261 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6269 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6271 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6279 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6281 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6289 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6291 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6299 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6301 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6309 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6311 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6319 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6321 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6329 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6331 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6339 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6341 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6349 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6351 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6359 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6361 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6369 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6371 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6379 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6381 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6389 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6391 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6399 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6401 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6409 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6411 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6419 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6421 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6429 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6431 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6439 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6441 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6449 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6451 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6459 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6461 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6469 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6471 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6479 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6481 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6489 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6491 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6499 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6501 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6509 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6511 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6519 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6521 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6529 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6531 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6539 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6541 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6549 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6551 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6559 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6561 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6569 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6571 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6579 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6581 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6589 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6591 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6599 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6601 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6609 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6611 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6619 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6621 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6629 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6631 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6639 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6641 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6649 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6651 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6659 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6661 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6669 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6671 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6679 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6681 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6689 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6691 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6699 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6701 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6709 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6711 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6719 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6721 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6729 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6731 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6739 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6741 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6749 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6751 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6759 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6761 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6769 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6771 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6779 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6781 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6789 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6791 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6799 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6801 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6809 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6811 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6819 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6821 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6829 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6831 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6839 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6841 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6849 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6851 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6859 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6861 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6869 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6871 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6879 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6881 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6889 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6891 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6899 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68C9 DEFB $00,$00,$00,$00,$00,$00,$DB,$02
 $68D1 DEFB $DB,$02,$4D,$00,$46,$5D,$C2,$00
 $68D9 DEFB $42,$F4,$80,$C2,$28,$CD,$2B,$2D
 $68E1 DEFB $65,$33,$00,$00,$ED,$10,$0D,$00
 $68E9 DEFB $09,$00,$85,$1C,$10,$1C,$52,$1B
 $68F1 DEFB $76,$1B,$0C,$4C,$00,$3E,$00,$00
 $68F9 DEFB $00,$00,$00,$00,$00,$00,$00,$DD
 $6901 DEFB $21,$00,$00,$DD,$39,$DD,$7E,$14
 $6909 DEFB $F3,$DD,$CB,$15,$26,$CB,$27,$DD
 $6911 DEFB $77,$14,$DD,$AE,$15,$C5,$DD,$21
 $6919 DEFB $01,$00,$A7,$37,$08,$0E,$22,$1E
 $6921 DEFB $06,$06,$9C,$CD,$E3,$05,$30,$F7
 $6929 DEFB $3E,$C6,$B8,$30,$F2,$1D,$20,$F1
 $6931 DEFB $1C,$3E,$FF,$37,$08,$11,$47,$00
 $6939 DEFB $DD,$21,$01,$5B,$CD,$8F,$05

@org

; On-Load Entry Point #1
@label=FinishedLoadingEntryPoint
c$6940 DI            ; Disable interrupts.
 $6941 LD DE,($5B3F) ; #REGde=*#R$5B3F.
 $6945 JR $6957      ; Jump to #R$6957.

; Unused
u$6947 DEFB $2A,$53,$5C,$EB,$ED,$4B,$41,$5B
 $694F DEFB $ED,$43,$42,$5C,$FD,$36,$0A,$00

; On-Load Entry Point #2
;
; Used by the routine at #R$6940.
@label=LoadingEntryPointContinued
c$6957 LD HL,$5B01   ; #REGhl=#N$5B01.
 $695A LD BC,$003E   ; #REGbc=#N($003E,$04,$04).
 $695D LDIR          ; Copy #REGhl to #REGde #N($003E,$04,$04) times.
 $695F EXX           ; Switch to the shadow registers.
 $6960 LD HL,$2758   ; #REGhl'=#N$2758.
 $6963 EXX           ; Switch back to the normal registers.
 $6964 EI            ; Enable interrupts.
 $6965 POP DE        ; Restore #REGde from the stack.
 $6966 RET           ; Return.

; Unused
u$6967 DEFB $4B,$5C,$C3,$E5,$19,$00,$0D,$3E
 $696F DEFB $0E,$01,$64,$00,$0D,$3E,$0E,$01
 $6977 DEFB $64

; Introduction Screen
;
; #PUSHS #SIM(start=$CD9D,stop=$CDA8)
; #UDGTABLE { =h Booty Introduction Screen. }
; { #SCR$02(introduction-screen) }
; UDGTABLE#
; #POPS
@label=IntroductionScreen
b$6978 DEFB $00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $6998 DEFB $00,$00,$0C,$00,$06,$8C,$2C,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $69B8 DEFB $00,$00,$FF,$C0,$80,$FF,$C0,$20,$0C,$80,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $69D8 DEFB $00,$00,$FF,$C0,$12,$0C,$10,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$06,$0C,$01,$FF,$C0,$00 ;
 $69F8 DEFB $00,$00,$6D,$22,$00,$4C,$80,$20,$4C,$81,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00,$00,$03,$F0,$04,$3F,$F3,$F0,$3F,$00 ;
 $6A18 DEFB $00,$FF,$FF,$E0,$22,$0C,$30,$01,$FF,$E0,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$3F,$01,$F9,$E0,$E0,$03,$80 ;
 $6A38 DEFB $00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FC,$3C,$3E,$28,$00,$07,$00,$00,$00 ;
 $6A58 DEFB $00,$05,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$05,$05,$00,$00,$05,$05,$05,$00,$00,$05,$00,$CF,$03,$1F,$E0,$03,$80,$01,$60,$00,$05 ;
 $6A78 DEFB $00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6A98 DEFB $00,$00,$0C,$00,$19,$FF,$F3,$00,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6AB8 DEFB $00,$00,$0C,$01,$00,$7F,$80,$10,$0C,$80,$00,$00,$00,$00,$00,$00,$03,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6AD8 DEFB $00,$00,$7F,$80,$64,$1E,$0C,$07,$5C,$10,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$06,$0E,$03,$FF,$F0,$00 ;
 $6AF8 DEFB $00,$00,$FF,$94,$00,$7F,$80,$40,$4C,$80,$80,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00,$00,$0F,$C0,$00,$FF,$FF,$80,$03,$E0 ;
 $6B18 DEFB $00,$FF,$FF,$F0,$12,$0C,$50,$02,$0C,$10,$00,$03,$83,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$81,$E1,$E0,$30,$00,$C0 ;
 $6B38 DEFB $00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$3D,$F8,$08,$00,$07,$80,$00,$00 ;
 $6B58 DEFB $05,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$05,$05,$00,$00,$00,$05,$05,$00,$00,$9C,$07,$18,$F0,$00,$E0,$01,$60,$00,$00 ;
 $6B78 DEFB $00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6B98 DEFB $00,$00,$0F,$00,$62,$0C,$08,$E0,$CE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6BB8 DEFB $00,$00,$0C,$02,$00,$7F,$80,$08,$0C,$40,$00,$00,$00,$00,$00,$00,$0F,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6BD8 DEFB $00,$FF,$FF,$FF,$C8,$1E,$03,$18,$9E,$08,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$06,$0E,$07,$C0,$18,$00 ;
 $6BF8 DEFB $00,$01,$4C,$88,$00,$8C,$40,$80,$7F,$80,$40,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00,$00,$1E,$00,$1F,$FF,$FC,$00,$00,$70 ;
 $6C18 DEFB $00,$FF,$FF,$F8,$0B,$FF,$F0,$02,$0C,$10,$00,$00,$7F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$83,$F0,$C7,$83,$78,$18,$00,$40 ;
 $6C38 DEFB $00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38,$07,$FF,$C0,$08,$00,$07,$80,$00,$00 ;
 $6C58 DEFB $00,$05,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$98,$0E,$30,$38,$00,$10,$01,$60,$00,$00 ;
 $6C78 DEFB $00,$00,$00,$00,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6C98 DEFB $00,$00,$0C,$C1,$84,$0C,$04,$1F,$0E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6CB8 DEFB $00,$00,$0C,$04,$00,$FF,$80,$04,$FF,$C0,$00,$00,$00,$00,$00,$00,$1F,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$F0,$00,$00,$00,$00 ;
 $6CD8 DEFB $00,$00,$7F,$C6,$10,$1E,$00,$E1,$1E,$08,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$06,$0E,$0F,$00,$08,$00 ;
 $6CF8 DEFB $00,$02,$4C,$94,$00,$8C,$41,$00,$8C,$40,$20,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00,$00,$1C,$00,$FF,$FF,$FF,$F8,$00,$10 ;
 $6D18 DEFB $00,$FF,$FF,$FC,$04,$0D,$08,$02,$FF,$F0,$00,$00,$1F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$90,$6C,$03,$3C,$08,$00,$40 ;
 $6D38 DEFB $00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$1F,$FF,$80,$00,$00,$07,$80,$00,$00 ;
 $6D58 DEFB $00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$30,$1C,$70,$1C,$00,$00,$01,$70,$00,$00 ;
 $6D78 DEFB $00,$00,$00,$00,$00,$2E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6D98 DEFB $00,$00,$0C,$3E,$08,$0C,$02,$00,$0D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6DB8 DEFB $00,$00,$0C,$08,$01,$3F,$00,$02,$7F,$C0,$00,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$03,$F8,$00,$00,$00,$00 ;
 $6DD8 DEFB $00,$00,$3F,$38,$20,$2D,$00,$02,$1E,$04,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$03,$FE,$0E,$1E,$00,$04,$00 ;
 $6DF8 DEFB $00,$04,$7F,$A2,$00,$FF,$C2,$00,$8C,$40,$18,$00,$00,$00,$00,$00,$1F,$FF,$F8,$00,$00,$00,$00,$00,$78,$03,$F8,$03,$FF,$FF,$80,$10 ;
 $6E18 DEFB $00,$FF,$FF,$FE,$06,$0E,$3F,$FF,$0C,$08,$00,$01,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$10,$28,$02,$1C,$08,$00,$00 ;
 $6E38 DEFB $00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$7F,$FF,$FF,$00,$00,$03,$C0,$00,$00 ;
 $6E58 DEFB $05,$05,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$05,$05,$05,$00,$05,$05,$05,$00,$05,$05,$00,$60,$38,$60,$1C,$00,$00,$01,$70,$05,$05 ;
 $6E78 DEFB $00,$00,$00,$00,$00,$5D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6E98 DEFB $00,$00,$0C,$00,$10,$0C,$01,$01,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6EB8 DEFB $00,$00,$0C,$10,$FF,$FF,$FF,$E1,$7F,$A0,$00,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$03,$B8,$00,$00,$00,$00 ;
 $6ED8 DEFB $00,$00,$3F,$00,$40,$2D,$00,$04,$2D,$04,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$3F,$FF,$0E,$3C,$00,$04,$00 ;
 $6EF8 DEFB $00,$08,$8C,$41,$01,$0C,$24,$00,$FF,$C0,$06,$00,$00,$00,$00,$00,$0F,$FF,$F0,$00,$00,$00,$00,$00,$70,$07,$80,$0F,$FF,$0F,$F0,$00 ;
 $6F18 DEFB $00,$FF,$FF,$FF,$07,$FF,$FF,$FF,$0C,$08,$00,$1F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1E,$10,$3F,$04,$1E,$00,$00,$00 ;
 $6F38 DEFB $00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$F8,$7F,$FF,$E0,$00,$03,$C0,$00,$00 ;
 $6F58 DEFB $00,$00,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00,$C0,$30,$60,$0E,$00,$00,$01,$70,$00,$00 ;
 $6F78 DEFB $00,$00,$00,$00,$00,$AC,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6F98 DEFB $00,$00,$0C,$00,$20,$0C,$00,$80,$0D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6FB8 DEFB $00,$00,$0C,$20,$04,$8C,$40,$00,$FF,$A0,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$03,$1C,$00,$00,$00,$00 ;
 $6FD8 DEFB $00,$00,$1E,$80,$80,$3F,$00,$08,$2D,$02,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$FF,$FF,$FE,$F8,$07,$80,$00 ;
 $6FF8 DEFB $00,$10,$8C,$C0,$81,$0C,$28,$01,$0C,$20,$01,$80,$00,$00,$00,$00,$03,$FF,$C0,$00,$00,$00,$00,$00,$E0,$0C,$00,$7F,$F8,$01,$F8,$00 ;
 $7018 DEFB $00,$FF,$FF,$FF,$88,$8C,$3F,$FF,$FF,$F8,$01,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$01,$F8,$E4,$0E,$00,$00,$00 ;
 $7038 DEFB $00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$E0,$FF,$C1,$F8,$00,$03,$C0,$00,$00 ;
 $7058 DEFB $05,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$00,$00,$00,$05,$00,$00,$00,$00,$05,$05,$00,$01,$80,$60,$E0,$0E,$00,$00,$01,$30,$00,$00 ;
 $7078 DEFB $00,$00,$00,$00,$01,$4C,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7098 DEFB $00,$00,$0C,$00,$40,$0C,$00,$40,$0C,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $70B8 DEFB $00,$00,$0C,$40,$09,$0C,$20,$00,$7F,$20,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$07,$1C,$00,$7E,$00,$00 ;
 $70D8 DEFB $00,$00,$2D,$41,$00,$4C,$80,$10,$3F,$02,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$01,$FE,$07,$FF,$F0,$3F,$F8,$00 ;
 $70F8 DEFB $00,$21,$FF,$C0,$41,$FF,$F0,$01,$0C,$20,$00,$60,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$C0,$10,$00,$FF,$FF,$80,$3E,$00 ;
 $7118 DEFB $00,$FF,$FF,$FF,$C8,$5C,$3F,$FF,$0C,$04,$1F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F0,$1C,$0F,$28,$14,$0F,$00,$00,$00 ;
 $7138 DEFB $00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$43,$81,$CF,$80,$1F,$00,$03,$E0,$00,$00 ;
 $7158 DEFB $00,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$05,$00,$00,$05,$05,$05,$05,$00,$00,$01,$00,$60,$C0,$0F,$00,$00,$01,$38,$05,$05 ;
 $7178 DEFB $00,$05,$05,$00,$00,$05,$00,$05,$00,$00,$05,$05,$00,$00,$05,$00,$00,$00,$00,$00,$05,$05,$00,$60,$C0,$07,$00,$00,$05,$B8,$05,$05 ;
 $7198 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$05,$00,$01,$00,$05,$E0,$05,$05,$9C,$00,$00 ;
 $71B8 DEFB $00,$00,$05,$05,$00,$00,$05,$00,$00,$00,$05,$05,$05,$00,$05,$05,$05,$05,$05,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $71D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$00,$05,$00,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $71F8 DEFB $05,$05,$00,$00,$05,$00,$00,$05,$00,$05,$05,$00,$05,$05,$00,$05,$05,$05,$05,$00,$05,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7218 DEFB $00,$05,$00,$00,$00,$05,$00,$00,$00,$05,$05,$00,$00,$00,$00,$00,$00,$05,$05,$00,$05,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7238 DEFB $00,$00,$00,$00,$05,$00,$05,$05,$00,$00,$05,$00,$05,$00,$05,$05,$05,$05,$05,$05,$05,$0F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7258 DEFB $00,$05,$00,$00,$05,$00,$05,$00,$05,$05,$00,$05,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$3F,$00,$00,$3C,$00,$00,$00,$00,$00,$00 ;
 $7278 DEFB $00,$00,$00,$00,$05,$00,$05,$00,$00,$05,$00,$00,$00,$05,$00,$00,$05,$05,$05,$00,$00,$00,$00,$C1,$C0,$07,$00,$05,$00,$B8,$00,$00 ;
 $7298 DEFB $05,$00,$00,$00,$00,$00,$05,$00,$05,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$00,$05,$00,$00,$01,$05,$00,$E0,$00,$00,$9C,$05,$05 ;
 $72B8 DEFB $05,$00,$00,$00,$00,$05,$00,$00,$05,$00,$00,$00,$00,$05,$00,$05,$05,$05,$05,$05,$00,$00,$00,$00,$00,$7F,$00,$00,$00,$00,$00,$00 ;
 $72D8 DEFB $05,$00,$00,$05,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$00,$05,$05,$05,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $72F8 DEFB $00,$00,$00,$05,$00,$00,$05,$00,$00,$00,$00,$05,$00,$00,$00,$05,$05,$05,$05,$00,$00,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7318 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$05,$05,$05,$00,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7338 DEFB $00,$05,$05,$05,$00,$00,$00,$00,$00,$05,$00,$00,$00,$05,$00,$05,$05,$00,$05,$05,$00,$0F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7358 DEFB $00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$00,$00,$05,$05,$05,$05,$05,$00,$05,$00,$05,$1F,$00,$01,$FF,$C0,$00,$00,$00,$00,$00 ;
 $7378 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$05,$00,$05,$05,$00,$00,$00,$00,$00,$C1,$80,$07,$80,$00,$05,$B8,$05,$05 ;
 $7398 DEFB $00,$05,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00,$01,$00,$05,$E0,$00,$00,$9C,$05,$05 ;
 $73B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$05,$00,$00,$00,$07,$FF,$00,$00,$00,$00,$00,$00 ;
 $73D8 DEFB $00,$05,$00,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$05,$00,$00,$03,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $73F8 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$05,$00,$00,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7418 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7438 DEFB $00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$00,$00,$00,$05,$05,$05,$05,$05,$00,$00,$07,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7458 DEFB $05,$00,$05,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$00,$00,$00,$1F,$00,$1F,$FF,$FC,$00,$00,$00,$00,$00 ;
 $7478 DEFB $00,$00,$05,$05,$00,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$05,$05,$00,$00,$00,$05,$00,$81,$80,$07,$80,$00,$00,$B8,$05,$05 ;
 $7498 DEFB $00,$00,$00,$00,$05,$05,$00,$00,$00,$00,$00,$00,$05,$05,$00,$05,$05,$05,$05,$05,$00,$00,$05,$01,$00,$00,$E0,$05,$05,$9C,$00,$00 ;
 $74B8 DEFB $00,$00,$00,$05,$05,$00,$00,$05,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00 ;
 $74D8 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$05,$05,$00,$05,$00,$05,$05,$00,$00,$07,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $74F8 DEFB $00,$05,$05,$00,$00,$05,$00,$00,$00,$00,$05,$00,$00,$00,$05,$05,$05,$05,$05,$00,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7518 DEFB $00,$00,$05,$05,$00,$00,$05,$00,$00,$00,$00,$00,$00,$05,$00,$00,$05,$00,$00,$05,$00,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7538 DEFB $05,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$05,$00,$00,$05,$05,$05,$05,$05,$05,$05,$03,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7558 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$00,$05,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$05,$00,$0F,$00,$11,$FF,$FF,$C0,$00,$00,$00,$00 ;
 $7578 DEFB $05,$05,$00,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$05,$05,$05,$05,$05,$00,$05,$05,$00,$00,$81,$80,$07,$C0,$05,$05,$9C,$05,$05 ;
 $7598 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$05,$00,$01,$05,$05,$F0,$00,$00,$9C,$05,$05 ;
 $75B8 DEFB $05,$05,$05,$00,$00,$00,$05,$00,$05,$05,$05,$00,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$00,$3F,$FF,$FF,$00,$00,$00,$00,$00,$00 ;
 $75D8 DEFB $05,$05,$05,$05,$05,$05,$05,$00,$00,$05,$05,$05,$00,$00,$05,$05,$05,$05,$05,$00,$05,$07,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $75F8 DEFB $05,$00,$00,$00,$05,$00,$05,$05,$05,$05,$00,$05,$05,$05,$00,$05,$05,$05,$05,$05,$05,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7618 DEFB $00,$05,$00,$00,$00,$05,$00,$05,$05,$05,$05,$05,$05,$00,$00,$05,$05,$05,$05,$05,$05,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7638 DEFB $00,$05,$00,$05,$05,$05,$05,$00,$00,$05,$05,$00,$05,$00,$05,$05,$05,$05,$00,$05,$00,$01,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7658 DEFB $00,$00,$00,$05,$05,$05,$05,$00,$05,$00,$00,$05,$05,$05,$05,$05,$05,$05,$05,$05,$00,$05,$07,$00,$08,$3F,$FF,$FC,$00,$00,$00,$00 ;
 $7678 DEFB $00,$00,$05,$00,$05,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$05,$05,$00,$00,$05,$01,$81,$80,$03,$C0,$00,$00,$9C,$00,$00 ;
 $7698 DEFB $00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$00,$00,$05,$00,$05,$05,$05,$05,$00,$00,$05,$00,$05,$00,$00,$00,$F0,$05,$05,$9C,$00,$00 ;
 $76B8 DEFB $00,$00,$00,$05,$00,$05,$00,$05,$00,$00,$00,$05,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$01,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00 ;
 $76D8 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$00,$00,$05,$00,$05,$05,$05,$00,$0F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $76F8 DEFB $00,$05,$00,$05,$00,$05,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7718 DEFB $05,$00,$05,$00,$05,$00,$05,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$05,$05,$05,$00,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7738 DEFB $05,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$05,$05,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7758 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$05,$00,$07,$00,$08,$07,$FF,$FF,$C0,$00,$00,$00 ;
 $7778 DEFB $00,$00,$00,$00,$00,$00,$05,$00,$00,$05,$00,$00,$00,$05,$00,$00,$05,$05,$05,$00,$00,$00,$01,$01,$00,$03,$C0,$05,$00,$9C,$00,$00 ;
 $7798 DEFB $05,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00,$00,$05,$00,$F0,$00,$00,$9C,$05,$05 ;
 $77B8 DEFB $05,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$00,$05,$05,$05,$05,$05,$00,$00,$07,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00 ;
 $77D8 DEFB $05,$00,$00,$05,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$00,$05,$05,$00,$00,$0F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $77F8 DEFB $00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$00,$00,$00,$05,$05,$05,$05,$00,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7818 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$00,$00,$05,$05,$05,$05,$05,$00,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7838 DEFB $00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7858 DEFB $00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$05,$05,$05,$00,$05,$03,$00,$04,$00,$FF,$FF,$FC,$00,$00,$00 ;
 $7878 DEFB $05,$05,$00,$05,$00,$00,$00,$00,$05,$00,$05,$00,$05,$00,$00,$05,$00,$00,$05,$05,$05,$00,$01,$01,$00,$01,$E0,$00,$00,$9C,$05,$05 ;
 $7898 DEFB $00,$00,$05,$05,$05,$00,$00,$00,$00,$00,$05,$05,$00,$05,$00,$05,$05,$05,$05,$05,$00,$00,$00,$00,$00,$00,$F0,$05,$05,$9C,$05,$05 ;
 $78B8 DEFB $00,$05,$05,$00,$05,$00,$00,$00,$00,$05,$00,$00,$05,$00,$00,$05,$05,$05,$05,$00,$00,$05,$07,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00 ;
 $78D8 DEFB $00,$00,$05,$00,$00,$05,$05,$00,$05,$00,$05,$05,$00,$05,$00,$05,$05,$00,$05,$00,$00,$1F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $78F8 DEFB $05,$00,$05,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$05,$05,$05,$05,$05,$05,$05,$05,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7918 DEFB $00,$00,$00,$05,$00,$00,$00,$00,$05,$00,$05,$05,$00,$05,$00,$00,$05,$05,$05,$05,$00,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7938 DEFB $00,$00,$05,$00,$00,$05,$05,$00,$05,$00,$00,$05,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7958 DEFB $00,$05,$00,$05,$00,$00,$05,$05,$05,$00,$00,$05,$05,$00,$05,$05,$05,$05,$05,$05,$00,$00,$01,$00,$04,$00,$9F,$FF,$FF,$00,$00,$00 ;
 $7978 DEFB $00,$00,$00,$00,$00,$05,$00,$05,$00,$05,$05,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$05,$00,$FF,$02,$00,$83,$FF,$FF,$C0,$00,$00 ;
 $7998 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$24,$00,$00,$10,$01,$00,$00 ;
 $79B8 DEFB $00,$03,$FD,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E0,$01,$F4,$00,$C0,$01,$00,$80,$00 ;
 $79D8 DEFB $00,$0F,$80,$70,$00,$00,$00,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$8B,$0F,$B7,$BF,$ED,$00,$38,$00,$00 ;
 $79F8 DEFB $00,$F8,$38,$01,$F8,$01,$F8,$07,$C0,$07,$F1,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$85,$24,$B0,$FD,$F0,$0C,$88,$00,$00 ;
 $7A18 DEFB $0F,$80,$3E,$F0,$0E,$F0,$0E,$7C,$02,$3C,$0F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$61,$92,$44,$49,$24,$C8,$00,$00 ;
 $7A38 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$24,$C0,$18,$00,$00,$00 ;
 $7A58 DEFB $00,$01,$F8,$00,$00,$00,$00,$00,$1F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7A78 DEFB $05,$00,$00,$00,$05,$00,$05,$00,$00,$00,$00,$00,$05,$00,$05,$05,$05,$05,$05,$05,$00,$00,$00,$7F,$02,$00,$80,$7F,$FC,$30,$00,$00 ;
 $7A98 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$28,$00,$00,$08,$01,$00,$00 ;
 $7AB8 DEFB $00,$00,$FE,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$B0,$0F,$FF,$80,$30,$00,$81,$00,$00 ;
 $7AD8 DEFB $00,$0F,$80,$F0,$00,$00,$00,$00,$7C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$89,$83,$FF,$FF,$7F,$C0,$C8,$00,$00 ;
 $7AF8 DEFB $00,$F8,$1C,$07,$9E,$07,$9E,$07,$C0,$03,$C0,$F8,$00,$00,$00,$00,$00,$20,$00,$00,$00,$00,$00,$83,$24,$98,$3F,$C0,$34,$88,$00,$00 ;
 $7B18 DEFB $0F,$80,$3E,$F0,$1E,$F0,$1E,$7C,$04,$3C,$0F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$52,$44,$49,$27,$08,$00,$00 ;
 $7B38 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$02,$00,$40,$00,$00,$7E,$00,$00,$3C,$00,$10,$00,$00,$06,$1F,$00,$60,$00,$00,$00 ;
 $7B58 DEFB $00,$03,$FF,$F8,$00,$00,$00,$3F,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7B78 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$00,$7F,$01,$01,$00,$0F,$F0,$08,$00,$00 ;
 $7B98 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$00,$00,$08,$01,$00,$00 ;
 $7BB8 DEFB $00,$01,$F8,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$98,$7D,$ED,$E0,$0E,$00,$81,$00,$00 ;
 $7BD8 DEFB $00,$1F,$00,$F0,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$89,$61,$FB,$EE,$B6,$F3,$08,$00,$00 ;
 $7BF8 DEFB $01,$F0,$0C,$0F,$0E,$0F,$0E,$0F,$80,$07,$81,$F0,$00,$00,$00,$00,$00,$20,$44,$00,$00,$00,$00,$61,$A4,$96,$1F,$00,$E4,$88,$00,$00 ;
 $7C18 DEFB $1F,$00,$7C,$F0,$3C,$F0,$3C,$F8,$0C,$78,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$32,$44,$49,$2C,$08,$00,$00 ;
 $7C38 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$00,$02,$38,$40,$78,$00,$40,$00,$00,$42,$38,$00,$78,$00,$01,$04,$01,$80,$00,$00,$00 ;
 $7C58 DEFB $00,$07,$0F,$FF,$FC,$00,$7F,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7C78 DEFB $00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$05,$05,$05,$05,$05,$05,$05,$00,$3F,$01,$01,$00,$01,$C0,$08,$00,$00 ;
 $7C98 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$EC,$00,$00,$04,$00,$80,$00 ;
 $7CB8 DEFB $00,$01,$F0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$86,$F7,$FF,$FC,$01,$80,$41,$00,$00 ;
 $7CD8 DEFB $00,$1F,$01,$E0,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$89,$30,$7F,$BB,$DD,$7C,$08,$00,$00 ;
 $7CF8 DEFB $01,$F0,$0E,$1E,$07,$1E,$07,$0F,$80,$07,$81,$F0,$00,$00,$00,$00,$00,$3C,$44,$00,$00,$00,$00,$10,$64,$93,$06,$03,$24,$88,$00,$00 ;
 $7D18 DEFB $1F,$00,$FC,$E0,$3C,$E0,$3C,$F8,$18,$78,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$1A,$44,$49,$30,$08,$00,$00 ;
 $7D38 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$00,$02,$44,$78,$44,$00,$7C,$00,$00,$40,$04,$30,$44,$00,$00,$84,$06,$00,$00,$00,$00 ;
 $7D58 DEFB $00,$06,$00,$0F,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7D78 DEFB $05,$05,$00,$00,$00,$05,$05,$05,$05,$05,$00,$00,$00,$05,$00,$00,$05,$05,$05,$05,$00,$00,$00,$3F,$00,$81,$00,$00,$40,$04,$00,$00 ;
 $7D98 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$23,$80,$00,$04,$00,$80,$00 ;
 $7DB8 DEFB $00,$03,$E0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C3,$FF,$F7,$DF,$00,$60,$42,$00,$00 ;
 $7DD8 DEFB $00,$3E,$03,$C3,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$89,$2C,$3E,$F5,$7B,$F0,$08,$00,$00 ;
 $7DF8 DEFB $03,$E0,$0F,$3C,$07,$3C,$07,$1F,$00,$0F,$03,$E0,$00,$00,$00,$00,$00,$22,$44,$00,$00,$00,$00,$08,$24,$92,$C4,$0D,$24,$88,$00,$00 ;
 $7E18 DEFB $3E,$01,$F8,$E0,$78,$E0,$78,$F0,$38,$F0,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$06,$44,$49,$C0,$18,$00,$00 ;
 $7E38 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$E0,$00,$42,$44,$44,$44,$00,$40,$00,$00,$40,$3C,$10,$44,$00,$00,$64,$18,$00,$00,$00,$00 ;
 $7E58 DEFB $00,$07,$00,$00,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7E78 DEFB $00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$00,$05,$00,$05,$05,$05,$05,$05,$05,$00,$05,$00,$FF,$00,$82,$00,$00,$20,$04,$00,$00 ;
 $7E98 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$70,$20,$60,$00,$02,$00,$80,$00 ;
 $7EB8 DEFB $00,$03,$E0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$DF,$7E,$FF,$E0,$1C,$22,$00,$00 ;
 $7ED8 DEFB $00,$3E,$1F,$C7,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$26,$0F,$AF,$AF,$C0,$38,$00,$00 ;
 $7EF8 DEFB $03,$E0,$1F,$3C,$07,$3C,$07,$1F,$00,$0F,$03,$E0,$00,$00,$00,$00,$00,$22,$3C,$00,$00,$00,$00,$06,$1C,$92,$64,$39,$24,$88,$00,$00 ;
 $7F18 DEFB $3F,$87,$F0,$70,$F0,$70,$F0,$78,$70,$F0,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$82,$44,$4B,$00,$60,$00,$00 ;
 $7F38 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$E0,$00,$42,$44,$44,$44,$00,$40,$18,$00,$42,$44,$10,$44,$18,$00,$14,$60,$00,$00,$00,$00 ;
 $7F58 DEFB $00,$03,$80,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7F78 DEFB $00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$03,$FF,$00,$42,$00,$00,$20,$02,$00,$00 ;
 $7F98 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$80,$20,$18,$00,$02,$00,$80,$00 ;
 $7FB8 DEFB $00,$07,$C0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$98,$7B,$DF,$F7,$F8,$03,$24,$00,$00 ;
 $7FD8 DEFB $00,$7F,$FF,$80,$00,$00,$00,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A9,$25,$87,$FA,$FF,$00,$C8,$00,$00 ;
 $7FF8 DEFB $07,$C0,$1F,$78,$0F,$78,$0F,$3E,$00,$1E,$07,$C0,$00,$00,$00,$00,$00,$3C,$04,$00,$00,$00,$00,$01,$04,$92,$5C,$C9,$24,$88,$00,$00 ;
 $8018 DEFB $7D,$FF,$E0,$79,$E0,$79,$E0,$79,$E0,$78,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$61,$C4,$4C,$01,$80,$00,$00 ;
 $8038 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$C0,$00,$3C,$38,$44,$44,$00,$40,$18,$00,$3C,$3C,$38,$44,$18,$00,$0D,$80,$00,$00,$00,$00 ;
 $8058 DEFB $00,$01,$FF,$FF,$80,$00,$00,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $8078 DEFB $00,$05,$05,$05,$00,$00,$00,$00,$05,$05,$00,$05,$00,$00,$05,$05,$05,$05,$05,$05,$05,$00,$0F,$FF,$00,$44,$00,$00,$10,$02,$00,$00 ;
 $8098 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$20,$07,$00,$01,$00,$80,$00 ;
 $80B8 DEFB $00,$07,$C0,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$8C,$1F,$FD,$FF,$7E,$00,$DC,$00,$00 ;
 $80D8 DEFB $00,$7C,$7F,$00,$00,$00,$00,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$99,$24,$C1,$EF,$7C,$03,$88,$00,$00 ;
 $80F8 DEFB $07,$C0,$1F,$70,$0F,$70,$0F,$3E,$01,$1E,$07,$C0,$00,$00,$00,$00,$00,$00,$38,$00,$00,$00,$00,$00,$82,$92,$47,$49,$24,$B8,$00,$00 ;
 $8118 DEFB $FC,$7F,$80,$1F,$80,$1F,$80,$3F,$C0,$1F,$7C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$44,$70,$06,$00,$00,$00 ;
 $8138 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$00,$00,$00,$00 ;
 $8158 DEFB $00,$00,$FF,$80,$00,$00,$00,$00,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $8178 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ; {Attributes.
 $8198 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ;
 $81B8 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$37,$37,$37,$37,$37,$37,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ;
 $81D8 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$37,$30,$37,$37,$37,$37,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ;
 $81F8 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$37,$30,$37,$37,$37,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ;
 $8218 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$37,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ;
 $8238 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$37,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ;
 $8258 DEFB $0F,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$08,$08,$08,$08,$08,$08,$08,$08,$0F,$0F ;
 $8278 DEFB $0F,$08,$08,$08,$08,$08,$08,$08,$08,$08,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$08,$08,$08,$08,$08,$0F,$0F,$08,$0F,$0F ;
 $8298 DEFB $0F,$08,$08,$08,$0F,$0F,$0F,$08,$08,$08,$08,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$0F,$0F,$08,$0F,$0F,$08,$0F,$0F ;
 $82B8 DEFB $0F,$0F,$08,$08,$08,$08,$08,$08,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$08,$08,$08,$07,$02,$02,$07,$07,$07 ;
 $82D8 DEFB $0F,$08,$0F,$08,$08,$0F,$08,$08,$08,$08,$08,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$08,$02,$02,$02,$07,$02,$02,$07,$02,$02 ;
 $82F8 DEFB $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$02,$02,$02,$02,$07,$02,$02,$07,$02,$02 ;
 $8318 DEFB $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$02,$02,$02,$02,$07,$07,$07,$07,$02,$02 ;
 $8338 DEFB $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$08,$02,$02,$02,$02,$02,$02,$07,$02,$02 ;
 $8358 DEFB $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$02,$06,$06,$06,$06,$06,$06,$06,$02 ;
 $8378 DEFB $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$08,$06,$06,$06,$06,$06,$06,$06,$02 ;
 $8398 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$06,$06,$06,$06,$04,$06,$06,$06,$06 ;
 $83B8 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$06,$06,$06,$06,$06,$06,$06,$06,$04 ;
 $83D8 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$06,$06,$06,$06,$06,$06,$06,$06,$04 ;
 $83F8 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$05,$05,$05,$05,$04,$04,$04,$06,$06,$06,$06,$06,$06,$06,$06,$04 ;
 $8418 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$05,$04,$04,$04,$04,$04,$04,$06,$06,$06,$06,$06,$06,$06,$06,$04 ;
 $8438 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$06,$06,$06,$06,$06,$06,$04 ;
 $8458 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ; }

; Graphics: Room Furniture #1
@label=Graphics_RoomScaffolding_Empty
b$8478 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC) } UDGTABLE#
@label=Graphics_RoomScaffolding_Top1
 $8480 DEFB $FF,$FF,$FF,$00,$00,$00,$00,$00 ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC) } UDGTABLE#
@label=Graphics_RoomScaffolding_Top2
 $8488 DEFB $FF,$FF,$FF,$3C,$3C,$3C,$00,$00 ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC) } UDGTABLE#
@label=Graphics_Door
 $8490 DEFB $00,$00,$00,$01,$01,$03,$03,$03 ; {#UDGTABLE(default,centre) {
 $8498 DEFB $0F,$3F,$FF,$F0,$C7,$D7,$B7,$B7 ; #N($20+((#PC-$8478)/$08)) } {
 $84A0 DEFB $80,$E0,$F8,$7C,$1C,$5E,$6E,$6E ; #UDGS$03,$04,$04(door)(#UDG(#PC+$08*($03*$y+$x),attr=$0C)(*door)door)
 $84A8 DEFB $07,$07,$07,$07,$07,$07,$07,$06 ; } UDGTABLE#
 $84B0 DEFB $77,$77,$77,$76,$77,$77,$77,$37 ;
 $84B8 DEFB $77,$76,$40,$12,$40,$76,$77,$77 ;
 $84C0 DEFB $04,$05,$04,$06,$07,$07,$07,$07 ;
 $84C8 DEFB $97,$D7,$97,$37,$77,$77,$77,$76 ;
 $84D0 DEFB $77,$77,$77,$77,$77,$76,$40,$12 ;
 $84D8 DEFB $07,$07,$07,$00,$07,$07,$07,$00 ;
 $84E0 DEFB $77,$77,$77,$00,$FF,$FF,$FF,$00 ;
 $84E8 DEFB $40,$76,$77,$00,$FF,$FF,$FF,$00 ; }
@label=Graphics_Ladder
 $84F0 DEFB $FF,$F8,$F8,$F8,$38,$3F,$3F,$38 ; {#UDGTABLE(default,centre) {
 $84F8 DEFB $FF,$1F,$1F,$1F,$1C,$FC,$FC,$1C ; #N($20+((#PC-$8478)/$08)) } {
 $8500 DEFB $38,$38,$38,$3F,$3F,$38,$38,$38 ; #UDGS$02,$05,$04(ladder)(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*ladder)ladder)
 $8508 DEFB $1C,$1C,$1C,$FC,$FC,$1C,$1C,$1C ; } UDGTABLE#
 $8510 DEFB $38,$3F,$3F,$38,$38,$38,$38,$3F ;
 $8518 DEFB $1C,$FC,$FC,$1C,$1C,$1C,$1C,$FC ;
 $8520 DEFB $3F,$38,$38,$38,$38,$3F,$3F,$38 ;
 $8528 DEFB $FC,$1C,$1C,$1C,$1C,$FC,$FC,$1C ;
 $8530 DEFB $38,$38,$38,$3F,$3F,$38,$38,$38 ;
 $8538 DEFB $1C,$1C,$1C,$FC,$FC,$1C,$1C,$1C ; }
@label=Graphics_DoorLabels
 $8540 DEFB $FF,$FF,$F7,$66,$76,$76,$76,$7E ; #LET(filename=#EVAL($01+(#PC-$8540)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(door-label-{filename}))
                                            ; } UDGTABLE#
 $8548 DEFB $FF,$FF,$C3,$7A,$42,$5E,$42,$7E ; #LET(filename=#EVAL($01+(#PC-$8540)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(door-label-{filename}))
                                            ; } UDGTABLE#
 $8550 DEFB $FF,$FF,$C3,$7A,$62,$7A,$42,$7E ; #LET(filename=#EVAL($01+(#PC-$8540)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(door-label-{filename}))
                                            ; } UDGTABLE#
 $8558 DEFB $FF,$FF,$DF,$5E,$56,$42,$76,$7E ; #LET(filename=#EVAL($01+(#PC-$8540)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(door-label-{filename}))
                                            ; } UDGTABLE#
 $8560 DEFB $FF,$FF,$C3,$5E,$42,$7A,$42,$7E ; #LET(filename=#EVAL($01+(#PC-$8540)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(door-label-{filename}))
                                            ; } UDGTABLE#
 $8568 DEFB $FF,$FF,$C3,$5E,$42,$5A,$42,$7E ; #LET(filename=#EVAL($01+(#PC-$8540)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(door-label-{filename}))
                                            ; } UDGTABLE#
 $8570 DEFB $FF,$FF,$C3,$7A,$7A,$76,$76,$7E ; #LET(filename=#EVAL($01+(#PC-$8540)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(door-label-{filename}))
                                            ; } UDGTABLE#
 $8578 DEFB $FF,$FF,$C3,$5A,$42,$5A,$42,$7E ; #LET(filename=#EVAL($01+(#PC-$8540)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(door-label-{filename}))
                                            ; } UDGTABLE#
 $8580 DEFB $FF,$FF,$C3,$5A,$42,$7A,$42,$7E ; #LET(filename=#EVAL($01+(#PC-$8540)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(door-label-{filename}))
                                            ; } UDGTABLE#
@label=Graphics_KeyLabels
 $8588 DEFB $7E,$76,$66,$76,$76,$76,$7E,$18 ; #LET(filename=#EVAL($01+(#PC-$8588)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0C)(#FORMAT(key-label-{filename}))
                                            ; } UDGTABLE#
 $8590 DEFB $7E,$42,$7A,$42,$5E,$42,$7E,$18 ; #LET(filename=#EVAL($01+(#PC-$8588)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0C)(#FORMAT(key-label-{filename}))
                                            ; } UDGTABLE#
 $8598 DEFB $7E,$42,$7A,$62,$7A,$42,$7E,$18 ; #LET(filename=#EVAL($01+(#PC-$8588)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0C)(#FORMAT(key-label-{filename}))
                                            ; } UDGTABLE#
 $85A0 DEFB $7E,$5E,$5E,$56,$42,$76,$7E,$18 ; #LET(filename=#EVAL($01+(#PC-$8588)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0C)(#FORMAT(key-label-{filename}))
                                            ; } UDGTABLE#
 $85A8 DEFB $7E,$42,$5E,$42,$7A,$42,$7E,$18 ; #LET(filename=#EVAL($01+(#PC-$8588)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0C)(#FORMAT(key-label-{filename}))
                                            ; } UDGTABLE#
 $85B0 DEFB $7E,$42,$5E,$42,$5A,$42,$7E,$18 ; #LET(filename=#EVAL($01+(#PC-$8588)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0C)(#FORMAT(key-label-{filename}))
                                            ; } UDGTABLE#
 $85B8 DEFB $7E,$42,$7A,$7A,$76,$76,$7E,$18 ; #LET(filename=#EVAL($01+(#PC-$8588)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0C)(#FORMAT(key-label-{filename}))
                                            ; } UDGTABLE#
 $85C0 DEFB $7E,$42,$5A,$42,$5A,$42,$7E,$18 ; #LET(filename=#EVAL($01+(#PC-$8588)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0C)(#FORMAT(key-label-{filename}))
                                            ; } UDGTABLE#
 $85C8 DEFB $7E,$42,$5A,$42,$7A,$42,$7E,$18 ; #LET(filename=#EVAL($01+(#PC-$8588)/$08))
                                            ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0C)(#FORMAT(key-label-{filename}))
                                            ; } UDGTABLE#
@label=Graphics_KeyBottom
 $85D0 DEFB $18,$18,$18,$18,$18,$1E,$1C,$1E ; #UDGTABLE(default,centre) {
                                            ; #N($20+((#PC-$8478)/$08)) } {
                                            ; #UDG(#PC,attr=$0C)(key-bottom) }
                                            ; UDGTABLE#
@label=Graphics_DoorClosed
 $85D8 DEFB $24,$24,$24,$24,$24,$24,$24,$24 ; {#UDGTABLE(default,centre) {
 $85E0 DEFB $24,$24,$24,$24,$24,$A5,$E7,$A5 ; #N($20+((#PC-$8478)/$08)) } {
 $85E8 DEFB $24,$24,$24,$24,$24,$24,$24,$24 ; #UDGS$01,$04,$04(door-closed)(#UDG(#PC+$08*$y,attr=$0E)(*door-closed)door-closed)
 $85F0 DEFB $24,$24,$24,$24,$24,$24,$24,$3C ; } UDGTABLE#}
@label=Graphics_CandleStick
 $85F8 DEFB $03,$01,$F1,$61,$61,$61,$61,$31 ; {#UDGTABLE(default,centre) {
 $8600 DEFB $C0,$80,$8F,$86,$86,$86,$86,$8C ; #N($20+((#PC-$8478)/$08)) } {
 $8608 DEFB $39,$1F,$0F,$01,$01,$03,$06,$1F ; #UDGS$02,$02,$04(candlestick)(#UDG(#PC+$08*($02*$y+$x),attr=$0F)(*candlestick)candlestick)
 $8610 DEFB $9C,$F8,$F0,$80,$00,$C0,$20,$F8 ; } UDGTABLE#}
@label=Graphics_Sword
 $8618 DEFB $C0,$E0,$71,$BA,$9C,$8A,$77,$27 ; {#UDGTABLE(default,centre) {
 $8620 DEFB $00,$00,$00,$00,$00,$00,$00,$80 ; #N($20+((#PC-$8478)/$08)) } {
 $8628 DEFB $03,$03,$01,$01,$00,$00,$00,$00 ; #UDGS$02,$02,$04(sword)(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*sword)sword)
 $8630 DEFB $C0,$E0,$F0,$F8,$FC,$7E,$1F,$07 ; } UDGTABLE#}
@label=Graphics_Swag
 $8638 DEFB $0F,$05,$03,$00,$0F,$1D,$30,$60 ; {#UDGTABLE(default,centre) {
 $8640 DEFB $F0,$A0,$40,$00,$F0,$B8,$0C,$0E ; #N($20+((#PC-$8478)/$08)) } {
 $8648 DEFB $65,$E0,$F0,$7D,$70,$30,$1D,$0F ; #UDGS$02,$02,$04(swag)(#UDG(#PC+$08*($02*$y+$x),attr=$0B)(*swag)swag)
 $8650 DEFB $BE,$0F,$07,$A6,$06,$0C,$B8,$F0 ; } UDGTABLE#}
@label=Graphics_Vase
 $8658 DEFB $1F,$6F,$97,$AB,$A9,$93,$87,$8F ; {#UDGTABLE(default,centre) {
 $8660 DEFB $F8,$F6,$E9,$D5,$95,$C9,$A1,$D1 ; #N($20+((#PC-$8478)/$08)) } {
 $8668 DEFB $9F,$9F,$9F,$BF,$5F,$0F,$07,$0F ; #UDGS$02,$02,$04(vase)(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*vase)vase)
 $8670 DEFB $C9,$C9,$C9,$CD,$DA,$B0,$E0,$F0 ; } UDGTABLE#}
@label=Graphics_Pistol
 $8678 DEFB $0A,$04,$1B,$38,$69,$DF,$B5,$D1 ; {#UDGTABLE(default,centre) {
 $8680 DEFB $80,$80,$7F,$3F,$FF,$F0,$00,$00 ; #N($20+((#PC-$8478)/$08)) } {
 $8688 DEFB $AE,$D0,$A8,$D8,$70,$00,$00,$00 ; #UDGS$02,$02,$04(pistol)(#UDG(#PC+$08*($02*$y+$x),attr=$0B)(*pistol)pistol)
 $8690 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; } UDGTABLE#}
@label=Graphics_Chest
 $8698 DEFB $07,$1C,$30,$7F,$00,$7F,$00,$6A ; {#UDGTABLE(default,centre) {
 $86A0 DEFB $F0,$1C,$06,$FF,$00,$FF,$00,$AB ; #N($20+((#PC-$8478)/$08)) } {
 $86A8 DEFB $6A,$6A,$6A,$6A,$6A,$6A,$00,$7F ; #UDGS$02,$02,$04(chest)(#UDG(#PC+$08*($02*$y+$x),attr=$0A)(*chest)chest)
 $86B0 DEFB $AB,$AB,$AB,$AB,$AB,$AB,$00,$FF ; } UDGTABLE#}
@label=Graphics_Map
 $86B8 DEFB $00,$00,$00,$01,$03,$07,$0E,$1D ; {#UDGTABLE(default,centre) {
 $86C0 DEFB $3E,$63,$F1,$D9,$A1,$73,$BE,$5C ; #N($20+((#PC-$8478)/$08)) } {
 $86C8 DEFB $3B,$74,$ED,$D6,$22,$6D,$F6,$78 ; #UDGS$02,$02,$04(map)(#UDG(#PC+$08*($02*$y+$x),attr=$0F)(*map)map)
 $86D0 DEFB $B8,$50,$20,$C0,$80,$00,$00,$00 ; } UDGTABLE#}
@label=Graphics_SpyGlass
 $86D8 DEFB $40,$E0,$70,$38,$16,$0F,$0F,$07 ; {#UDGTABLE(default,centre) {
 $86E0 DEFB $00,$00,$00,$00,$00,$00,$80,$C0 ; #N($20+((#PC-$8478)/$08)) } {
 $86E8 DEFB $03,$01,$00,$00,$00,$00,$00,$00 ; #UDGS$02,$02,$04(spyglass)(#UDG(#PC+$08*($02*$y+$x),attr=$0F)(*spyglass)spyglass)
 $86F0 DEFB $90,$78,$7C,$FE,$79,$30,$11,$0A ; } UDGTABLE#}
@label=Graphics_LogBook
 $86F8 DEFB $AF,$DF,$D0,$DF,$57,$D7,$57,$D1 ; {#UDGTABLE(default,centre) {
 $8700 DEFB $FF,$FF,$01,$FF,$11,$57,$55,$11 ; #N($20+((#PC-$8478)/$08)) } {
 $8708 DEFB $DF,$D0,$DF,$5E,$DF,$DF,$D0,$AF ; #UDGS$02,$02,$04(logbook)(#UDG(#PC+$08*($02*$y+$x),attr=$0F)(*logbook)logbook)
 $8710 DEFB $FF,$01,$FF,$07,$FF,$FF,$01,$FF ; } UDGTABLE#}
@label=Graphics_Sextant
 $8718 DEFB $00,$00,$00,$03,$BA,$BB,$23,$71 ; {#UDGTABLE(default,centre) {
 $8720 DEFB $78,$28,$00,$FD,$00,$FD,$7D,$80 ; #N($20+((#PC-$8478)/$08)) } {
 $8728 DEFB $79,$29,$3F,$1B,$0F,$03,$00,$00 ; #UDGS$02,$02,$04(sextant)(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*sextant)sextant)
 $8730 DEFB $9C,$94,$7C,$58,$70,$C0,$00,$00 ; } UDGTABLE#}
@label=Graphics_Bell
 $8738 DEFB $01,$02,$02,$01,$03,$07,$07,$07 ; {#UDGTABLE(default,centre) {
 $8740 DEFB $80,$40,$40,$80,$C0,$60,$20,$20 ; #N($20+((#PC-$8478)/$08)) } {
 $8748 DEFB $0F,$0F,$1F,$1F,$38,$3F,$03,$01 ; #UDGS$02,$02,$04(bell)(#UDG(#PC+$08*($02*$y+$x),attr=$0C)(*bell)bell)
 $8750 DEFB $90,$90,$C8,$C8,$04,$FC,$40,$80 ; } UDGTABLE#}
@label=Graphics_Lantern
 $8758 DEFB $00,$00,$01,$02,$04,$08,$1F,$05 ; {#UDGTABLE(default,centre) {
 $8760 DEFB $40,$E0,$30,$38,$3C,$1E,$FF,$B4 ; #N($20+((#PC-$8478)/$08)) } {
 $8768 DEFB $05,$00,$05,$05,$00,$05,$05,$00 ; #UDGS$02,$02,$04(lantern)(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*lantern)lantern)
 $8770 DEFB $B4,$00,$B4,$B4,$00,$B4,$B4,$00 ; } UDGTABLE#}

; Graphics: Room Furniture #2 (Non-Interactive)
@label=Graphics_Barrels
b$8778 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGTABLE(default,centre) {
 $8780 DEFB $1F,$3F,$3F,$7F,$00,$FF,$FF,$FF ; #N($20+((#PC-$8778)/$08)) } {
 $8788 DEFB $60,$70,$B0,$B8,$00,$BC,$BC,$BC ; #UDGS$06,$04,$04(barrels)(#UDG(#PC+$08*($06*$y+$x),attr=$0A)(*barrels)barrels)
 $8790 DEFB $1F,$3F,$3F,$7F,$00,$FF,$FF,$FF ; } UDGTABLE#
 $8798 DEFB $60,$70,$B0,$B8,$00,$BC,$BC,$BC ;
 $87A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $87A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $87B0 DEFB $FF,$FF,$00,$7F,$3F,$3F,$1F,$1F ;
 $87B8 DEFB $BC,$BC,$00,$B8,$B0,$70,$60,$60 ;
 $87C0 DEFB $FF,$FF,$00,$7F,$3F,$3F,$1F,$1F ;
 $87C8 DEFB $BC,$BC,$00,$B8,$B0,$70,$60,$60 ;
 $87D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $87D8 DEFB $1F,$3F,$3F,$7F,$00,$FF,$FF,$FF ;
 $87E0 DEFB $60,$70,$B0,$B8,$00,$BC,$BC,$BC ;
 $87E8 DEFB $1F,$3F,$3F,$7F,$00,$FF,$FF,$FF ;
 $87F0 DEFB $60,$70,$B0,$B8,$00,$BC,$BC,$BC ;
 $87F8 DEFB $1F,$3F,$3F,$7F,$00,$FF,$FF,$FF ;
 $8800 DEFB $60,$70,$B0,$B8,$00,$BC,$BC,$BC ;
 $8808 DEFB $FF,$FF,$00,$7F,$3F,$3F,$1F,$1F ;
 $8810 DEFB $BC,$BC,$00,$B8,$B0,$70,$60,$60 ;
 $8818 DEFB $FF,$FF,$00,$7F,$3F,$3F,$1F,$1F ;
 $8820 DEFB $BC,$BC,$00,$B8,$B0,$70,$60,$60 ;
 $8828 DEFB $FF,$FF,$00,$7F,$3F,$3F,$1F,$1F ;
 $8830 DEFB $BC,$BC,$00,$B8,$B0,$70,$60,$60 ; }
@label=Graphics_Stack1
 $8838 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGTABLE(default,centre) {
 $8840 DEFB $00,$00,$00,$00,$00,$00,$7F,$7F ; #N($20+((#PC-$8778)/$08)) } {
 $8848 DEFB $07,$07,$07,$07,$07,$07,$07,$07 ; #UDGS$06,$04,$04(stack-1)(#UDG(#PC+$08*($06*$y+$x),attr=$0B)(*stack-1)stack-1)
 $8850 DEFB $FF,$FF,$FF,$00,$77,$7B,$7D,$3E ; } UDGTABLE#
 $8858 DEFB $FF,$FF,$FF,$00,$FF,$FF,$FF,$FF ;
 $8860 DEFB $F8,$F8,$F8,$38,$B8,$B8,$B8,$B8 ;
 $8868 DEFB $00,$00,$00,$00,$01,$01,$00,$1F ;
 $8870 DEFB $7F,$7F,$7F,$00,$FF,$FF,$0F,$60 ;
 $8878 DEFB $07,$07,$07,$00,$FF,$FF,$FF,$00 ;
 $8880 DEFB $5F,$6F,$77,$00,$FF,$FF,$FF,$00 ;
 $8888 DEFB $7F,$BF,$DF,$00,$FF,$FF,$FF,$00 ;
 $8890 DEFB $B8,$B8,$B8,$00,$FF,$FF,$FF,$07 ;
 $8898 DEFB $1F,$3F,$3F,$7F,$00,$FF,$FF,$FF ;
 $88A0 DEFB $6F,$77,$B7,$BB,$03,$BD,$BD,$BD ;
 $88A8 DEFB $6F,$6F,$6F,$6F,$6F,$68,$69,$6A ;
 $88B0 DEFB $76,$76,$76,$76,$76,$00,$55,$AA ;
 $88B8 DEFB $EF,$EF,$EF,$EF,$EF,$01,$55,$A9 ;
 $88C0 DEFB $77,$77,$77,$77,$77,$77,$77,$77 ;
 $88C8 DEFB $FF,$FF,$00,$7F,$3F,$3F,$1F,$1F ;
 $88D0 DEFB $BD,$BD,$03,$BB,$B0,$77,$6F,$6F ;
 $88D8 DEFB $69,$6A,$69,$6A,$01,$FA,$F9,$FA ;
 $88E0 DEFB $55,$AA,$55,$AA,$55,$AA,$55,$AA ;
 $88E8 DEFB $55,$A9,$55,$A9,$54,$A9,$55,$A9 ;
 $88F0 DEFB $77,$77,$77,$77,$07,$FF,$FF,$FF ; }
@label=Graphics_Stack2
 $88F8 DEFB $3F,$3F,$3F,$38,$3B,$3B,$3B,$3B ; {#UDGTABLE(default,centre) {
 $8900 DEFB $FF,$FF,$FF,$01,$FD,$FD,$FD,$FD ; #N($20+((#PC-$8778)/$08)) } {
 $8908 DEFB $C0,$C0,$C0,$DF,$DF,$C0,$DF,$DF ; #UDGS$06,$04,$04(stack-2)(#UDG(#PC+$08*($06*$y+$x),attr=$0B)(*stack-2)stack-2)
 $8910 DEFB $00,$00,$00,$FF,$FF,$00,$FF,$FF ; } UDGTABLE#
 $8918 DEFB $00,$00,$00,$FF,$FF,$00,$FF,$FF ;
 $8920 DEFB $00,$00,$00,$FF,$FF,$03,$FB,$FB ;
 $8928 DEFB $3B,$3B,$3B,$38,$3F,$3F,$3F,$00 ;
 $8930 DEFB $FD,$FD,$FD,$01,$FF,$FF,$FF,$00 ;
 $8938 DEFB $C0,$DF,$DF,$C0,$DF,$DF,$C0,$1F ;
 $8940 DEFB $00,$FF,$FF,$00,$FF,$FF,$00,$80 ;
 $8948 DEFB $00,$FF,$FF,$00,$FF,$FF,$00,$00 ;
 $8950 DEFB $03,$FB,$FB,$03,$FB,$FB,$03,$1B ;
 $8958 DEFB $FF,$FF,$FF,$E0,$EF,$EF,$EF,$EF ;
 $8960 DEFB $FF,$FF,$FF,$07,$F7,$F7,$F7,$F7 ;
 $8968 DEFB $7F,$00,$7F,$7F,$00,$7F,$7F,$00 ;
 $8970 DEFB $BF,$3F,$BF,$B8,$3B,$BB,$BB,$3B ;
 $8978 DEFB $FF,$FF,$FF,$01,$FD,$FD,$FD,$FD ;
 $8980 DEFB $DB,$C3,$DB,$DB,$C3,$DB,$DB,$C3 ;
 $8988 DEFB $EF,$EF,$EF,$EF,$E0,$FF,$FF,$FF ;
 $8990 DEFB $F7,$F7,$F7,$F7,$07,$FF,$FF,$FF ;
 $8998 DEFB $7F,$7F,$00,$7F,$7F,$00,$7F,$7F ;
 $89A0 DEFB $BB,$BB,$3B,$BB,$B8,$3F,$BF,$BF ;
 $89A8 DEFB $FD,$FD,$FD,$FD,$01,$FF,$FF,$FF ;
 $89B0 DEFB $DB,$DB,$C3,$DB,$DB,$C3,$DF,$DF ; }
@label=Graphics_Stack3
 $89B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGTABLE(default,centre) {
 $89C0 DEFB $3F,$38,$3F,$38,$3F,$38,$3F,$38 ; #N($20+((#PC-$8778)/$08)) } {
 $89C8 DEFB $FF,$00,$FF,$00,$FF,$00,$FF,$00 ; #UDGS$06,$04,$04(stack-3)(#UDG(#PC+$08*($06*$y+$x),attr=$0C)(*stack-3)stack-3)
 $89D0 DEFB $FF,$00,$FF,$00,$FF,$00,$FF,$00 ; } UDGTABLE#
 $89D8 DEFB $FF,$07,$FF,$07,$FF,$07,$FF,$07 ;
 $89E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $89E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $89F0 DEFB $3F,$38,$3F,$38,$3F,$38,$3F,$00 ;
 $89F8 DEFB $FF,$00,$FF,$00,$FF,$00,$FF,$00 ;
 $8A00 DEFB $FF,$00,$FF,$00,$FF,$00,$FF,$00 ;
 $8A08 DEFB $FF,$07,$FF,$07,$FF,$07,$FF,$00 ;
 $8A10 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8A18 DEFB $FF,$80,$BF,$BF,$BF,$BF,$BE,$BD ;
 $8A20 DEFB $FF,$01,$ED,$DD,$B9,$75,$ED,$DD ;
 $8A28 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8A30 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8A38 DEFB $FF,$80,$BF,$BF,$BF,$BF,$BE,$BD ;
 $8A40 DEFB $FF,$01,$ED,$DD,$B9,$75,$ED,$DD ;
 $8A48 DEFB $BB,$B7,$AE,$9D,$BB,$B7,$80,$FF ;
 $8A50 DEFB $BD,$7D,$FD,$FD,$FD,$FD,$01,$FF ;
 $8A58 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8A60 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8A68 DEFB $BB,$B7,$AE,$9D,$BB,$B7,$80,$FF ;
 $8A70 DEFB $BD,$7D,$FD,$FD,$FD,$FD,$01,$FF ; }

; Graphics: Player Sprite
@label=Graphics_Player
b$8A78 DEFB $01,$02,$04,$04,$04,$02,$01,$01 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8A80 DEFB $E0,$10,$70,$B8,$F0,$F0,$E0,$C0 ; #UDGTABLE(default,centre) {
 $8A88 DEFB $02,$07,$09,$0F,$09,$0F,$09,$07 ; #N($20+((#PC-$8A78)/$08)) } {
 $8A90 DEFB $20,$F0,$48,$78,$48,$78,$48,$70 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8A98 DEFB $04,$02,$02,$02,$02,$02,$02,$03 ; } UDGTABLE#
 $8AA0 DEFB $90,$20,$40,$40,$40,$30,$08,$F8 ; }
 $8AA8 DEFB $01,$02,$04,$04,$04,$02,$01,$01 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8AB0 DEFB $E0,$10,$70,$B8,$F0,$F0,$E0,$C0 ; #UDGTABLE(default,centre) {
 $8AB8 DEFB $02,$07,$09,$0F,$09,$0F,$08,$07 ; #N($20+((#PC-$8A78)/$08)) } {
 $8AC0 DEFB $20,$F0,$48,$78,$48,$78,$A8,$F8 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8AC8 DEFB $04,$02,$02,$02,$04,$04,$04,$07 ; } UDGTABLE#
 $8AD0 DEFB $10,$20,$40,$60,$60,$F8,$1C,$FC ; }
 $8AD8 DEFB $00,$01,$02,$04,$04,$04,$02,$01 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8AE0 DEFB $00,$E0,$10,$70,$B8,$F0,$F0,$E0 ; #UDGTABLE(default,centre) {
 $8AE8 DEFB $01,$02,$07,$09,$0F,$08,$0F,$18 ; #N($20+((#PC-$8A78)/$08)) } {
 $8AF0 DEFB $C0,$20,$F0,$68,$B8,$D8,$EC,$34 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8AF8 DEFB $1F,$06,$03,$06,$0C,$18,$0C,$07 ; } UDGTABLE#
 $8B00 DEFB $F8,$10,$20,$70,$70,$F8,$3C,$FC ; }
 $8B08 DEFB $00,$01,$02,$04,$04,$04,$02,$01 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8B10 DEFB $00,$E0,$10,$70,$B8,$F0,$F0,$E0 ; #UDGTABLE(default,centre) {
 $8B18 DEFB $01,$02,$07,$09,$0F,$09,$0F,$08 ; #N($20+((#PC-$8A78)/$08)) } {
 $8B20 DEFB $C0,$20,$F0,$48,$78,$48,$B8,$A8 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8B28 DEFB $0F,$04,$02,$02,$04,$04,$04,$07 ; } UDGTABLE#
 $8B30 DEFB $F0,$20,$40,$60,$60,$F8,$1C,$FC ; }
 $8B38 DEFB $01,$02,$04,$04,$04,$02,$01,$01 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8B40 DEFB $E0,$10,$70,$B8,$F0,$F0,$E0,$C0 ; #UDGTABLE(default,centre) {
 $8B48 DEFB $02,$07,$09,$0F,$09,$0F,$09,$07 ; #N($20+((#PC-$8A78)/$08)) } {
 $8B50 DEFB $20,$F0,$48,$78,$48,$78,$48,$70 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8B58 DEFB $04,$02,$02,$02,$02,$02,$02,$03 ; } UDGTABLE#
 $8B60 DEFB $90,$20,$40,$40,$40,$30,$08,$F8 ; }
 $8B68 DEFB $01,$02,$04,$04,$04,$02,$01,$01 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8B70 DEFB $E0,$10,$70,$B8,$F0,$F0,$E0,$C0 ; #UDGTABLE(default,centre) {
 $8B78 DEFB $02,$07,$0D,$0E,$0A,$0D,$0D,$0B ; #N($20+((#PC-$8A78)/$08)) } {
 $8B80 DEFB $20,$F0,$48,$F8,$88,$F8,$0C,$FC ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8B88 DEFB $06,$02,$01,$01,$03,$03,$03,$03 ; } UDGTABLE#
 $8B90 DEFB $18,$10,$20,$10,$90,$88,$84,$FC ; }
 $8B98 DEFB $00,$01,$02,$04,$04,$04,$02,$01 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8BA0 DEFB $00,$E0,$10,$70,$B8,$F0,$F0,$E0 ; #UDGTABLE(default,centre) {
 $8BA8 DEFB $01,$02,$07,$0A,$0D,$0D,$0D,$0D ; #N($20+((#PC-$8A78)/$08)) } {
 $8BB0 DEFB $C0,$20,$F0,$88,$F8,$08,$F8,$08 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8BB8 DEFB $07,$02,$01,$03,$07,$0F,$07,$03 ; } UDGTABLE#
 $8BC0 DEFB $F8,$10,$10,$10,$88,$84,$C2,$FE ; }
 $8BC8 DEFB $00,$01,$02,$04,$04,$04,$02,$01 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8BD0 DEFB $00,$E0,$10,$70,$B8,$F0,$F0,$E0 ; #UDGTABLE(default,centre) {
 $8BD8 DEFB $01,$02,$07,$09,$0E,$0A,$0E,$0A ; #N($20+((#PC-$8A78)/$08)) } {
 $8BE0 DEFB $C0,$20,$F0,$48,$F8,$88,$F8,$88 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8BE8 DEFB $07,$02,$01,$01,$03,$03,$03,$03 ; } UDGTABLE#
 $8BF0 DEFB $F0,$10,$10,$20,$90,$88,$84,$FC ; }
 $8BF8 DEFB $00,$07,$08,$0E,$1D,$0F,$0F,$07 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8C00 DEFB $00,$80,$40,$20,$20,$20,$40,$80 ; #UDGTABLE(default,centre) {
 $8C08 DEFB $03,$04,$0F,$12,$1E,$11,$1F,$11 ; #N($20+((#PC-$8A78)/$08)) } {
 $8C10 DEFB $80,$40,$E0,$90,$F0,$50,$70,$50 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8C18 DEFB $0F,$08,$08,$04,$09,$11,$21,$3F ; } UDGTABLE#
 $8C20 DEFB $E0,$40,$80,$80,$C0,$C0,$C0,$C0 ; }
 $8C28 DEFB $00,$07,$08,$0E,$1D,$0F,$0F,$07 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8C30 DEFB $00,$80,$40,$20,$20,$20,$40,$80 ; #UDGTABLE(default,centre) {
 $8C38 DEFB $03,$04,$0F,$11,$1F,$10,$1F,$10 ; #N($20+((#PC-$8A78)/$08)) } {
 $8C40 DEFB $80,$40,$E0,$50,$B0,$B0,$B0,$B0 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8C48 DEFB $1F,$08,$08,$08,$11,$21,$43,$7F ; } UDGTABLE#
 $8C50 DEFB $E0,$40,$80,$C0,$E0,$F0,$E0,$C0 ; }
 $8C58 DEFB $07,$08,$0E,$1D,$0F,$0F,$07,$03 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8C60 DEFB $80,$40,$20,$20,$20,$40,$80,$80 ; #UDGTABLE(default,centre) {
 $8C68 DEFB $04,$0F,$12,$1F,$11,$1F,$30,$3F ; #N($20+((#PC-$8A78)/$08)) } {
 $8C70 DEFB $40,$E0,$B0,$70,$50,$B0,$B0,$D0 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8C78 DEFB $18,$08,$04,$08,$09,$11,$21,$3F ; } UDGTABLE#
 $8C80 DEFB $60,$40,$80,$80,$C0,$C0,$C0,$C0 ; }
 $8C88 DEFB $07,$08,$0E,$1D,$0F,$0F,$07,$03 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8C90 DEFB $80,$40,$20,$20,$20,$40,$80,$80 ; #UDGTABLE(default,centre) {
 $8C98 DEFB $04,$0F,$12,$1E,$12,$1E,$12,$0E ; #N($20+((#PC-$8A78)/$08)) } {
 $8CA0 DEFB $40,$E0,$90,$F0,$90,$F0,$90,$E0 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8CA8 DEFB $09,$04,$02,$02,$02,$0C,$10,$1F ; } UDGTABLE#
 $8CB0 DEFB $20,$40,$40,$40,$40,$40,$40,$C0 ; }
 $8CB8 DEFB $00,$07,$08,$0E,$1D,$0F,$0F,$07 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8CC0 DEFB $00,$80,$40,$20,$20,$20,$40,$80 ; #UDGTABLE(default,centre) {
 $8CC8 DEFB $03,$04,$0F,$12,$1E,$12,$1E,$15 ; #N($20+((#PC-$8A78)/$08)) } {
 $8CD0 DEFB $80,$40,$E0,$90,$F0,$90,$F0,$10 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8CD8 DEFB $0F,$04,$02,$06,$06,$1F,$38,$3F ; } UDGTABLE#
 $8CE0 DEFB $F0,$20,$40,$40,$20,$20,$20,$E0 ; }
 $8CE8 DEFB $00,$07,$08,$0E,$1D,$0F,$0F,$07 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8CF0 DEFB $00,$80,$40,$20,$20,$20,$40,$80 ; #UDGTABLE(default,centre) {
 $8CF8 DEFB $03,$04,$0F,$16,$1D,$1B,$37,$2C ; #N($20+((#PC-$8A78)/$08)) } {
 $8D00 DEFB $80,$40,$E0,$90,$F0,$10,$F0,$18 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8D08 DEFB $1F,$08,$04,$0E,$0E,$1F,$3C,$3F ; } UDGTABLE#
 $8D10 DEFB $F8,$60,$C0,$60,$30,$18,$30,$E0 ; }
 $8D18 DEFB $07,$08,$0E,$1D,$0F,$0F,$07,$03 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8D20 DEFB $80,$40,$20,$20,$20,$40,$80,$80 ; #UDGTABLE(default,centre) {
 $8D28 DEFB $04,$0F,$12,$1E,$12,$1E,$15,$1F ; #N($20+((#PC-$8A78)/$08)) } {
 $8D30 DEFB $40,$E0,$90,$F0,$90,$F0,$10,$E0 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8D38 DEFB $08,$04,$02,$06,$06,$1F,$38,$3F ; } UDGTABLE#
 $8D40 DEFB $20,$40,$40,$40,$20,$20,$20,$E0 ; }
 $8D48 DEFB $07,$08,$0E,$1D,$0F,$0F,$07,$03 ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8D50 DEFB $80,$40,$20,$20,$20,$40,$80,$80 ; #UDGTABLE(default,centre) {
 $8D58 DEFB $04,$0F,$12,$1E,$12,$1E,$12,$0E ; #N($20+((#PC-$8A78)/$08)) } {
 $8D60 DEFB $40,$E0,$90,$F0,$90,$F0,$90,$E0 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8D68 DEFB $09,$04,$02,$02,$02,$0C,$10,$1F ; } UDGTABLE#
 $8D70 DEFB $20,$40,$40,$40,$40,$40,$40,$C0 ; }
 $8D78 DEFB $01,$02,$04,$04,$04,$02,$31,$7B ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8D80 DEFB $C2,$27,$17,$17,$17,$27,$C7,$EF ; #UDGTABLE(default,centre) {
 $8D88 DEFB $3C,$1F,$08,$0F,$08,$0F,$04,$04 ; #N($20+((#PC-$8A78)/$08)) } {
 $8D90 DEFB $1E,$FC,$08,$F8,$08,$F8,$10,$08 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8D98 DEFB $05,$05,$05,$05,$05,$05,$09,$0F ; } UDGTABLE#
 $8DA0 DEFB $C8,$50,$48,$78,$00,$00,$00,$00 ; }
 $8DA8 DEFB $01,$02,$24,$74,$74,$72,$71,$7B ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8DB0 DEFB $C0,$20,$12,$17,$17,$27,$C7,$EF ; #UDGTABLE(default,centre) {
 $8DB8 DEFB $3C,$1F,$08,$0F,$08,$0F,$04,$04 ; #N($20+((#PC-$8A78)/$08)) } {
 $8DC0 DEFB $1E,$FC,$08,$F8,$08,$F8,$10,$10 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8DC8 DEFB $05,$05,$05,$05,$09,$0F,$00,$00 ; } UDGTABLE#
 $8DD0 DEFB $D0,$50,$50,$50,$48,$78,$00,$00 ; }
 $8DD8 DEFB $21,$72,$74,$74,$74,$72,$71,$7B ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8DE0 DEFB $C0,$20,$10,$10,$10,$20,$C6,$EF ; #UDGTABLE(default,centre) {
 $8DE8 DEFB $3C,$1F,$08,$0F,$08,$0F,$04,$08 ; #N($20+((#PC-$8A78)/$08)) } {
 $8DF0 DEFB $1E,$FC,$08,$F8,$08,$F8,$10,$10 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8DF8 DEFB $09,$05,$09,$0F,$00,$00,$00,$00 ; } UDGTABLE#
 $8E00 DEFB $D0,$50,$50,$50,$50,$50,$48,$78 ; }
 $8E08 DEFB $01,$02,$24,$74,$74,$72,$71,$7B ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8E10 DEFB $C0,$20,$12,$17,$17,$27,$C7,$EF ; #UDGTABLE(default,centre) {
 $8E18 DEFB $3C,$1F,$08,$0F,$08,$0F,$04,$04 ; #N($20+((#PC-$8A78)/$08)) } {
 $8E20 DEFB $1E,$FC,$08,$F8,$08,$F8,$10,$10 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8E28 DEFB $05,$05,$05,$05,$09,$0F,$00,$00 ; } UDGTABLE#
 $8E30 DEFB $D0,$50,$50,$50,$48,$78,$00,$00 ; }
 $8E38 DEFB $01,$02,$05,$06,$07,$03,$01,$1F ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8E40 DEFB $C0,$20,$D0,$B0,$70,$E0,$C0,$FC ; #UDGTABLE(default,centre) {
 $8E48 DEFB $3C,$7F,$68,$6F,$68,$6F,$74,$74 ; #N($20+((#PC-$8A78)/$08)) } {
 $8E50 DEFB $1E,$FF,$0B,$FB,$0A,$F8,$10,$10 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8E58 DEFB $25,$05,$05,$05,$05,$09,$11,$3F ; } UDGTABLE#
 $8E60 DEFB $D0,$50,$50,$50,$50,$48,$44,$7E ; }
 $8E68 DEFB $00,$01,$02,$03,$63,$F1,$78,$3D ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8E70 DEFB $E2,$13,$EB,$5B,$BB,$F3,$E7,$FF ; #UDGTABLE(default,centre) {
 $8E78 DEFB $1E,$0F,$04,$07,$04,$07,$02,$02 ; #N($20+((#PC-$8A78)/$08)) } {
 $8E80 DEFB $0E,$FC,$04,$FC,$04,$FC,$08,$08 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8E88 DEFB $02,$04,$69,$92,$44,$28,$10,$00 ; } UDGTABLE#
 $8E90 DEFB $68,$A8,$28,$28,$28,$24,$22,$3F ; }
 $8E98 DEFB $01,$02,$05,$06,$07,$03,$31,$7B ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8EA0 DEFB $C0,$20,$D0,$B0,$70,$E0,$C6,$EF ; #UDGTABLE(default,centre) {
 $8EA8 DEFB $7C,$3F,$18,$0F,$08,$0F,$04,$04 ; #N($20+((#PC-$8A78)/$08)) } {
 $8EB0 DEFB $1F,$FE,$0C,$F8,$08,$F8,$10,$10 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8EB8 DEFB $05,$05,$05,$09,$0A,$12,$22,$7C ; } UDGTABLE#
 $8EC0 DEFB $D0,$50,$50,$48,$28,$24,$22,$1F ; }
 $8EC8 DEFB $47,$C8,$D7,$DA,$DD,$CF,$E7,$FF ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8ED0 DEFB $00,$80,$40,$C0,$C6,$8F,$1E,$BC ; #UDGTABLE(default,centre) {
 $8ED8 DEFB $70,$3F,$20,$3F,$20,$3F,$10,$10 ; #N($20+((#PC-$8A78)/$08)) } {
 $8EE0 DEFB $78,$F0,$20,$E0,$20,$E0,$40,$40 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8EE8 DEFB $16,$15,$14,$14,$14,$24,$44,$FC ; } UDGTABLE#
 $8EF0 DEFB $40,$20,$96,$49,$22,$14,$08,$00 ; }
 $8EF8 DEFB $01,$02,$05,$06,$07,$03,$31,$7B ; {#LET(filename=#EVAL($01+(#PC-$8A78)/$30))
 $8F00 DEFB $C0,$20,$D0,$B0,$70,$E0,$C6,$EF ; #UDGTABLE(default,centre) {
 $8F08 DEFB $7C,$3F,$18,$0F,$08,$0F,$04,$04 ; #N($20+((#PC-$8A78)/$08)) } {
 $8F10 DEFB $1F,$FE,$0C,$F8,$08,$F8,$10,$10 ; #UDGS$02,$03,$04(#FORMAT(player-{filename}))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*player)player)
 $8F18 DEFB $05,$05,$05,$09,$0A,$12,$22,$7C ; } UDGTABLE#
 $8F20 DEFB $D0,$50,$50,$48,$28,$24,$22,$1F ; }

; Graphics: Pirate
@label=Graphics_Pirate
b$8F28 DEFB $3F,$40,$81,$85,$8D,$9E,$EF,$8E ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $8F30 DEFB $F8,$20,$C0,$60,$C0,$21,$93,$77 ; #UDGTABLE(default,centre) {
 $8F38 DEFB $1F,$24,$6E,$4E,$4E,$4E,$7F,$2F ; #N($20+((#PC-$8F28)/$08)) } {
 $8F40 DEFB $0F,$8F,$DF,$5E,$7E,$7C,$FC,$F8 ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $8F48 DEFB $3F,$1F,$0A,$1B,$0A,$09,$08,$0F ; } UDGTABLE#
 $8F50 DEFB $F0,$C0,$00,$00,$00,$80,$40,$C0 ; }
 $8F58 DEFB $3F,$40,$81,$85,$8D,$9E,$EF,$8E ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $8F60 DEFB $F8,$20,$C0,$60,$C0,$21,$93,$77 ; #UDGTABLE(default,centre) {
 $8F68 DEFB $1F,$24,$6E,$4E,$4E,$4F,$7F,$27 ; #N($20+((#PC-$8F28)/$08)) } {
 $8F70 DEFB $0F,$8F,$5E,$7E,$FC,$F8,$F0,$C0 ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $8F78 DEFB $3B,$1F,$0A,$1B,$08,$17,$10,$1F ; } UDGTABLE#
 $8F80 DEFB $80,$00,$00,$00,$C0,$20,$A0,$E0 ; }
 $8F88 DEFB $00,$3F,$40,$81,$85,$8D,$9E,$EF ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $8F90 DEFB $00,$FA,$22,$C3,$67,$C7,$27,$97 ; #UDGTABLE(default,centre) {
 $8F98 DEFB $1F,$24,$6E,$4F,$47,$43,$FF,$A1 ; #N($20+((#PC-$8F28)/$08)) } {
 $8FA0 DEFB $7F,$8F,$DE,$5E,$BC,$F8,$F0,$E0 ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $8FA8 DEFB $7E,$1B,$29,$12,$22,$44,$22,$1F ; } UDGTABLE#
 $8FB0 DEFB $C0,$00,$00,$80,$80,$40,$20,$E0 ; }
 $8FB8 DEFB $3F,$40,$81,$85,$8D,$9E,$EF,$8E ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $8FC0 DEFB $F8,$20,$C0,$60,$C0,$21,$93,$77 ; #UDGTABLE(default,centre) {
 $8FC8 DEFB $1F,$24,$6E,$4E,$4E,$4E,$7F,$27 ; #N($20+((#PC-$8F28)/$08)) } {
 $8FD0 DEFB $0F,$8F,$5E,$7E,$7C,$F8,$E0,$C0 ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $8FD8 DEFB $3B,$1F,$0A,$1B,$08,$17,$10,$1F ; } UDGTABLE#
 $8FE0 DEFB $80,$00,$00,$00,$C0,$20,$A0,$E0 ; }
 $8FE8 DEFB $3F,$40,$81,$85,$8D,$9E,$EF,$8E ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $8FF0 DEFB $F8,$20,$C0,$60,$C0,$21,$93,$77 ; #UDGTABLE(default,centre) {
 $8FF8 DEFB $1F,$24,$6E,$4E,$4E,$4E,$7E,$2F ; #N($20+((#PC-$8F28)/$08)) } {
 $9000 DEFB $0F,$8F,$5F,$5E,$7E,$7C,$7C,$F8 ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $9008 DEFB $3F,$1F,$0A,$1B,$0A,$09,$08,$0F ; } UDGTABLE#
 $9010 DEFB $F0,$C0,$00,$00,$00,$80,$40,$C0 ; }
 $9018 DEFB $3F,$40,$81,$85,$8D,$9E,$EF,$8E ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $9020 DEFB $F8,$20,$C0,$60,$C0,$20,$90,$70 ; #UDGTABLE(default,centre) {
 $9028 DEFB $1F,$24,$6E,$4E,$5E,$5C,$7F,$3F ; #N($20+((#PC-$8F28)/$08)) } {
 $9030 DEFB $01,$83,$47,$4F,$5E,$7E,$FC,$F8 ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $9038 DEFB $7F,$1F,$0A,$09,$19,$14,$14,$1F ; } UDGTABLE#
 $9040 DEFB $E0,$00,$00,$80,$00,$C0,$20,$E0 ; }
 $9048 DEFB $00,$3F,$40,$81,$85,$8D,$9E,$EF ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $9050 DEFB $00,$F8,$20,$C0,$60,$C0,$20,$90 ; #UDGTABLE(default,centre) {
 $9058 DEFB $1F,$3C,$7E,$7E,$7C,$70,$7E,$3F ; #N($20+((#PC-$8F28)/$08)) } {
 $9060 DEFB $70,$80,$80,$41,$43,$4F,$5E,$FC ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $9068 DEFB $3F,$1F,$09,$1D,$24,$44,$22,$1F ; } UDGTABLE#
 $9070 DEFB $F8,$E0,$00,$C0,$80,$40,$20,$E0 ; }
 $9078 DEFB $3F,$40,$81,$85,$8D,$9E,$EF,$8E ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $9080 DEFB $F8,$20,$C0,$60,$C0,$20,$90,$70 ; #UDGTABLE(default,centre) {
 $9088 DEFB $1F,$24,$6E,$4E,$5E,$5C,$7F,$3F ; #N($20+((#PC-$8F28)/$08)) } {
 $9090 DEFB $01,$83,$47,$4F,$5E,$7E,$FC,$F8 ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $9098 DEFB $7F,$1F,$0A,$09,$19,$14,$14,$1F ; } UDGTABLE#
 $90A0 DEFB $E0,$00,$00,$80,$00,$C0,$20,$E0 ; }
 $90A8 DEFB $1F,$04,$03,$06,$03,$04,$09,$0E ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $90B0 DEFB $FC,$02,$81,$A1,$B1,$79,$F7,$71 ; #UDGTABLE(default,centre) {
 $90B8 DEFB $80,$C1,$E2,$F2,$7A,$7E,$3F,$1F ; #N($20+((#PC-$8F28)/$08)) } {
 $90C0 DEFB $F8,$24,$76,$72,$7A,$3A,$FE,$FC ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $90C8 DEFB $07,$00,$00,$01,$00,$03,$04,$07 ; } UDGTABLE#
 $90D0 DEFB $FE,$F8,$50,$90,$98,$28,$28,$F8 ; }
 $90D8 DEFB $00,$1F,$04,$03,$06,$03,$04,$09 ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $90E0 DEFB $00,$FC,$02,$81,$A1,$B1,$79,$F7 ; #UDGTABLE(default,centre) {
 $90E8 DEFB $0E,$01,$01,$82,$C2,$F2,$7A,$3F ; #N($20+((#PC-$8F28)/$08)) } {
 $90F0 DEFB $F8,$3C,$7E,$7E,$3E,$0E,$7E,$FC ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $90F8 DEFB $1F,$07,$00,$03,$01,$02,$04,$07 ; } UDGTABLE#
 $9100 DEFB $FC,$F8,$90,$B8,$24,$22,$44,$F8 ; }
 $9108 DEFB $1F,$04,$03,$06,$03,$04,$09,$0E ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $9110 DEFB $FC,$02,$81,$A1,$B1,$79,$F7,$71 ; #UDGTABLE(default,centre) {
 $9118 DEFB $80,$C1,$E2,$F2,$7A,$7E,$3F,$1F ; #N($20+((#PC-$8F28)/$08)) } {
 $9120 DEFB $F8,$24,$76,$72,$7A,$3A,$FE,$FC ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $9128 DEFB $07,$00,$00,$01,$00,$03,$04,$07 ; } UDGTABLE#
 $9130 DEFB $FE,$F8,$50,$90,$98,$28,$28,$F8 ; }
 $9138 DEFB $1F,$04,$03,$06,$03,$84,$C9,$EE ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $9140 DEFB $FC,$02,$81,$A1,$B1,$79,$F7,$71 ; #UDGTABLE(default,centre) {
 $9148 DEFB $F0,$F1,$FA,$7A,$7E,$3E,$3E,$1F ; #N($20+((#PC-$8F28)/$08)) } {
 $9150 DEFB $F8,$24,$76,$72,$72,$72,$7E,$F4 ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $9158 DEFB $0F,$03,$00,$00,$00,$01,$02,$03 ; } UDGTABLE#
 $9160 DEFB $FC,$F8,$50,$D8,$50,$90,$10,$F0 ; }
 $9168 DEFB $1F,$04,$03,$06,$03,$84,$C9,$EE ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $9170 DEFB $FC,$02,$81,$A1,$B1,$79,$F7,$71 ; #UDGTABLE(default,centre) {
 $9178 DEFB $F0,$F1,$7A,$7E,$3E,$1F,$07,$03 ; #N($20+((#PC-$8F28)/$08)) } {
 $9180 DEFB $F8,$24,$76,$72,$72,$72,$FE,$E4 ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $9188 DEFB $01,$00,$00,$00,$03,$04,$05,$07 ; } UDGTABLE#
 $9190 DEFB $DC,$F8,$50,$D8,$10,$E8,$08,$F8 ; }
 $9198 DEFB $00,$5F,$44,$C3,$E6,$E3,$E4,$E9 ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $91A0 DEFB $00,$FC,$02,$81,$A1,$B1,$79,$F7 ; #UDGTABLE(default,centre) {
 $91A8 DEFB $FE,$F1,$7B,$7A,$3D,$1F,$0F,$07 ; #N($20+((#PC-$8F28)/$08)) } {
 $91B0 DEFB $F8,$24,$76,$F2,$E2,$C2,$FF,$85 ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $91B8 DEFB $03,$00,$00,$01,$01,$02,$04,$07 ; } UDGTABLE#
 $91C0 DEFB $7E,$D8,$94,$48,$44,$22,$44,$F8 ; }
 $91C8 DEFB $1F,$04,$03,$06,$03,$84,$C9,$EE ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $91D0 DEFB $FC,$02,$81,$A1,$B1,$79,$F7,$71 ; #UDGTABLE(default,centre) {
 $91D8 DEFB $F0,$F1,$7A,$7E,$3F,$1F,$0F,$03 ; #N($20+((#PC-$8F28)/$08)) } {
 $91E0 DEFB $F8,$24,$76,$72,$72,$F2,$FE,$E4 ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $91E8 DEFB $01,$00,$00,$00,$03,$04,$05,$07 ; } UDGTABLE#
 $91F0 DEFB $DC,$F8,$50,$D8,$10,$E8,$08,$F8 ; }
 $91F8 DEFB $1F,$04,$03,$06,$03,$84,$C9,$EE ; {#LET(filename=#EVAL($01+(#PC-$8F28)/$30))
 $9200 DEFB $FC,$02,$81,$A1,$B1,$79,$F7,$71 ; #UDGTABLE(default,centre) {
 $9208 DEFB $F0,$F1,$FB,$7A,$7E,$3E,$3F,$1F ; #N($20+((#PC-$8F28)/$08)) } {
 $9210 DEFB $F8,$24,$76,$72,$72,$72,$FE,$F4 ; #UDGS$02,$03,$04(#FORMAT(pirate-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*pirate)pirate)
 $9218 DEFB $0F,$03,$00,$00,$00,$01,$02,$03 ; } UDGTABLE#
 $9220 DEFB $FC,$F8,$50,$D8,$50,$90,$10,$F0 ; }
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$10(pirate)) }
; UDGTABLE#

; Unused
;
; Appears to be a clone of #R$924C (frame 1).
u$9228 DEFB $03,$0C,$11,$27,$2F,$4F,$5F,$5F ; {#UDGTABLE {
 $9230 DEFB $C0,$30,$88,$E4,$F4,$F2,$FA,$FA ; #UDGS$02,$02,$04(#FORMAT(porthole))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*porthole)porthole)
 $9238 DEFB $4F,$2F,$26,$11,$0C,$03,$00,$00 ; } UDGTABLE#
 $9240 DEFB $F2,$F4,$64,$88,$30,$C0,$00,$00 ; }
; These four bytes also clone the first four bytes of frame 1/ above.
; .
; It's unclear yet what they're used for (if anything).
 $9248 DEFB $03,$0C,$11,$27

; Graphics: Porthole
;
; See #R$F1FC.
@label=Graphics_Porthole
b$924C DEFB $03,$0C,$11,$27,$2F,$4F,$5F,$5F ; {#LET(filename=#EVAL($01+(#PC-$924C)/$20))
 $9254 DEFB $C0,$30,$88,$E4,$F4,$F2,$FA,$FA ; #UDGTABLE(default,centre) {
 $925C DEFB $4F,$2F,$26,$11,$0C,$03,$00,$00 ; #N($20+((#PC-$924C)/$08)) } {
 $9264 DEFB $F2,$F4,$64,$88,$30,$C0,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(porthole-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*porthole)porthole)
                                            ; } UDGTABLE#}
 $926C DEFB $03,$0C,$11,$27,$2F,$4F,$5F,$5F ; {#LET(filename=#EVAL($01+(#PC-$924C)/$20))
 $9274 DEFB $C0,$30,$88,$E4,$F4,$F2,$FA,$FA ; #UDGTABLE(default,centre) {
 $927C DEFB $4F,$28,$26,$11,$0C,$03,$00,$00 ; #N($20+((#PC-$924C)/$08)) } {
 $9284 DEFB $12,$14,$64,$88,$30,$C0,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(porthole-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*porthole)porthole)
                                            ; } UDGTABLE#}
 $928C DEFB $03,$0C,$11,$27,$2F,$4F,$5F,$5E ; {#LET(filename=#EVAL($01+(#PC-$924C)/$20))
 $9294 DEFB $C0,$30,$88,$E4,$F4,$F2,$FA,$0A ; #UDGTABLE(default,centre) {
 $929C DEFB $48,$28,$26,$11,$0C,$03,$00,$00 ; #N($20+((#PC-$924C)/$08)) } {
 $92A4 DEFB $12,$14,$64,$88,$30,$C0,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(porthole-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*porthole)porthole)
                                            ; } UDGTABLE#}
 $92AC DEFB $03,$0C,$11,$27,$2F,$4E,$50,$50 ; {#LET(filename=#EVAL($01+(#PC-$924C)/$20))
 $92B4 DEFB $C0,$30,$88,$E4,$F4,$12,$0A,$0A ; #UDGTABLE(default,centre) {
 $92BC DEFB $48,$28,$26,$11,$0C,$03,$00,$00 ; #N($20+((#PC-$924C)/$08)) } {
 $92C4 DEFB $12,$14,$64,$88,$30,$C0,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(porthole-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*porthole)porthole)
                                            ; } UDGTABLE#}
 $92CC DEFB $03,$0C,$11,$27,$2F,$48,$50,$50 ; {#LET(filename=#EVAL($01+(#PC-$924C)/$20))
 $92D4 DEFB $C0,$30,$88,$E4,$F4,$12,$0A,$0A ; #UDGTABLE(default,centre) {
 $92DC DEFB $48,$28,$26,$11,$0C,$03,$00,$00 ; #N($20+((#PC-$924C)/$08)) } {
 $92E4 DEFB $12,$14,$64,$88,$30,$C0,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(porthole-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*porthole)porthole)
                                            ; } UDGTABLE#}
 $92EC DEFB $03,$0C,$11,$27,$28,$48,$50,$50 ; {#LET(filename=#EVAL($01+(#PC-$924C)/$20))
 $92F4 DEFB $C0,$30,$88,$E4,$F4,$12,$0A,$0A ; #UDGTABLE(default,centre) {
 $92FC DEFB $48,$28,$26,$11,$0C,$03,$00,$00 ; #N($20+((#PC-$924C)/$08)) } {
 $9304 DEFB $12,$14,$64,$88,$30,$C0,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(porthole-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*porthole)porthole)
                                            ; } UDGTABLE#}
 $930C DEFB $03,$0C,$11,$27,$2F,$48,$50,$50 ; {#LET(filename=#EVAL($01+(#PC-$924C)/$20))
 $9314 DEFB $C0,$30,$88,$E4,$F4,$F2,$0A,$0A ; #UDGTABLE(default,centre) {
 $931C DEFB $48,$28,$26,$11,$0C,$03,$00,$00 ; #N($20+((#PC-$924C)/$08)) } {
 $9324 DEFB $12,$14,$64,$88,$30,$C0,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(porthole-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*porthole)porthole)
                                            ; } UDGTABLE#}
 $932C DEFB $03,$0C,$11,$27,$2F,$4F,$5F,$50 ; {#LET(filename=#EVAL($01+(#PC-$924C)/$20))
 $9334 DEFB $C0,$30,$88,$E4,$F4,$F2,$FA,$FA ; #UDGTABLE(default,centre) {
 $933C DEFB $48,$28,$26,$11,$0C,$03,$00,$00 ; #N($20+((#PC-$924C)/$08)) } {
 $9344 DEFB $12,$14,$64,$88,$30,$C0,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(porthole-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0D)(*porthole)porthole)
                                            ; } UDGTABLE#}
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$08(porthole)) }
; UDGTABLE#

; Graphics: Bomb
;
; See #R$E47A.
@label=Graphics_Bomb
b$934C DEFB $00,$00,$01,$01,$02,$04,$08,$18 ; {#LET(filename=#EVAL($01+(#PC-$934C)/$20))
 $9354 DEFB $00,$F0,$08,$08,$08,$08,$08,$08 ; #UDGTABLE {
 $935C DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGS$02,$02,$04(#FORMAT(bomb-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bomb)bomb)
 $9364 DEFB $10,$10,$10,$10,$10,$08,$04,$03 ; } UDGTABLE#}
 $936C DEFB $00,$00,$01,$01,$02,$04,$08,$18 ; {#LET(filename=#EVAL($01+(#PC-$934C)/$20))
 $9374 DEFB $00,$F0,$08,$08,$08,$08,$08,$08 ; #UDGTABLE {
 $937C DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGS$02,$02,$04(#FORMAT(bomb-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bomb)bomb)
 $9384 DEFB $10,$10,$10,$10,$20,$08,$20,$00 ; } UDGTABLE#}
 $938C DEFB $00,$00,$01,$01,$02,$04,$08,$18 ; {#LET(filename=#EVAL($01+(#PC-$934C)/$20))
 $9394 DEFB $00,$F0,$08,$08,$08,$0A,$28,$08 ; #UDGTABLE {
 $939C DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGS$02,$02,$04(#FORMAT(bomb-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bomb)bomb)
 $93A4 DEFB $00,$24,$00,$00,$00,$00,$00,$00 ; } UDGTABLE#}
 $93AC DEFB $00,$00,$01,$01,$02,$04,$08,$18 ; {#LET(filename=#EVAL($01+(#PC-$934C)/$20))
 $93B4 DEFB $00,$F0,$08,$08,$28,$02,$10,$04 ; #UDGTABLE {
 $93BC DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGS$02,$02,$04(#FORMAT(bomb-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bomb)bomb)
 $93C4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; } UDGTABLE#}
 $93CC DEFB $00,$00,$01,$01,$02,$04,$08,$18 ; {#LET(filename=#EVAL($01+(#PC-$934C)/$20))
 $93D4 DEFB $00,$F0,$09,$00,$14,$01,$08,$00 ; #UDGTABLE {
 $93DC DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGS$02,$02,$04(#FORMAT(bomb-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bomb)bomb)
 $93E4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; } UDGTABLE#}
 $93EC DEFB $00,$01,$00,$01,$02,$04,$08,$18 ; {#LET(filename=#EVAL($01+(#PC-$934C)/$20))
 $93F4 DEFB $00,$20,$00,$20,$00,$80,$00,$00 ; #UDGTABLE {
 $93FC DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGS$02,$02,$04(#FORMAT(bomb-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bomb)bomb)
 $9404 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; } UDGTABLE#}
 $940C DEFB $00,$00,$02,$00,$00,$04,$09,$18 ; {#LET(filename=#EVAL($01+(#PC-$934C)/$20))
 $9414 DEFB $00,$00,$00,$00,$80,$00,$00,$00 ; #UDGTABLE {
 $941C DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGS$02,$02,$04(#FORMAT(bomb-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bomb)bomb)
 $9424 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; } UDGTABLE#}
 $942C DEFB $00,$04,$00,$12,$20,$00,$08,$18 ; {#LET(filename=#EVAL($01+(#PC-$934C)/$20))
 $9434 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE {
 $943C DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGS$02,$02,$04(#FORMAT(bomb-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bomb)bomb)
 $9444 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; } UDGTABLE#}
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$08(bomb)) }
; UDGTABLE#

; Graphics: Animals
@label=Graphics_Rat
b$944C DEFB $00,$00,$08,$0C,$1F,$77,$FF,$7F ; {#LET(filename=#EVAL($01+(#PC-$944C)/$20))
 $9454 DEFB $00,$3C,$7E,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE {
 $945C DEFB $00,$00,$00,$00,$80,$C0,$F8,$FF ; #UDGS$04,$01,$04(#FORMAT(rat-{filename}))(#UDG(#PC+$08*($04*$y+$x),attr=$0E)(*rat)rat)
 $9464 DEFB $00,$00,$00,$00,$00,$00,$00,$F8 ; } UDGTABLE#}
 $946C DEFB $00,$00,$00,$00,$00,$00,$00,$1F ; {#LET(filename=#EVAL($01+(#PC-$944C)/$20))
 $9474 DEFB $00,$00,$00,$00,$01,$03,$1F,$FF ; #UDGTABLE {
 $947C DEFB $00,$3C,$7E,$FF,$FF,$FF,$FF,$FF ; #UDGS$04,$01,$04(#FORMAT(rat-{filename}))(#UDG(#PC+$08*($04*$y+$x),attr=$0E)(*rat)rat)
 $9484 DEFB $00,$00,$10,$30,$F8,$EE,$FF,$FE ; } UDGTABLE#}
@label=Graphics_Bird
 $948C DEFB $00,$00,$00,$00,$80,$F0,$7E,$3F ; {#LET(filename=#EVAL($01+(#PC-$948C)/$20))
 $9494 DEFB $00,$00,$00,$18,$3C,$7E,$77,$FF ; #UDGTABLE {
 $949C DEFB $30,$1F,$0F,$03,$00,$00,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(bird-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bird)bird)
 $94A4 DEFB $3C,$F8,$F0,$C0,$00,$00,$00,$00 ; } UDGTABLE#}
 $94AC DEFB $00,$18,$3C,$7E,$EE,$FF,$3B,$1B ; {#LET(filename=#EVAL($01+(#PC-$948C)/$20))
 $94B4 DEFB $00,$00,$01,$0F,$7E,$FC,$DC,$D8 ; #UDGTABLE {
 $94BC DEFB $0F,$03,$03,$01,$00,$00,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(bird-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bird)bird)
 $94C4 DEFB $F0,$C0,$E0,$E0,$E0,$70,$00,$00 ; } UDGTABLE#}
 $94CC DEFB $0C,$0E,$0F,$07,$87,$F7,$7F,$37 ; {#LET(filename=#EVAL($01+(#PC-$948C)/$20))
 $94D4 DEFB $00,$00,$00,$98,$BC,$FE,$B7,$BF ; #UDGTABLE {
 $94DC DEFB $34,$1F,$0F,$03,$00,$00,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(bird-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bird)bird)
 $94E4 DEFB $BC,$F8,$F0,$C0,$00,$00,$00,$00 ; } UDGTABLE#}
 $94EC DEFB $00,$00,$00,$18,$3C,$7E,$EE,$FF ; {#LET(filename=#EVAL($01+(#PC-$948C)/$20))
 $94F4 DEFB $00,$00,$00,$00,$01,$0F,$7E,$FC ; #UDGTABLE {
 $94FC DEFB $3C,$1F,$0F,$03,$00,$00,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(bird-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bird)bird)
 $9504 DEFB $0C,$F8,$F0,$C0,$00,$00,$00,$00 ; } UDGTABLE#}
 $950C DEFB $00,$00,$00,$00,$80,$F0,$7E,$3F ; {#LET(filename=#EVAL($01+(#PC-$948C)/$20))
 $9514 DEFB $00,$00,$00,$18,$3C,$7E,$77,$FF ; #UDGTABLE {
 $951C DEFB $30,$1F,$0F,$03,$00,$00,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(bird-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bird)bird)
 $9524 DEFB $3C,$F8,$F0,$C0,$00,$00,$00,$00 ; } UDGTABLE#}
 $952C DEFB $00,$00,$00,$19,$3D,$7F,$ED,$FD ; {#LET(filename=#EVAL($01+(#PC-$948C)/$20))
 $9534 DEFB $30,$70,$F0,$E0,$E1,$EF,$FE,$EC ; #UDGTABLE {
 $953C DEFB $3D,$1F,$0F,$03,$00,$00,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(bird-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bird)bird)
 $9544 DEFB $2C,$F8,$F0,$C0,$00,$00,$00,$00 ; } UDGTABLE#}
 $954C DEFB $00,$00,$80,$F0,$7E,$3F,$3B,$1B ; {#LET(filename=#EVAL($01+(#PC-$948C)/$20))
 $9554 DEFB $00,$18,$3C,$7E,$77,$FF,$DC,$D8 ; #UDGTABLE {
 $955C DEFB $0F,$03,$07,$07,$07,$0E,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(bird-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bird)bird)
 $9564 DEFB $F0,$C0,$C0,$80,$00,$00,$00,$00 ; } UDGTABLE#}
 $956C DEFB $00,$00,$00,$18,$3C,$7E,$EE,$FF ; {#LET(filename=#EVAL($01+(#PC-$948C)/$20))
 $9574 DEFB $00,$00,$00,$00,$01,$0F,$7E,$FC ; #UDGTABLE {
 $957C DEFB $3C,$1F,$0F,$03,$00,$00,$00,$00 ; #UDGS$02,$02,$04(#FORMAT(bird-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0E)(*bird)bird)
 $9584 DEFB $0C,$F8,$F0,$C0,$00,$00,$00,$00 ; } UDGTABLE#}

; Graphics: Player Swimming Sprite
b$958C DEFB $0C,$12,$09,$04,$02,$39,$44,$83 ; {#LET(filename=#EVAL($01+(#PC-$958C)/$40))
 $9594 DEFB $00,$00,$00,$80,$7F,$6B,$FA,$4E ; #UDGTABLE {
 $959C DEFB $00,$00,$00,$00,$00,$83,$CF,$BF ; #UDGS$04,$02,$04(#FORMAT(player-swimming-{filename}*))(#UDG(#PC+$08*($04*$y+$x),attr=$0E)(*player-swimming)player-swimming)
 $95A4 DEFB $00,$00,$00,$3E,$78,$E0,$C0,$80 ; } UDGTABLE#
 $95AC DEFB $9F,$AF,$BE,$7C,$10,$00,$00,$00 ;
 $95B4 DEFB $42,$61,$F9,$69,$3D,$07,$00,$00 ;
 $95BC DEFB $8F,$82,$81,$F8,$84,$03,$00,$00 ;
 $95C4 DEFB $00,$00,$80,$60,$10,$08,$FE,$00 ; }
 $95CC DEFB $00,$00,$00,$00,$00,$1C,$22,$C1 ; {#LET(filename=#EVAL($01+(#PC-$958C)/$40))
 $95D4 DEFB $00,$00,$00,$0E,$11,$20,$60,$AE ; #UDGTABLE {
 $95DC DEFB $00,$00,$01,$03,$87,$CF,$FE,$3C ; #UDGS$04,$02,$04(#FORMAT(player-swimming-{filename}*))(#UDG(#PC+$08*($04*$y+$x),attr=$0E)(*player-swimming)player-swimming)
 $95E4 DEFB $00,$7E,$F8,$C0,$80,$00,$00,$00 ; } UDGTABLE#
 $95EC DEFB $CF,$57,$5F,$3E,$08,$00,$00,$00 ;
 $95F4 DEFB $BB,$AA,$6A,$2A,$1F,$00,$00,$00 ;
 $95FC DEFB $CC,$82,$81,$F1,$88,$04,$02,$01 ;
 $9604 DEFB $00,$00,$00,$00,$80,$80,$40,$F8 ; }
 $960C DEFB $03,$01,$00,$00,$00,$38,$44,$83 ; {#LET(filename=#EVAL($01+(#PC-$958C)/$40))
 $9614 DEFB $E0,$10,$88,$48,$27,$26,$66,$AA ; #UDGTABLE {
 $961C DEFB $00,$00,$00,$00,$00,$83,$CF,$BF ; #UDGS$04,$02,$04(#FORMAT(player-swimming-{filename}*))(#UDG(#PC+$08*($04*$y+$x),attr=$0E)(*player-swimming)player-swimming)
 $9624 DEFB $00,$00,$00,$3E,$78,$E0,$C0,$80 ; } UDGTABLE#
 $962C DEFB $9F,$AF,$BE,$7C,$19,$12,$24,$38 ;
 $9634 DEFB $BA,$AA,$6A,$AA,$1F,$00,$00,$00 ;
 $963C DEFB $8F,$82,$81,$F8,$84,$03,$00,$00 ;
 $9644 DEFB $00,$00,$80,$60,$10,$08,$FE,$00 ; }
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$12,$03(player-swimming)) }
; UDGTABLE#

; Graphics: Sand (Goldfish Game)
;
; See #R$CEE6.
; #UDGTABLE { #UDGS$20,$01,$04(sand)(#UDG($964C+($08*($x%$10)),attr=$0E)(*sand)sand) } UDGTABLE#
; It's actually chosen randomly in the game (the image here is simply sequential for an example).
@label=Graphics_GoldfishGameSand
b$964C DEFB $10,$38,$5C,$F7,$FF,$FD,$DF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $9654 DEFB $18,$3C,$7A,$EF,$FB,$FF,$F7,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $965C DEFB $00,$00,$00,$C0,$F1,$7B,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $9664 DEFB $00,$00,$00,$C1,$F3,$FF,$BF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $966C DEFB $20,$30,$78,$EF,$FF,$BB,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $9674 DEFB $00,$00,$00,$87,$8F,$DF,$FE,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $967C DEFB $10,$38,$FC,$FF,$F7,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $9684 DEFB $0C,$1C,$3E,$FF,$FF,$BB,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $968C DEFB $10,$38,$5C,$F7,$FF,$FD,$DF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $9694 DEFB $18,$3C,$7A,$EF,$FB,$FF,$F7,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $969C DEFB $00,$00,$00,$C0,$F1,$7B,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $96A4 DEFB $00,$00,$00,$C1,$F3,$FF,$BF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $96AC DEFB $20,$30,$78,$EF,$FF,$BB,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $96B4 DEFB $00,$00,$00,$87,$8F,$DF,$FE,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $96BC DEFB $10,$38,$FC,$FF,$F7,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $96C4 DEFB $0C,$1C,$3E,$FF,$FF,$BB,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#

; Graphics: Dolphin (Goldfish Game)
@label=Graphics_GoldfishGameDolphin
b$96CC DEFB $00,$00,$00,$00,$80,$C1,$FF,$7F ; {#LET(filename=#EVAL($01+(#PC-$96CC)/$40))
 $96D4 DEFB $00,$00,$00,$00,$01,$FF,$FF,$FF ; #UDGTABLE {
 $96DC DEFB $20,$30,$38,$1C,$FF,$FF,$FF,$FF ; #UDGS$04,$02,$04(#FORMAT(dolphin-{filename}*))(#UDG(#PC+$08*($04*$y+$x),attr=$0D)(*dolphin)dolphin)
 $96E4 DEFB $00,$00,$00,$00,$FC,$FE,$EF,$FF ; } UDGTABLE#
 $96EC DEFB $7F,$FF,$C3,$80,$00,$00,$00,$00 ;
 $96F4 DEFB $FF,$FF,$FF,$1F,$03,$00,$00,$00 ;
 $96FC DEFB $FF,$FF,$FF,$FF,$FF,$03,$06,$00 ;
 $9704 DEFB $FE,$FC,$F0,$E0,$80,$00,$00,$00 ; }
 $970C DEFB $08,$18,$18,$3F,$7F,$EF,$87,$03 ; {#LET(filename=#EVAL($01+(#PC-$96CC)/$40))
 $9714 DEFB $00,$00,$00,$00,$C0,$F0,$FF,$FF ; #UDGTABLE {
 $971C DEFB $00,$20,$30,$38,$1C,$3F,$FF,$FF ; #UDGS$04,$02,$04(#FORMAT(dolphin-{filename}*))(#UDG(#PC+$08*($04*$y+$x),attr=$0D)(*dolphin)dolphin)
 $9724 DEFB $00,$00,$00,$00,$00,$FC,$FE,$EF ; } UDGTABLE#
 $972C DEFB $01,$00,$00,$00,$00,$00,$00,$00 ;
 $9734 DEFB $FF,$FF,$7F,$3F,$1F,$03,$00,$00 ;
 $973C DEFB $FF,$FF,$FF,$FF,$FF,$FF,$03,$06 ;
 $9744 DEFB $FF,$FE,$FC,$F0,$E0,$80,$00,$00 ; }
 $974C DEFB $00,$00,$00,$00,$80,$C1,$FF,$7F ; {#LET(filename=#EVAL($01+(#PC-$96CC)/$40))
 $9754 DEFB $00,$00,$00,$00,$01,$FF,$FF,$FF ; #UDGTABLE {
 $975C DEFB $20,$30,$38,$1C,$FF,$FF,$FF,$FF ; #UDGS$04,$02,$04(#FORMAT(dolphin-{filename}*))(#UDG(#PC+$08*($04*$y+$x),attr=$0D)(*dolphin)dolphin)
 $9764 DEFB $00,$00,$00,$00,$FC,$FE,$EF,$FF ; } UDGTABLE#
 $976C DEFB $7F,$7F,$C0,$80,$00,$00,$00,$00 ;
 $9774 DEFB $FF,$FF,$FF,$1F,$03,$00,$00,$00 ;
 $977C DEFB $FF,$FE,$FF,$FF,$FF,$03,$06,$00 ;
 $9784 DEFB $FE,$00,$F0,$E0,$80,$00,$00,$00 ; }
 $978C DEFB $00,$00,$00,$00,$00,$07,$0F,$1F ; {#LET(filename=#EVAL($01+(#PC-$96CC)/$40))
 $9794 DEFB $00,$00,$00,$1F,$FF,$FF,$FF,$FF ; #UDGTABLE {
 $979C DEFB $30,$38,$1C,$FF,$FF,$FF,$FF,$FF ; #UDGS$04,$02,$04(#FORMAT(dolphin-{filename}*))(#UDG(#PC+$08*($04*$y+$x),attr=$0D)(*dolphin)dolphin)
 $97A4 DEFB $00,$00,$00,$FC,$FE,$EF,$FF,$FE ; } UDGTABLE#
 $97AC DEFB $3F,$FF,$FC,$38,$18,$18,$10,$00 ;
 $97B4 DEFB $FF,$FF,$1F,$03,$00,$00,$00,$00 ;
 $97BC DEFB $FF,$FF,$FF,$FF,$03,$06,$00,$00 ;
 $97C4 DEFB $00,$F0,$E0,$80,$00,$00,$00,$00 ; }
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$04(dolphin)) }
; UDGTABLE#

; Graphics: Sea Snake (Goldfish Game)
@label=Graphics_GoldfishGameSeaSnake
b$97CC DEFB $00,$00,$00,$00,$00,$3E,$FF,$E3 ; {#LET(filename=#EVAL($01+(#PC-$97CC)/$30))
 $97D4 DEFB $00,$00,$00,$00,$00,$00,$C1,$E3 ; #UDGTABLE {
 $97DC DEFB $00,$00,$1C,$3E,$77,$E3,$C1,$80 ; #UDGS$03,$02,$04(#FORMAT(sea-snake-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0A)(*sea-snake)sea-snake)
 $97E4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; } UDGTABLE#
 $97EC DEFB $77,$3E,$1C,$00,$00,$00,$00,$00 ;
 $97F4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $97FC DEFB $00,$00,$70,$F8,$9C,$0E,$07,$03 ; {#LET(filename=#EVAL($01+(#PC-$97CC)/$30))
 $9804 DEFB $00,$00,$00,$00,$00,$7C,$FF,$C7 ; #UDGTABLE {
 $980C DEFB $00,$00,$00,$00,$01,$03,$07,$8E ; #UDGS$03,$02,$04(#FORMAT(sea-snake-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0A)(*sea-snake)sea-snake)
 $9814 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; } UDGTABLE#
 $981C DEFB $01,$00,$00,$00,$00,$00,$00,$00 ;
 $9824 DEFB $DC,$F8,$70,$00,$00,$00,$00,$00 ; }
 $982C DEFB $00,$00,$01,$03,$07,$0E,$1C,$38 ; {#LET(filename=#EVAL($01+(#PC-$97CC)/$30))
 $9834 DEFB $00,$00,$C0,$E0,$70,$39,$1F,$0F ; #UDGTABLE {
 $983C DEFB $00,$00,$00,$00,$00,$F0,$FC,$1E ; #UDGS$03,$02,$04(#FORMAT(sea-snake-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0A)(*sea-snake)sea-snake)
 $9844 DEFB $70,$E0,$C0,$00,$00,$00,$00,$00 ; } UDGTABLE#
 $984C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $9854 DEFB $07,$03,$01,$00,$00,$00,$00,$00 ; }
 $985C DEFB $00,$00,$00,$00,$00,$E0,$F0,$78 ; {#LET(filename=#EVAL($01+(#PC-$97CC)/$30))
 $9864 DEFB $00,$00,$07,$0F,$1D,$38,$70,$E0 ; #UDGTABLE {
 $986C DEFB $00,$00,$00,$80,$C0,$E7,$7F,$3C ; #UDGS$03,$02,$04(#FORMAT(sea-snake-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0A)(*sea-snake)sea-snake)
 $9874 DEFB $1D,$0F,$07,$00,$00,$00,$00,$00 ; } UDGTABLE#
 $987C DEFB $C0,$80,$00,$00,$00,$00,$00,$00 ;
 $9884 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$04(sea-snake)) }
; UDGTABLE#

; Graphics: Marlin (Goldfish Game)
@label=Graphics_GoldfishGameMarlin
b$988C DEFB $00,$00,$00,$40,$60,$73,$7F,$3F ; {#LET(filename=#EVAL($01+(#PC-$988C)/$30))
 $9894 DEFB $78,$24,$12,$1F,$FF,$FF,$FF,$FF ; #UDGTABLE {
 $989C DEFB $00,$00,$00,$00,$C0,$F0,$FC,$BE ; #UDGS$03,$02,$04(#FORMAT(marlin-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0B)(*marlin)marlin)
 $98A4 DEFB $7F,$71,$60,$40,$00,$00,$00,$00 ; } UDGTABLE#
 $98AC DEFB $FF,$FF,$7F,$1F,$25,$4A,$FC,$00 ;
 $98B4 DEFB $FC,$F0,$E0,$80,$00,$00,$00,$00 ; }
 $98BC DEFB $00,$00,$00,$40,$60,$73,$7F,$3F ; {#LET(filename=#EVAL($01+(#PC-$988C)/$30))
 $98C4 DEFB $78,$24,$12,$1F,$FF,$FF,$FF,$FF ; #UDGTABLE {
 $98CC DEFB $00,$00,$00,$00,$C0,$F0,$FC,$BE ; #UDGS$03,$02,$04(#FORMAT(marlin-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0B)(*marlin)marlin)
 $98D4 DEFB $7F,$71,$60,$40,$00,$00,$00,$00 ; } UDGTABLE#
 $98DC DEFB $FF,$FF,$7F,$1F,$25,$4A,$FC,$00 ;
 $98E4 DEFB $FC,$F0,$E0,$80,$00,$00,$00,$00 ; }
 $98EC DEFB $00,$00,$00,$40,$60,$73,$7F,$3F ; {#LET(filename=#EVAL($01+(#PC-$988C)/$30))
 $98F4 DEFB $78,$24,$12,$1F,$FF,$FF,$FF,$FF ; #UDGTABLE {
 $98FC DEFB $00,$00,$00,$00,$C0,$F0,$FC,$BE ; #UDGS$03,$02,$04(#FORMAT(marlin-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0B)(*marlin)marlin)
 $9904 DEFB $7F,$71,$60,$40,$00,$00,$00,$00 ; } UDGTABLE#
 $990C DEFB $FF,$FF,$7F,$1F,$25,$4A,$FC,$00 ;
 $9914 DEFB $FC,$F0,$E0,$80,$00,$00,$00,$00 ; }
 $991C DEFB $00,$00,$00,$40,$60,$73,$7F,$3F ; {#LET(filename=#EVAL($01+(#PC-$988C)/$30))
 $9924 DEFB $78,$24,$12,$1F,$FF,$FF,$FF,$FF ; #UDGTABLE {
 $992C DEFB $00,$00,$00,$00,$C0,$F0,$FC,$BE ; #UDGS$03,$02,$04(#FORMAT(marlin-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0B)(*marlin)marlin)
 $9934 DEFB $7F,$71,$60,$40,$00,$00,$00,$00 ; } UDGTABLE#
 $993C DEFB $FF,$FF,$7F,$1F,$25,$4A,$FC,$00 ;
 $9944 DEFB $FC,$F0,$E0,$80,$00,$00,$00,$00 ; }
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$04(marlin)) }
; UDGTABLE#

; Graphics: Squid (Goldfish Game)
@label=Graphics_GoldfishGameSquid
b$994C DEFB $03,$07,$05,$07,$03,$03,$05,$09 ; {#LET(filename=#EVAL($01+(#PC-$994C)/$20))
 $9954 DEFB $C0,$E0,$60,$E0,$C0,$C0,$C0,$A0 ; #UDGTABLE {
 $995C DEFB $11,$21,$42,$42,$44,$88,$88,$10 ; #UDGS$02,$02,$04(#FORMAT(squid-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0C)(*squid)squid)
 $9964 DEFB $A0,$A0,$A0,$90,$48,$44,$24,$20 ; } UDGTABLE#}
 $996C DEFB $03,$07,$06,$07,$03,$03,$03,$07 ; {#LET(filename=#EVAL($01+(#PC-$994C)/$20))
 $9974 DEFB $C0,$E0,$A0,$E0,$C0,$C0,$A0,$90 ; #UDGTABLE {
 $997C DEFB $0A,$14,$24,$24,$E4,$08,$08,$08 ; #UDGS$02,$02,$04(#FORMAT(squid-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0C)(*squid)squid)
 $9984 DEFB $88,$84,$42,$22,$22,$12,$0A,$09 ; } UDGTABLE#}
 $998C DEFB $03,$07,$05,$07,$03,$03,$03,$07 ; {#LET(filename=#EVAL($01+(#PC-$994C)/$20))
 $9994 DEFB $C0,$E0,$60,$E0,$C0,$C0,$C0,$C0 ; #UDGTABLE {
 $999C DEFB $06,$06,$0A,$12,$22,$22,$22,$42 ; #UDGS$02,$02,$04(#FORMAT(squid-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0C)(*squid)squid)
 $99A4 DEFB $A0,$A0,$A0,$A0,$50,$28,$18,$18 ; } UDGTABLE#}
 $99AC DEFB $03,$07,$06,$07,$03,$03,$03,$03 ; {#LET(filename=#EVAL($01+(#PC-$994C)/$20))
 $99B4 DEFB $C0,$E0,$A0,$E0,$C0,$C0,$C0,$C0 ; #UDGTABLE {
 $99BC DEFB $05,$05,$05,$05,$09,$09,$09,$09 ; #UDGS$02,$02,$04(#FORMAT(squid-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0C)(*squid)squid)
 $99C4 DEFB $40,$60,$50,$50,$50,$48,$20,$20 ; } UDGTABLE#}
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$04(squid)) }
; UDGTABLE#

; Graphics: Goldfish (Goldfish Game)
@label=Graphics_GoldfishGameFish
b$99CC DEFB $00,$00,$00,$5C,$3E,$5C,$00,$00 ; #LET(filename=#EVAL($01+(#PC-$99CC)/$08))
                                            ; #UDGTABLE {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(goldfish-{filename}*))
                                            ; } UDGTABLE#
 $99D4 DEFB $00,$2E,$1F,$2E,$00,$00,$00,$00 ; #LET(filename=#EVAL($01+(#PC-$99CC)/$08))
                                            ; #UDGTABLE {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(goldfish-{filename}*))
                                            ; } UDGTABLE#
 $99DC DEFB $5C,$3E,$5C,$00,$00,$00,$00,$00 ; #LET(filename=#EVAL($01+(#PC-$99CC)/$08))
                                            ; #UDGTABLE {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(goldfish-{filename}*))
                                            ; } UDGTABLE#
 $99E4 DEFB $00,$2E,$1F,$2E,$00,$00,$00,$00 ; #LET(filename=#EVAL($01+(#PC-$99CC)/$08))
                                            ; #UDGTABLE {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(goldfish-{filename}*))
                                            ; } UDGTABLE#
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$04(goldfish)) }
; UDGTABLE#

; Graphics: Boat 1 (Goldfish Game)
;
; See #R$D870.
; #UDGTABLE { #UDGS$0C,$08,$04(boat-01)(#UDG($99EC+$08*($0C*$y+$x))(*boat)boat) } UDGTABLE#
@label=Graphics_GoldfishGameBoat1
b$99EC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $99F4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $99FC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A04 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A0C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A14 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A1C DEFB $00,$00,$00,$00,$00,$00,$03,$0E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A24 DEFB $30,$30,$30,$38,$74,$BA,$35,$32 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A2C DEFB $00,$00,$00,$00,$00,$00,$00,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A34 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A3C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A44 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A4C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A54 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A5C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A64 DEFB $00,$00,$00,$00,$00,$03,$00,$01 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A6C DEFB $30,$7C,$73,$70,$B0,$FF,$B0,$30 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A74 DEFB $00,$00,$07,$F8,$00,$80,$01,$02 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A7C DEFB $34,$CF,$10,$20,$40,$80,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A84 DEFB $31,$FF,$30,$30,$30,$30,$30,$30 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A8C DEFB $60,$98,$46,$21,$10,$08,$04,$02 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A94 DEFB $00,$00,$00,$83,$7C,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A9C DEFB $30,$30,$F0,$30,$30,$30,$30,$30 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AA4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AAC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AB4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9ABC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AC4 DEFB $01,$01,$02,$03,$03,$05,$05,$04 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9ACC DEFB $30,$30,$30,$FF,$FA,$FA,$F7,$F6 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AD4 DEFB $04,$08,$10,$20,$40,$87,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9ADC DEFB $03,$01,$01,$01,$00,$FF,$02,$04 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AE4 DEFB $FF,$FA,$FA,$F7,$F4,$FF,$31,$30 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AEC DEFB $01,$00,$00,$00,$80,$FF,$20,$90 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AF4 DEFB $03,$80,$40,$20,$10,$08,$04,$02 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AFC DEFB $FF,$30,$30,$30,$30,$30,$30,$30 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B04 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B0C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B14 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B1C DEFB $03,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B24 DEFB $FF,$08,$10,$10,$20,$20,$40,$40 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B2C DEFB $FF,$3A,$79,$78,$78,$B4,$B4,$FC ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B34 DEFB $FF,$E0,$18,$87,$40,$20,$10,$08 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B3C DEFB $08,$30,$C0,$00,$00,$00,$00,$01 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B44 DEFB $30,$78,$78,$78,$B4,$B4,$FC,$32 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B4C DEFB $48,$26,$13,$08,$04,$02,$01,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B54 DEFB $03,$01,$FF,$63,$1C,$00,$01,$82 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B5C DEFB $FF,$FA,$FB,$F6,$F4,$EC,$78,$B4 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B64 DEFB $00,$00,$FF,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B6C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B74 DEFB $00,$00,$00,$00,$00,$00,$01,$06 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B7C DEFB $00,$01,$02,$04,$18,$60,$80,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B84 DEFB $81,$01,$01,$02,$02,$03,$04,$04 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B8C DEFB $32,$32,$FE,$31,$31,$FF,$30,$30 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B94 DEFB $04,$02,$01,$00,$00,$00,$80,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B9C DEFB $01,$01,$02,$82,$43,$24,$14,$0F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BA4 DEFB $32,$FE,$31,$31,$FF,$30,$30,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BAC DEFB $00,$00,$00,$00,$00,$80,$81,$82 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BB4 DEFB $44,$29,$11,$29,$45,$82,$03,$03 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BBC DEFB $B6,$FF,$32,$32,$FE,$31,$31,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BC4 DEFB $00,$00,$80,$40,$20,$10,$08,$84 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BCC DEFB $00,$01,$FE,$78,$1F,$07,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BD4 DEFB $38,$C0,$00,$00,$80,$F8,$7F,$07 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BDC DEFB $00,$00,$00,$00,$00,$00,$80,$F8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BE4 DEFB $07,$08,$08,$0F,$10,$10,$1F,$20 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BEC DEFB $FF,$30,$30,$FF,$31,$31,$FF,$31 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BF4 DEFB $80,$40,$40,$40,$FF,$CF,$B6,$B6 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BFC DEFB $0C,$0A,$0F,$10,$F8,$3F,$D8,$D8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C04 DEFB $30,$30,$FF,$B0,$70,$FF,$31,$3A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C0C DEFB $44,$48,$D0,$20,$60,$E0,$11,$13 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C14 DEFB $07,$0F,$1F,$3F,$7F,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C1C DEFB $FF,$FF,$C4,$C4,$C4,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C24 DEFB $FF,$FF,$47,$47,$47,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C2C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C34 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C3C DEFB $FF,$7F,$3F,$3F,$1F,$1F,$0F,$07 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C44 DEFB $FF,$FF,$FF,$FF,$CF,$CF,$F7,$FB ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C4C DEFB $FF,$FF,$FF,$C3,$DB,$DB,$C3,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C54 DEFB $CF,$FF,$FF,$0C,$6D,$6D,$0C,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C5C DEFB $3F,$FF,$FF,$30,$B6,$B6,$30,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C64 DEFB $FF,$FF,$FF,$C3,$DB,$DB,$C3,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C6C DEFB $FF,$FF,$FF,$0C,$6D,$6D,$0C,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C74 DEFB $FF,$FF,$FF,$3F,$BF,$BF,$3F,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C7C DEFB $C0,$FF,$C0,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C84 DEFB $06,$FE,$06,$FE,$FE,$FE,$80,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C8C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C94 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C9C DEFB $03,$01,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CA4 DEFB $FD,$FE,$F8,$3F,$1F,$07,$03,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CAC DEFB $7F,$7F,$7F,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CB4 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CBC DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CC4 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CCC DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CD4 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CDC DEFB $FF,$FF,$FE,$FE,$FC,$FC,$F8,$F8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CE4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#

; Graphics: Boat 2 (Goldfish Game)
;
; See #R$D870.
; #UDGTABLE { #UDGS$0C,$08,$04(boat-02)(#UDG($9CEC+$08*($0C*$y+$x))(*boat)boat) } UDGTABLE#
@label=Graphics_GoldfishGameBoat2
b$9CEC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CF4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CFC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D04 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D0C DEFB $00,$00,$00,$00,$00,$40,$40,$78 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D14 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D1C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D24 DEFB $00,$00,$00,$20,$38,$3F,$7E,$A8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D2C DEFB $00,$00,$00,$00,$00,$80,$F8,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D34 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D3C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D44 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D4C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D54 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D5C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D64 DEFB $00,$00,$00,$00,$00,$00,$00,$01 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D6C DEFB $7F,$7C,$40,$40,$F8,$C6,$C1,$40 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D74 DEFB $80,$FC,$00,$00,$01,$0E,$F0,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D7C DEFB $01,$02,$14,$68,$93,$21,$40,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D84 DEFB $34,$2A,$25,$22,$FF,$74,$20,$20 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D8C DEFB $00,$00,$00,$C0,$30,$8C,$43,$20 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D94 DEFB $00,$00,$00,$00,$00,$01,$06,$F8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D9C DEFB $00,$00,$00,$40,$70,$FE,$77,$40 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DA4 DEFB $00,$00,$00,$00,$00,$00,$C0,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DAC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DB4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DBC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DC4 DEFB $1F,$06,$02,$02,$02,$04,$07,$07 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DCC DEFB $FF,$EC,$48,$44,$42,$41,$FE,$F4 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DD4 DEFB $01,$02,$04,$08,$10,$20,$C0,$C0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DDC DEFB $00,$00,$00,$07,$03,$03,$03,$01 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DE4 DEFB $20,$20,$20,$FE,$F4,$F4,$EE,$E9 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DEC DEFB $10,$08,$04,$02,$01,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DF4 DEFB $00,$00,$00,$07,$02,$81,$42,$24 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DFC DEFB $40,$40,$40,$FC,$E8,$40,$40,$40 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E04 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E0C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E14 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E1C DEFB $00,$00,$00,$01,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E24 DEFB $0B,$0B,$09,$FF,$1F,$2C,$20,$40 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E2C DEFB $F5,$EE,$EC,$FF,$FF,$F3,$F1,$F0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E34 DEFB $2F,$11,$08,$FE,$C2,$31,$0E,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E3C DEFB $FF,$AB,$7C,$10,$60,$80,$80,$41 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E44 DEFB $FF,$FA,$67,$60,$F0,$F0,$F0,$68 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E4C DEFB $FE,$A8,$F0,$90,$4C,$27,$12,$0C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E54 DEFB $18,$18,$24,$47,$83,$FF,$D7,$3D ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E5C DEFB $40,$40,$40,$FE,$F4,$F7,$FE,$E9 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E64 DEFB $00,$00,$00,$00,$00,$FE,$A8,$F0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E6C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E74 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E7C DEFB $00,$00,$00,$01,$02,$3F,$08,$30 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E84 DEFB $41,$81,$82,$04,$08,$FF,$D5,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E8C DEFB $E0,$60,$60,$60,$60,$FF,$FE,$F1 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E94 DEFB $40,$20,$10,$08,$04,$FF,$AD,$F0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E9C DEFB $21,$11,$0A,$06,$03,$85,$05,$87 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EA4 DEFB $68,$F8,$F4,$F4,$FC,$6B,$EA,$FE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EAC DEFB $0C,$12,$21,$40,$80,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EB4 DEFB $01,$02,$05,$89,$52,$22,$52,$8A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EBC DEFB $D8,$F0,$68,$68,$64,$64,$64,$64 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EC4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9ECC DEFB $00,$00,$00,$00,$03,$FC,$70,$1F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9ED4 DEFB $00,$01,$0E,$70,$80,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EDC DEFB $C0,$01,$02,$04,$08,$10,$20,$40 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EE4 DEFB $81,$02,$04,$08,$10,$21,$41,$81 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EEC DEFB $68,$64,$F2,$F1,$F0,$68,$68,$68 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EF4 DEFB $00,$00,$00,$00,$80,$40,$20,$10 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EFC DEFB $4A,$2A,$1F,$1D,$15,$1F,$2B,$2E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F04 DEFB $FD,$F5,$FF,$6E,$EA,$FF,$65,$E5 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F0C DEFB $01,$02,$04,$88,$90,$A0,$C0,$C0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F14 DEFB $04,$06,$09,$08,$08,$10,$10,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F1C DEFB $62,$62,$61,$E1,$61,$60,$70,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F24 DEFB $00,$00,$07,$0B,$0B,$90,$90,$FE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F2C DEFB $07,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F34 DEFB $F0,$7F,$07,$01,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F3C DEFB $81,$02,$F4,$FF,$FF,$70,$7F,$3F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F44 DEFB $02,$02,$02,$FF,$FF,$00,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F4C DEFB $64,$64,$64,$FA,$FE,$07,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F54 DEFB $08,$04,$02,$01,$00,$81,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F5C DEFB $3F,$55,$75,$7F,$AA,$EA,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F64 DEFB $FF,$62,$76,$FF,$63,$7F,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F6C DEFB $E1,$B3,$AC,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F74 DEFB $0A,$FA,$0F,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F7C DEFB $AA,$AA,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F84 DEFB $AA,$AA,$FE,$FC,$FC,$FC,$FC,$F0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F8C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F94 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F9C DEFB $3F,$1F,$0F,$07,$03,$01,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FA4 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$7F,$3F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FAC DEFB $FF,$FF,$F9,$F9,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FB4 DEFB $FF,$FF,$E7,$E7,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FBC DEFB $FF,$FF,$9E,$9E,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FC4 DEFB $FF,$FF,$79,$79,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FCC DEFB $FF,$FF,$E7,$E7,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FD4 DEFB $FF,$F5,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FDC DEFB $FF,$55,$FF,$FE,$FE,$FC,$FC,$FC ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FE4 DEFB $C0,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#

; Graphics: Player Sprite (Goldfish Game)
;
; See #R$D4CC.
@label=Graphics_GoldfishGamePlayer
b$9FEC DEFB $30,$28,$77,$9E,$BC,$77,$04,$04 ; {#LET(filename=#EVAL($01+(#PC-$9FEC)/$10))
 $9FF4 DEFB $00,$00,$E0,$7C,$7E,$E1,$00,$00 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
 $9FFC DEFB $20,$20,$77,$FE,$BC,$77,$01,$00 ; {#LET(filename=#EVAL($01+(#PC-$9FEC)/$10))
 $A004 DEFB $00,$02,$E7,$7D,$78,$EC,$06,$83 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
 $A00C DEFB $20,$20,$77,$9E,$BC,$7F,$10,$20 ; {#LET(filename=#EVAL($01+(#PC-$9FEC)/$10))
 $A014 DEFB $00,$00,$E0,$7C,$7E,$E1,$00,$00 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
 $A01C DEFB $20,$21,$77,$9E,$BE,$77,$02,$02 ; {#LET(filename=#EVAL($01+(#PC-$9FEC)/$10))
 $A024 DEFB $00,$82,$E7,$7D,$78,$EC,$06,$03 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
 $A02C DEFB $20,$21,$77,$9E,$BD,$77,$00,$00 ; {#LET(filename=#EVAL($01+(#PC-$9FEC)/$10))
 $A034 DEFB $00,$00,$E0,$7C,$7E,$E1,$80,$40 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
 $A03C DEFB $30,$28,$77,$9E,$BD,$77,$01,$00 ; {#LET(filename=#EVAL($01+(#PC-$9FEC)/$10))
 $A044 DEFB $00,$02,$E7,$7D,$78,$EC,$06,$03 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
 $A04C DEFB $20,$20,$77,$9F,$BC,$77,$00,$00 ; {#LET(filename=#EVAL($01+(#PC-$9FEC)/$10))
 $A054 DEFB $00,$00,$E0,$FC,$7E,$E1,$00,$00 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
 $A05C DEFB $3C,$24,$77,$9C,$BC,$7F,$10,$20 ; {#LET(filename=#EVAL($01+(#PC-$9FEC)/$10))
 $A064 DEFB $00,$02,$E7,$7D,$78,$EC,$06,$03 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$08(swimmer)) }
; UDGTABLE#

; Graphics: Mask Sprite
@label=Graphics_MaskSprite
b$A06C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A074 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A07C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A084 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A08C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A094 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A09C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0A4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0AC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0B4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0BC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0C4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0CC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0D4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0DC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0E4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0EC DEFB $5A,$2C,$4D,$55,$50,$0D,$4A,$52
 $A0F4 DEFB $20,$42,$53,$0D,$42,$31,$3A,$0D
 $A0FC DEFB $4C,$44,$20,$41,$2C,$44,$0D,$43
 $A104 DEFB $50,$20,$28,$49,$58,$2B,$31

; Data block at A10B
b$A10B DEFB $35,$29,$0D,$4A,$52,$20,$5A,$2C
 $A113 DEFB $42,$53,$0D,$43,$50,$20,$33,$0D
 $A11B DEFB $43,$41,$4C,$4C,$20,$5A,$2C,$4D
 $A123 DEFB $55,$50,$0D,$42,$53,$3A,$0D,$52
 $A12B DEFB $45,$54,$0D,$4D,$52,$49,$3A,$0D
 $A133 DEFB $50,$55,$53,$48,$20,$42,$43,$0D
 $A13B DEFB $50,$55,$53,$48,$20,$44,$45,$0D
 $A143 DEFB $4C,$44,$20,$43,$2C,$28,$49,$58
 $A14B DEFB $2B,$31,$33,$29,$0D,$4C,$44,$20
 $A153 DEFB $42,$2C,$28,$49,$58,$2B,$31,$34
 $A15B DEFB $29,$0D,$4C,$44,$20,$44,$2C,$28
 $A163 DEFB $49,$58,$2B,$38,$29,$0D,$4C,$44
 $A16B DEFB $20

; Source Code Remnants
u$A16C DEFM "E,1"          ; #STR(#PC,$04,$03)
 $A16F DEFB $0D
 $A170 DEFM "LD A,(IX+15)" ; #STR(#PC,$04,$0C)
 $A17C DEFB $0D
 $A17D DEFM "CP 3"         ; #STR(#PC,$04,$04)
 $A181 DEFB $0D
 $A182 DEFM "JR Z,NID1"    ; #STR(#PC,$04,$09)
 $A18B DEFB $0D
 $A18C DEFM "INC D"        ; #STR(#PC,$04,$05)
 $A191 DEFB $0D
 $A192 DEFM "NID1:"        ; #STR(#PC,$04,$05)
 $A197 DEFB $0D
 $A198 DEFM "CALL PUTSQ"   ; #STR(#PC,$04,$0A)
 $A1A2 DEFB $0D
 $A1A3 DEFM "POP DE"       ; #STR(#PC,$04,$06)
 $A1A9 DEFB $0D
 $A1AA DEFM "POP BC"       ; #STR(#PC,$04,$06)
 $A1B0 DEFB $0D
 $A1B1 DEFM "RET"          ; #STR(#PC,$04,$03)
 $A1B4 DEFB $0D
 $A1B5 DEFM "MLE:"         ; #STR(#PC,$04,$04)
 $A1B9 DEFB $0D
 $A1BA DEFM "PUSH BC"      ; #STR(#PC,$04,$07)
 $A1C1 DEFB $0D
 $A1C2 DEFM "PU"           ; #STR(#PC,$04,$02)

; Buffer: Room
@label=BufferRoom
g$A1C4 DEFB $D9,$E5,$D9,$AF,$32,$6B,$5C,$3E,$02,$CD,$01,$16,$3E,$15,$32,$D3,$5B,$3A,$D3,$5B,$FE,$15,$F5,$CC,$97,$AA,$F1,$C4,$F4,$AA,$CD,$44
 $A1E4 DEFB $AB,$CD,$00,$A9,$CD,$1E,$D7,$21,$00,$3C,$22,$36,$5C,$06,$01,$0E,$20,$CD,$D9,$0D,$3E,$10,$D7,$3E,$07,$D7,$3A,$D3,$5B,$4F,$06,$00
 $A204 DEFB $CD,$1B,$1A,$18,$DF,$00,$3A,$1D,$D7,$3C,$32,$1D,$D7,$32,$00,$58,$CD,$8E,$02,$7B,$FE,$FF,$C8,$FE,$20,$28,$0A,$FE,$16,$D0,$32,$D3
 $A224 DEFB $5B,$C1,$C3,$E9,$D6,$3E,$02,$32,$6B,$5C,$C1,$D9,$E1,$D9,$21,$00,$3C,$22,$36,$5C,$C9,$30,$0D,$44,$42,$20,$31,$38,$2C,$31,$30,$2C
 $A244 DEFB $32,$2C,$32,$2C,$37,$2C,$31,$2C,$38,$30,$0D,$44,$42,$20,$39,$2C,$31,$30,$2C,$32,$2C,$32,$2C,$36,$2C,$31,$2C,$38,$30,$0D,$44,$42
 $A264 DEFB $20,$32,$35,$2C,$35,$2C,$32,$2C,$32,$2C,$35,$2C,$31,$2C,$38,$30,$0D,$44,$42,$20,$31,$30,$2C,$35,$2C,$32,$2C,$32,$2C,$37,$2C,$31
 $A284 DEFB $2C,$38,$30,$0D,$44,$42,$20,$32,$35,$35,$0D,$3B,$42,$44,$41,$54,$38,$0D,$44,$42,$20,$32,$30,$2C,$37,$2C,$31,$30,$34,$2C,$32,$0D
 $A2A4 DEFB $44,$42,$20,$32,$35,$35,$0D,$3B,$4C,$49,$44,$41,$54,$38,$0D,$44,$42,$20,$32,$35,$35,$0D,$3B,$54,$44,$44,$41,$54,$38,$0D,$44,$42
 $A2C4 DEFB $20,$32,$35,$35,$0D,$3B,$43,$4F,$4C,$44,$41,$54,$37,$0D,$44,$42,$20,$36,$2C,$36,$2C,$30,$2C,$36,$2C,$31,$2C,$30,$2C,$35,$2C,$32
 $A2E4 DEFB $35,$35,$0D,$3B,$44,$4B,$44,$41,$54,$37,$0D,$44,$42,$20,$33,$33,$2C,$32,$33,$2C,$31,$36,$2C,$33,$33,$2C,$31,$38,$2C,$31,$36,$0D
 $A304 DEFB $44,$42,$20,$33,$33,$2C,$31,$33,$2C,$31,$36,$2C,$33,$33,$2C,$38,$2C,$31,$36,$0D,$44,$42,$20,$33,$33,$2C,$33,$2C,$31,$36,$2C,$32
 $A324 DEFB $35,$35,$0D,$3B,$45,$4F,$44,$41,$54,$37,$0D,$44,$42,$20,$34,$2C,$32,$32,$2C,$34,$2C,$31,$37,$0D,$44,$42,$20,$32,$34,$2C,$31,$37
 $A344 DEFB $2C,$34,$2C,$32,$30,$0D,$44,$42,$20,$33,$30,$2C,$31,$32,$2C,$36,$2C,$31,$0D,$44,$42,$20,$32,$35,$35,$0D,$3B,$4C,$44,$41,$54,$37
 $A364 DEFB $0D,$44,$42,$20,$31,$33,$2C,$31,$38,$2C,$32,$31,$2C,$31,$33,$2C,$33,$32,$2C,$38,$2C,$32,$35,$35,$0D,$3B,$53,$44,$44,$41,$54,$37
 $A384 DEFB $0D,$44,$42,$20,$32,$36,$2C,$32,$33,$2C,$33,$32,$2C,$31,$36,$2C,$31,$2C,$33,$0D,$44,$42,$20,$32,$36,$2C,$31,$38,$2C,$33,$2C,$36
 $A3A4 DEFB $2C,$32,$2C,$33,$0D,$44,$42,$20,$38,$2C,$31,$38,$2C,$32,$34,$2C,$32,$31,$2C,$33,$2C,$33,$0D,$44,$42,$20,$31,$36,$2C,$31,$33,$2C
 $A3C4 DEFB $31,$30,$2C,$36,$2C,$34,$2C,$33,$0D,$44,$42,$20,$31,$36,$2C,$38,$2C,$31,$38,$2C,$31,$31,$2C,$35,$2C,$33,$0D,$44,$42,$20,$38,$2C
 $A3E4 DEFB $38,$2C,$33,$2C,$31,$31,$2C,$36,$2C,$33,$0D,$44,$42,$20,$32,$35,$35,$0D,$3B,$50,$48,$44,$41,$54,$0D,$44,$42,$20,$32,$35,$35,$0D
 $A404 DEFB $3B,$4F,$50,$53,$54,$37,$0D,$44,$42,$20,$31,$32,$2C,$31,$36,$2C,$33,$2C,$33,$2C,$32,$35,$35,$2C,$30,$2C,$33,$32,$2C,$32,$2C,$33
 $A424 DEFB $2C,$36,$2C,$31,$0D,$44,$42,$20,$33,$2C,$30,$2C,$31,$32,$2C,$31,$36,$2C,$33,$0D,$44,$42,$20,$32,$35,$35,$0D,$3B,$54,$44,$41,$54
 $A444 DEFB $37,$0D,$44,$42,$20,$33,$31,$2C,$32,$30,$2C,$32,$2C,$32,$2C,$37,$2C,$31,$2C,$31,$30,$34,$0D,$44,$42,$20,$33,$30,$2C,$31,$35,$2C
 $A464 DEFB $32,$2C,$32,$2C,$35,$2C,$31,$2C,$38,$38,$0D,$44,$42,$20,$36,$2C,$31,$35,$2C,$32,$2C,$32,$2C,$35,$2C,$31,$2C,$38,$38,$0D,$44,$42
 $A484 DEFB $20,$31,$32,$2C,$31,$30,$2C,$32,$2C,$32,$2C,$35,$2C,$31,$2C,$38,$38,$0D,$44,$42,$20,$37,$2C,$31,$30,$2C,$32,$2C,$32,$2C,$36,$2C
 $A4A4 DEFB $31,$2C,$39,$32,$0D,$44,$42,$20,$31,$33,$2C,$35,$2C,$32,$2C,$32,$2C,$36,$2C,$31,$2C,$38,$30,$0D,$44,$42,$20,$36,$2C,$35,$2C,$32
 $A4C4 DEFB $2C,$32,$2C,$37,$2C,$31,$2C,$38,$34,$0D,$44,$42,$20,$32,$35,$35,$0D,$3B,$42,$44,$41,$54,$37,$0D,$44,$42,$20,$32,$33,$2C,$37,$2C

; Buffer: Room Attributes
@label=BufferRoomAttributes
g$A4E4 DEFB $35,$36,$2C,$32,$0D,$44,$42,$20,$32,$39,$2C,$37,$2C,$38,$30,$2C,$32,$0D,$44,$42,$20,$32,$33,$2C,$32,$32,$2C,$38,$30,$2C,$34,$0D
 $A504 DEFB $44,$42,$20,$31,$37,$2C,$32,$32,$2C,$31,$30,$34,$2C,$34,$0D,$44,$42,$20,$31,$31,$2C,$32,$32,$2C,$38,$30,$2C,$34,$0D,$44,$42,$20
 $A524 DEFB $32,$35,$35,$0D,$3B,$4C,$49,$44,$41,$54,$37,$0D,$44,$42,$20,$32,$35,$35,$0D,$3B,$54,$44,$44,$41,$54,$37,$0D,$44,$42,$20,$32,$35
 $A544 DEFB $35,$0D,$3B,$43,$4F,$4C,$44,$41,$54,$36,$0D,$44,$42,$20,$37,$2C,$37,$2C,$30,$2C,$35,$2C,$30,$2C,$31,$2C,$34,$2C,$32,$35,$35,$0D
 $A564 DEFB $3B,$44,$4B,$44,$41,$54,$36,$0D,$44,$42,$20,$33,$33,$2C,$32,$33,$2C,$32,$2C,$31,$39,$2C,$32,$33,$2C,$39,$0D,$44,$42,$20,$31,$35
 $A584 DEFB $2C,$31,$38,$2C,$37,$2C,$31,$35,$2C,$31,$33,$2C,$37,$0D,$44,$42,$20,$31,$35,$2C,$38,$2C,$37,$2C,$33,$33,$2C,$33,$2C,$31,$36,$0D
 $A5A4 DEFB $44,$42,$20,$32,$39,$2C,$31,$33,$2C,$35,$2C,$32,$35,$35,$0D,$3B,$45,$4F,$44,$41,$54,$36,$3A,$0D,$44,$42,$20,$32,$36,$2C,$31,$37
 $A5C4 DEFB $2C,$34,$2C,$31,$32,$0D,$44,$42,$20,$31,$35,$2C,$31,$37,$2C,$34,$2C,$34,$0D,$44,$42,$20,$31,$35,$2C,$37,$2C,$34,$2C,$31,$36,$0D
 $A5E4 DEFB $44,$42,$20,$32,$35,$35,$0D,$3B,$4C,$44,$41,$54,$36,$0D,$44,$42,$20,$34,$2C,$31,$38,$2C,$36,$2C,$31,$33,$2C,$31,$31,$2C,$38,$2C
 $A604 DEFB $32,$35,$35,$0D,$3B,$53,$44,$44,$41,$54,$36,$0D,$44,$42,$20,$31,$30,$2C,$32,$33,$2C,$31,$31,$2C,$31,$36,$2C,$31,$2C,$33,$0D,$44
 $A624 DEFB $42,$20,$38,$2C,$31,$33,$2C,$33,$2C,$36,$2C,$32,$2C,$33,$0D,$44,$42,$20,$38,$2C,$38,$2C,$31,$34,$2C,$31,$31,$2C,$33,$2C,$33,$2C
 $A644 DEFB $32,$35,$35,$0D,$3B,$50,$48,$44,$41,$54,$36,$0D,$44,$42,$20,$32,$35,$35,$0D,$3B,$4F,$50,$53,$54,$36,$0D,$44,$42,$20,$31,$39,$2C
 $A664 DEFB $36,$2C,$33,$2C,$33,$2C,$32,$35,$35,$2C,$30,$2C,$33,$32,$2C,$32,$2C,$33,$2C,$37,$2C,$31,$0D,$44,$42,$20,$33,$2C,$30,$2C,$31,$39
 $A684 DEFB $2C,$36,$2C,$33,$0D,$44,$42,$20,$32,$35,$35,$0D,$3B,$54,$44,$41,$54,$36,$0D,$44,$42,$20,$31,$34,$2C,$32,$30,$2C,$32,$2C,$32,$2C
 $A6A4 DEFB $32,$2C,$31,$2C,$31,$30,$30,$0D,$44,$42,$20,$34,$2C,$32,$30,$2C,$32,$2C,$32,$2C,$32,$2C,$31,$2C,$31,$30,$30,$0D,$44,$42,$20,$32
 $A6C4 DEFB $33,$2C,$31,$35,$2C,$32,$2C,$32,$2C,$36,$2C,$31,$2C,$31,$31,$36,$0D,$44,$42,$20,$34,$2C,$31,$30,$2C,$32,$2C,$32,$2C,$35,$2C,$31
 $A6E4 DEFB $2C,$31,$30,$38,$0D,$44,$42,$20,$36,$2C,$35,$2C,$32,$2C,$32,$2C,$37,$2C,$31,$2C,$31,$30,$34,$0D,$44,$42,$20,$32,$35,$35,$0D,$3B
 $A704 DEFB $42,$44,$41,$54,$36,$0D,$44,$42,$20,$33,$33,$2C,$37,$2C,$33,$32,$2C,$32,$0D,$44,$42,$20,$32,$37,$2C,$37,$2C,$33,$32,$2C,$32,$0D
 $A724 DEFB $44,$42,$20,$32,$31,$2C,$37,$2C,$33,$32,$2C,$32,$0D,$44,$42,$20,$32,$35,$35,$0D,$3B,$4C,$49,$44,$41,$54,$36,$0D,$44,$42,$20,$32
 $A744 DEFB $35,$35,$0D,$3B,$54,$44,$44,$41,$54,$36,$0D,$44,$42,$20,$32,$35,$35,$0D,$3B,$43,$4F,$4C,$44,$41,$54,$35,$0D,$44,$42,$20,$36,$2C
 $A764 DEFB $36,$2C,$30,$2C,$36,$2C,$30,$2C,$31,$2C,$34,$2C,$32,$35,$35,$0D,$3B,$44,$4B,$44,$41,$54,$35,$0D,$44,$42,$20,$33,$33,$2C,$32,$33
 $A784 DEFB $2C,$31,$36,$2C,$33,$33,$2C,$31,$38,$2C,$31,$36,$0D,$44,$42,$20,$33,$33,$2C,$31,$33,$2C,$31,$36,$2C,$33,$33,$2C,$38,$2C,$31,$36
 $A7A4 DEFB $2C,$33,$33,$2C,$33,$2C,$31,$36,$2C,$32,$35,$35,$0D,$3B,$45,$4F,$44,$41,$54,$35,$0D,$44,$42,$20,$31,$36,$2C,$32,$32,$2C,$33,$2C
 $A7C4 DEFB $31,$31,$0D,$44,$42,$20,$35,$2C,$31,$37,$2C,$33,$2C,$31,$38,$0D,$44,$42,$20,$32,$38,$2C,$37,$2C,$35,$2C,$31,$33,$2C,$32,$35,$35
 $A7E4 DEFB $0D,$3B,$4C,$44,$41,$54,$35,$0D,$44,$42,$20,$39,$2C,$31,$38,$2C,$32,$37,$2C,$31,$33,$2C,$32,$35,$2C,$38,$2C,$32,$35,$35,$0D,$3B

; Controller: Draw Room
;
; Used by the routine at #R$E0A9.
;
; .
;
; On a new game, the game starts with the room ID being #N$00 (which isn't a valid room ID; #R$DEBC).
; The reason is that it chooses between these two set up routines here (and corrects the starting room ID in #R$AA97).
@label=Controller_DrawRoom
c$A804 LD A,($5BD3)  ; {Call #R$AA97 if *#R$5BD3 is #N$00.
 $A807 CP $00        ;
 $A809 PUSH AF       ;
 $A80A CALL Z,$AA97  ; }
; Handle all other room IDs.
 $A80D POP AF        ; {Call #R$AAF4 if *#R$5BD3 was not equal to #N$00.
 $A80E CALL NZ,$AAF4 ; }
 $A811 CALL $AB44    ; Call #R$AB44.
 $A814 JP $A900      ; Jump to #R$A900.

; Print UDG
;
; Used by the routines at #R$A8AF and #R$A900.
;
; A Sprite ID
;
; Compare against the colour version #R$E6DC and the clone of it at #R$D353.
@label=PrintUDG
c$A817 EXX           ; Switch to the shadow registers.
 $A818 LD E,A        ; {#REGde'=#REGa*#N$08.
 $A819 LD D,$00      ;
 $A81B SLA E         ;
 $A81D RL D          ;
 $A81F SLA E         ;
 $A821 RL D          ;
 $A823 SLA E         ;
 $A825 RL D          ; }
 $A827 LD HL,($5C36) ; {#HTML(#REGhl'=*<a rel="noopener nofollow"
 $A82A ADD HL,DE     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>+#REGde'.)
                     ; }
 $A82B LD DE,($5C84) ; {#HTML(Increment *<a rel="noopener nofollow"
 $A82F INC DE        ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>
 $A830 LD ($5C84),DE ; by one.)}
 $A834 DEC DE        ; Decrease #REGde' by one.
; All character blocks are 1 x 8 bytes.
; .
; Copy the data from the current character set to the screen buffer.
 $A835 LD B,$08      ; #REGb'=#N$08 (byte counter).
@label=PrintUDG_Loop
*$A837 LD A,(HL)     ; #REGa=*#REGhl'.
 $A838 LD (DE),A     ; Write #REGa to *#REGde'.
 $A839 INC HL        ; Increment #REGhl' by one.
 $A83A INC D         ; Increment #REGd' by one.
 $A83B DJNZ $A837    ; Decrease counter by one and loop back to #R$A837 until
                     ; counter is zero.
 $A83D EXX           ; Switch back to the normal registers.
 $A83E RET           ; Return.

; Routine at A83F
;
; Used by the routine at #R$A900.
c$A83F PUSH AF       ; {Stash #REGaf, #REGbc, #REGde and #REGhl on the stack.
 $A840 PUSH BC       ;
 $A841 PUSH DE       ;
 $A842 PUSH HL       ; }
 $A843 DEC A         ; Decrease #REGa by one.
 $A844 LD ($BAA2),A  ; Write #REGa to *#R$BAA2.
 $A847 LD A,E        ; {Write #REGe to *#R$BAA3.
 $A848 LD ($BAA3),A  ; }
*$A84B LD A,($BAA3)  ; {#REGe=*#R$BAA3.
 $A84E LD E,A        ; }
 $A84F PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $A850 PUSH DE       ; }
 $A851 CALL $A86E    ; Call #R$A86E.
 $A854 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $A855 POP BC        ; }
*$A856 LD A,($BAA2)  ; {Increment *#R$BAA2 by one.
 $A859 INC A         ;
 $A85A LD ($BAA2),A  ; }
 $A85D CALL $A893    ; Call #R$A893.
 $A860 DEC E         ; Decrease #REGe by one.
 $A861 JR NZ,$A856   ; Jump to #R$A856 until #REGe is zero.
 $A863 DEC D         ; Decrease #REGd by one.
 $A864 JR Z,$A869    ; Jump to #R$A869 if #REGd is zero.
 $A866 DEC B         ; Decrease #REGb by one.
 $A867 JR $A84B      ; Jump to #R$A84B.
*$A869 POP HL        ; {Restore #REGhl, #REGde, #REGbc and #REGaf from the
 $A86A POP DE        ; stack.
 $A86B POP BC        ;
 $A86C POP AF        ; }
 $A86D RET           ; Return.

; Routine at A86E
;
; Used by the routines at #R$A83F and #R$A900.
c$A86E LD A,$18      ; {#REGde=(#N$18-#REGb)*#N$20.
 $A870 SUB B         ;
 $A871 LD E,A        ;
 $A872 LD D,$00      ;
 $A874 SLA E         ;
 $A876 RL D          ;
 $A878 SLA E         ;
 $A87A RL D          ;
 $A87C SLA E         ;
 $A87E RL D          ;
 $A880 SLA E         ;
 $A882 RL D          ;
 $A884 SLA E         ;
 $A886 RL D          ; }
 $A888 LD A,$21      ; {#REGhl=#N$21-#REGc.
 $A88A SUB C         ;
 $A88B LD L,A        ;
 $A88C LD H,$00      ; }
 $A88E ADD HL,DE     ; #REGhl+=#REGde.
 $A88F LD ($BAD5),HL ; Write #REGhl to *#R$BAD5.
 $A892 RET           ; Return.

; Populate Room Buffer
;
; Used by the routines at #R$A83F and #R$A900.
;
; A The value to send to the room buffer.
@label=PopulateRoomBuffer
c$A893 PUSH AF       ; {Stash #REGaf, #REGde and #REGhl on the stack.
 $A894 PUSH DE       ;
 $A895 PUSH HL       ; }
; Update *#R$BAD5 by one.
 $A896 LD HL,($BAD5) ; #REGhl=*#R$BAD5.
 $A899 INC HL        ; Increment #REGhl by one.
 $A89A LD ($BAD5),HL ; Write #REGhl to *#R$BAD5.
; ...but using the initial value of *#R$BAD5...
 $A89D DEC HL        ; Decrease #REGhl by one.
 $A89E LD DE,$A1C4   ; {#REGhl+=#R$A1C4.
 $A8A1 ADD HL,DE     ; }
 $A8A2 LD (HL),A     ; Write #REGa to *#REGhl.
; Move to the room attribute buffer.
 $A8A3 LD DE,$0320   ; {#REGhl+=#N$0320 (the length of the room buffer).
 $A8A6 ADD HL,DE     ; }
 $A8A7 LD A,($5C8F)  ; {#HTML(Write *<a rel="noopener nofollow"
 $A8AA LD (HL),A     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8F.html">ATTR_T</a>
                     ; to *#REGhl.)}
; Housekeeping; restore all registers and return.
 $A8AB POP HL        ; {Restore #REGhl, #REGde and #REGaf from the stack.
 $A8AC POP DE        ;
 $A8AD POP AF        ; }
 $A8AE RET           ; Return.

; Routine at A8AF
;
; Used by the routine at #R$A900.
c$A8AF PUSH HL       ; Stash #REGhl on the stack.
 $A8B0 DEC A         ; Decrease #REGa by one.
 $A8B1 LD ($BAA2),A  ; Write #REGa to *#R$BAA2.
 $A8B4 LD A,E        ; {Write #REGe to *#R$BAA3.
 $A8B5 LD ($BAA3),A  ; }
*$A8B8 LD A,($BAA3)  ; {#REGe=*#R$BAA3.
 $A8BB LD E,A        ; }
 $A8BC PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $A8BD PUSH DE       ; }
 $A8BE CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $A8C1 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $A8C2 POP BC        ; }
*$A8C3 LD A,($BAA2)  ; {Increment *#R$BAA2 by one.
 $A8C6 INC A         ;
 $A8C7 LD ($BAA2),A  ; }
 $A8CA CALL $A817    ; Call #R$A817.
 $A8CD DEC E         ; Decrease #REGe by one.
 $A8CE JR NZ,$A8C3   ; Jump to #R$A8C3 until #REGe is zero.
 $A8D0 DEC D         ; Decrease #REGd by one.
 $A8D1 JR Z,$A8D6    ; Jump to #R$A8D6 if #REGd is zero.
 $A8D3 DEC B         ; Decrease #REGb by one.
 $A8D4 JR $A8B8      ; Jump to #R$A8B8.
*$A8D6 POP HL        ; Restore #REGhl from the stack.
 $A8D7 RET           ; Return.

; Clear Room Buffer
;
; Used by the routine at #R$A900.
;
; .
;
; First off, blank the screen.
@label=ClearRoomBuffer
c$A8D8 LD B,$18      ; {#HTML(Clear the bottom #N$18 lines using <a
 $A8DA CALL $0E44    ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                     ; }
; Clear the room buffer.
 $A8DD LD BC,$0320   ; Set a counter in #REGbc with the length of the room
                     ; buffer (#N$0320 bytes).
 $A8E0 LD HL,$A1C4   ; #REGhl=#R$A1C4.
@label=ClearRoomBuffer_Loop
*$A8E3 LD A,$00      ; {Write #N$00 to *#REGhl.
 $A8E5 LD (HL),A     ; }
 $A8E6 INC HL        ; Increment the room buffer pointer by one.
 $A8E7 DEC BC        ; Decrease the room buffer counter by one.
 $A8E8 LD A,B        ; {Jump to #R$A8E3 until the room buffer counter is zero.
 $A8E9 OR C          ;
 $A8EA JR NZ,$A8E3   ; }
; Clear the room attribute buffer. Setting each value to the INK value of the
; PAPER colour (?)
 $A8EC LD BC,$0320   ; #REGbc=Counter; the length of the room attribute buffer
                     ; (#N$0320).
@label=ClearRoomAttributeBuffer_Loop
*$A8EF LD A,($5BD1)  ; #REGa=*#R$5BD1.
 $A8F2 SLA A         ; {Convert a PAPER value (using bits 3, 4 and 5) to an INK
 $A8F4 SLA A         ; value (shifted left to bits 0, 1 and 2).
 $A8F6 SLA A         ; }
 $A8F8 LD (HL),A     ; Write #REGa to *#REGhl.
 $A8F9 INC HL        ; Increment the room attribute buffer pointer by one.
 $A8FA DEC BC        ; Decrease the room attribute buffer counter by one.
 $A8FB LD A,B        ; {Jump to #R$A8EF until the room attribute buffer counter
 $A8FC OR C          ; is zero.
 $A8FD JR NZ,$A8EF   ; }
 $A8FF RET           ; Return.

; Draw Room
;
; Used by the routine at #R$A804.
;
; .
;
; Clear the screen to BLACK.
@label=DrawRoom
c$A900 LD A,$00        ; {#HTML(Write #INK$00 to *<a rel="noopener nofollow"
 $A902 LD ($5C8D),A    ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
                       ; }
 $A905 CALL $A8D8      ; Call #R$A8D8.
 $A908 LD A,($5BD1)    ; #REGa=*#R$5BD1.
 $A90B SLA A           ; {Convert a PAPER value (using bits 3, 4 and 5) to an "INK" value
 $A90D SLA A           ; (shifted left to bits 0, 1 and 2).
 $A90F SLA A           ; }
 $A911 LD ($5C8D),A    ; #HTML(Write #REGa to *<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
 $A914 LD A,$11        ; {Set PAPER: *#R$5BD1.
 $A916 RST $10         ;
 $A917 LD A,($5BD1)    ;
 $A91A RST $10         ; }
; Set the UDG graphics pointer.
 $A91B LD HL,$8378     ; {#HTML(Write #R$8478(#N$8378) (#R$8478) to *<a
 $A91E LD ($5C36),HL   ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
; Set the attributes for drawing the room scaffolding (i.e. ceilings and
; floors).
 $A921 LD A,$10        ; {Set INK: *#R$5BCF.
 $A923 RST $10         ;
 $A924 LD A,($5BCF)    ;
 $A927 RST $10         ; }
; Fetch the address of the current room data buffer.
 $A928 LD HL,($5BE8)   ; #REGhl=*#R$5BE8.
; Draw the ceilings/ floors.
@label=DrawRoomScaffolding
*$A92B LD C,(HL)       ; {Get the screen co-ordinates where the scaffolding will begin
 $A92C INC HL          ; printing from the current room data buffer and store them in #REGbc.
 $A92D LD B,(HL)       ; }
 $A92E INC HL          ; Increment the current room data buffer by one.
 $A92F LD A,$FF        ; {Jump to #R$A952 if the terminator character has been
 $A931 CP C            ; received (#N$FF).
 $A932 JR Z,$A952      ; }
 $A934 PUSH HL         ; Stash the current room data buffer on the stack.
 $A935 CALL $A86E      ; Call #R$A86E.
; Set the co-ordinates of where we're going to PRINT AT.
 $A938 CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $A93B POP HL          ; Restore the current room data buffer from the stack.
 $A93C LD B,(HL)       ; Fetch the length counter and store it in #REGb.
 $A93D INC HL          ; Increment the current room data buffer by one.
; All scaffolding is two bytes wide, alternating between #R$8480 and #R$8488.
@label=DrawRoomScaffolding_Loop
*$A93E LD A,$21        ; #REGa=#R$8480 (#N$21).
 $A940 CALL $A893      ; Call #R$A893.
 $A943 CALL $A817      ; Call #R$A817.
 $A946 LD A,$22        ; #REGa=#R$8488 (#N$22).
 $A948 CALL $A893      ; Call #R$A893.
 $A94B CALL $A817      ; Call #R$A817.
 $A94E DJNZ $A93E      ; Decrease counter by one and loop back to #R$A93E until
                       ; counter is zero.
 $A950 JR $A92B        ; Jump to #R$A92B.
; Draw the ladders.
@label=DrawRoomLadders
*$A952 LD A,$10        ; {Set INK: *#R$5BD2.
 $A954 RST $10         ;
 $A955 LD A,($5BD2)    ;
 $A958 RST $10         ; }
 $A959 LD HL,($5BD8)   ; #REGhl=*#R$5BD8.
@label=DrawRoomLadders_Loop
*$A95C LD A,(HL)       ; #REGa=*#REGhl.
 $A95D CP $FF          ; {Jump to #R$A973 if the room data is the termination
 $A95F JR Z,$A973      ; byte (#N$FF).}
 $A961 LD C,A          ; #REGc=#REGa.
 $A962 INC HL          ; Increment #REGhl by one.
 $A963 LD B,(HL)       ; #REGb=*#REGhl.
 $A964 INC HL          ; Increment #REGhl by one.
 $A965 LD A,$2F        ; #REGa=#R$84F0 (#N$2F).
 $A967 LD E,$02        ; #REGe=Sprite width (#N$02).
 $A969 LD D,$05        ; #REGd=Sprite height (#N$05).
 $A96B CALL $A83F      ; Call #R$A83F.
 $A96E CALL $A8AF      ; Call #R$A8AF.
 $A971 JR $A95C        ; Jump to #R$A95C.
; Draws the front facing doors which lead to other rooms.
@label=DrawRoomDoors
*$A973 LD HL,($5BD6)   ; #REGhl=*#R$5BD6.
@label=DrawRoomDoors_Loop
*$A976 LD C,(HL)       ; #REGc=*#REGhl.
 $A977 INC HL          ; Increment #REGhl by one.
 $A978 LD B,(HL)       ; #REGb=*#REGhl.
 $A979 INC HL          ; Increment #REGhl by one.
 $A97A LD A,(HL)       ; #REGa=*#REGhl.
 $A97B INC HL          ; {Increment #REGhl by two.
 $A97C INC HL          ; }
 $A97D PUSH AF         ; Stash #REGaf on the stack.
 $A97E LD A,$FF        ; {Jump to #R$A996 if #N$FF is equal to #REGc.
 $A980 CP C            ;
 $A981 JR Z,$A996      ; }
 $A983 LD A,$10        ; {Set INK to ...
 $A985 RST $10         ; }
 $A986 POP AF          ; Restore #REGaf from the stack.
 $A987 RST $10         ; ... the value held in #REGa (from the stack).
 $A988 LD A,$23        ; #REGa=#R$8490 (#N$23).
 $A98A LD E,$03        ; #REGe=Sprite width (#N$03).
 $A98C LD D,$04        ; #REGd=Sprite height (#N$04).
 $A98E CALL $A83F      ; Call #R$A83F.
 $A991 CALL $A8AF      ; Call #R$A8AF.
 $A994 JR $A976        ; Jump to #R$A976.
; Draws the numbered keys and locked doors which correlate to them.
@label=DrawRoomKeysAndLockedDoors
*$A996 POP AF          ; Restore #REGaf from the stack.
 $A997 LD A,$10        ; {Set INK: *#R$5BCF.
 $A999 RST $10         ;
 $A99A LD A,($5BCF)    ;
 $A99D RST $10         ; }
 $A99E LD IX,($5BDA)   ; #REGix=*#R$5BDA.
@label=DrawRoomKeysAndLockedDoors_Loop
*$A9A2 LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $A9A5 LD A,$FF        ; {Jump to #R$AA1C if #N$FF is equal to #REGc.
 $A9A7 CP C            ;
 $A9A8 JR Z,$AA1C      ; }
 $A9AA LD A,(IX+$05)   ; {Jump to #R$AA15 if *#REGix+#N$05 is equal to #N$00.
 $A9AD CP $00          ;
 $A9AF JR Z,$AA15      ; }
 $A9B1 LD (IX+$05),$03 ; Write #N$03 to *#REGix+#N$05.
 $A9B5 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $A9B8 PUSH BC         ; Stash #REGbc on the stack.
 $A9B9 CALL $A86E      ; Call #R$A86E.
 $A9BC CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $A9BF LD A,$10        ; {Set INK: *#R$5BCF.
 $A9C1 RST $10         ;
 $A9C2 LD A,($5BCF)    ;
 $A9C5 RST $10         ; }
 $A9C6 LD A,(IX+$04)   ; #REGa=*#REGix+#N$04.
 $A9C9 ADD A,$38       ; #REGa+=#N$38.
 $A9CB CALL $A893      ; Call #R$A893.
 $A9CE CALL $A817      ; Call #R$A817.
 $A9D1 LD A,$10        ; {Set INK: *#R$5BCD.
 $A9D3 RST $10         ;
 $A9D4 LD A,($5BCD)    ;
 $A9D7 RST $10         ; }
 $A9D8 POP BC          ; Restore #REGbc from the stack.
 $A9D9 DEC B           ; Decrease #REGb by one.
 $A9DA LD A,$4C        ; #REGa=#R$85D8 (#N$4C).
 $A9DC LD E,$01        ; #REGe=Sprite width (#N$01).
 $A9DE LD D,$04        ; #REGd=Sprite height (#N$04).
 $A9E0 CALL $A83F      ; Call #R$A83F.
 $A9E3 CALL $A8AF      ; Call #R$A8AF.
 $A9E6 LD C,(IX+$02)   ; #REGc=*#REGix+#N$02.
 $A9E9 LD B,(IX+$03)   ; #REGb=*#REGix+#N$03.
 $A9EC PUSH BC         ; Stash #REGbc on the stack.
 $A9ED CALL $A86E      ; Call #R$A86E.
 $A9F0 CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $A9F3 LD A,$10        ; {Set INK: *#R$5BCC.
 $A9F5 RST $10         ;
 $A9F6 LD A,($5BCC)    ;
 $A9F9 RST $10         ; }
 $A9FA LD A,(IX+$04)   ; #REGa=*#REGix+#N$04.
 $A9FD ADD A,$41       ; #REGa+=#N$41.
 $A9FF CALL $A893      ; Call #R$A893.
 $AA02 CALL $A817      ; Call #R$A817.
 $AA05 POP BC          ; Restore #REGbc from the stack.
 $AA06 DEC B           ; Decrease #REGb by one.
 $AA07 CALL $A86E      ; Call #R$A86E.
 $AA0A CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
; All the keys share the same bottom half.
 $AA0D LD A,$4B        ; #REGa=#R$85D0 (#N$4B).
 $AA0F CALL $A893      ; Call #R$A893.
 $AA12 CALL $A817      ; Call #R$A817.
@label=DrawRoomKeysAndLockedDoors_Next
*$AA15 LD DE,$0006     ; {#REGix+=#N($0006,$04,$04).
 $AA18 ADD IX,DE       ; }
 $AA1A JR $A9A2        ; Jump to #R$A9A2.
; Draw room items.
@label=DrawRoomItems
*$AA1C LD IX,($5BE0)   ; #REGix=*#R$5BE0.
@label=DrawRoomItems_Loop
*$AA20 LD A,(IX+$00)   ; {Jump to #R$AA4F if *#REGix+#N$00 is equal to #N$FF.
 $AA23 CP $FF          ;
 $AA25 JR Z,$AA4F      ; }
 $AA27 LD A,(IX+$05)   ; {Jump to #R$AA48 if *#REGix+#N$05 is equal to #N$00.
 $AA2A CP $00          ;
 $AA2C JR Z,$AA48      ; }
 $AA2E LD A,$10        ; {Set INK: *#REGix+#N$04.
 $AA30 RST $10         ;
 $AA31 LD A,(IX+$04)   ;
 $AA34 RST $10         ; }
 $AA35 LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $AA38 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $AA3B LD D,$02        ; #REGd=Sprite height (#N$02).
 $AA3D LD E,$02        ; #REGe=Sprite width (#N$02).
 $AA3F LD A,(IX+$06)   ; #REGa=*#REGix+#N$06.
 $AA42 CALL $A83F      ; Call #R$A83F.
 $AA45 CALL $A8AF      ; Call #R$A8AF.
@label=DrawRoomItems_Next
*$AA48 LD DE,$0007     ; {#REGix+=#N($0007,$04,$04).
 $AA4B ADD IX,DE       ; }
 $AA4D JR $AA20        ; Jump to #R$AA20.
; Draw all the room "furniture", like the barrels and stacks of crates.
@label=DrawRoomFurniture
*$AA4F LD HL,$8678     ; {#HTML(Write #R$8778(#N$8678) (#R$8778) to *<a
 $AA52 LD ($5C36),HL   ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $AA55 LD IX,($5BE2)   ; #REGix=*#R$5BE2.
@label=DrawRoomFurniture_Loop
*$AA59 LD A,(IX+$00)   ; {Jump to #R$AA85 if *#REGix+#N$00 is equal to #N$FF.
 $AA5C CP $FF          ;
 $AA5E JR Z,$AA85      ; }
 $AA60 LD A,$10        ; {Set INK: *#REGix+#N$03.
 $AA62 RST $10         ;
 $AA63 LD A,(IX+$03)   ;
 $AA66 RST $10         ; }
 $AA67 LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $AA6A LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $AA6D LD D,$04        ; #REGd=Sprite height (#N$04).
 $AA6F LD E,$06        ; #REGe=Sprite width (#N$06).
 $AA71 LD A,(IX+$02)   ; #REGa=*#REGix+#N$02.
 $AA74 OR %10000000    ; Set bit 7.
 $AA76 CALL $A83F      ; Call #R$A83F.
 $AA79 AND %01111111   ; Keep only bits 0-6.
 $AA7B CALL $A8AF      ; Call #R$A8AF.
 $AA7E LD DE,$0004     ; {#REGix+=#N($0004,$04,$04).
 $AA81 ADD IX,DE       ; }
 $AA83 JR $AA59        ; Jump to #R$AA59.
; Copy the room attributes buffer to the screen.
@label=WriteRoomAttributes
*$AA85 LD DE,$5800     ; {Copy #N$0300 bytes of data from #R$A4E4 to the
 $AA88 LD HL,$A4E4     ; attribute buffer.
 $AA8B LD BC,$0300     ;
 $AA8E LDIR            ; }
 $AA90 LD A,($5BD0)    ; {#HTML(Set the border to *#R$5BD0 using <a
 $AA93 CALL $229B      ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/2294.html#229b">BORDER</a>.)
                       ; }
 $AA96 RET             ; Return.

; Unpack All Rooms
;
; This is similar to #R$AAF4 except that instead of copying a single rooms
; data from the room data buffers, this routine loops through ALL the rooms -
; copying the #R$ABD6(default room data) into the room data buffers. Also, at the start
; of every loop - it writes the room data buffer address which is about to be
; processed to the #R$BAA9(room data table) as both the table and the room data
; buffers are completely blank after the game first loads.
; .
; Note; this always occurs at the start of every game regardless, the game
; opens with the default positions for everything held by the defaults but as
; the player moves around the game and interacts with doors/ keys/ items/ etc,
; the buffers keep track of what's been collected, and where the pirates were
; when the player left the room.
;
; .
;
; When a new game begins, all the rooms are reset to their default states.
@label=UnpackAllRooms
c$AA97 LD HL,$BAAB   ; {Store the starting room table data reference (starting
 $AA9A LD ($BAA5),HL ; at #R$BAAB(21)) to *#R$BAA5.}
; The idea here is to point to the room data, store this in the table.
; Then populate this current room, and then we know what the next address
; value will be for the following rooms starting point.
 $AA9D LD DE,$BCCB   ; Initialise the starting point of the room data for
                     ; populating the room table data (#R$BCCB(21)).
 $AAA0 LD HL,$ABD6   ; Initialise the default room data (#R$ABD6) starting
                     ; pointer in #REGhl.
; This part of the loop specifically deals with populating #R$BAA9.
@label=UnpackAllRooms_Loop
*$AAA3 PUSH HL       ; Stash the default room data pointer on the stack.
 $AAA4 LD HL,($BAA5) ; {Write the address of where the currently in-focus room
 $AAA7 LD (HL),E     ; table data begins to the room table.
 $AAA8 INC HL        ;
 $AAA9 LD (HL),D     ; }
 $AAAA INC HL        ; {Store the position of the next table entry to *#R$BAA5.
 $AAAB LD ($BAA5),HL ; }
 $AAAE POP HL        ; Restore the default room data pointer from the stack.
; Have we finished with everything?
 $AAAF LD A,(HL)     ; {If the terminator character (#N$FF) has been reached
 $AAB0 CP $FF        ; jump to #R$AAEE.
 $AAB2 JP Z,$AAEE    ; }
; Now move onto actually copying the room data.
; .
; Set up counters for copying data from the default state to the room buffer.
; The counter length relates to the length of the data for each instance of the
; "thing" being copied (NOT the length of the data being copied). For an example;
; portholes are #N$03 bytes of data each, so #REGb is #N$03 when
; calling #R$ABC2. How many portholes being copied just depends on when the loop
; reads a termination character (#N$FF).
 $AAB5 LD B,$01      ; {Handle copying the room colour scheme.
 $AAB7 CALL $ABC2    ; }
 $AABA LD B,$03      ; {Handle copying the scaffolding data.
 $AABC CALL $ABC2    ; }
 $AABF LD B,$04      ; {Handle copying the doors data.
 $AAC1 CALL $ABC2    ; }
 $AAC4 LD B,$02      ; {Handle copying the ladders data.
 $AAC6 CALL $ABC2    ; }
 $AAC9 LD B,$06      ; {Handle copying the keys and locked doors data.
 $AACB CALL $ABC2    ; }
 $AACE LD B,$03      ; {Handle copying the porthole data.
 $AAD0 CALL $ABC2    ; }
 $AAD3 LD B,$10      ; {Handle copying the pirate data.
 $AAD5 CALL $ABC2    ; }
 $AAD8 LD B,$07      ; {Handle copying the items data.
 $AADA CALL $ABC2    ; }
 $AADD LD B,$04      ; {Handle copying the furniture data.
 $AADF CALL $ABC2    ; }
 $AAE2 LD B,$10      ; {Handle copying the lifts data.
 $AAE4 CALL $ABC2    ; }
 $AAE7 LD B,$06      ; {Handle copying the disappearing floors data.
 $AAE9 CALL $ABC2    ; }
 $AAEC JR $AAA3      ; Loop back around to #R$AAA3, the unpacking is only finished when
                     ; the terminator character is read at the start.
; The room ID of #N$00 just routed the code to #R$AA97, there is no room #N$00
; - so set the "real" starting room ID.
@label=SetRealStartingRoomID
*$AAEE LD A,$01      ; {Write #N$01 to *#R$5BD3.
 $AAF0 LD ($5BD3),A  ; }
 $AAF3 RET           ; Return.

; Unpack Room
;
; This is similar to #R$AA97, however instead of copying ALL the room
; data from the default room data into the rooms data buffer, this routine
; copies a single room from the room data buffers into the active room buffer.
; The reason for this is that the game opens with the default positions for
; everything held by the defaults but as the player moves around the game and
; interacts with doors/ keys/ items/ etc, the buffers keep track of what's been
; collected, and where the pirates were when the player left the room so when
; they're revisited, they can then retain those changes.
;
; .
;
; In #R$BAA9 the pointers to the room data are stored backwards from
; #N$16-#N$01.
@label=UnpackRoom
c$AAF4 LD A,($5BD4)  ; {Take #N$16-*#R$5BD4 then multiply by #N$02 (as it's an address we fetch,
 $AAF7 LD E,A        ; so is 16 bit) finally add #R$BAA9 to point to the correct room buffer data address in
 $AAF8 LD A,$16      ; the room data table for the current room and store the pointer in #REGhl.
 $AAFA SUB E         ;
 $AAFB LD E,A        ;
 $AAFC SLA E         ;
 $AAFE LD D,$00      ;
 $AB00 LD HL,$BAA9   ;
 $AB03 ADD HL,DE     ; }
 $AB04 LD E,(HL)     ; {Fetch the room buffer data address for the requested
 $AB05 INC HL        ; room and store it in #REGde.
 $AB06 LD D,(HL)     ; }
 $AB07 INC HL        ; Does nothing, #REGhl is overwritten immediately below.
; Move the room buffer data address pointer to the room data itself (the
; first #N$08 bytes are colour data). There's no need to copy the colours again,
; as they don't vary between each game.
 $AB08 LD HL,$0008   ; {#REGde+=#N($0008,$04,$04) (using the stack).
 $AB0B ADD HL,DE     ;
 $AB0C PUSH HL       ;
 $AB0D POP DE        ; }
; Now move onto actually copying the room data.
 $AB0E LD HL,$BAD7   ; #REGhl=#R$BAD7.
; Set up counters for copying data from the default state to the room buffer.
; .
; The counter length relates to the length of the data for each instance of the
; "thing" being copied (NOT the length of the data being copied). For an example;
; portholes are #N$03 bytes of data each, so #REGb is #N$03 when
; calling #R$ABC2. How many portholes being copied just depends on when the loop
; reads a termination character (#N$FF).
 $AB11 LD B,$03      ; {Handle copying the scaffolding data.
 $AB13 CALL $ABC2    ; }
 $AB16 LD B,$04      ; {Handle copying the doors data.
 $AB18 CALL $ABC2    ; }
 $AB1B LD B,$02      ; {Handle copying the ladders data.
 $AB1D CALL $ABC2    ; }
 $AB20 LD B,$06      ; {Handle copying the keys and locked doors data.
 $AB22 CALL $ABC2    ; }
 $AB25 LD B,$03      ; {Handle copying the porthole data.
 $AB27 CALL $ABC2    ; }
 $AB2A LD B,$10      ; {Handle copying the pirate data.
 $AB2C CALL $ABC2    ; }
 $AB2F LD B,$07      ; {Handle copying the items data.
 $AB31 CALL $ABC2    ; }
 $AB34 LD B,$04      ; {Handle copying the furniture data.
 $AB36 CALL $ABC2    ; }
 $AB39 LD B,$10      ; {Handle copying the lifts data.
 $AB3B CALL $ABC2    ; }
 $AB3E LD B,$06      ; {Handle copying the disappearing floors data.
 $AB40 CALL $ABC2    ; }
 $AB43 RET           ; Return.

; Populate Current Room Buffers And References
;
; Used by the routine at #R$A804.
@label=PopulateCurrentRoomBuffersAndReferences
c$AB44 LD A,($5BD3)  ; #REGa=*#R$5BD3.
 $AB47 LD ($5BD4),A  ; Write #REGa to *#R$5BD4.
; Fetch the room data pointer from the room reference table.
 $AB4A LD E,A        ; {#REGhl=#R$BAA9+((#N$16-#REGa)*#N$02).
 $AB4B LD A,$16      ;
 $AB4D SUB E         ;
 $AB4E LD E,A        ;
 $AB4F SLA E         ;
 $AB51 LD D,$00      ;
 $AB53 LD HL,$BAA9   ;
 $AB56 ADD HL,DE     ; }
 $AB57 LD E,(HL)     ; {Store the room data address for the requested room in
 $AB58 INC HL        ; #REGhl.
 $AB59 LD D,(HL)     ;
 $AB5A EX DE,HL      ; }
; Set the colour scheme for the active room.
 $AB5B LD DE,$5BCC   ; {Copy #N($0007,$04,$04) bytes of room data from the
 $AB5E LD BC,$0007   ; buffer to *#R$5BCC.
 $AB61 LDIR          ; }
 $AB63 INC HL        ; Skip the terminator character in the room data.
; Handle populating the scaffolding data.
 $AB64 LD DE,$BAD7   ; {Write #R$BAD7 to *#R$5BE8.
 $AB67 LD ($5BE8),DE ; }
 $AB6B LD B,$03      ; #REGb=#N$03 (length counter).
 $AB6D CALL $ABC2    ; Call #R$ABC2.
; Handle populating the doors data.
 $AB70 LD B,$04      ; #REGb=#N$04 (length counter).
 $AB72 LD ($5BD6),DE ; Write #REGde to *#R$5BD6.
 $AB76 CALL $ABC2    ; Call #R$ABC2.
; Handle populating the ladders data.
 $AB79 LD B,$02      ; #REGb=#N$02 (length counter).
 $AB7B LD ($5BD8),DE ; Write #REGde to *#R$5BD8.
 $AB7F CALL $ABC2    ; Call #R$ABC2.
; Handle populating the keys and locked doors data.
 $AB82 LD B,$06      ; #REGb=#N$06 (length counter).
 $AB84 LD ($5BDA),DE ; Write #REGde to *#R$5BDA.
 $AB88 CALL $ABC2    ; Call #R$ABC2.
; Handle populating the porthole data.
 $AB8B LD B,$03      ; #REGb=#N$03 (length counter).
 $AB8D LD ($5BDC),DE ; Write #REGde to *#R$5BDC.
 $AB91 CALL $ABC2    ; Call #R$ABC2.
; Handle populating the pirate data.
 $AB94 LD B,$10      ; #REGb=#N$10 (length counter).
 $AB96 LD ($5BDE),DE ; Write #REGde to *#R$5BDE.
 $AB9A CALL $ABC2    ; Call #R$ABC2.
; Handle populating the items data.
 $AB9D LD B,$07      ; #REGb=#N$07 (length counter).
 $AB9F LD ($5BE0),DE ; Write #REGde to *#R$5BE0.
 $ABA3 CALL $ABC2    ; Call #R$ABC2.
; Handle populating the furniture data.
 $ABA6 LD B,$04      ; #REGb=#N$04 (length counter).
 $ABA8 LD ($5BE2),DE ; Write #REGde to *#R$5BE2.
 $ABAC CALL $ABC2    ; Call #R$ABC2.
; Handle populating the lifts data.
 $ABAF LD B,$10      ; #REGb=#N$10 (length counter).
 $ABB1 LD ($5BE4),DE ; Write #REGde to *#R$5BE4.
 $ABB5 CALL $ABC2    ; Call #R$ABC2.
; Handle populating the disappearing floors data.
 $ABB8 LD B,$06      ; #REGb=#N$06 (length counter).
 $ABBA LD ($5BE6),DE ; Write #REGde to *#R$5BE6.
 $ABBE CALL $ABC2    ; Call #R$ABC2.
 $ABC1 RET           ; Return.

; Copy Room Data
;
; Used by the routines at #R$AA97, #R$AAF4 and #R$AB44.
;
; B Length of data to be copied
; DE The room buffer target destination
; HL Pointer to the room data we want to copy
;
; This routine copies the number of bytes given by #REGb, from *#REGhl to
; *#REGde, and keeps on looping until a termination character is returned.
@label=CopyRoomData
c$ABC2 PUSH BC       ; Stash the length counter on the stack.
 $ABC3 LD A,(HL)     ; Fetch a byte from the source room data pointer and store
                     ; it in #REGa.
; Have we finished with everything?
 $ABC4 CP $FF        ; {If the terminator character (#N$FF) has been reached
 $ABC6 JR Z,$ABD1    ; jump to #R$ABD1.}
; Handle copying the data from the source room data to the target room buffer.
@label=CopyRoomData_Loop
*$ABC8 LD (DE),A     ; Write the room data byte to the room buffer target
                     ; destination.
 $ABC9 INC HL        ; Increment the source room data pointer by one.
 $ABCA INC DE        ; Increment the room buffer target destination by one.
 $ABCB LD A,(HL)     ; Fetch a byte from the source room data pointer and store
                     ; it in #REGa.
 $ABCC DJNZ $ABC8    ; Decrease the length counter by one and loop back to
                     ; #R$ABC8 until the length counter is zero.
; Refresh the same counter as on entry to the routine and start the process
; again.
 $ABCE POP BC        ; Restore the original length counter from the stack.
 $ABCF JR $ABC2      ; Jump to #R$ABC2.
; This cycle is now over, so store the terminator in the room buffer,
; increment both pointers ready for the next call to this routine and finally, tidy up the stack.
@label=CopyRoomData_Next
*$ABD1 LD (DE),A     ; Write the termination character to the room buffer
                     ; target destination.
 $ABD2 INC DE        ; Increment the room buffer target destination by one.
 $ABD3 INC HL        ; Increment the source room data pointer by one.
 $ABD4 POP BC        ; Housekeeping; discard the length counter from the stack.
 $ABD5 RET           ; Return.

; Default Room Data
@label=DefaultRoomData
g$ABD6 DEFB $07,$07,$00,$00,$01,$01,$02,$FF
 $ABDE DEFB $19,$12,$08,$19,$0D,$04,$21,$12
 $ABE6 DEFB $03,$FF,$13,$16,$04,$01,$FF,$17
 $ABEE DEFB $12,$14,$0D,$FF,$FF,$FF,$21,$15
 $ABF6 DEFB $03,$03,$FF,$00,$20,$02,$02,$05
 $ABFE DEFB $01,$03,$00,$21,$15,$03,$FF,$FF
 $AC06 DEFB $FF,$FF,$FF,$06,$06,$00,$06,$00
 $AC0E DEFB $00,$04,$FF,$21,$17,$10,$21,$12
 $AC16 DEFB $02,$21,$08,$02,$19,$0D,$02,$11
 $AC1E DEFB $12,$03,$11,$08,$03,$07,$12,$03
 $AC26 DEFB $07,$08,$03,$21,$03,$02,$19,$03
 $AC2E DEFB $02,$11,$03,$03,$07,$03,$03,$FF
 $AC36 DEFB $20,$16,$04,$13,$18,$11,$04,$07
 $AC3E DEFB $05,$07,$04,$08,$FF,$FF,$10,$17
 $AC46 DEFB $06,$06,$01,$03,$0C,$17,$06,$0B
 $AC4E DEFB $02,$03,$06,$17,$20,$0B,$03,$03
 $AC56 DEFB $10,$08,$02,$15,$04,$03,$0C,$08
 $AC5E DEFB $21,$15,$05,$03,$FF,$FF,$0F,$06
 $AC66 DEFB $03,$03,$FF,$00,$20,$02,$03,$07
 $AC6E DEFB $01,$03,$00,$0F,$06,$03,$FF,$0F
 $AC76 DEFB $14,$02,$02,$06,$01,$50,$04,$14
 $AC7E DEFB $02,$02,$05,$01,$54,$20,$05,$02
 $AC86 DEFB $02,$05,$01,$58,$04,$0A,$02,$02
 $AC8E DEFB $06,$01,$5C,$FF,$11,$0C,$38,$04
 $AC96 DEFB $FF,$1D,$12,$03,$03,$00,$FF,$24
 $AC9E DEFB $04,$01,$05,$13,$03,$03,$03,$00
 $ACA6 DEFB $00,$15,$12,$03,$03,$00,$FF,$24
 $ACAE DEFB $04,$01,$05,$13,$03,$03,$03,$00
 $ACB6 DEFB $00,$0B,$12,$03,$03,$00,$FF,$24
 $ACBE DEFB $04,$01,$05,$13,$03,$03,$03,$00
 $ACC6 DEFB $00,$FF,$FF,$05,$07,$00,$07,$06
 $ACCE DEFB $00,$04,$FF,$21,$17,$10,$21,$12
 $ACD6 DEFB $08,$21,$0D,$08,$21,$08,$08,$05
 $ACDE DEFB $12,$02,$05,$0D,$02,$05,$08,$02
 $ACE6 DEFB $21,$03,$08,$05,$03,$02,$FF,$20
 $ACEE DEFB $16,$07,$14,$14,$07,$04,$03,$04
 $ACF6 DEFB $07,$04,$0A,$FF,$FF,$04,$17,$16
 $ACFE DEFB $0B,$01,$03,$1A,$12,$20,$06,$02
 $AD06 DEFB $03,$16,$12,$1A,$06,$03,$03,$04
 $AD0E DEFB $12,$1B,$0B,$04,$03,$18,$0D,$18
 $AD16 DEFB $10,$05,$03,$14,$0D,$02,$0B,$06
 $AD1E DEFB $03,$04,$0D,$1C,$15,$07,$03,$1C
 $AD26 DEFB $08,$02,$10,$08,$03,$16,$08,$02
 $AD2E DEFB $15,$09,$03,$FF,$FF,$20,$0B,$03
 $AD36 DEFB $03,$FF,$00,$20,$02,$03,$04,$01
 $AD3E DEFB $03,$00,$20,$0B,$03,$FF,$1E,$0F
 $AD46 DEFB $02,$02,$05,$01,$60,$1A,$0A,$02
 $AD4E DEFB $02,$07,$01,$54,$1E,$05,$02,$02
 $AD56 DEFB $07,$01,$68,$FF,$FF,$11,$12,$03
 $AD5E DEFB $03,$00,$FF,$24,$03,$01,$05,$13
 $AD66 DEFB $03,$03,$03,$00,$00,$0B,$08,$03
 $AD6E DEFB $03,$00,$FF,$24,$03,$01,$05,$13
 $AD76 DEFB $03,$03,$03,$00,$00,$0E,$0D,$03
 $AD7E DEFB $03,$00,$FF,$24,$03,$01,$05,$13
 $AD86 DEFB $03,$03,$03,$00,$00,$08,$03,$03
 $AD8E DEFB $03,$00,$01,$24,$03,$01,$05,$13
 $AD96 DEFB $03,$03,$03,$00,$00,$FF,$FF,$07
 $AD9E DEFB $05,$00,$05,$01,$00,$03,$FF,$21
 $ADA6 DEFB $17,$10,$21,$12,$03,$21,$0D,$03
 $ADAE DEFB $21,$08,$03,$0F,$12,$07,$0F,$0D
 $ADB6 DEFB $07,$0F,$08,$07,$21,$03,$03,$0F
 $ADBE DEFB $03,$07,$FF,$05,$11,$05,$05,$0E
 $ADC6 DEFB $07,$07,$02,$FF,$FF,$0E,$17,$1F
 $ADCE DEFB $06,$01,$03,$0A,$17,$09,$06,$02
 $ADD6 DEFB $03,$06,$17,$1D,$15,$03,$03,$0C
 $ADDE DEFB $0D,$02,$15,$04,$03,$08,$0D,$1C
 $ADE6 DEFB $15,$05,$03,$0A,$08,$0D,$15,$06
 $ADEE DEFB $03,$06,$08,$0A,$0B,$07,$03,$FF
 $ADF6 DEFB $FF,$FF,$0C,$14,$02,$02,$02,$01
 $ADFE DEFB $64,$08,$14,$02,$02,$02,$01,$64
 $AE06 DEFB $05,$14,$02,$02,$02,$01,$64,$09
 $AE0E DEFB $0F,$02,$02,$02,$01,$64,$05,$0A
 $AE16 DEFB $02,$02,$02,$01,$64,$08,$05,$02
 $AE1E DEFB $02,$02,$01,$64,$05,$05,$02,$02
 $AE26 DEFB $02,$01,$64,$FF,$0F,$11,$38,$04
 $AE2E DEFB $FF,$1B,$12,$03,$03,$00,$FF,$24
 $AE36 DEFB $03,$01,$05,$13,$03,$03,$03,$00
 $AE3E DEFB $00,$18,$0D,$03,$03,$00,$FF,$24
 $AE46 DEFB $03,$01,$05,$13,$03,$03,$03,$00
 $AE4E DEFB $00,$15,$08,$03,$03,$00,$FF,$24
 $AE56 DEFB $03,$01,$05,$13,$03,$03,$03,$00
 $AE5E DEFB $00,$12,$03,$03,$03,$00,$01,$24
 $AE66 DEFB $03,$01,$05,$13,$03,$03,$03,$00
 $AE6E DEFB $00,$FF,$FF,$06,$06,$00,$02,$00
 $AE76 DEFB $00,$04,$FF,$21,$17,$10,$21,$12
 $AE7E DEFB $02,$21,$0D,$02,$21,$08,$02,$21
 $AE86 DEFB $03,$02,$1A,$12,$01,$1A,$0D,$01
 $AE8E DEFB $1A,$08,$01,$1A,$03,$0C,$0F,$12
 $AE96 DEFB $07,$0F,$0D,$07,$0F,$08,$07,$03
 $AE9E DEFB $03,$01,$FF,$04,$16,$04,$07,$0A
 $AEA6 DEFB $07,$04,$0C,$FF,$FF,$0E,$12,$0D
 $AEAE DEFB $0B,$01,$03,$0A,$12,$06,$15,$02
 $AEB6 DEFB $03,$06,$12,$03,$0B,$03,$03,$0E
 $AEBE DEFB $0D,$20,$0B,$04,$03,$0A,$0D,$10
 $AEC6 DEFB $06,$05,$03,$FF,$FF,$18,$06,$03
 $AECE DEFB $03,$FF,$00,$20,$02,$03,$05,$01
 $AED6 DEFB $03,$00,$18,$06,$03,$FF,$09,$14
 $AEDE DEFB $02,$02,$02,$01,$70,$0C,$0F,$02
 $AEE6 DEFB $02,$07,$01,$68,$04,$0F,$02,$02
 $AEEE DEFB $06,$01,$74,$0C,$0A,$02,$02,$04
 $AEF6 DEFB $01,$64,$20,$05,$02,$02,$04,$01
 $AEFE DEFB $64,$0E,$05,$02,$02,$02,$01,$64
 $AF06 DEFB $FF,$18,$07,$20,$02,$0F,$16,$20
 $AF0E DEFB $02,$09,$0C,$20,$02,$FF,$1D,$12
 $AF16 DEFB $03,$03,$00,$FF,$24,$03,$01,$05
 $AF1E DEFB $13,$03,$03,$01,$00,$00,$18,$12
 $AF26 DEFB $03,$03,$FF,$00,$21,$03,$01,$06
 $AF2E DEFB $18,$03,$12,$03,$00,$00,$12,$08
 $AF36 DEFB $03,$03,$01,$00,$21,$03,$01,$07
 $AF3E DEFB $18,$03,$12,$03,$00,$00,$16,$0D
 $AF46 DEFB $03,$03,$01,$00,$21,$03,$01,$04
 $AF4E DEFB $18,$03,$12,$03,$00,$00,$FF,$1A
 $AF56 DEFB $12,$82,$8C,$46,$00,$1A,$0D,$02
 $AF5E DEFB $8C,$46,$46,$1A,$08,$02,$8C,$46
 $AF66 DEFB $00,$FF,$07,$06,$00,$06,$00,$00
 $AF6E DEFB $02,$FF,$21,$17,$10,$21,$12,$0B
 $AF76 DEFB $21,$0D,$0B,$21,$08,$0B,$05,$0D
 $AF7E DEFB $02,$21,$03,$0B,$05,$03,$02,$FF
 $AF86 DEFB $1D,$11,$05,$0B,$04,$11,$04,$04
 $AF8E DEFB $0F,$07,$04,$06,$FF,$FF,$1A,$17
 $AF96 DEFB $17,$0B,$01,$03,$12,$17,$05,$10
 $AF9E DEFB $02,$03,$1C,$0D,$20,$06,$03,$03
 $AFA6 DEFB $14,$0D,$18,$06,$04,$03,$1A,$08
 $AFAE DEFB $20,$15,$05,$03,$12,$08,$15,$15
 $AFB6 DEFB $06,$03,$FF,$FF,$21,$10,$03,$03
 $AFBE DEFB $FF,$00,$20,$02,$03,$05,$01,$03
 $AFC6 DEFB $00,$21,$10,$03,$07,$06,$03,$03
 $AFCE DEFB $FF,$00,$20,$02,$03,$05,$01,$03
 $AFD6 DEFB $00,$07,$06,$03,$FF,$1E,$14,$02
 $AFDE DEFB $02,$04,$01,$64,$18,$14,$02,$02
 $AFE6 DEFB $07,$01,$68,$12,$0F,$02,$02,$05
 $AFEE DEFB $01,$64,$1A,$0A,$02,$02,$03,$01
 $AFF6 DEFB $60,$1F,$0A,$02,$02,$07,$01,$50
 $AFFE DEFB $1E,$05,$02,$02,$04,$01,$6C,$16
 $B006 DEFB $05,$02,$02,$05,$01,$58,$FF,$19
 $B00E DEFB $11,$68,$04,$13,$0C,$38,$03,$FF
 $B016 DEFB $0B,$0D,$03,$03,$00,$01,$24,$03
 $B01E DEFB $01,$05,$13,$03,$03,$01,$00,$00
 $B026 DEFB $08,$0D,$03,$03,$00,$FF,$24,$03
 $B02E DEFB $01,$05,$13,$03,$03,$01,$00,$00
 $B036 DEFB $FF,$FF,$07,$07,$00,$05,$03,$00
 $B03E DEFB $06,$FF,$21,$17,$10,$21,$12,$04
 $B046 DEFB $21,$0D,$04,$21,$08,$04,$15,$12
 $B04E DEFB $04,$15,$0D,$04,$15,$08,$04,$09
 $B056 DEFB $12,$04,$09,$0D,$04,$09,$08,$04
 $B05E DEFB $21,$03,$04,$15,$03,$04,$09,$03
 $B066 DEFB $04,$FF,$12,$16,$07,$08,$05,$0C
 $B06E DEFB $06,$03,$1D,$07,$02,$0E,$FF,$FF
 $B076 DEFB $1C,$17,$03,$15,$01,$03,$08,$17
 $B07E DEFB $21,$0B,$02,$03,$1C,$12,$02,$10
 $B086 DEFB $03,$03,$06,$12,$21,$15,$04,$03
 $B08E DEFB $1C,$0D,$03,$06,$05,$03,$08,$08
 $B096 DEFB $0E,$0B,$06,$03,$FF,$FF,$FF,$1F
 $B09E DEFB $14,$02,$02,$04,$01,$64,$15,$14
 $B0A6 DEFB $02,$02,$05,$01,$70,$06,$14,$02
 $B0AE DEFB $02,$04,$01,$60,$20,$0F,$02,$02
 $B0B6 DEFB $07,$01,$68,$0F,$0F,$02,$02,$03
 $B0BE DEFB $01,$64,$04,$0F,$02,$02,$05,$01
 $B0C6 DEFB $58,$1F,$0A,$02,$02,$07,$01,$50
 $B0CE DEFB $15,$0A,$02,$02,$05,$01,$6C,$15
 $B0D6 DEFB $05,$02,$02,$04,$01,$64,$06,$05
 $B0DE DEFB $02,$02,$07,$01,$54,$FF,$15,$11
 $B0E6 DEFB $20,$04,$13,$07,$20,$05,$FF,$19
 $B0EE DEFB $13,$03,$01,$00,$FF,$24,$04,$01
 $B0F6 DEFB $05,$13,$03,$03,$01,$00,$00,$0D
 $B0FE DEFB $04,$03,$01,$00,$01,$24,$04,$01
 $B106 DEFB $05,$13,$03,$03,$01,$00,$00,$FF
 $B10E DEFB $FF,$07,$06,$00,$02,$01,$00,$04
 $B116 DEFB $FF,$21,$17,$10,$21,$03,$10,$21
 $B11E DEFB $12,$04,$21,$0D,$04,$21,$08,$04
 $B126 DEFB $09,$12,$04,$09,$0D,$04,$09,$08
 $B12E DEFB $04,$FF,$10,$11,$05,$09,$08,$11
 $B136 DEFB $04,$02,$1D,$07,$02,$0F,$FF,$04
 $B13E DEFB $12,$20,$0D,$04,$08,$FF,$FF,$FF
 $B146 DEFB $21,$06,$03,$03,$FF,$00,$20,$02
 $B14E DEFB $03,$06,$01,$03,$00,$21,$06,$03
 $B156 DEFB $FF,$21,$14,$02,$02,$04,$01,$64
 $B15E DEFB $07,$14,$02,$02,$06,$01,$5C,$1E
 $B166 DEFB $0F,$02,$02,$07,$01,$6C,$1D,$0A
 $B16E DEFB $02,$02,$03,$01,$70,$06,$0A,$02
 $B176 DEFB $02,$05,$01,$58,$13,$05,$02,$02
 $B17E DEFB $04,$01,$64,$09,$05,$02,$02,$04
 $B186 DEFB $01,$64,$FF,$19,$07,$68,$04,$11
 $B18E DEFB $07,$38,$04,$1F,$16,$50,$05,$FF
 $B196 DEFB $19,$12,$03,$03,$FF,$00,$21,$03
 $B19E DEFB $01,$06,$19,$03,$0C,$03,$00,$00
 $B1A6 DEFB $0C,$0D,$03,$03,$01,$00,$21,$03
 $B1AE DEFB $01,$06,$19,$03,$0C,$03,$00,$00
 $B1B6 DEFB $19,$08,$03,$03,$FF,$00,$21,$03
 $B1BE DEFB $01,$06,$19,$03,$0C,$03,$00,$00
 $B1C6 DEFB $FF,$FF,$07,$06,$00,$06,$00,$00
 $B1CE DEFB $07,$FF,$21,$17,$10,$21,$12,$05
 $B1D6 DEFB $21,$0D,$05,$21,$08,$05,$13,$12
 $B1DE DEFB $09,$13,$0D,$09,$13,$08,$09,$21
 $B1E6 DEFB $03,$05,$13,$03,$09,$FF,$05,$16
 $B1EE DEFB $05,$09,$20,$11,$02,$0A,$1C,$07
 $B1F6 DEFB $05,$05,$FF,$FF,$10,$12,$20,$0B
 $B1FE DEFB $01,$03,$08,$12,$03,$06,$02,$03
 $B206 DEFB $1A,$0D,$12,$10,$03,$03,$10,$0D
 $B20E DEFB $20,$15,$04,$03,$0A,$08,$0F,$0B
 $B216 DEFB $05,$03,$FF,$1C,$11,$20,$0D,$11
 $B21E DEFB $30,$FF,$21,$06,$03,$03,$FF,$00
 $B226 DEFB $20,$02,$03,$07,$01,$03,$00,$21
 $B22E DEFB $06,$03,$FF,$1D,$14,$02,$02,$06
 $B236 DEFB $01,$50,$07,$14,$02,$02,$04,$01
 $B23E DEFB $64,$06,$0F,$02,$02,$05,$01,$6C
 $B246 DEFB $1E,$0A,$02,$02,$04,$01,$70,$05
 $B24E DEFB $0A,$02,$02,$02,$01,$64,$12,$05
 $B256 DEFB $02,$02,$07,$01,$68,$07,$05,$02
 $B25E DEFB $02,$03,$01,$60,$FF,$13,$16,$20
 $B266 DEFB $04,$0D,$16,$38,$04,$0B,$0C,$38
 $B26E DEFB $05,$FF,$17,$12,$03,$03,$00,$FF
 $B276 DEFB $24,$04,$01,$05,$13,$03,$03,$01
 $B27E DEFB $00,$00,$FF,$FF,$06,$06,$00,$05
 $B286 DEFB $00,$01,$02,$FF,$21,$17,$10,$21
 $B28E DEFB $12,$08,$0D,$12,$06,$21,$0D,$08
 $B296 DEFB $0D,$0D,$02,$05,$0D,$02,$21,$08
 $B29E DEFB $06,$0F,$08,$03,$05,$08,$02,$21
 $B2A6 DEFB $03,$10,$FF,$1A,$11,$04,$06,$1A
 $B2AE DEFB $0C,$04,$08,$0A,$07,$03,$11,$FF
 $B2B6 DEFB $0D,$08,$FF,$07,$17,$1D,$0B,$01
 $B2BE DEFB $03,$14,$12,$03,$10,$02,$03,$18
 $B2C6 DEFB $08,$1D,$10,$03,$03,$FF,$FF,$21
 $B2CE DEFB $15,$03,$03,$FF,$00,$20,$02,$03
 $B2D6 DEFB $07,$01,$03,$00,$21,$15,$03,$21
 $B2DE DEFB $06,$03,$03,$FF,$00,$20,$02,$03
 $B2E6 DEFB $05,$01,$03,$00,$21,$06,$03,$21
 $B2EE DEFB $0B,$03,$03,$FF,$00,$20,$02,$03
 $B2F6 DEFB $06,$01,$03,$00,$21,$0B,$03,$FF
 $B2FE DEFB $1D,$14,$02,$02,$03,$01,$64,$05
 $B306 DEFB $14,$02,$02,$06,$01,$74,$04,$0A
 $B30E DEFB $02,$02,$05,$01,$58,$1D,$05,$02
 $B316 DEFB $02,$07,$01,$68,$FF,$FF,$11,$12
 $B31E DEFB $03,$03,$00,$FF,$24,$04,$01,$05
 $B326 DEFB $13,$03,$0D,$03,$00,$00,$09,$08
 $B32E DEFB $03,$03,$00,$01,$24,$04,$01,$05
 $B336 DEFB $0E,$03,$08,$03,$00,$00,$15,$08
 $B33E DEFB $03,$03,$FF,$00,$21,$03,$01,$04
 $B346 DEFB $15,$03,$12,$03,$00,$00,$FF,$0B
 $B34E DEFB $12,$04,$32,$4B,$00,$FF,$06,$04
 $B356 DEFB $00,$04,$00,$01,$04,$FF,$21,$17
 $B35E DEFB $10,$21,$12,$10,$21,$0D,$10,$21
 $B366 DEFB $08,$10,$21,$03,$10,$FF,$10,$16
 $B36E DEFB $04,$05,$1D,$11,$03,$10,$06,$07
 $B376 DEFB $04,$01,$FF,$08,$12,$20,$0D,$0A
 $B37E DEFB $08,$FF,$16,$17,$03,$10,$01,$03
 $B386 DEFB $0A,$17,$14,$15,$02,$03,$16,$12
 $B38E DEFB $07,$06,$03,$03,$0E,$12,$20,$06
 $B396 DEFB $04,$03,$18,$08,$14,$10,$05,$03
 $B39E DEFB $12,$08,$18,$10,$06,$03,$FF,$FF
 $B3A6 DEFB $08,$10,$03,$03,$FF,$00,$20,$02
 $B3AE DEFB $03,$07,$01,$03,$00,$08,$10,$03
 $B3B6 DEFB $FF,$19,$14,$02,$02,$07,$01,$6C
 $B3BE DEFB $05,$14,$02,$02,$06,$01,$78,$12
 $B3C6 DEFB $0F,$02,$02,$06,$01,$74,$0B,$0F
 $B3CE DEFB $02,$02,$04,$01,$64,$1D,$05,$02
 $B3D6 DEFB $02,$07,$01,$5C,$15,$05,$02,$02
 $B3DE DEFB $06,$01,$54,$FF,$20,$16,$68,$05
 $B3E6 DEFB $07,$0C,$50,$03,$FF,$FF,$1D,$08
 $B3EE DEFB $04,$32,$32,$00,$17,$08,$05,$2D
 $B3F6 DEFB $37,$00,$10,$08,$04,$28,$3C,$00
 $B3FE DEFB $FF,$07,$06,$00,$06,$00,$01,$06
 $B406 DEFB $FF,$21,$17,$10,$21,$12,$05,$21
 $B40E DEFB $0D,$05,$21,$08,$05,$0B,$12,$05
 $B416 DEFB $0B,$0D,$05,$0B,$08,$05,$21,$03
 $B41E DEFB $05,$0B,$03,$05,$14,$03,$03,$FF
 $B426 DEFB $20,$11,$02,$0D,$1D,$0C,$04,$04
 $B42E DEFB $11,$07,$05,$15,$04,$07,$04,$13
 $B436 DEFB $FF,$FF,$1A,$17,$03,$15,$01,$03
 $B43E DEFB $08,$17,$20,$0B,$02,$03,$08,$12
 $B446 DEFB $1D,$10,$03,$03,$08,$0D,$20,$06
 $B44E DEFB $04,$03,$1E,$08,$05,$10,$05,$03
 $B456 DEFB $08,$08,$20,$15,$06,$03,$FF,$FF
 $B45E DEFB $FF,$1E,$14,$02,$02,$02,$01,$64
 $B466 DEFB $06,$14,$02,$02,$04,$01,$64,$1A
 $B46E DEFB $0F,$02,$02,$06,$01,$54,$19,$0A
 $B476 DEFB $02,$02,$06,$01,$74,$13,$05,$02
 $B47E DEFB $02,$07,$01,$58,$07,$05,$02,$02
 $B486 DEFB $06,$01,$5C,$FF,$FF,$17,$12,$03
 $B48E DEFB $03,$00,$FF,$24,$03,$01,$05,$13
 $B496 DEFB $03,$03,$01,$00,$00,$0E,$12,$03
 $B49E DEFB $03,$00,$FF,$24,$03,$01,$05,$13
 $B4A6 DEFB $03,$03,$01,$00,$00,$FF,$FF,$05
 $B4AE DEFB $02,$00,$07,$00,$01,$02,$FF,$21
 $B4B6 DEFB $17,$10,$21,$12,$10,$21,$0D,$04
 $B4BE DEFB $21,$08,$04,$11,$0D,$08,$11,$08
 $B4C6 DEFB $08,$21,$03,$10,$FF,$20,$16,$04
 $B4CE DEFB $12,$05,$16,$05,$0D,$10,$11,$05
 $B4D6 DEFB $0E,$FF,$1C,$12,$20,$0D,$1C,$08
 $B4DE DEFB $04,$0D,$08,$08,$FF,$FF,$FF,$09
 $B4E6 DEFB $15,$03,$03,$FF,$00,$20,$02,$03
 $B4EE DEFB $07,$01,$03,$00,$09,$15,$03,$21
 $B4F6 DEFB $06,$03,$03,$FF,$00,$20,$02,$03
 $B4FE DEFB $07,$01,$03,$00,$21,$06,$03,$10
 $B506 DEFB $0B,$03,$03,$FF,$00,$20,$02,$03
 $B50E DEFB $07,$01,$03,$00,$10,$0B,$03,$FF
 $B516 DEFB $0C,$0A,$02,$02,$02,$01,$64,$11
 $B51E DEFB $05,$02,$02,$04,$01,$64,$FF,$17
 $B526 DEFB $07,$38,$04,$1D,$16,$20,$02,$17
 $B52E DEFB $16,$20,$02,$11,$16,$20,$02,$0B
 $B536 DEFB $16,$20,$02,$FF,$FF,$FF,$07,$06
 $B53E DEFB $00,$06,$02,$01,$06,$FF,$21,$17
 $B546 DEFB $10,$21,$12,$10,$21,$0D,$10,$21
 $B54E DEFB $08,$10,$21,$03,$10,$FF,$12,$16
 $B556 DEFB $04,$0F,$1A,$0C,$04,$0C,$05,$07
 $B55E DEFB $04,$14,$FF,$20,$12,$04,$0D,$20
 $B566 DEFB $08,$FF,$16,$17,$14,$15,$01,$03
 $B56E DEFB $0C,$17,$19,$15,$02,$03,$16,$12
 $B576 DEFB $05,$15,$03,$03,$14,$0D,$08,$06
 $B57E DEFB $04,$03,$0C,$0D,$0F,$0B,$05,$03
 $B586 DEFB $0C,$08,$16,$0B,$06,$03,$FF,$1E
 $B58E DEFB $11,$20,$19,$11,$24,$14,$11,$28
 $B596 DEFB $0F,$11,$2C,$0A,$11,$30,$05,$11
 $B59E DEFB $34,$FF,$FF,$1D,$14,$02,$02,$06
 $B5A6 DEFB $01,$50,$04,$14,$02,$02,$06,$01
 $B5AE DEFB $50,$1B,$0F,$02,$02,$06,$01,$50
 $B5B6 DEFB $06,$0F,$02,$02,$07,$01,$50,$12
 $B5BE DEFB $0A,$02,$02,$07,$01,$50,$09,$0A
 $B5C6 DEFB $02,$02,$06,$01,$50,$19,$05,$02
 $B5CE DEFB $02,$05,$01,$50,$0A,$05,$02,$02
 $B5D6 DEFB $07,$01,$50,$FF,$14,$07,$68,$02
 $B5DE DEFB $FF,$FF,$FF,$06,$06,$00,$06,$01
 $B5E6 DEFB $00,$05,$FF,$21,$17,$10,$21,$12
 $B5EE DEFB $10,$21,$0D,$10,$21,$08,$10,$21
 $B5F6 DEFB $03,$10,$FF,$04,$16,$04,$11,$18
 $B5FE DEFB $11,$04,$14,$1E,$0C,$06,$01,$FF
 $B606 DEFB $0D,$12,$15,$0D,$20,$08,$FF,$1A
 $B60E DEFB $17,$20,$10,$01,$03,$1A,$12,$03
 $B616 DEFB $06,$02,$03,$08,$12,$18,$15,$03
 $B61E DEFB $03,$10,$0D,$0A,$06,$04,$03,$10
 $B626 DEFB $08,$12,$0B,$05,$03,$08,$08,$03
 $B62E DEFB $0B,$06,$03,$FF,$FF,$0C,$10,$03
 $B636 DEFB $03,$FF,$00,$20,$02,$03,$06,$01
 $B63E DEFB $03,$00,$0C,$10,$03,$FF,$1F,$14
 $B646 DEFB $02,$02,$07,$01,$68,$1E,$0F,$02
 $B64E DEFB $02,$05,$01,$58,$06,$0F,$02,$02
 $B656 DEFB $05,$01,$58,$0C,$0A,$02,$02,$05
 $B65E DEFB $01,$58,$07,$0A,$02,$02,$06,$01
 $B666 DEFB $5C,$0D,$05,$02,$02,$06,$01,$50
 $B66E DEFB $06,$05,$02,$02,$07,$01,$54,$FF
 $B676 DEFB $17,$07,$38,$02,$1D,$07,$50,$02
 $B67E DEFB $17,$16,$50,$04,$11,$16,$68,$04
 $B686 DEFB $0B,$16,$50,$04,$FF,$FF,$FF,$07
 $B68E DEFB $07,$00,$05,$00,$01,$04,$FF,$21
 $B696 DEFB $17,$02,$13,$17,$09,$0F,$12,$07
 $B69E DEFB $0F,$0D,$07,$0F,$08,$07,$21,$03
 $B6A6 DEFB $10,$1D,$0D,$05,$FF,$1A,$11,$04
 $B6AE DEFB $0C,$0F,$11,$04,$04,$0F,$07,$04
 $B6B6 DEFB $10,$FF,$04,$12,$06,$0D,$0B,$08
 $B6BE DEFB $FF,$0A,$17,$0B,$10,$01,$03,$08
 $B6C6 DEFB $0D,$03,$06,$02,$03,$08,$08,$0E
 $B6CE DEFB $0B,$03,$03,$FF,$FF,$13,$06,$03
 $B6D6 DEFB $03,$FF,$00,$20,$02,$03,$07,$01
 $B6DE DEFB $03,$00,$13,$06,$03,$FF,$0E,$14
 $B6E6 DEFB $02,$02,$02,$01,$64,$04,$14,$02
 $B6EE DEFB $02,$02,$01,$64,$17,$0F,$02,$02
 $B6F6 DEFB $06,$01,$74,$04,$0A,$02,$02,$05
 $B6FE DEFB $01,$6C,$06,$05,$02,$02,$07,$01
 $B706 DEFB $68,$FF,$21,$07,$20,$02,$1B,$07
 $B70E DEFB $20,$02,$15,$07,$20,$02,$FF,$FF
 $B716 DEFB $FF,$06,$06,$00,$06,$00,$01,$04
 $B71E DEFB $FF,$21,$17,$10,$21,$12,$10,$21
 $B726 DEFB $0D,$10,$21,$08,$10,$21,$03,$10
 $B72E DEFB $FF,$10,$16,$03,$0B,$05,$11,$03
 $B736 DEFB $12,$1C,$07,$05,$0D,$FF,$09,$12
 $B73E DEFB $1B,$0D,$19,$08,$FF,$18,$17,$14
 $B746 DEFB $10,$01,$03,$06,$17,$06,$0B,$02
 $B74E DEFB $03,$1C,$12,$1D,$06,$03,$03,$16
 $B756 DEFB $12,$20,$15,$04,$03,$0C,$0D,$02
 $B75E DEFB $10,$05,$03,$0C,$08,$02,$15,$06
 $B766 DEFB $03,$FF,$FF,$FF,$16,$14,$02,$02
 $B76E DEFB $06,$01,$78,$05,$14,$02,$02,$06
 $B776 DEFB $01,$74,$20,$0A,$02,$02,$05,$01
 $B77E DEFB $60,$0A,$05,$02,$02,$07,$01,$68
 $B786 DEFB $20,$0F,$02,$02,$06,$01,$5C,$19
 $B78E DEFB $0F,$02,$02,$06,$01,$5C,$13,$0F
 $B796 DEFB $02,$02,$06,$01,$5C,$FF,$1E,$16
 $B79E DEFB $38,$04,$0F,$11,$38,$04,$17,$0C
 $B7A6 DEFB $38,$03,$07,$07,$38,$05,$FF,$FF
 $B7AE DEFB $11,$08,$05,$28,$64,$00,$FF,$06
 $B7B6 DEFB $05,$00,$05,$00,$01,$07,$FF,$21
 $B7BE DEFB $17,$10,$21,$12,$10,$21,$0D,$10
 $B7C6 DEFB $21,$08,$10,$21,$03,$10,$FF,$0F
 $B7CE DEFB $11,$04,$06,$04,$11,$04,$10,$1D
 $B7D6 DEFB $0C,$04,$0A,$FF,$18,$12,$1A,$0D
 $B7DE DEFB $09,$0D,$11,$08,$FF,$14,$17,$20
 $B7E6 DEFB $0B,$01,$03,$0C,$17,$05,$10,$02
 $B7EE DEFB $03,$0A,$12,$20,$06,$03,$03,$16
 $B7F6 DEFB $0D,$12,$15,$04,$03,$16,$08,$03
 $B7FE DEFB $0B,$05,$03,$06,$08,$03,$15,$06
 $B806 DEFB $03,$FF,$FF,$0F,$0B,$03,$03,$FF
 $B80E DEFB $00,$20,$02,$03,$07,$01,$03,$00
 $B816 DEFB $0F,$0B,$03,$0F,$15,$03,$03,$FF
 $B81E DEFB $00,$20,$02,$03,$07,$01,$03,$00
 $B826 DEFB $0F,$15,$03,$FF,$18,$14,$02,$02
 $B82E DEFB $07,$01,$54,$08,$14,$02,$02,$06
 $B836 DEFB $01,$54,$1D,$0F,$02,$02,$07,$01
 $B83E DEFB $54,$13,$0F,$02,$02,$06,$01,$54
 $B846 DEFB $08,$0F,$02,$02,$05,$01,$54,$1F
 $B84E DEFB $0A,$02,$02,$07,$01,$54,$14,$0A
 $B856 DEFB $02,$02,$06,$01,$54,$19,$05,$02
 $B85E DEFB $02,$05,$01,$54,$0D,$05,$02,$02
 $B866 DEFB $06,$01,$54,$04,$05,$02,$02,$02
 $B86E DEFB $01,$54,$FF,$21,$16,$50,$04,$0F
 $B876 DEFB $0C,$50,$04,$FF,$FF,$FF,$05,$04
 $B87E DEFB $00,$04,$00,$00,$04,$FF,$21,$17
 $B886 DEFB $10,$21,$12,$10,$21,$0D,$10,$21
 $B88E DEFB $08,$10,$21,$03,$10,$FF,$20,$11
 $B896 DEFB $07,$11,$05,$0C,$06,$0F,$14,$07
 $B89E DEFB $03,$13,$FF,$18,$12,$0E,$0D,$0C
 $B8A6 DEFB $08,$FF,$1A,$17,$20,$06,$01,$03
 $B8AE DEFB $0A,$17,$07,$0B,$02,$03,$1A,$12
 $B8B6 DEFB $0C,$15,$03,$03,$08,$12,$03,$15
 $B8BE DEFB $04,$03,$12,$0D,$20,$15,$05,$03
 $B8C6 DEFB $17,$08,$04,$10,$06,$03,$10,$08
 $B8CE DEFB $1D,$10,$07,$03,$FF,$FF,$21,$10
 $B8D6 DEFB $03,$03,$FF,$00,$20,$02,$03,$06
 $B8DE DEFB $01,$03,$00,$21,$10,$03,$FF,$1D
 $B8E6 DEFB $14,$02,$02,$05,$01,$64,$0F,$14
 $B8EE DEFB $02,$02,$05,$01,$64,$07,$0F,$02
 $B8F6 DEFB $02,$04,$01,$64,$19,$0A,$02,$02
 $B8FE DEFB $04,$01,$64,$0A,$0A,$02,$02,$06
 $B906 DEFB $01,$64,$1E,$05,$02,$02,$07,$01
 $B90E DEFB $64,$0E,$05,$02,$02,$02,$01,$64
 $B916 DEFB $FF,$16,$16,$38,$03,$FF,$FF,$FF
 $B91E DEFB $04,$06,$00,$06,$00,$01,$05,$FF
 $B926 DEFB $21,$17,$10,$21,$12,$10,$21,$08
 $B92E DEFB $10,$21,$03,$10,$21,$0D,$10,$FF
 $B936 DEFB $07,$16,$04,$01,$08,$11,$04,$0E
 $B93E DEFB $0E,$07,$02,$12,$FF,$0D,$12,$20
 $B946 DEFB $12,$18,$0D,$04,$08,$FF,$1A,$17
 $B94E DEFB $20,$06,$01,$03,$0A,$17,$02,$15
 $B956 DEFB $02,$03,$1A,$12,$06,$06,$03,$03
 $B95E DEFB $10,$12,$16,$15,$04,$03,$12,$0D
 $B966 DEFB $02,$10,$05,$03,$1A,$08,$18,$15
 $B96E DEFB $06,$03,$0A,$08,$18,$06,$07,$03
 $B976 DEFB $FF,$FF,$15,$10,$03,$03,$FF,$00
 $B97E DEFB $20,$02,$03,$07,$01,$03,$00,$15
 $B986 DEFB $10,$03,$21,$0B,$03,$03,$FF,$00
 $B98E DEFB $20,$02,$03,$07,$01,$03,$00,$21
 $B996 DEFB $0B,$03,$FF,$1D,$14,$02,$02,$05
 $B99E DEFB $01,$58,$0E,$14,$02,$02,$05,$01
 $B9A6 DEFB $58,$04,$14,$02,$02,$06,$01,$5C
 $B9AE DEFB $13,$0F,$02,$02,$06,$01,$74,$05
 $B9B6 DEFB $0F,$02,$02,$05,$01,$58,$1F,$0A
 $B9BE DEFB $02,$02,$05,$01,$58,$0E,$0A,$02
 $B9C6 DEFB $02,$05,$01,$58,$1D,$05,$02,$02
 $B9CE DEFB $05,$01,$58,$16,$05,$02,$02,$05
 $B9D6 DEFB $01,$58,$FF,$14,$16,$68,$04,$09
 $B9DE DEFB $0C,$50,$05,$FF,$FF,$FF,$07,$04
 $B9E6 DEFB $00,$07,$00,$01,$06,$FF,$21,$17
 $B9EE DEFB $10,$21,$12,$10,$21,$0D,$10,$21
 $B9F6 DEFB $08,$10,$21,$03,$10,$FF,$07,$16
 $B9FE DEFB $04,$02,$06,$07,$04,$0B,$1E,$0C
 $BA06 DEFB $05,$07,$FF,$10,$12,$14,$0D,$10
 $BA0E DEFB $08,$FF,$0C,$17,$0E,$06,$02,$03
 $BA16 DEFB $16,$17,$08,$0B,$01,$03,$16,$12
 $BA1E DEFB $20,$0B,$03,$03,$0C,$12,$13,$15
 $BA26 DEFB $04,$03,$18,$0D,$20,$06,$05,$03
 $BA2E DEFB $0C,$0D,$16,$0B,$06,$03,$16,$08
 $BA36 DEFB $13,$10,$07,$03,$0C,$08,$1B,$15
 $BA3E DEFB $08,$03,$FF,$FF,$21,$06,$03,$03
 $BA46 DEFB $FF,$00,$20,$02,$03,$07,$01,$03
 $BA4E DEFB $00,$21,$06,$03,$0A,$0B,$03,$03
 $BA56 DEFB $FF,$00,$20,$02,$03,$06,$01,$03
 $BA5E DEFB $00,$0A,$0B,$03,$FF,$06,$0F,$02
 $BA66 DEFB $02,$05,$01,$58,$1F,$14,$02,$02
 $BA6E DEFB $06,$01,$78,$20,$0F,$02,$02,$07
 $BA76 DEFB $01,$54,$1B,$0A,$02,$02,$05,$01
 $BA7E DEFB $58,$14,$05,$02,$02,$06,$01,$5C
 $BA86 DEFB $19,$05,$02,$02,$03,$01,$60,$08
 $BA8E DEFB $05,$02,$02,$02,$01,$64,$FF,$12
 $BA96 DEFB $0C,$68,$04,$1D,$11,$38,$06,$FF
 $BA9E DEFB $FF,$FF,$FF,$FF

; Data block at BAA2
b$BAA2 DEFB $00

; Data block at BAA3
b$BAA3 DEFB $00,$00

; Temporary Table Room Data Pointer
;
; Used to assist with populating #R$BAA9, as this table is blank when the game
; is first loaded.
@label=TempTableRoomDataPointer
g$BAA5 DEFW $BAD7

; Unused
u$BAA7 DEFW $0000

; Table: Room Data
;
; Note that room ID 22 is never used, and hence is #N($0000,$04,$04).
; Room ID 21 is a valid reference (and does have data), but also is not used in the game.
@label=TableRoomData
g$BAA9 DEFW $0000    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAAB DEFW $BCCB    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAAD DEFW $BCFE    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAAF DEFW $BDBE    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAB1 DEFW $BE92    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAB3 DEFW $BF66    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAB5 DEFW $C05D    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAB7 DEFW $C12D    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAB9 DEFW $C204    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BABB DEFW $C2BD    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BABD DEFW $C377    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BABF DEFW $C449    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAC1 DEFW $C4F4    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAC3 DEFW $C5A2    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAC5 DEFW $C631    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAC7 DEFW $C6D6    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAC9 DEFW $C782    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BACB DEFW $C80C    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BACD DEFW $C8AA    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BACF DEFW $C971    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAD1 DEFW $CA13    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).
 $BAD3 DEFW $CAD9    ; Room #EVAL($16-(#PC-$BAA9)/$02,$0A,$02).

; Buffer Pointer
;
; See #R$A893 for usage.
@label=BufferPointer
g$BAD5 DEFW $CB95

; Buffer: Room Data
;
; #R$5BE8 will point here. Populated by #R$AAF4. Used by #R$A900.
@label=BufferCurrentRoomData
g$BAD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BADF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BAE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BAEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BAF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BAFF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB07 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB0F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB17 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB1F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB27 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB2F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB37 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB3F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB47 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB4F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBFF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC07 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC0F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC17 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC1F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC27 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC2F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC37 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC3F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC47 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC4F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCC7 DEFB $00,$00,$00,$00

; Data: Room #21
;
; Note; although this room is present in code, it's unreachable and fairly "broken".
; See #LINK:Rooms#room_21(Room #21).
;
; .
;
; #HTML(<img alt="room-bare-21" src="../images/scr/room-bare-21.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom21
g$BCCB DEFB $07                             ; Key Colour: #INK(#PEEK(#PC)).
 $BCCC DEFB $07                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $BCCD DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $BCCE DEFB $00                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $BCCF DEFB $01                             ; Border Colour: #INK(#PEEK(#PC)).
 $BCD0 DEFB $01                             ; Paper Colour: #INK(#PEEK(#PC)).
 $BCD1 DEFB $02                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $BCD2 DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $BCD3 DEFB $19,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BCD5 DEFB $08                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $BCD6 DEFB $19,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BCD8 DEFB $04                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $BCD9 DEFB $21,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BCDB DEFB $03                             ; Length: #N(#PEEK(#PC)).
 $BCDC DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $BCDD DEFB $13,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BCDF DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $BCE0 DEFB $01                             ; Leads to room: #N(#PEEK(#PC)).
 $BCE1 DEFB $FF                             ; Terminator.
; Ladders:
; .
; Ladder #01.
 $BCE2 DEFB $17,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #02.
 $BCE4 DEFB $14,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BCE6 DEFB $FF                             ; Terminator.
; Keys and locked doors.
 $BCE7 DEFB $FF                             ; Terminator.
; Portholes:
 $BCE8 DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $BCE9 DEFB $21,$15                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BCEB DEFB $03,$03,$FF,$00,$20,$02,$02,$05
 $BCF3 DEFB $01,$03,$00,$21,$15,$03
 $BCF9 DEFB $FF                             ; Terminator.
; Items:
 $BCFA DEFB $FF                             ; Terminator.
; Furniture:
 $BCFB DEFB $FF                             ; Terminator.
; Lifts:
 $BCFC DEFB $FF                             ; Terminator.
; Disappearing floors:
 $BCFD DEFB $FF                             ; Terminator.

; Data: Room #20
;
; See #LINK:Rooms#room_20(Room #20).
;
; .
;
; #HTML(<img alt="room-bare-20" src="../images/scr/room-bare-20.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom20
g$BCFE DEFB $06                     ; Key Colour: #INK(#PEEK(#PC)).
 $BCFF DEFB $06                     ; Closed Door Colour: #INK(#PEEK(#PC)).
 $BD00 DEFB $00                     ; Unused?: #INK(#PEEK(#PC)).
 $BD01 DEFB $06                     ; Scaffolding Colour: #INK(#PEEK(#PC)).
 $BD02 DEFB $00                     ; Border Colour: #INK(#PEEK(#PC)).
 $BD03 DEFB $00                     ; Paper Colour: #INK(#PEEK(#PC)).
 $BD04 DEFB $04                     ; Ladder Colour: #INK(#PEEK(#PC)).
 $BD05 DEFB $FF                     ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $BD06 DEFB $21,$17                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD08 DEFB $10                     ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $BD09 DEFB $21,$12                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD0B DEFB $02                     ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $BD0C DEFB $21,$08                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD0E DEFB $02                     ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $BD0F DEFB $19,$0D                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD11 DEFB $02                     ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $BD12 DEFB $11,$12                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD14 DEFB $03                     ; Length: #N(#PEEK(#PC)).
; Scaffold #06.
 $BD15 DEFB $11,$08                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD17 DEFB $03                     ; Length: #N(#PEEK(#PC)).
; Scaffold #07.
 $BD18 DEFB $07,$12                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD1A DEFB $03                     ; Length: #N(#PEEK(#PC)).
; Scaffold #08.
 $BD1B DEFB $07,$08                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD1D DEFB $03                     ; Length: #N(#PEEK(#PC)).
; Scaffold #09.
 $BD1E DEFB $21,$03                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD20 DEFB $02                     ; Length: #N(#PEEK(#PC)).
; Scaffold #10.
 $BD21 DEFB $19,$03                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD23 DEFB $02                     ; Length: #N(#PEEK(#PC)).
; Scaffold #11.
 $BD24 DEFB $11,$03                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD26 DEFB $03                     ; Length: #N(#PEEK(#PC)).
; Scaffold #12.
 $BD27 DEFB $07,$03                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD29 DEFB $03                     ; Length: #N(#PEEK(#PC)).
 $BD2A DEFB $FF                     ; Terminator.
; Doors:
; .
; Door #01.
 $BD2B DEFB $20,$16                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD2D DEFB $04                     ; Colour: #INK(#PEEK(#PC)).
 $BD2E DEFB $13                     ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $BD2F DEFB $18,$11                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD31 DEFB $04                     ; Colour: #INK(#PEEK(#PC)).
 $BD32 DEFB $07                     ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $BD33 DEFB $05,$07                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD35 DEFB $04                     ; Colour: #INK(#PEEK(#PC)).
 $BD36 DEFB $08                     ; Leads to room: #N(#PEEK(#PC)).
 $BD37 DEFB $FF                     ; Terminator.
; Ladders:
 $BD38 DEFB $FF                     ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $BD39 DEFB $10,$17                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD3B DEFB $06
 $BD3C DEFB $06,$01                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD3E DEFB $03
; Key/ Door #02.
 $BD3F DEFB $0C,$17                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD41 DEFB $06
 $BD42 DEFB $0B,$02                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD44 DEFB $03
; Key/ Door #03.
 $BD45 DEFB $06,$17                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD47 DEFB $20
 $BD48 DEFB $0B,$03                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD4A DEFB $03
; Key/ Door #04.
 $BD4B DEFB $10,$08                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD4D DEFB $02
 $BD4E DEFB $15,$04                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD50 DEFB $03
; Key/ Door #05.
 $BD51 DEFB $0C,$08                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD53 DEFB $21
 $BD54 DEFB $15,$05                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD56 DEFB $03
 $BD57 DEFB $FF                     ; Terminator.
; Portholes:
 $BD58 DEFB $FF                     ; Terminator.
; Pirates:
; .
; Pirate #01.
 $BD59 DEFB $0F,$06                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD5B DEFB $03,$03
 $BD5D DEFB $FF                     ; Horizontal movement: -1.
 $BD5E DEFB $00,$20,$02,$03
 $BD62 DEFB $07                     ; Colour: #INK(#PEEK(#PC)).
 $BD63 DEFB $01,$03,$00,$0F,$06,$03
 $BD69 DEFB $FF                     ; Terminator.
; Items:
; .
; Item #01.
 $BD6A DEFB $0F,$14                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD6C DEFB $02,$02
 $BD6E DEFB $06                     ; Colour: #INK(#PEEK(#PC)).
 $BD6F DEFB $01                     ; Collected:
                                    ; #MAP(#PEEK(#PC))(?,$00:YES,$01:NO).
 $BD70 DEFB $50                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #02.
 $BD71 DEFB $04,$14                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD73 DEFB $02,$02
 $BD75 DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $BD76 DEFB $01                     ; Collected:
                                    ; #MAP(#PEEK(#PC))(?,$00:YES,$01:NO).
 $BD77 DEFB $54                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #03.
 $BD78 DEFB $20,$05                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD7A DEFB $02,$02
 $BD7C DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $BD7D DEFB $01                     ; Collected:
                                    ; #MAP(#PEEK(#PC))(?,$00:YES,$01:NO).
 $BD7E DEFB $58                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #04.
 $BD7F DEFB $04,$0A                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD81 DEFB $02,$02
 $BD83 DEFB $06                     ; Colour: #INK(#PEEK(#PC)).
 $BD84 DEFB $01                     ; Collected:
                                    ; #MAP(#PEEK(#PC))(?,$00:YES,$01:NO).
 $BD85 DEFB $5C                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
 $BD86 DEFB $FF                     ; Terminator.
; Furniture:
; .
; Item #01.
 $BD87 DEFB $11,$0C                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD89 DEFB $38                     ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
 $BD8A DEFB $04                     ; Colour: #INK(#PEEK(#PC)).
 $BD8B DEFB $FF                     ; Terminator.
; Lifts:
; .
; Lift #01.
 $BD8C DEFB $1D,$12                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD8E DEFB $03,$03
 $BD90 DEFB $00                     ; Horizontal movement: none.
 $BD91 DEFB $FF                     ; Vertical movement: -1.
 $BD92 DEFB $24,$04,$01
 $BD95 DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $BD96 DEFB $13,$03,$03,$03,$00,$00
; Lift #02.
 $BD9C DEFB $15,$12                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BD9E DEFB $03,$03
 $BDA0 DEFB $00                     ; Horizontal movement: none.
 $BDA1 DEFB $FF                     ; Vertical movement: -1.
 $BDA2 DEFB $24,$04,$01
 $BDA5 DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $BDA6 DEFB $13,$03,$03,$03,$00,$00
; Lift #03.
 $BDAC DEFB $0B,$12                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BDAE DEFB $03,$03
 $BDB0 DEFB $00                     ; Horizontal movement: none.
 $BDB1 DEFB $FF                     ; Vertical movement: -1.
 $BDB2 DEFB $24,$04,$01
 $BDB5 DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $BDB6 DEFB $13,$03,$03,$03,$00,$00
 $BDBC DEFB $FF                     ; Terminator.
; Disappearing floors:
 $BDBD DEFB $FF                     ; Terminator.

; Data: Room #19
;
; See #LINK:Rooms#room_19(Room #19).
;
; .
;
; #HTML(<img alt="room-bare-19" src="../images/scr/room-bare-19.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom19
g$BDBE DEFB $05                             ; Key Colour: #INK(#PEEK(#PC)).
 $BDBF DEFB $07                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $BDC0 DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $BDC1 DEFB $07                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $BDC2 DEFB $06                             ; Border Colour: #INK(#PEEK(#PC)).
 $BDC3 DEFB $00                             ; Paper Colour: #INK(#PEEK(#PC)).
 $BDC4 DEFB $04                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $BDC5 DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $BDC6 DEFB $21,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDC8 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $BDC9 DEFB $21,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDCB DEFB $08                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $BDCC DEFB $21,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDCE DEFB $08                             ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $BDCF DEFB $21,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDD1 DEFB $08                             ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $BDD2 DEFB $05,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDD4 DEFB $02                             ; Length: #N(#PEEK(#PC)).
; Scaffold #06.
 $BDD5 DEFB $05,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDD7 DEFB $02                             ; Length: #N(#PEEK(#PC)).
; Scaffold #07.
 $BDD8 DEFB $05,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDDA DEFB $02                             ; Length: #N(#PEEK(#PC)).
; Scaffold #08.
 $BDDB DEFB $21,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDDD DEFB $08                             ; Length: #N(#PEEK(#PC)).
; Scaffold #09.
 $BDDE DEFB $05,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDE0 DEFB $02                             ; Length: #N(#PEEK(#PC)).
 $BDE1 DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $BDE2 DEFB $20,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDE4 DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $BDE5 DEFB $14                             ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $BDE6 DEFB $14,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDE8 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $BDE9 DEFB $03                             ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $BDEA DEFB $04,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDEC DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $BDED DEFB $0A                             ; Leads to room: #N(#PEEK(#PC)).
 $BDEE DEFB $FF                             ; Terminator.
; Ladders:
 $BDEF DEFB $FF                             ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $BDF0 DEFB $04,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDF2 DEFB $16
 $BDF3 DEFB $0B,$01                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDF5 DEFB $03
; Key/ Door #02.
 $BDF6 DEFB $1A,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDF8 DEFB $20
 $BDF9 DEFB $06,$02                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDFB DEFB $03
; Key/ Door #03.
 $BDFC DEFB $16,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BDFE DEFB $1A
 $BDFF DEFB $06,$03                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE01 DEFB $03
; Key/ Door #04.
 $BE02 DEFB $04,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE04 DEFB $1B
 $BE05 DEFB $0B,$04                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE07 DEFB $03
; Key/ Door #05.
 $BE08 DEFB $18,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE0A DEFB $18
 $BE0B DEFB $10,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE0D DEFB $03
; Key/ Door #06.
 $BE0E DEFB $14,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE10 DEFB $02
 $BE11 DEFB $0B,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE13 DEFB $03
; Key/ Door #07.
 $BE14 DEFB $04,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE16 DEFB $1C
 $BE17 DEFB $15,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE19 DEFB $03
; Key/ Door #08.
 $BE1A DEFB $1C,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE1C DEFB $02
 $BE1D DEFB $10,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE1F DEFB $03
; Key/ Door #09.
 $BE20 DEFB $16,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE22 DEFB $02
 $BE23 DEFB $15,$09                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE25 DEFB $03
 $BE26 DEFB $FF                             ; Terminator.
; Portholes:
 $BE27 DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $BE28 DEFB $20,$0B                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE2A DEFB $03,$03,$FF,$00,$20,$02,$03,$04
 $BE32 DEFB $01,$03,$00,$20,$0B,$03
 $BE38 DEFB $FF                             ; Terminator.
; Items:
; .
; Item #01.
 $BE39 DEFB $1E,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE3B DEFB $02,$02
 $BE3D DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $BE3E DEFB $01
 $BE3F DEFB $60                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #02.
 $BE40 DEFB $1A,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE42 DEFB $02,$02
 $BE44 DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $BE45 DEFB $01
 $BE46 DEFB $54                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #03.
 $BE47 DEFB $1E,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE49 DEFB $02,$02
 $BE4B DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $BE4C DEFB $01
 $BE4D DEFB $68                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $BE4E DEFB $FF                             ; Terminator.
; Furniture:
 $BE4F DEFB $FF                             ; Terminator.
; Lifts:
; .
; Lift #01.
 $BE50 DEFB $11,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE52 DEFB $03,$03
 $BE54 DEFB $00                             ; Horizontal movement: none.
 $BE55 DEFB $FF                             ; Vertical movement: -1.
 $BE56 DEFB $24,$03,$01
 $BE59 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $BE5A DEFB $13,$03,$03,$03,$00,$00
; Lift #02.
 $BE60 DEFB $0B,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE62 DEFB $03,$03
 $BE64 DEFB $00                             ; Horizontal movement: none.
 $BE65 DEFB $FF                             ; Vertical movement: -1.
 $BE66 DEFB $24,$03,$01
 $BE69 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $BE6A DEFB $13,$03,$03,$03,$00,$00
; Lift #03.
 $BE70 DEFB $0E,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE72 DEFB $03,$03
 $BE74 DEFB $00                             ; Horizontal movement: none.
 $BE75 DEFB $FF                             ; Vertical movement: -1.
 $BE76 DEFB $24,$03,$01
 $BE79 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $BE7A DEFB $13,$03,$03,$03,$00,$00
; Lift #04.
 $BE80 DEFB $08,$03                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BE82 DEFB $03,$03
 $BE84 DEFB $00                             ; Horizontal movement: none.
 $BE85 DEFB $01                             ; Vertical movement: +1.
 $BE86 DEFB $24,$03,$01
 $BE89 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $BE8A DEFB $13,$03,$03,$03,$00,$00
 $BE90 DEFB $FF                             ; Terminator.
; Disappearing floors:
 $BE91 DEFB $FF                             ; Terminator.

; Data: Room #18
;
; See #LINK:Rooms#room_18(Room #18).
;
; .
;
; #HTML(<img alt="room-bare-18" src="../images/scr/room-bare-18.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom18
g$BE92 DEFB $07                     ; Key Colour: #INK(#PEEK(#PC)).
 $BE93 DEFB $05                     ; Closed Door Colour: #INK(#PEEK(#PC)).
 $BE94 DEFB $00                     ; Unused?: #INK(#PEEK(#PC)).
 $BE95 DEFB $05                     ; Scaffolding Colour: #INK(#PEEK(#PC)).
 $BE96 DEFB $01                     ; Border Colour: #INK(#PEEK(#PC)).
 $BE97 DEFB $00                     ; Paper Colour: #INK(#PEEK(#PC)).
 $BE98 DEFB $03                     ; Ladder Colour: #INK(#PEEK(#PC)).
 $BE99 DEFB $FF                     ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $BE9A DEFB $21,$17                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BE9C DEFB $10                     ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $BE9D DEFB $21,$12                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BE9F DEFB $03                     ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $BEA0 DEFB $21,$0D                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEA2 DEFB $03                     ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $BEA3 DEFB $21,$08                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEA5 DEFB $03                     ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $BEA6 DEFB $0F,$12                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEA8 DEFB $07                     ; Length: #N(#PEEK(#PC)).
; Scaffold #06.
 $BEA9 DEFB $0F,$0D                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEAB DEFB $07                     ; Length: #N(#PEEK(#PC)).
; Scaffold #07.
 $BEAC DEFB $0F,$08                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEAE DEFB $07                     ; Length: #N(#PEEK(#PC)).
; Scaffold #08.
 $BEAF DEFB $21,$03                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEB1 DEFB $03                     ; Length: #N(#PEEK(#PC)).
; Scaffold #09.
 $BEB2 DEFB $0F,$03                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEB4 DEFB $07                     ; Length: #N(#PEEK(#PC)).
 $BEB5 DEFB $FF                     ; Terminator.
; Doors:
; .
; Door #01.
 $BEB6 DEFB $05,$11                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEB8 DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $BEB9 DEFB $05                     ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $BEBA DEFB $0E,$07                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEBC DEFB $07                     ; Colour: #INK(#PEEK(#PC)).
 $BEBD DEFB $02                     ; Leads to room: #N(#PEEK(#PC)).
 $BEBE DEFB $FF                     ; Terminator.
; Ladders:
 $BEBF DEFB $FF                     ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $BEC0 DEFB $0E,$17                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEC2 DEFB $1F
 $BEC3 DEFB $06,$01                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEC5 DEFB $03
; Key/ Door #02.
 $BEC6 DEFB $0A,$17                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEC8 DEFB $09
 $BEC9 DEFB $06,$02                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BECB DEFB $03
; Key/ Door #03.
 $BECC DEFB $06,$17                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BECE DEFB $1D
 $BECF DEFB $15,$03                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BED1 DEFB $03
; Key/ Door #04.
 $BED2 DEFB $0C,$0D                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BED4 DEFB $02
 $BED5 DEFB $15,$04                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BED7 DEFB $03
; Key/ Door #05.
 $BED8 DEFB $08,$0D                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEDA DEFB $1C
 $BEDB DEFB $15,$05                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEDD DEFB $03
; Key/ Door #06.
 $BEDE DEFB $0A,$08                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEE0 DEFB $0D
 $BEE1 DEFB $15,$06                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEE3 DEFB $03
; Key/ Door #07.
 $BEE4 DEFB $06,$08                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEE6 DEFB $0A
 $BEE7 DEFB $0B,$07                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEE9 DEFB $03
 $BEEA DEFB $FF                     ; Terminator.
; Portholes:
 $BEEB DEFB $FF                     ; Terminator.
; Pirates:
 $BEEC DEFB $FF                     ; Terminator.
; Items:
; .
; Item #01.
 $BEED DEFB $0C,$14                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEEF DEFB $02,$02
 $BEF1 DEFB $02                     ; Colour: #INK(#PEEK(#PC)).
 $BEF2 DEFB $01
 $BEF3 DEFB $64                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #02.
 $BEF4 DEFB $08,$14                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEF6 DEFB $02,$02
 $BEF8 DEFB $02                     ; Colour: #INK(#PEEK(#PC)).
 $BEF9 DEFB $01
 $BEFA DEFB $64                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #03.
 $BEFB DEFB $05,$14                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BEFD DEFB $02,$02
 $BEFF DEFB $02                     ; Colour: #INK(#PEEK(#PC)).
 $BF00 DEFB $01
 $BF01 DEFB $64                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #04.
 $BF02 DEFB $09,$0F                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BF04 DEFB $02,$02
 $BF06 DEFB $02                     ; Colour: #INK(#PEEK(#PC)).
 $BF07 DEFB $01
 $BF08 DEFB $64                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #05.
 $BF09 DEFB $05,$0A                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BF0B DEFB $02,$02
 $BF0D DEFB $02                     ; Colour: #INK(#PEEK(#PC)).
 $BF0E DEFB $01
 $BF0F DEFB $64                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #06.
 $BF10 DEFB $08,$05                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BF12 DEFB $02,$02
 $BF14 DEFB $02                     ; Colour: #INK(#PEEK(#PC)).
 $BF15 DEFB $01
 $BF16 DEFB $64                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #07.
 $BF17 DEFB $05,$05                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BF19 DEFB $02,$02
 $BF1B DEFB $02                     ; Colour: #INK(#PEEK(#PC)).
 $BF1C DEFB $01
 $BF1D DEFB $64                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
 $BF1E DEFB $FF                     ; Terminator.
; Furniture:
; .
; Item #01.
 $BF1F DEFB $0F,$11                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BF21 DEFB $38                     ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
 $BF22 DEFB $04                     ; Colour: #INK(#PEEK(#PC)).
 $BF23 DEFB $FF                     ; Terminator.
; Lifts:
; .
; Lift #01.
 $BF24 DEFB $1B,$12                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BF26 DEFB $03,$03
 $BF28 DEFB $00                     ; Horizontal movement: none.
 $BF29 DEFB $FF                     ; Vertical movement: -1.
 $BF2A DEFB $24,$03,$01
 $BF2D DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $BF2E DEFB $13,$03,$03,$03,$00,$00
; Lift #02.
 $BF34 DEFB $18,$0D                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BF36 DEFB $03,$03
 $BF38 DEFB $00                     ; Horizontal movement: none.
 $BF39 DEFB $FF                     ; Vertical movement: -1.
 $BF3A DEFB $24,$03,$01
 $BF3D DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $BF3E DEFB $13,$03,$03,$03,$00,$00
; Lift #03.
 $BF44 DEFB $15,$08                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BF46 DEFB $03,$03
 $BF48 DEFB $00                     ; Horizontal movement: none.
 $BF49 DEFB $FF                     ; Vertical movement: -1.
 $BF4A DEFB $24,$03,$01
 $BF4D DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $BF4E DEFB $13,$03,$03,$03,$00,$00
; Lift #04.
 $BF54 DEFB $12,$03                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $BF56 DEFB $03,$03
 $BF58 DEFB $00                     ; Horizontal movement: none.
 $BF59 DEFB $01                     ; Vertical movement: +1.
 $BF5A DEFB $24,$03,$01
 $BF5D DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $BF5E DEFB $13,$03,$03,$03,$00,$00
 $BF64 DEFB $FF                     ; Terminator.
; Disappearing floors:
 $BF65 DEFB $FF                     ; Terminator.

; Data: Room #17
;
; See #LINK:Rooms#room_17(Room #17).
;
; .
;
; #HTML(<img alt="room-bare-17" src="../images/scr/room-bare-17.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom17
g$BF66 DEFB $06                             ; Key Colour: #INK(#PEEK(#PC)).
 $BF67 DEFB $06                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $BF68 DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $BF69 DEFB $02                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $BF6A DEFB $00                             ; Border Colour: #INK(#PEEK(#PC)).
 $BF6B DEFB $00                             ; Paper Colour: #INK(#PEEK(#PC)).
 $BF6C DEFB $04                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $BF6D DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $BF6E DEFB $21,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF70 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $BF71 DEFB $21,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF73 DEFB $02                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $BF74 DEFB $21,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF76 DEFB $02                             ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $BF77 DEFB $21,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF79 DEFB $02                             ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $BF7A DEFB $21,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF7C DEFB $02                             ; Length: #N(#PEEK(#PC)).
; Scaffold #06.
 $BF7D DEFB $1A,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF7F DEFB $01                             ; Length: #N(#PEEK(#PC)).
; Scaffold #07.
 $BF80 DEFB $1A,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF82 DEFB $01                             ; Length: #N(#PEEK(#PC)).
; Scaffold #08.
 $BF83 DEFB $1A,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF85 DEFB $01                             ; Length: #N(#PEEK(#PC)).
; Scaffold #09.
 $BF86 DEFB $1A,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF88 DEFB $0C                             ; Length: #N(#PEEK(#PC)).
; Scaffold #10.
 $BF89 DEFB $0F,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF8B DEFB $07                             ; Length: #N(#PEEK(#PC)).
; Scaffold #11.
 $BF8C DEFB $0F,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF8E DEFB $07                             ; Length: #N(#PEEK(#PC)).
; Scaffold #12.
 $BF8F DEFB $0F,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF91 DEFB $07                             ; Length: #N(#PEEK(#PC)).
; Scaffold #13.
 $BF92 DEFB $03,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF94 DEFB $01                             ; Length: #N(#PEEK(#PC)).
 $BF95 DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $BF96 DEFB $04,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF98 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $BF99 DEFB $07                             ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $BF9A DEFB $0A,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BF9C DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $BF9D DEFB $0C                             ; Leads to room: #N(#PEEK(#PC)).
 $BF9E DEFB $FF                             ; Terminator.
; Ladders:
 $BF9F DEFB $FF                             ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $BFA0 DEFB $0E,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFA2 DEFB $0D
 $BFA3 DEFB $0B,$01                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFA5 DEFB $03
; Key/ Door #02.
 $BFA6 DEFB $0A,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFA8 DEFB $06
 $BFA9 DEFB $15,$02                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFAB DEFB $03
; Key/ Door #03.
 $BFAC DEFB $06,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFAE DEFB $03
 $BFAF DEFB $0B,$03                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFB1 DEFB $03
; Key/ Door #04.
 $BFB2 DEFB $0E,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFB4 DEFB $20
 $BFB5 DEFB $0B,$04                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFB7 DEFB $03
; Key/ Door #05.
 $BFB8 DEFB $0A,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFBA DEFB $10
 $BFBB DEFB $06,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFBD DEFB $03
 $BFBE DEFB $FF                             ; Terminator.
; Portholes:
 $BFBF DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $BFC0 DEFB $18,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFC2 DEFB $03,$03,$FF,$00,$20,$02,$03,$05
 $BFCA DEFB $01,$03,$00,$18,$06,$03
 $BFD0 DEFB $FF                             ; Terminator.
; Items:
; .
; Item #01.
 $BFD1 DEFB $09,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFD3 DEFB $02,$02
 $BFD5 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $BFD6 DEFB $01
 $BFD7 DEFB $70                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #02.
 $BFD8 DEFB $0C,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFDA DEFB $02,$02
 $BFDC DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $BFDD DEFB $01
 $BFDE DEFB $68                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #03.
 $BFDF DEFB $04,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFE1 DEFB $02,$02
 $BFE3 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $BFE4 DEFB $01
 $BFE5 DEFB $74                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #04.
 $BFE6 DEFB $0C,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFE8 DEFB $02,$02
 $BFEA DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $BFEB DEFB $01
 $BFEC DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #05.
 $BFED DEFB $20,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFEF DEFB $02,$02
 $BFF1 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $BFF2 DEFB $01
 $BFF3 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #06.
 $BFF4 DEFB $0E,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFF6 DEFB $02,$02
 $BFF8 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $BFF9 DEFB $01
 $BFFA DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $BFFB DEFB $FF                             ; Terminator.
; Furniture:
; .
; Item #01.
 $BFFC DEFB $18,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $BFFE DEFB $20                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $BFFF DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
; Item #02.
 $C000 DEFB $0F,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C002 DEFB $20                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C003 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
; Item #03.
 $C004 DEFB $09,$0C                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C006 DEFB $20                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C007 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $C008 DEFB $FF                             ; Terminator.
; Lifts:
; .
; Lift #01.
 $C009 DEFB $1D,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C00B DEFB $03,$03
 $C00D DEFB $00                             ; Horizontal movement: none.
 $C00E DEFB $FF                             ; Vertical movement: -1.
 $C00F DEFB $24,$03,$01
 $C012 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C013 DEFB $13,$03,$03,$01,$00,$00
; Lift #02.
 $C019 DEFB $18,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C01B DEFB $03,$03
 $C01D DEFB $FF                             ; Horizontal movement: -1.
 $C01E DEFB $00                             ; Vertical movement: none.
 $C01F DEFB $21,$03,$01
 $C022 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C023 DEFB $18,$03,$12,$03,$00,$00
; Lift #03.
 $C029 DEFB $12,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C02B DEFB $03,$03
 $C02D DEFB $01                             ; Horizontal movement: +1.
 $C02E DEFB $00                             ; Vertical movement: none.
 $C02F DEFB $21,$03,$01
 $C032 DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C033 DEFB $18,$03,$12,$03,$00,$00
; Lift #04.
 $C039 DEFB $16,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C03B DEFB $03,$03
 $C03D DEFB $01                             ; Horizontal movement: +1.
 $C03E DEFB $00                             ; Vertical movement: none.
 $C03F DEFB $21,$03,$01
 $C042 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C043 DEFB $18,$03,$12,$03,$00,$00
 $C049 DEFB $FF                             ; Terminator.
; Disappearing floors:
; .
; Instance #01.
 $C04A DEFB $1A,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C04C DEFB $82                             ; Width: #N(#PEEK(#PC)).
 $C04D DEFB $8C,$46,$00
; Instance #02.
 $C050 DEFB $1A,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C052 DEFB $02                             ; Width: #N(#PEEK(#PC)).
 $C053 DEFB $8C,$46,$46
; Instance #03.
 $C056 DEFB $1A,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C058 DEFB $02                             ; Width: #N(#PEEK(#PC)).
 $C059 DEFB $8C,$46,$00
 $C05C DEFB $FF                             ; Terminator.

; Data: Room #16
;
; See #LINK:Rooms#room_16(Room #16).
;
; .
;
; #HTML(<img alt="room-bare-16" src="../images/scr/room-bare-16.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom16
g$C05D DEFB $07                             ; Key Colour: #INK(#PEEK(#PC)).
 $C05E DEFB $06                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $C05F DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $C060 DEFB $06                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $C061 DEFB $00                             ; Border Colour: #INK(#PEEK(#PC)).
 $C062 DEFB $00                             ; Paper Colour: #INK(#PEEK(#PC)).
 $C063 DEFB $02                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $C064 DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $C065 DEFB $21,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C067 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $C068 DEFB $21,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C06A DEFB $0B                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $C06B DEFB $21,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C06D DEFB $0B                             ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $C06E DEFB $21,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C070 DEFB $0B                             ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $C071 DEFB $05,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C073 DEFB $02                             ; Length: #N(#PEEK(#PC)).
; Scaffold #06.
 $C074 DEFB $21,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C076 DEFB $0B                             ; Length: #N(#PEEK(#PC)).
; Scaffold #07.
 $C077 DEFB $05,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C079 DEFB $02                             ; Length: #N(#PEEK(#PC)).
 $C07A DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $C07B DEFB $1D,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C07D DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C07E DEFB $0B                             ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $C07F DEFB $04,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C081 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C082 DEFB $04                             ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $C083 DEFB $0F,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C085 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C086 DEFB $06                             ; Leads to room: #N(#PEEK(#PC)).
 $C087 DEFB $FF                             ; Terminator.
; Ladders:
 $C088 DEFB $FF                             ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $C089 DEFB $1A,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C08B DEFB $17
 $C08C DEFB $0B,$01                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C08E DEFB $03
; Key/ Door #02.
 $C08F DEFB $12,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C091 DEFB $05
 $C092 DEFB $10,$02                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C094 DEFB $03
; Key/ Door #03.
 $C095 DEFB $1C,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C097 DEFB $20
 $C098 DEFB $06,$03                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C09A DEFB $03
; Key/ Door #04.
 $C09B DEFB $14,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C09D DEFB $18
 $C09E DEFB $06,$04                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C0A0 DEFB $03
; Key/ Door #05.
 $C0A1 DEFB $1A,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C0A3 DEFB $20
 $C0A4 DEFB $15,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C0A6 DEFB $03
; Key/ Door #06.
 $C0A7 DEFB $12,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C0A9 DEFB $15
 $C0AA DEFB $15,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C0AC DEFB $03
 $C0AD DEFB $FF                             ; Terminator.
; Portholes:
 $C0AE DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $C0AF DEFB $21,$10                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C0B1 DEFB $03,$03,$FF,$00,$20,$02,$03,$05
 $C0B9 DEFB $01,$03,$00,$21,$10,$03
; Pirate #02.
 $C0BF DEFB $07,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C0C1 DEFB $03,$03,$FF,$00,$20,$02,$03,$05
 $C0C9 DEFB $01,$03,$00,$07,$06,$03
 $C0CF DEFB $FF                             ; Terminator.
; Items:
; .
; Item #01.
 $C0D0 DEFB $1E,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C0D2 DEFB $02,$02
 $C0D4 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C0D5 DEFB $01
 $C0D6 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #02.
 $C0D7 DEFB $18,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C0D9 DEFB $02,$02
 $C0DB DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C0DC DEFB $01
 $C0DD DEFB $68                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #03.
 $C0DE DEFB $12,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C0E0 DEFB $02,$02
 $C0E2 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C0E3 DEFB $01
 $C0E4 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #04.
 $C0E5 DEFB $1A,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C0E7 DEFB $02,$02
 $C0E9 DEFB $03                             ; Colour: #INK(#PEEK(#PC)).
 $C0EA DEFB $01
 $C0EB DEFB $60                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #05.
 $C0EC DEFB $1F,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C0EE DEFB $02,$02
 $C0F0 DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C0F1 DEFB $01
 $C0F2 DEFB $50                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #06.
 $C0F3 DEFB $1E,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C0F5 DEFB $02,$02
 $C0F7 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C0F8 DEFB $01
 $C0F9 DEFB $6C                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #07.
 $C0FA DEFB $16,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C0FC DEFB $02,$02
 $C0FE DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C0FF DEFB $01
 $C100 DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C101 DEFB $FF                             ; Terminator.
; Furniture:
; .
; Item #01.
 $C102 DEFB $19,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C104 DEFB $68                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C105 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
; Item #02.
 $C106 DEFB $13,$0C                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C108 DEFB $38                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C109 DEFB $03                             ; Colour: #INK(#PEEK(#PC)).
 $C10A DEFB $FF                             ; Terminator.
; Lifts:
; .
; Lift #01.
 $C10B DEFB $0B,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C10D DEFB $03,$03
 $C10F DEFB $00                             ; Horizontal movement: none.
 $C110 DEFB $01                             ; Vertical movement: +1.
 $C111 DEFB $24,$03,$01
 $C114 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C115 DEFB $13,$03,$03,$01,$00,$00
; Lift #02.
 $C11B DEFB $08,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C11D DEFB $03,$03
 $C11F DEFB $00                             ; Horizontal movement: none.
 $C120 DEFB $FF                             ; Vertical movement: -1.
 $C121 DEFB $24,$03,$01
 $C124 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C125 DEFB $13,$03,$03,$01,$00,$00
 $C12B DEFB $FF                             ; Terminator.
; Disappearing floors:
 $C12C DEFB $FF                             ; Terminator.

; Data: Room #15
;
; See #LINK:Rooms#room_15(Room #15).
;
; .
;
; #HTML(<img alt="room-bare-15" src="../images/scr/room-bare-15.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom15
g$C12D DEFB $07                     ; Key Colour: #INK(#PEEK(#PC)).
 $C12E DEFB $07                     ; Closed Door Colour: #INK(#PEEK(#PC)).
 $C12F DEFB $00                     ; Unused?: #INK(#PEEK(#PC)).
 $C130 DEFB $05                     ; Scaffolding Colour: #INK(#PEEK(#PC)).
 $C131 DEFB $03                     ; Border Colour: #INK(#PEEK(#PC)).
 $C132 DEFB $00                     ; Paper Colour: #INK(#PEEK(#PC)).
 $C133 DEFB $06                     ; Ladder Colour: #INK(#PEEK(#PC)).
 $C134 DEFB $FF                     ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $C135 DEFB $21,$17                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C137 DEFB $10                     ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $C138 DEFB $21,$12                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C13A DEFB $04                     ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $C13B DEFB $21,$0D                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C13D DEFB $04                     ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $C13E DEFB $21,$08                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C140 DEFB $04                     ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $C141 DEFB $15,$12                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C143 DEFB $04                     ; Length: #N(#PEEK(#PC)).
; Scaffold #06.
 $C144 DEFB $15,$0D                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C146 DEFB $04                     ; Length: #N(#PEEK(#PC)).
; Scaffold #07.
 $C147 DEFB $15,$08                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C149 DEFB $04                     ; Length: #N(#PEEK(#PC)).
; Scaffold #08.
 $C14A DEFB $09,$12                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C14C DEFB $04                     ; Length: #N(#PEEK(#PC)).
; Scaffold #09.
 $C14D DEFB $09,$0D                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C14F DEFB $04                     ; Length: #N(#PEEK(#PC)).
; Scaffold #10.
 $C150 DEFB $09,$08                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C152 DEFB $04                     ; Length: #N(#PEEK(#PC)).
; Scaffold #11.
 $C153 DEFB $21,$03                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C155 DEFB $04                     ; Length: #N(#PEEK(#PC)).
; Scaffold #12.
 $C156 DEFB $15,$03                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C158 DEFB $04                     ; Length: #N(#PEEK(#PC)).
; Scaffold #13.
 $C159 DEFB $09,$03                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C15B DEFB $04                     ; Length: #N(#PEEK(#PC)).
 $C15C DEFB $FF                     ; Terminator.
; Doors:
; .
; Door #01.
 $C15D DEFB $12,$16                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C15F DEFB $07                     ; Colour: #INK(#PEEK(#PC)).
 $C160 DEFB $08                     ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $C161 DEFB $05,$0C                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C163 DEFB $06                     ; Colour: #INK(#PEEK(#PC)).
 $C164 DEFB $03                     ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $C165 DEFB $1D,$07                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C167 DEFB $02                     ; Colour: #INK(#PEEK(#PC)).
 $C168 DEFB $0E                     ; Leads to room: #N(#PEEK(#PC)).
 $C169 DEFB $FF                     ; Terminator.
; Ladders:
 $C16A DEFB $FF                     ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $C16B DEFB $1C,$17                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C16D DEFB $03
 $C16E DEFB $15,$01                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C170 DEFB $03
; Key/ Door #02.
 $C171 DEFB $08,$17                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C173 DEFB $21
 $C174 DEFB $0B,$02                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C176 DEFB $03
; Key/ Door #03.
 $C177 DEFB $1C,$12                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C179 DEFB $02
 $C17A DEFB $10,$03                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C17C DEFB $03
; Key/ Door #04.
 $C17D DEFB $06,$12                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C17F DEFB $21
 $C180 DEFB $15,$04                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C182 DEFB $03
; Key/ Door #05.
 $C183 DEFB $1C,$0D                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C185 DEFB $03
 $C186 DEFB $06,$05                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C188 DEFB $03
; Key/ Door #06.
 $C189 DEFB $08,$08                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C18B DEFB $0E
 $C18C DEFB $0B,$06                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C18E DEFB $03
 $C18F DEFB $FF                     ; Terminator.
; Portholes:
 $C190 DEFB $FF                     ; Terminator.
; Pirates:
 $C191 DEFB $FF                     ; Terminator.
; Items:
; .
; Item #01.
 $C192 DEFB $1F,$14                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C194 DEFB $02,$02
 $C196 DEFB $04                     ; Colour: #INK(#PEEK(#PC)).
 $C197 DEFB $01
 $C198 DEFB $64                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #02.
 $C199 DEFB $15,$14                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C19B DEFB $02,$02
 $C19D DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $C19E DEFB $01
 $C19F DEFB $70                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #03.
 $C1A0 DEFB $06,$14                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C1A2 DEFB $02,$02
 $C1A4 DEFB $04                     ; Colour: #INK(#PEEK(#PC)).
 $C1A5 DEFB $01
 $C1A6 DEFB $60                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #04.
 $C1A7 DEFB $20,$0F                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C1A9 DEFB $02,$02
 $C1AB DEFB $07                     ; Colour: #INK(#PEEK(#PC)).
 $C1AC DEFB $01
 $C1AD DEFB $68                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #05.
 $C1AE DEFB $0F,$0F                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C1B0 DEFB $02,$02
 $C1B2 DEFB $03                     ; Colour: #INK(#PEEK(#PC)).
 $C1B3 DEFB $01
 $C1B4 DEFB $64                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #06.
 $C1B5 DEFB $04,$0F                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C1B7 DEFB $02,$02
 $C1B9 DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $C1BA DEFB $01
 $C1BB DEFB $58                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #07.
 $C1BC DEFB $1F,$0A                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C1BE DEFB $02,$02
 $C1C0 DEFB $07                     ; Colour: #INK(#PEEK(#PC)).
 $C1C1 DEFB $01
 $C1C2 DEFB $50                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #08.
 $C1C3 DEFB $15,$0A                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C1C5 DEFB $02,$02
 $C1C7 DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $C1C8 DEFB $01
 $C1C9 DEFB $6C                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #09.
 $C1CA DEFB $15,$05                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C1CC DEFB $02,$02
 $C1CE DEFB $04                     ; Colour: #INK(#PEEK(#PC)).
 $C1CF DEFB $01
 $C1D0 DEFB $64                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #10.
 $C1D1 DEFB $06,$05                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C1D3 DEFB $02,$02
 $C1D5 DEFB $07                     ; Colour: #INK(#PEEK(#PC)).
 $C1D6 DEFB $01
 $C1D7 DEFB $54                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
 $C1D8 DEFB $FF                     ; Terminator.
; Furniture:
; .
; Item #01.
 $C1D9 DEFB $15,$11                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C1DB DEFB $20                     ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
 $C1DC DEFB $04                     ; Colour: #INK(#PEEK(#PC)).
; Item #02.
 $C1DD DEFB $13,$07                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C1DF DEFB $20                     ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
 $C1E0 DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $C1E1 DEFB $FF                     ; Terminator.
; Lifts:
; .
; Lift #01.
 $C1E2 DEFB $19,$13                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C1E4 DEFB $03,$01
 $C1E6 DEFB $00                     ; Horizontal movement: none.
 $C1E7 DEFB $FF                     ; Vertical movement: -1.
 $C1E8 DEFB $24,$04,$01
 $C1EB DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $C1EC DEFB $13,$03,$03,$01,$00,$00
; Lift #02.
 $C1F2 DEFB $0D,$04                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C1F4 DEFB $03,$01
 $C1F6 DEFB $00                     ; Horizontal movement: none.
 $C1F7 DEFB $01                     ; Vertical movement: +1.
 $C1F8 DEFB $24,$04,$01
 $C1FB DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $C1FC DEFB $13,$03,$03,$01,$00,$00
 $C202 DEFB $FF                     ; Terminator.
; Disappearing floors:
 $C203 DEFB $FF                     ; Terminator.

; Data: Room #14
;
; See #LINK:Rooms#room_14(Room #14).
;
; .
;
; #HTML(<img alt="room-bare-14" src="../images/scr/room-bare-14.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom14
g$C204 DEFB $07                             ; Key Colour: #INK(#PEEK(#PC)).
 $C205 DEFB $06                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $C206 DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $C207 DEFB $02                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $C208 DEFB $01                             ; Border Colour: #INK(#PEEK(#PC)).
 $C209 DEFB $00                             ; Paper Colour: #INK(#PEEK(#PC)).
 $C20A DEFB $04                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $C20B DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $C20C DEFB $21,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C20E DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $C20F DEFB $21,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C211 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $C212 DEFB $21,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C214 DEFB $04                             ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $C215 DEFB $21,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C217 DEFB $04                             ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $C218 DEFB $21,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C21A DEFB $04                             ; Length: #N(#PEEK(#PC)).
; Scaffold #06.
 $C21B DEFB $09,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C21D DEFB $04                             ; Length: #N(#PEEK(#PC)).
; Scaffold #07.
 $C21E DEFB $09,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C220 DEFB $04                             ; Length: #N(#PEEK(#PC)).
; Scaffold #08.
 $C221 DEFB $09,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C223 DEFB $04                             ; Length: #N(#PEEK(#PC)).
 $C224 DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $C225 DEFB $10,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C227 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C228 DEFB $09                             ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $C229 DEFB $08,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C22B DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C22C DEFB $02                             ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $C22D DEFB $1D,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C22F DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $C230 DEFB $0F                             ; Leads to room: #N(#PEEK(#PC)).
 $C231 DEFB $FF                             ; Terminator.
; Ladders:
; .
; Ladder #01.
 $C232 DEFB $04,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #02.
 $C234 DEFB $20,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #03.
 $C236 DEFB $04,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C238 DEFB $FF                             ; Terminator.
; Keys and locked doors.
 $C239 DEFB $FF                             ; Terminator.
; Portholes:
 $C23A DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $C23B DEFB $21,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C23D DEFB $03,$03,$FF,$00,$20,$02,$03,$06
 $C245 DEFB $01,$03,$00,$21,$06,$03
 $C24B DEFB $FF                             ; Terminator.
; Items:
; .
; Item #01.
 $C24C DEFB $21,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C24E DEFB $02,$02
 $C250 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C251 DEFB $01
 $C252 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #02.
 $C253 DEFB $07,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C255 DEFB $02,$02
 $C257 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C258 DEFB $01
 $C259 DEFB $5C                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #03.
 $C25A DEFB $1E,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C25C DEFB $02,$02
 $C25E DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C25F DEFB $01
 $C260 DEFB $6C                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #04.
 $C261 DEFB $1D,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C263 DEFB $02,$02
 $C265 DEFB $03                             ; Colour: #INK(#PEEK(#PC)).
 $C266 DEFB $01
 $C267 DEFB $70                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #05.
 $C268 DEFB $06,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C26A DEFB $02,$02
 $C26C DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C26D DEFB $01
 $C26E DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #06.
 $C26F DEFB $13,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C271 DEFB $02,$02
 $C273 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C274 DEFB $01
 $C275 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #07.
 $C276 DEFB $09,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C278 DEFB $02,$02
 $C27A DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C27B DEFB $01
 $C27C DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C27D DEFB $FF                             ; Terminator.
; Furniture:
; .
; Item #01.
 $C27E DEFB $19,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C280 DEFB $68                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C281 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
; Item #02.
 $C282 DEFB $11,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C284 DEFB $38                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C285 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
; Item #03.
 $C286 DEFB $1F,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C288 DEFB $50                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C289 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C28A DEFB $FF                             ; Terminator.
; Lifts:
; .
; Lift #01.
 $C28B DEFB $19,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C28D DEFB $03,$03
 $C28F DEFB $FF                             ; Horizontal movement: -1.
 $C290 DEFB $00                             ; Vertical movement: none.
 $C291 DEFB $21,$03,$01
 $C294 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C295 DEFB $19,$03,$0C,$03,$00,$00
; Lift #02.
 $C29B DEFB $0C,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C29D DEFB $03,$03
 $C29F DEFB $01                             ; Horizontal movement: +1.
 $C2A0 DEFB $00                             ; Vertical movement: none.
 $C2A1 DEFB $21,$03,$01
 $C2A4 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C2A5 DEFB $19,$03,$0C,$03,$00,$00
; Lift #03.
 $C2AB DEFB $19,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2AD DEFB $03,$03
 $C2AF DEFB $FF                             ; Horizontal movement: -1.
 $C2B0 DEFB $00                             ; Vertical movement: none.
 $C2B1 DEFB $21,$03,$01
 $C2B4 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C2B5 DEFB $19,$03,$0C,$03,$00,$00
 $C2BB DEFB $FF                             ; Terminator.
; Disappearing floors:
 $C2BC DEFB $FF                             ; Terminator.

; Data: Room #13
;
; See #LINK:Rooms#room_13(Room #13).
;
; .
;
; #HTML(<img alt="room-bare-13" src="../images/scr/room-bare-13.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom13
g$C2BD DEFB $07                             ; Key Colour: #INK(#PEEK(#PC)).
 $C2BE DEFB $06                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $C2BF DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $C2C0 DEFB $06                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $C2C1 DEFB $00                             ; Border Colour: #INK(#PEEK(#PC)).
 $C2C2 DEFB $00                             ; Paper Colour: #INK(#PEEK(#PC)).
 $C2C3 DEFB $07                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $C2C4 DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $C2C5 DEFB $21,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2C7 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $C2C8 DEFB $21,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2CA DEFB $05                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $C2CB DEFB $21,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2CD DEFB $05                             ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $C2CE DEFB $21,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2D0 DEFB $05                             ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $C2D1 DEFB $13,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2D3 DEFB $09                             ; Length: #N(#PEEK(#PC)).
; Scaffold #06.
 $C2D4 DEFB $13,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2D6 DEFB $09                             ; Length: #N(#PEEK(#PC)).
; Scaffold #07.
 $C2D7 DEFB $13,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2D9 DEFB $09                             ; Length: #N(#PEEK(#PC)).
; Scaffold #08.
 $C2DA DEFB $21,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2DC DEFB $05                             ; Length: #N(#PEEK(#PC)).
; Scaffold #09.
 $C2DD DEFB $13,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2DF DEFB $09                             ; Length: #N(#PEEK(#PC)).
 $C2E0 DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $C2E1 DEFB $05,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2E3 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C2E4 DEFB $09                             ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $C2E5 DEFB $20,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2E7 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $C2E8 DEFB $0A                             ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $C2E9 DEFB $1C,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2EB DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C2EC DEFB $05                             ; Leads to room: #N(#PEEK(#PC)).
 $C2ED DEFB $FF                             ; Terminator.
; Ladders:
 $C2EE DEFB $FF                             ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $C2EF DEFB $10,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2F1 DEFB $20
 $C2F2 DEFB $0B,$01                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2F4 DEFB $03
; Key/ Door #02.
 $C2F5 DEFB $08,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2F7 DEFB $03
 $C2F8 DEFB $06,$02                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2FA DEFB $03
; Key/ Door #03.
 $C2FB DEFB $1A,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C2FD DEFB $12
 $C2FE DEFB $10,$03                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C300 DEFB $03
; Key/ Door #04.
 $C301 DEFB $10,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C303 DEFB $20
 $C304 DEFB $15,$04                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C306 DEFB $03
; Key/ Door #05.
 $C307 DEFB $0A,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C309 DEFB $0F
 $C30A DEFB $0B,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C30C DEFB $03
 $C30D DEFB $FF                             ; Terminator.
; Portholes:
; .
; Porthole #01.
 $C30E DEFB $1C,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C310 DEFB $20                             ; UDG: #R($914C+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Porthole #02.
 $C311 DEFB $0D,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C313 DEFB $30                             ; UDG: #R($914C+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C314 DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $C315 DEFB $21,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C317 DEFB $03,$03,$FF,$00,$20,$02,$03,$07
 $C31F DEFB $01,$03,$00,$21,$06,$03
 $C325 DEFB $FF                             ; Terminator.
; Items:
; .
; Item #01.
 $C326 DEFB $1D,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C328 DEFB $02,$02
 $C32A DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C32B DEFB $01
 $C32C DEFB $50                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #02.
 $C32D DEFB $07,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C32F DEFB $02,$02
 $C331 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C332 DEFB $01
 $C333 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #03.
 $C334 DEFB $06,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C336 DEFB $02,$02
 $C338 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C339 DEFB $01
 $C33A DEFB $6C                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #04.
 $C33B DEFB $1E,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C33D DEFB $02,$02
 $C33F DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C340 DEFB $01
 $C341 DEFB $70                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #05.
 $C342 DEFB $05,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C344 DEFB $02,$02
 $C346 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $C347 DEFB $01
 $C348 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #06.
 $C349 DEFB $12,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C34B DEFB $02,$02
 $C34D DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C34E DEFB $01
 $C34F DEFB $68                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #07.
 $C350 DEFB $07,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C352 DEFB $02,$02
 $C354 DEFB $03                             ; Colour: #INK(#PEEK(#PC)).
 $C355 DEFB $01
 $C356 DEFB $60                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C357 DEFB $FF                             ; Terminator.
; Furniture:
; .
; Item #01.
 $C358 DEFB $13,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C35A DEFB $20                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C35B DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
; Item #02.
 $C35C DEFB $0D,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C35E DEFB $38                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C35F DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
; Item #03.
 $C360 DEFB $0B,$0C                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C362 DEFB $38                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C363 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C364 DEFB $FF                             ; Terminator.
; Lifts:
; .
; Lift #01.
 $C365 DEFB $17,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C367 DEFB $03,$03
 $C369 DEFB $00                             ; Horizontal movement: none.
 $C36A DEFB $FF                             ; Vertical movement: -1.
 $C36B DEFB $24,$04,$01
 $C36E DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C36F DEFB $13,$03,$03,$01,$00,$00
 $C375 DEFB $FF                             ; Terminator.
; Disappearing floors:
 $C376 DEFB $FF                             ; Terminator.

; Data: Room #12
;
; See #LINK:Rooms#room_12(Room #12).
;
; .
;
; #HTML(<img alt="room-bare-12" src="../images/scr/room-bare-12.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom12
g$C377 DEFB $06                             ; Key Colour: #INK(#PEEK(#PC)).
 $C378 DEFB $06                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $C379 DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $C37A DEFB $05                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $C37B DEFB $00                             ; Border Colour: #INK(#PEEK(#PC)).
 $C37C DEFB $01                             ; Paper Colour: #INK(#PEEK(#PC)).
 $C37D DEFB $02                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $C37E DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $C37F DEFB $21,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C381 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $C382 DEFB $21,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C384 DEFB $08                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $C385 DEFB $0D,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C387 DEFB $06                             ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $C388 DEFB $21,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C38A DEFB $08                             ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $C38B DEFB $0D,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C38D DEFB $02                             ; Length: #N(#PEEK(#PC)).
; Scaffold #06.
 $C38E DEFB $05,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C390 DEFB $02                             ; Length: #N(#PEEK(#PC)).
; Scaffold #07.
 $C391 DEFB $21,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C393 DEFB $06                             ; Length: #N(#PEEK(#PC)).
; Scaffold #08.
 $C394 DEFB $0F,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C396 DEFB $03                             ; Length: #N(#PEEK(#PC)).
; Scaffold #09.
 $C397 DEFB $05,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C399 DEFB $02                             ; Length: #N(#PEEK(#PC)).
; Scaffold #10.
 $C39A DEFB $21,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C39C DEFB $10                             ; Length: #N(#PEEK(#PC)).
 $C39D DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $C39E DEFB $1A,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3A0 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C3A1 DEFB $06                             ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $C3A2 DEFB $1A,$0C                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3A4 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C3A5 DEFB $08                             ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $C3A6 DEFB $0A,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3A8 DEFB $03                             ; Colour: #INK(#PEEK(#PC)).
 $C3A9 DEFB $11                             ; Leads to room: #N(#PEEK(#PC)).
 $C3AA DEFB $FF                             ; Terminator.
; Ladders:
; .
; Ladder #01.
 $C3AB DEFB $0D,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3AD DEFB $FF                             ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $C3AE DEFB $07,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3B0 DEFB $1D
 $C3B1 DEFB $0B,$01                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3B3 DEFB $03
; Key/ Door #02.
 $C3B4 DEFB $14,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3B6 DEFB $03
 $C3B7 DEFB $10,$02                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3B9 DEFB $03
; Key/ Door #03.
 $C3BA DEFB $18,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3BC DEFB $1D
 $C3BD DEFB $10,$03                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3BF DEFB $03
 $C3C0 DEFB $FF                             ; Terminator.
; Portholes:
 $C3C1 DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $C3C2 DEFB $21,$15                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3C4 DEFB $03,$03,$FF,$00,$20,$02,$03,$07
 $C3CC DEFB $01,$03,$00,$21,$15,$03
; Pirate #02.
 $C3D2 DEFB $21,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3D4 DEFB $03,$03,$FF,$00,$20,$02,$03,$05
 $C3DC DEFB $01,$03,$00,$21,$06,$03
; Pirate #03.
 $C3E2 DEFB $21,$0B                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3E4 DEFB $03,$03,$FF,$00,$20,$02,$03,$06
 $C3EC DEFB $01,$03,$00,$21,$0B,$03
 $C3F2 DEFB $FF                             ; Terminator.
; Items:
; .
; Item #01.
 $C3F3 DEFB $1D,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3F5 DEFB $02,$02
 $C3F7 DEFB $03                             ; Colour: #INK(#PEEK(#PC)).
 $C3F8 DEFB $01
 $C3F9 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #02.
 $C3FA DEFB $05,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C3FC DEFB $02,$02
 $C3FE DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C3FF DEFB $01
 $C400 DEFB $74                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #03.
 $C401 DEFB $04,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C403 DEFB $02,$02
 $C405 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C406 DEFB $01
 $C407 DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #04.
 $C408 DEFB $1D,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C40A DEFB $02,$02
 $C40C DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C40D DEFB $01
 $C40E DEFB $68                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C40F DEFB $FF                             ; Terminator.
; Furniture:
 $C410 DEFB $FF                             ; Terminator.
; Lifts:
; .
; Lift #01.
 $C411 DEFB $11,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C413 DEFB $03,$03
 $C415 DEFB $00                             ; Horizontal movement: none.
 $C416 DEFB $FF                             ; Vertical movement: -1.
 $C417 DEFB $24,$04,$01
 $C41A DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C41B DEFB $13,$03,$0D,$03,$00,$00
; Lift #02.
 $C421 DEFB $09,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C423 DEFB $03,$03
 $C425 DEFB $00                             ; Horizontal movement: none.
 $C426 DEFB $01                             ; Vertical movement: +1.
 $C427 DEFB $24,$04,$01
 $C42A DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C42B DEFB $0E,$03,$08,$03,$00,$00
; Lift #03.
 $C431 DEFB $15,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C433 DEFB $03,$03
 $C435 DEFB $FF                             ; Horizontal movement: -1.
 $C436 DEFB $00                             ; Vertical movement: none.
 $C437 DEFB $21,$03,$01
 $C43A DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C43B DEFB $15,$03,$12,$03,$00,$00
 $C441 DEFB $FF                             ; Terminator.
; Disappearing floors:
; .
; Instance #01.
 $C442 DEFB $0B,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C444 DEFB $04                             ; Width: #N(#PEEK(#PC)).
 $C445 DEFB $32,$4B,$00
 $C448 DEFB $FF                             ; Terminator.

; Data: Room #11
;
; See #LINK:Rooms#room_11(Room #11).
;
; .
;
; #HTML(<img alt="room-bare-11" src="../images/scr/room-bare-11.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom11
g$C449 DEFB $06                             ; Key Colour: #INK(#PEEK(#PC)).
 $C44A DEFB $04                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $C44B DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $C44C DEFB $04                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $C44D DEFB $00                             ; Border Colour: #INK(#PEEK(#PC)).
 $C44E DEFB $01                             ; Paper Colour: #INK(#PEEK(#PC)).
 $C44F DEFB $04                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $C450 DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $C451 DEFB $21,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C453 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $C454 DEFB $21,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C456 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $C457 DEFB $21,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C459 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $C45A DEFB $21,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C45C DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $C45D DEFB $21,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C45F DEFB $10                             ; Length: #N(#PEEK(#PC)).
 $C460 DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $C461 DEFB $10,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C463 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C464 DEFB $05                             ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $C465 DEFB $1D,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C467 DEFB $03                             ; Colour: #INK(#PEEK(#PC)).
 $C468 DEFB $10                             ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $C469 DEFB $06,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C46B DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C46C DEFB $01                             ; Leads to room: #N(#PEEK(#PC)).
 $C46D DEFB $FF                             ; Terminator.
; Ladders:
; .
; Ladder #01.
 $C46E DEFB $08,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #02.
 $C470 DEFB $20,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #03.
 $C472 DEFB $0A,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C474 DEFB $FF                             ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $C475 DEFB $16,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C477 DEFB $03
 $C478 DEFB $10,$01                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C47A DEFB $03
; Key/ Door #02.
 $C47B DEFB $0A,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C47D DEFB $14
 $C47E DEFB $15,$02                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C480 DEFB $03
; Key/ Door #03.
 $C481 DEFB $16,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C483 DEFB $07
 $C484 DEFB $06,$03                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C486 DEFB $03
; Key/ Door #04.
 $C487 DEFB $0E,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C489 DEFB $20
 $C48A DEFB $06,$04                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C48C DEFB $03
; Key/ Door #05.
 $C48D DEFB $18,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C48F DEFB $14
 $C490 DEFB $10,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C492 DEFB $03
; Key/ Door #06.
 $C493 DEFB $12,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C495 DEFB $18
 $C496 DEFB $10,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C498 DEFB $03
 $C499 DEFB $FF                             ; Terminator.
; Portholes:
 $C49A DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $C49B DEFB $08,$10                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C49D DEFB $03,$03,$FF,$00,$20,$02,$03,$07
 $C4A5 DEFB $01,$03,$00,$08,$10,$03
 $C4AB DEFB $FF                             ; Terminator.
; Items:
; .
; Item #01.
 $C4AC DEFB $19,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C4AE DEFB $02,$02
 $C4B0 DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C4B1 DEFB $01
 $C4B2 DEFB $6C                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #02.
 $C4B3 DEFB $05,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C4B5 DEFB $02,$02
 $C4B7 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C4B8 DEFB $01
 $C4B9 DEFB $78                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #03.
 $C4BA DEFB $12,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C4BC DEFB $02,$02
 $C4BE DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C4BF DEFB $01
 $C4C0 DEFB $74                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #04.
 $C4C1 DEFB $0B,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C4C3 DEFB $02,$02
 $C4C5 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C4C6 DEFB $01
 $C4C7 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #05.
 $C4C8 DEFB $1D,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C4CA DEFB $02,$02
 $C4CC DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C4CD DEFB $01
 $C4CE DEFB $5C                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #06.
 $C4CF DEFB $15,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C4D1 DEFB $02,$02
 $C4D3 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C4D4 DEFB $01
 $C4D5 DEFB $54                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C4D6 DEFB $FF                             ; Terminator.
; Furniture:
; .
; Item #01.
 $C4D7 DEFB $20,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C4D9 DEFB $68                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C4DA DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
; Item #02.
 $C4DB DEFB $07,$0C                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C4DD DEFB $50                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C4DE DEFB $03                             ; Colour: #INK(#PEEK(#PC)).
 $C4DF DEFB $FF                             ; Terminator.
; Lifts:
 $C4E0 DEFB $FF                             ; Terminator.
; Disappearing floors:
; .
; Instance #01.
 $C4E1 DEFB $1D,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C4E3 DEFB $04                             ; Width: #N(#PEEK(#PC)).
 $C4E4 DEFB $32,$32,$00
; Instance #02.
 $C4E7 DEFB $17,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C4E9 DEFB $05                             ; Width: #N(#PEEK(#PC)).
 $C4EA DEFB $2D,$37,$00
; Instance #03.
 $C4ED DEFB $10,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C4EF DEFB $04                             ; Width: #N(#PEEK(#PC)).
 $C4F0 DEFB $28,$3C,$00
 $C4F3 DEFB $FF                             ; Terminator.

; Data: Room #10
;
; See #LINK:Rooms#room_10(Room #10).
;
; .
;
; #HTML(<img alt="room-bare-10" src="../images/scr/room-bare-10.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom10
g$C4F4 DEFB $07                     ; Key Colour: #INK(#PEEK(#PC)).
 $C4F5 DEFB $06                     ; Closed Door Colour: #INK(#PEEK(#PC)).
 $C4F6 DEFB $00                     ; Unused?: #INK(#PEEK(#PC)).
 $C4F7 DEFB $06                     ; Scaffolding Colour: #INK(#PEEK(#PC)).
 $C4F8 DEFB $00                     ; Border Colour: #INK(#PEEK(#PC)).
 $C4F9 DEFB $01                     ; Paper Colour: #INK(#PEEK(#PC)).
 $C4FA DEFB $06                     ; Ladder Colour: #INK(#PEEK(#PC)).
 $C4FB DEFB $FF                     ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $C4FC DEFB $21,$17                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C4FE DEFB $10                     ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $C4FF DEFB $21,$12                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C501 DEFB $05                     ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $C502 DEFB $21,$0D                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C504 DEFB $05                     ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $C505 DEFB $21,$08                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C507 DEFB $05                     ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $C508 DEFB $0B,$12                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C50A DEFB $05                     ; Length: #N(#PEEK(#PC)).
; Scaffold #06.
 $C50B DEFB $0B,$0D                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C50D DEFB $05                     ; Length: #N(#PEEK(#PC)).
; Scaffold #07.
 $C50E DEFB $0B,$08                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C510 DEFB $05                     ; Length: #N(#PEEK(#PC)).
; Scaffold #08.
 $C511 DEFB $21,$03                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C513 DEFB $05                     ; Length: #N(#PEEK(#PC)).
; Scaffold #09.
 $C514 DEFB $0B,$03                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C516 DEFB $05                     ; Length: #N(#PEEK(#PC)).
; Scaffold #10.
 $C517 DEFB $14,$03                 ; Start Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C519 DEFB $03                     ; Length: #N(#PEEK(#PC)).
 $C51A DEFB $FF                     ; Terminator.
; Doors:
; .
; Door #01.
 $C51B DEFB $20,$11                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C51D DEFB $02                     ; Colour: #INK(#PEEK(#PC)).
 $C51E DEFB $0D                     ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $C51F DEFB $1D,$0C                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C521 DEFB $04                     ; Colour: #INK(#PEEK(#PC)).
 $C522 DEFB $04                     ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $C523 DEFB $11,$07                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C525 DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $C526 DEFB $15                     ; Leads to room: #N(#PEEK(#PC)).
; Door #04.
 $C527 DEFB $04,$07                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C529 DEFB $04                     ; Colour: #INK(#PEEK(#PC)).
 $C52A DEFB $13                     ; Leads to room: #N(#PEEK(#PC)).
 $C52B DEFB $FF                     ; Terminator.
; Ladders:
 $C52C DEFB $FF                     ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $C52D DEFB $1A,$17                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C52F DEFB $03
 $C530 DEFB $15,$01                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C532 DEFB $03
; Key/ Door #02.
 $C533 DEFB $08,$17                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C535 DEFB $20
 $C536 DEFB $0B,$02                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C538 DEFB $03
; Key/ Door #03.
 $C539 DEFB $08,$12                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C53B DEFB $1D
 $C53C DEFB $10,$03                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C53E DEFB $03
; Key/ Door #04.
 $C53F DEFB $08,$0D                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C541 DEFB $20
 $C542 DEFB $06,$04                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C544 DEFB $03
; Key/ Door #05.
 $C545 DEFB $1E,$08                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C547 DEFB $05
 $C548 DEFB $10,$05                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C54A DEFB $03
; Key/ Door #06.
 $C54B DEFB $08,$08                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C54D DEFB $20
 $C54E DEFB $15,$06                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C550 DEFB $03
 $C551 DEFB $FF                     ; Terminator.
; Portholes:
 $C552 DEFB $FF                     ; Terminator.
; Pirates:
 $C553 DEFB $FF                     ; Terminator.
; Items:
; .
; Item #01.
 $C554 DEFB $1E,$14                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C556 DEFB $02,$02
 $C558 DEFB $02                     ; Colour: #INK(#PEEK(#PC)).
 $C559 DEFB $01
 $C55A DEFB $64                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #02.
 $C55B DEFB $06,$14                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C55D DEFB $02,$02
 $C55F DEFB $04                     ; Colour: #INK(#PEEK(#PC)).
 $C560 DEFB $01
 $C561 DEFB $64                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #03.
 $C562 DEFB $1A,$0F                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C564 DEFB $02,$02
 $C566 DEFB $06                     ; Colour: #INK(#PEEK(#PC)).
 $C567 DEFB $01
 $C568 DEFB $54                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #04.
 $C569 DEFB $19,$0A                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C56B DEFB $02,$02
 $C56D DEFB $06                     ; Colour: #INK(#PEEK(#PC)).
 $C56E DEFB $01
 $C56F DEFB $74                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #05.
 $C570 DEFB $13,$05                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C572 DEFB $02,$02
 $C574 DEFB $07                     ; Colour: #INK(#PEEK(#PC)).
 $C575 DEFB $01
 $C576 DEFB $58                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
; Item #06.
 $C577 DEFB $07,$05                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C579 DEFB $02,$02
 $C57B DEFB $06                     ; Colour: #INK(#PEEK(#PC)).
 $C57C DEFB $01
 $C57D DEFB $5C                     ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                    ; (#N(#PEEK(#PC))).
 $C57E DEFB $FF                     ; Terminator.
; Furniture:
 $C57F DEFB $FF                     ; Terminator.
; Lifts:
; .
; Lift #01.
 $C580 DEFB $17,$12                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C582 DEFB $03,$03
 $C584 DEFB $00                     ; Horizontal movement: none.
 $C585 DEFB $FF                     ; Vertical movement: -1.
 $C586 DEFB $24,$03,$01
 $C589 DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $C58A DEFB $13,$03,$03,$01,$00,$00
; Lift #02.
 $C590 DEFB $0E,$12                 ; Coordinates: #N(#PEEK(#PC))/
                                    ; #N(#PEEK(#PC+$01)).
 $C592 DEFB $03,$03
 $C594 DEFB $00                     ; Horizontal movement: none.
 $C595 DEFB $FF                     ; Vertical movement: -1.
 $C596 DEFB $24,$03,$01
 $C599 DEFB $05                     ; Colour: #INK(#PEEK(#PC)).
 $C59A DEFB $13,$03,$03,$01,$00,$00
 $C5A0 DEFB $FF                     ; Terminator.
; Disappearing floors:
 $C5A1 DEFB $FF                     ; Terminator.

; Data: Room #09
;
; See #LINK:Rooms#room_09(Room #09).
;
; .
;
; #HTML(<img alt="room-bare-09" src="../images/scr/room-bare-09.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom09
g$C5A2 DEFB $05                             ; Key Colour: #INK(#PEEK(#PC)).
 $C5A3 DEFB $02                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $C5A4 DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $C5A5 DEFB $07                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $C5A6 DEFB $00                             ; Border Colour: #INK(#PEEK(#PC)).
 $C5A7 DEFB $01                             ; Paper Colour: #INK(#PEEK(#PC)).
 $C5A8 DEFB $02                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $C5A9 DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $C5AA DEFB $21,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C5AC DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $C5AD DEFB $21,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C5AF DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $C5B0 DEFB $21,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C5B2 DEFB $04                             ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $C5B3 DEFB $21,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C5B5 DEFB $04                             ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $C5B6 DEFB $11,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C5B8 DEFB $08                             ; Length: #N(#PEEK(#PC)).
; Scaffold #06.
 $C5B9 DEFB $11,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C5BB DEFB $08                             ; Length: #N(#PEEK(#PC)).
; Scaffold #07.
 $C5BC DEFB $21,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C5BE DEFB $10                             ; Length: #N(#PEEK(#PC)).
 $C5BF DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $C5C0 DEFB $20,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C5C2 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C5C3 DEFB $12                             ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $C5C4 DEFB $05,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C5C6 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C5C7 DEFB $0D                             ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $C5C8 DEFB $10,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C5CA DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C5CB DEFB $0E                             ; Leads to room: #N(#PEEK(#PC)).
 $C5CC DEFB $FF                             ; Terminator.
; Ladders:
; .
; Ladder #01.
 $C5CD DEFB $1C,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #02.
 $C5CF DEFB $20,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #03.
 $C5D1 DEFB $1C,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #04.
 $C5D3 DEFB $04,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #05.
 $C5D5 DEFB $08,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C5D7 DEFB $FF                             ; Terminator.
; Keys and locked doors.
 $C5D8 DEFB $FF                             ; Terminator.
; Portholes:
 $C5D9 DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $C5DA DEFB $09,$15                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C5DC DEFB $03,$03,$FF,$00,$20,$02,$03,$07
 $C5E4 DEFB $01,$03,$00,$09,$15,$03
; Pirate #02.
 $C5EA DEFB $21,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C5EC DEFB $03,$03,$FF,$00,$20,$02,$03,$07
 $C5F4 DEFB $01,$03,$00,$21,$06,$03
; Pirate #03.
 $C5FA DEFB $10,$0B                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C5FC DEFB $03,$03,$FF,$00,$20,$02,$03,$07
 $C604 DEFB $01,$03,$00,$10,$0B,$03
 $C60A DEFB $FF                             ; Terminator.
; Items:
; .
; Item #01.
 $C60B DEFB $0C,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C60D DEFB $02,$02
 $C60F DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $C610 DEFB $01
 $C611 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #02.
 $C612 DEFB $11,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C614 DEFB $02,$02
 $C616 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C617 DEFB $01
 $C618 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C619 DEFB $FF                             ; Terminator.
; Furniture:
; .
; Item #01.
 $C61A DEFB $17,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C61C DEFB $38                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C61D DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
; Item #02.
 $C61E DEFB $1D,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C620 DEFB $20                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C621 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
; Item #03.
 $C622 DEFB $17,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C624 DEFB $20                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C625 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
; Item #04.
 $C626 DEFB $11,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C628 DEFB $20                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C629 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
; Item #05.
 $C62A DEFB $0B,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C62C DEFB $20                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C62D DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $C62E DEFB $FF                             ; Terminator.
; Lifts:
 $C62F DEFB $FF                             ; Terminator.
; Disappearing floors:
 $C630 DEFB $FF                             ; Terminator.

; Data: Room #08
;
; See #LINK:Rooms#room_08(Room #08).
;
; .
;
; #HTML(<img alt="room-bare-08" src="../images/scr/room-bare-08.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom08
g$C631 DEFB $07      ; Key Colour: #INK(#PEEK(#PC)).
 $C632 DEFB $06      ; Closed Door Colour: #INK(#PEEK(#PC)).
 $C633 DEFB $00      ; Unused?: #INK(#PEEK(#PC)).
 $C634 DEFB $06      ; Scaffolding Colour: #INK(#PEEK(#PC)).
 $C635 DEFB $02      ; Border Colour: #INK(#PEEK(#PC)).
 $C636 DEFB $01      ; Paper Colour: #INK(#PEEK(#PC)).
 $C637 DEFB $06      ; Ladder Colour: #INK(#PEEK(#PC)).
 $C638 DEFB $FF      ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $C639 DEFB $21,$17  ; Start Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C63B DEFB $10      ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $C63C DEFB $21,$12  ; Start Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C63E DEFB $10      ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $C63F DEFB $21,$0D  ; Start Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C641 DEFB $10      ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $C642 DEFB $21,$08  ; Start Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C644 DEFB $10      ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $C645 DEFB $21,$03  ; Start Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C647 DEFB $10      ; Length: #N(#PEEK(#PC)).
 $C648 DEFB $FF      ; Terminator.
; Doors:
; .
; Door #01.
 $C649 DEFB $12,$16  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C64B DEFB $04      ; Colour: #INK(#PEEK(#PC)).
 $C64C DEFB $0F      ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $C64D DEFB $1A,$0C  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C64F DEFB $04      ; Colour: #INK(#PEEK(#PC)).
 $C650 DEFB $0C      ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $C651 DEFB $05,$07  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C653 DEFB $04      ; Colour: #INK(#PEEK(#PC)).
 $C654 DEFB $14      ; Leads to room: #N(#PEEK(#PC)).
 $C655 DEFB $FF      ; Terminator.
; Ladders:
; .
; Ladder #01.
 $C656 DEFB $20,$12  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
; Ladder #02.
 $C658 DEFB $04,$0D  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
; Ladder #03.
 $C65A DEFB $20,$08  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C65C DEFB $FF      ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $C65D DEFB $16,$17  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C65F DEFB $14
 $C660 DEFB $15,$01  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C662 DEFB $03
; Key/ Door #02.
 $C663 DEFB $0C,$17  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C665 DEFB $19
 $C666 DEFB $15,$02  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C668 DEFB $03
; Key/ Door #03.
 $C669 DEFB $16,$12  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C66B DEFB $05
 $C66C DEFB $15,$03  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C66E DEFB $03
; Key/ Door #04.
 $C66F DEFB $14,$0D  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C671 DEFB $08
 $C672 DEFB $06,$04  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C674 DEFB $03
; Key/ Door #05.
 $C675 DEFB $0C,$0D  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C677 DEFB $0F
 $C678 DEFB $0B,$05  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C67A DEFB $03
; Key/ Door #06.
 $C67B DEFB $0C,$08  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C67D DEFB $16
 $C67E DEFB $0B,$06  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C680 DEFB $03
 $C681 DEFB $FF      ; Terminator.
; Portholes:
; .
; Porthole #01.
 $C682 DEFB $1E,$11  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C684 DEFB $20      ; UDG: #R($914C+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Porthole #02.
 $C685 DEFB $19,$11  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C687 DEFB $24      ; UDG: #R($914C+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Porthole #03.
 $C688 DEFB $14,$11  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C68A DEFB $28      ; UDG: #R($914C+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Porthole #04.
 $C68B DEFB $0F,$11  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C68D DEFB $2C      ; UDG: #R($914C+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Porthole #05.
 $C68E DEFB $0A,$11  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C690 DEFB $30      ; UDG: #R($914C+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Porthole #06.
 $C691 DEFB $05,$11  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C693 DEFB $34      ; UDG: #R($914C+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
 $C694 DEFB $FF      ; Terminator.
; Pirates:
 $C695 DEFB $FF      ; Terminator.
; Items:
; .
; Item #01.
 $C696 DEFB $1D,$14  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C698 DEFB $02,$02
 $C69A DEFB $06      ; Colour: #INK(#PEEK(#PC)).
 $C69B DEFB $01
 $C69C DEFB $50      ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Item #02.
 $C69D DEFB $04,$14  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C69F DEFB $02,$02
 $C6A1 DEFB $06      ; Colour: #INK(#PEEK(#PC)).
 $C6A2 DEFB $01
 $C6A3 DEFB $50      ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Item #03.
 $C6A4 DEFB $1B,$0F  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C6A6 DEFB $02,$02
 $C6A8 DEFB $06      ; Colour: #INK(#PEEK(#PC)).
 $C6A9 DEFB $01
 $C6AA DEFB $50      ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Item #04.
 $C6AB DEFB $06,$0F  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C6AD DEFB $02,$02
 $C6AF DEFB $07      ; Colour: #INK(#PEEK(#PC)).
 $C6B0 DEFB $01
 $C6B1 DEFB $50      ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Item #05.
 $C6B2 DEFB $12,$0A  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C6B4 DEFB $02,$02
 $C6B6 DEFB $07      ; Colour: #INK(#PEEK(#PC)).
 $C6B7 DEFB $01
 $C6B8 DEFB $50      ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Item #06.
 $C6B9 DEFB $09,$0A  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C6BB DEFB $02,$02
 $C6BD DEFB $06      ; Colour: #INK(#PEEK(#PC)).
 $C6BE DEFB $01
 $C6BF DEFB $50      ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Item #07.
 $C6C0 DEFB $19,$05  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C6C2 DEFB $02,$02
 $C6C4 DEFB $05      ; Colour: #INK(#PEEK(#PC)).
 $C6C5 DEFB $01
 $C6C6 DEFB $50      ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Item #08.
 $C6C7 DEFB $0A,$05  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C6C9 DEFB $02,$02
 $C6CB DEFB $07      ; Colour: #INK(#PEEK(#PC)).
 $C6CC DEFB $01
 $C6CD DEFB $50      ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
 $C6CE DEFB $FF      ; Terminator.
; Furniture:
; .
; Item #01.
 $C6CF DEFB $14,$07  ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C6D1 DEFB $68      ; UDG: #R($8678+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
 $C6D2 DEFB $02      ; Colour: #INK(#PEEK(#PC)).
 $C6D3 DEFB $FF      ; Terminator.
; Lifts:
 $C6D4 DEFB $FF      ; Terminator.
; Disappearing floors:
 $C6D5 DEFB $FF      ; Terminator.

; Data: Room #07
;
; See #LINK:Rooms#room_07(Room #07).
;
; .
;
; #HTML(<img alt="room-bare-07" src="../images/scr/room-bare-07.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom07
g$C6D6 DEFB $06                             ; Key Colour: #INK(#PEEK(#PC)).
 $C6D7 DEFB $06                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $C6D8 DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $C6D9 DEFB $06                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $C6DA DEFB $01                             ; Border Colour: #INK(#PEEK(#PC)).
 $C6DB DEFB $00                             ; Paper Colour: #INK(#PEEK(#PC)).
 $C6DC DEFB $05                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $C6DD DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $C6DE DEFB $21,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C6E0 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $C6E1 DEFB $21,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C6E3 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $C6E4 DEFB $21,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C6E6 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $C6E7 DEFB $21,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C6E9 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $C6EA DEFB $21,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C6EC DEFB $10                             ; Length: #N(#PEEK(#PC)).
 $C6ED DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $C6EE DEFB $04,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C6F0 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C6F1 DEFB $11                             ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $C6F2 DEFB $18,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C6F4 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C6F5 DEFB $14                             ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $C6F6 DEFB $1E,$0C                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C6F8 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C6F9 DEFB $01                             ; Leads to room: #N(#PEEK(#PC)).
 $C6FA DEFB $FF                             ; Terminator.
; Ladders:
; .
; Ladder #01.
 $C6FB DEFB $0D,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #02.
 $C6FD DEFB $15,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #03.
 $C6FF DEFB $20,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C701 DEFB $FF                             ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $C702 DEFB $1A,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C704 DEFB $20
 $C705 DEFB $10,$01                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C707 DEFB $03
; Key/ Door #02.
 $C708 DEFB $1A,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C70A DEFB $03
 $C70B DEFB $06,$02                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C70D DEFB $03
; Key/ Door #03.
 $C70E DEFB $08,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C710 DEFB $18
 $C711 DEFB $15,$03                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C713 DEFB $03
; Key/ Door #04.
 $C714 DEFB $10,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C716 DEFB $0A
 $C717 DEFB $06,$04                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C719 DEFB $03
; Key/ Door #05.
 $C71A DEFB $10,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C71C DEFB $12
 $C71D DEFB $0B,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C71F DEFB $03
; Key/ Door #06.
 $C720 DEFB $08,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C722 DEFB $03
 $C723 DEFB $0B,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C725 DEFB $03
 $C726 DEFB $FF                             ; Terminator.
; Portholes:
 $C727 DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $C728 DEFB $0C,$10                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C72A DEFB $03,$03,$FF,$00,$20,$02,$03,$06
 $C732 DEFB $01,$03,$00,$0C,$10,$03
 $C738 DEFB $FF                             ; Terminator.
; Items:
; .
; Item #01.
 $C739 DEFB $1F,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C73B DEFB $02,$02
 $C73D DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C73E DEFB $01
 $C73F DEFB $68                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #02.
 $C740 DEFB $1E,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C742 DEFB $02,$02
 $C744 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C745 DEFB $01
 $C746 DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #03.
 $C747 DEFB $06,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C749 DEFB $02,$02
 $C74B DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C74C DEFB $01
 $C74D DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #04.
 $C74E DEFB $0C,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C750 DEFB $02,$02
 $C752 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C753 DEFB $01
 $C754 DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #05.
 $C755 DEFB $07,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C757 DEFB $02,$02
 $C759 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C75A DEFB $01
 $C75B DEFB $5C                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #06.
 $C75C DEFB $0D,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C75E DEFB $02,$02
 $C760 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C761 DEFB $01
 $C762 DEFB $50                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #07.
 $C763 DEFB $06,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C765 DEFB $02,$02
 $C767 DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C768 DEFB $01
 $C769 DEFB $54                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C76A DEFB $FF                             ; Terminator.
; Furniture:
; .
; Item #01.
 $C76B DEFB $17,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C76D DEFB $38                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C76E DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
; Item #02.
 $C76F DEFB $1D,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C771 DEFB $50                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C772 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
; Item #03.
 $C773 DEFB $17,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C775 DEFB $50                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C776 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
; Item #04.
 $C777 DEFB $11,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C779 DEFB $68                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C77A DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
; Item #05.
 $C77B DEFB $0B,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C77D DEFB $50                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C77E DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C77F DEFB $FF                             ; Terminator.
; Lifts:
 $C780 DEFB $FF                             ; Terminator.
; Disappearing floors:
 $C781 DEFB $FF                             ; Terminator.

; Data: Room #06
;
; See #LINK:Rooms#room_06(Room #06).
;
; .
;
; #HTML(<img alt="room-bare-06" src="../images/scr/room-bare-06.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom06
g$C782 DEFB $07                             ; Key Colour: #INK(#PEEK(#PC)).
 $C783 DEFB $07                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $C784 DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $C785 DEFB $05                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $C786 DEFB $00                             ; Border Colour: #INK(#PEEK(#PC)).
 $C787 DEFB $01                             ; Paper Colour: #INK(#PEEK(#PC)).
 $C788 DEFB $04                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $C789 DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $C78A DEFB $21,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C78C DEFB $02                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $C78D DEFB $13,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C78F DEFB $09                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $C790 DEFB $0F,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C792 DEFB $07                             ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $C793 DEFB $0F,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C795 DEFB $07                             ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $C796 DEFB $0F,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C798 DEFB $07                             ; Length: #N(#PEEK(#PC)).
; Scaffold #06.
 $C799 DEFB $21,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C79B DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #07.
 $C79C DEFB $1D,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C79E DEFB $05                             ; Length: #N(#PEEK(#PC)).
 $C79F DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $C7A0 DEFB $1A,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7A2 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C7A3 DEFB $0C                             ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $C7A4 DEFB $0F,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7A6 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C7A7 DEFB $04                             ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $C7A8 DEFB $0F,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7AA DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C7AB DEFB $10                             ; Leads to room: #N(#PEEK(#PC)).
 $C7AC DEFB $FF                             ; Terminator.
; Ladders:
; .
; Ladder #01.
 $C7AD DEFB $04,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #02.
 $C7AF DEFB $06,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #03.
 $C7B1 DEFB $0B,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7B3 DEFB $FF                             ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $C7B4 DEFB $0A,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7B6 DEFB $0B
 $C7B7 DEFB $10,$01                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7B9 DEFB $03
; Key/ Door #02.
 $C7BA DEFB $08,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7BC DEFB $03
 $C7BD DEFB $06,$02                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7BF DEFB $03
; Key/ Door #03.
 $C7C0 DEFB $08,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7C2 DEFB $0E
 $C7C3 DEFB $0B,$03                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7C5 DEFB $03
 $C7C6 DEFB $FF                             ; Terminator.
; Portholes:
 $C7C7 DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $C7C8 DEFB $13,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7CA DEFB $03,$03,$FF,$00,$20,$02,$03,$07
 $C7D2 DEFB $01,$03,$00,$13,$06,$03
 $C7D8 DEFB $FF                             ; Terminator.
; Items:
; .
; Item #01.
 $C7D9 DEFB $0E,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7DB DEFB $02,$02
 $C7DD DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $C7DE DEFB $01
 $C7DF DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #02.
 $C7E0 DEFB $04,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7E2 DEFB $02,$02
 $C7E4 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $C7E5 DEFB $01
 $C7E6 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #03.
 $C7E7 DEFB $17,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7E9 DEFB $02,$02
 $C7EB DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C7EC DEFB $01
 $C7ED DEFB $74                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #04.
 $C7EE DEFB $04,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7F0 DEFB $02,$02
 $C7F2 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C7F3 DEFB $01
 $C7F4 DEFB $6C                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #05.
 $C7F5 DEFB $06,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7F7 DEFB $02,$02
 $C7F9 DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C7FA DEFB $01
 $C7FB DEFB $68                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C7FC DEFB $FF                             ; Terminator.
; Furniture:
; .
; Item #01.
 $C7FD DEFB $21,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C7FF DEFB $20                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C800 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
; Item #02.
 $C801 DEFB $1B,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C803 DEFB $20                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C804 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
; Item #03.
 $C805 DEFB $15,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C807 DEFB $20                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C808 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $C809 DEFB $FF                             ; Terminator.
; Lifts:
 $C80A DEFB $FF                             ; Terminator.
; Disappearing floors:
 $C80B DEFB $FF                             ; Terminator.

; Data: Room #05
;
; See #LINK:Rooms#room_05(Room #05).
;
; .
;
; #HTML(<img alt="room-bare-05" src="../images/scr/room-bare-05.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom05
g$C80C DEFB $06         ; Key Colour: #INK(#PEEK(#PC)).
 $C80D DEFB $06         ; Closed Door Colour: #INK(#PEEK(#PC)).
 $C80E DEFB $00         ; Unused?: #INK(#PEEK(#PC)).
 $C80F DEFB $06         ; Scaffolding Colour: #INK(#PEEK(#PC)).
 $C810 DEFB $00         ; Border Colour: #INK(#PEEK(#PC)).
 $C811 DEFB $01         ; Paper Colour: #INK(#PEEK(#PC)).
 $C812 DEFB $04         ; Ladder Colour: #INK(#PEEK(#PC)).
 $C813 DEFB $FF         ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $C814 DEFB $21,$17     ; Start Coordinates: #N(#PEEK(#PC))/
                        ; #N(#PEEK(#PC+$01)).
 $C816 DEFB $10         ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $C817 DEFB $21,$12     ; Start Coordinates: #N(#PEEK(#PC))/
                        ; #N(#PEEK(#PC+$01)).
 $C819 DEFB $10         ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $C81A DEFB $21,$0D     ; Start Coordinates: #N(#PEEK(#PC))/
                        ; #N(#PEEK(#PC+$01)).
 $C81C DEFB $10         ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $C81D DEFB $21,$08     ; Start Coordinates: #N(#PEEK(#PC))/
                        ; #N(#PEEK(#PC+$01)).
 $C81F DEFB $10         ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $C820 DEFB $21,$03     ; Start Coordinates: #N(#PEEK(#PC))/
                        ; #N(#PEEK(#PC+$01)).
 $C822 DEFB $10         ; Length: #N(#PEEK(#PC)).
 $C823 DEFB $FF         ; Terminator.
; Doors:
; .
; Door #01.
 $C824 DEFB $10,$16     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C826 DEFB $03         ; Colour: #INK(#PEEK(#PC)).
 $C827 DEFB $0B         ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $C828 DEFB $05,$11     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C82A DEFB $03         ; Colour: #INK(#PEEK(#PC)).
 $C82B DEFB $12         ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $C82C DEFB $1C,$07     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C82E DEFB $05         ; Colour: #INK(#PEEK(#PC)).
 $C82F DEFB $0D         ; Leads to room: #N(#PEEK(#PC)).
 $C830 DEFB $FF         ; Terminator.
; Ladders:
; .
; Ladder #01.
 $C831 DEFB $09,$12     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
; Ladder #02.
 $C833 DEFB $1B,$0D     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
; Ladder #03.
 $C835 DEFB $19,$08     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C837 DEFB $FF         ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $C838 DEFB $18,$17     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C83A DEFB $14
 $C83B DEFB $10,$01     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C83D DEFB $03
; Key/ Door #02.
 $C83E DEFB $06,$17     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C840 DEFB $06
 $C841 DEFB $0B,$02     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C843 DEFB $03
; Key/ Door #03.
 $C844 DEFB $1C,$12     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C846 DEFB $1D
 $C847 DEFB $06,$03     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C849 DEFB $03
; Key/ Door #04.
 $C84A DEFB $16,$12     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C84C DEFB $20
 $C84D DEFB $15,$04     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C84F DEFB $03
; Key/ Door #05.
 $C850 DEFB $0C,$0D     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C852 DEFB $02
 $C853 DEFB $10,$05     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C855 DEFB $03
; Key/ Door #06.
 $C856 DEFB $0C,$08     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C858 DEFB $02
 $C859 DEFB $15,$06     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C85B DEFB $03
 $C85C DEFB $FF         ; Terminator.
; Portholes:
 $C85D DEFB $FF         ; Terminator.
; Pirates:
 $C85E DEFB $FF         ; Terminator.
; Items:
; .
; Item #01.
 $C85F DEFB $16,$14     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C861 DEFB $02,$02
 $C863 DEFB $06         ; Colour: #INK(#PEEK(#PC)).
 $C864 DEFB $01
 $C865 DEFB $78         ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Item #02.
 $C866 DEFB $05,$14     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C868 DEFB $02,$02
 $C86A DEFB $06         ; Colour: #INK(#PEEK(#PC)).
 $C86B DEFB $01
 $C86C DEFB $74         ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Item #03.
 $C86D DEFB $20,$0A     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C86F DEFB $02,$02
 $C871 DEFB $05         ; Colour: #INK(#PEEK(#PC)).
 $C872 DEFB $01
 $C873 DEFB $60         ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Item #04.
 $C874 DEFB $0A,$05     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C876 DEFB $02,$02
 $C878 DEFB $07         ; Colour: #INK(#PEEK(#PC)).
 $C879 DEFB $01
 $C87A DEFB $68         ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Item #05.
 $C87B DEFB $20,$0F     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C87D DEFB $02,$02
 $C87F DEFB $06         ; Colour: #INK(#PEEK(#PC)).
 $C880 DEFB $01
 $C881 DEFB $5C         ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Item #06.
 $C882 DEFB $19,$0F     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C884 DEFB $02,$02
 $C886 DEFB $06         ; Colour: #INK(#PEEK(#PC)).
 $C887 DEFB $01
 $C888 DEFB $5C         ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
; Item #07.
 $C889 DEFB $13,$0F     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C88B DEFB $02,$02
 $C88D DEFB $06         ; Colour: #INK(#PEEK(#PC)).
 $C88E DEFB $01
 $C88F DEFB $5C         ; UDG: #R($8378+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
 $C890 DEFB $FF         ; Terminator.
; Furniture:
; .
; Item #01.
 $C891 DEFB $1E,$16     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C893 DEFB $38         ; UDG: #R($8678+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
 $C894 DEFB $04         ; Colour: #INK(#PEEK(#PC)).
; Item #02.
 $C895 DEFB $0F,$11     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C897 DEFB $38         ; UDG: #R($8678+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
 $C898 DEFB $04         ; Colour: #INK(#PEEK(#PC)).
; Item #03.
 $C899 DEFB $17,$0C     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C89B DEFB $38         ; UDG: #R($8678+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
 $C89C DEFB $03         ; Colour: #INK(#PEEK(#PC)).
; Item #04.
 $C89D DEFB $07,$07     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C89F DEFB $38         ; UDG: #R($8678+(#PEEK(#PC))*$08) (#N(#PEEK(#PC))).
 $C8A0 DEFB $05         ; Colour: #INK(#PEEK(#PC)).
 $C8A1 DEFB $FF         ; Terminator.
; Lifts:
 $C8A2 DEFB $FF         ; Terminator.
; Disappearing floors:
; .
; Instance #01.
 $C8A3 DEFB $11,$08     ; Coordinates: #N(#PEEK(#PC))/ #N(#PEEK(#PC+$01)).
 $C8A5 DEFB $05         ; Width: #N(#PEEK(#PC)).
 $C8A6 DEFB $28,$64,$00
 $C8A9 DEFB $FF         ; Terminator.

; Data: Room #04
;
; See #LINK:Rooms#room_04(Room #04).
;
; .
;
; #HTML(<img alt="room-bare-04" src="../images/scr/room-bare-04.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom04
g$C8AA DEFB $06                             ; Key Colour: #INK(#PEEK(#PC)).
 $C8AB DEFB $05                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $C8AC DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $C8AD DEFB $05                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $C8AE DEFB $00                             ; Border Colour: #INK(#PEEK(#PC)).
 $C8AF DEFB $01                             ; Paper Colour: #INK(#PEEK(#PC)).
 $C8B0 DEFB $07                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $C8B1 DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $C8B2 DEFB $21,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8B4 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $C8B5 DEFB $21,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8B7 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $C8B8 DEFB $21,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8BA DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $C8BB DEFB $21,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8BD DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $C8BE DEFB $21,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8C0 DEFB $10                             ; Length: #N(#PEEK(#PC)).
 $C8C1 DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $C8C2 DEFB $0F,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8C4 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C8C5 DEFB $06                             ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $C8C6 DEFB $04,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8C8 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C8C9 DEFB $10                             ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $C8CA DEFB $1D,$0C                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8CC DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C8CD DEFB $0A                             ; Leads to room: #N(#PEEK(#PC)).
 $C8CE DEFB $FF                             ; Terminator.
; Ladders:
; .
; Ladder #01.
 $C8CF DEFB $18,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #02.
 $C8D1 DEFB $1A,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #03.
 $C8D3 DEFB $09,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #04.
 $C8D5 DEFB $11,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8D7 DEFB $FF                             ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $C8D8 DEFB $14,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8DA DEFB $20
 $C8DB DEFB $0B,$01                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8DD DEFB $03
; Key/ Door #02.
 $C8DE DEFB $0C,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8E0 DEFB $05
 $C8E1 DEFB $10,$02                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8E3 DEFB $03
; Key/ Door #03.
 $C8E4 DEFB $0A,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8E6 DEFB $20
 $C8E7 DEFB $06,$03                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8E9 DEFB $03
; Key/ Door #04.
 $C8EA DEFB $16,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8EC DEFB $12
 $C8ED DEFB $15,$04                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8EF DEFB $03
; Key/ Door #05.
 $C8F0 DEFB $16,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8F2 DEFB $03
 $C8F3 DEFB $0B,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8F5 DEFB $03
; Key/ Door #06.
 $C8F6 DEFB $06,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8F8 DEFB $03
 $C8F9 DEFB $15,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C8FB DEFB $03
 $C8FC DEFB $FF                             ; Terminator.
; Portholes:
 $C8FD DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $C8FE DEFB $0F,$0B                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C900 DEFB $03,$03,$FF,$00,$20,$02,$03,$07
 $C908 DEFB $01,$03,$00,$0F,$0B,$03
; Pirate #02.
 $C90E DEFB $0F,$15                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C910 DEFB $03,$03,$FF,$00,$20,$02,$03,$07
 $C918 DEFB $01,$03,$00,$0F,$15,$03
 $C91E DEFB $FF                             ; Terminator.
; Items:
; .
; Item #01.
 $C91F DEFB $18,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C921 DEFB $02,$02
 $C923 DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C924 DEFB $01
 $C925 DEFB $54                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #02.
 $C926 DEFB $08,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C928 DEFB $02,$02
 $C92A DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C92B DEFB $01
 $C92C DEFB $54                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #03.
 $C92D DEFB $1D,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C92F DEFB $02,$02
 $C931 DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C932 DEFB $01
 $C933 DEFB $54                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #04.
 $C934 DEFB $13,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C936 DEFB $02,$02
 $C938 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C939 DEFB $01
 $C93A DEFB $54                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #05.
 $C93B DEFB $08,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C93D DEFB $02,$02
 $C93F DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C940 DEFB $01
 $C941 DEFB $54                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #06.
 $C942 DEFB $1F,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C944 DEFB $02,$02
 $C946 DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C947 DEFB $01
 $C948 DEFB $54                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #07.
 $C949 DEFB $14,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C94B DEFB $02,$02
 $C94D DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C94E DEFB $01
 $C94F DEFB $54                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #08.
 $C950 DEFB $19,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C952 DEFB $02,$02
 $C954 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C955 DEFB $01
 $C956 DEFB $54                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #09.
 $C957 DEFB $0D,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C959 DEFB $02,$02
 $C95B DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C95C DEFB $01
 $C95D DEFB $54                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #10.
 $C95E DEFB $04,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C960 DEFB $02,$02
 $C962 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $C963 DEFB $01
 $C964 DEFB $54                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C965 DEFB $FF                             ; Terminator.
; Furniture:
; .
; Item #01.
 $C966 DEFB $21,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C968 DEFB $50                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C969 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
; Item #02.
 $C96A DEFB $0F,$0C                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C96C DEFB $50                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $C96D DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C96E DEFB $FF                             ; Terminator.
; Lifts:
 $C96F DEFB $FF                             ; Terminator.
; Disappearing floors:
 $C970 DEFB $FF                             ; Terminator.

; Data: Room #03
;
; See #LINK:Rooms#room_03(Room #03).
;
; .
;
; #HTML(<img alt="room-bare-03" src="../images/scr/room-bare-03.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom03
g$C971 DEFB $05                             ; Key Colour: #INK(#PEEK(#PC)).
 $C972 DEFB $04                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $C973 DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $C974 DEFB $04                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $C975 DEFB $00                             ; Border Colour: #INK(#PEEK(#PC)).
 $C976 DEFB $00                             ; Paper Colour: #INK(#PEEK(#PC)).
 $C977 DEFB $04                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $C978 DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $C979 DEFB $21,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C97B DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $C97C DEFB $21,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C97E DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $C97F DEFB $21,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C981 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $C982 DEFB $21,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C984 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $C985 DEFB $21,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C987 DEFB $10                             ; Length: #N(#PEEK(#PC)).
 $C988 DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $C989 DEFB $20,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C98B DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $C98C DEFB $11                             ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $C98D DEFB $05,$0C                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C98F DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C990 DEFB $0F                             ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $C991 DEFB $14,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C993 DEFB $03                             ; Colour: #INK(#PEEK(#PC)).
 $C994 DEFB $13                             ; Leads to room: #N(#PEEK(#PC)).
 $C995 DEFB $FF                             ; Terminator.
; Ladders:
; .
; Ladder #01.
 $C996 DEFB $18,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #02.
 $C998 DEFB $0E,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #03.
 $C99A DEFB $0C,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C99C DEFB $FF                             ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $C99D DEFB $1A,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C99F DEFB $20
 $C9A0 DEFB $06,$01                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9A2 DEFB $03
; Key/ Door #02.
 $C9A3 DEFB $0A,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9A5 DEFB $07
 $C9A6 DEFB $0B,$02                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9A8 DEFB $03
; Key/ Door #03.
 $C9A9 DEFB $1A,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9AB DEFB $0C
 $C9AC DEFB $15,$03                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9AE DEFB $03
; Key/ Door #04.
 $C9AF DEFB $08,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9B1 DEFB $03
 $C9B2 DEFB $15,$04                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9B4 DEFB $03
; Key/ Door #05.
 $C9B5 DEFB $12,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9B7 DEFB $20
 $C9B8 DEFB $15,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9BA DEFB $03
; Key/ Door #06.
 $C9BB DEFB $17,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9BD DEFB $04
 $C9BE DEFB $10,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9C0 DEFB $03
; Key/ Door #07.
 $C9C1 DEFB $10,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9C3 DEFB $1D
 $C9C4 DEFB $10,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9C6 DEFB $03
 $C9C7 DEFB $FF                             ; Terminator.
; Portholes:
 $C9C8 DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $C9C9 DEFB $21,$10                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9CB DEFB $03,$03,$FF,$00,$20,$02,$03,$06
 $C9D3 DEFB $01,$03,$00,$21,$10,$03
 $C9D9 DEFB $FF                             ; Terminator.
; Items:
; .
; Item #01.
 $C9DA DEFB $1D,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9DC DEFB $02,$02
 $C9DE DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C9DF DEFB $01
 $C9E0 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #02.
 $C9E1 DEFB $0F,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9E3 DEFB $02,$02
 $C9E5 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $C9E6 DEFB $01
 $C9E7 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #03.
 $C9E8 DEFB $07,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9EA DEFB $02,$02
 $C9EC DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C9ED DEFB $01
 $C9EE DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #04.
 $C9EF DEFB $19,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9F1 DEFB $02,$02
 $C9F3 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $C9F4 DEFB $01
 $C9F5 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #05.
 $C9F6 DEFB $0A,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9F8 DEFB $02,$02
 $C9FA DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $C9FB DEFB $01
 $C9FC DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #06.
 $C9FD DEFB $1E,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $C9FF DEFB $02,$02
 $CA01 DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $CA02 DEFB $01
 $CA03 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #07.
 $CA04 DEFB $0E,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA06 DEFB $02,$02
 $CA08 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $CA09 DEFB $01
 $CA0A DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $CA0B DEFB $FF                             ; Terminator.
; Furniture:
; .
; Item #01.
 $CA0C DEFB $16,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA0E DEFB $38                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $CA0F DEFB $03                             ; Colour: #INK(#PEEK(#PC)).
 $CA10 DEFB $FF                             ; Terminator.
; Lifts:
 $CA11 DEFB $FF                             ; Terminator.
; Disappearing floors:
 $CA12 DEFB $FF                             ; Terminator.

; Data: Room #02
;
; See #LINK:Rooms#room_02(Room #02).
;
; .
;
; #HTML(<img alt="room-bare-02" src="../images/scr/room-bare-02.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom02
g$CA13 DEFB $04                             ; Key Colour: #INK(#PEEK(#PC)).
 $CA14 DEFB $06                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $CA15 DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $CA16 DEFB $06                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $CA17 DEFB $00                             ; Border Colour: #INK(#PEEK(#PC)).
 $CA18 DEFB $01                             ; Paper Colour: #INK(#PEEK(#PC)).
 $CA19 DEFB $05                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $CA1A DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $CA1B DEFB $21,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA1D DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $CA1E DEFB $21,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA20 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $CA21 DEFB $21,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA23 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $CA24 DEFB $21,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA26 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $CA27 DEFB $21,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA29 DEFB $10                             ; Length: #N(#PEEK(#PC)).
 $CA2A DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $CA2B DEFB $07,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA2D DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $CA2E DEFB $01                             ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $CA2F DEFB $08,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA31 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $CA32 DEFB $0E                             ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $CA33 DEFB $0E,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA35 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $CA36 DEFB $12                             ; Leads to room: #N(#PEEK(#PC)).
 $CA37 DEFB $FF                             ; Terminator.
; Ladders:
; .
; Ladder #01.
 $CA38 DEFB $0D,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #02.
 $CA3A DEFB $20,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #03.
 $CA3C DEFB $18,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #04.
 $CA3E DEFB $04,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA40 DEFB $FF                             ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $CA41 DEFB $1A,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA43 DEFB $20
 $CA44 DEFB $06,$01                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA46 DEFB $03
; Key/ Door #02.
 $CA47 DEFB $0A,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA49 DEFB $02
 $CA4A DEFB $15,$02                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA4C DEFB $03
; Key/ Door #03.
 $CA4D DEFB $1A,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA4F DEFB $06
 $CA50 DEFB $06,$03                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA52 DEFB $03
; Key/ Door #04.
 $CA53 DEFB $10,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA55 DEFB $16
 $CA56 DEFB $15,$04                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA58 DEFB $03
; Key/ Door #05.
 $CA59 DEFB $12,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA5B DEFB $02
 $CA5C DEFB $10,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA5E DEFB $03
; Key/ Door #06.
 $CA5F DEFB $1A,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA61 DEFB $18
 $CA62 DEFB $15,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA64 DEFB $03
; Key/ Door #07.
 $CA65 DEFB $0A,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA67 DEFB $18
 $CA68 DEFB $06,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA6A DEFB $03
 $CA6B DEFB $FF                             ; Terminator.
; Portholes:
 $CA6C DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $CA6D DEFB $15,$10                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA6F DEFB $03,$03,$FF,$00,$20,$02,$03,$07
 $CA77 DEFB $01,$03,$00,$15,$10,$03
; Pirate #02.
 $CA7D DEFB $21,$0B                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA7F DEFB $03,$03,$FF,$00,$20,$02,$03,$07
 $CA87 DEFB $01,$03,$00,$21,$0B,$03
 $CA8D DEFB $FF                             ; Terminator.
; Items:
; .
; Item #01.
 $CA8E DEFB $1D,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA90 DEFB $02,$02
 $CA92 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $CA93 DEFB $01
 $CA94 DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #02.
 $CA95 DEFB $0E,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA97 DEFB $02,$02
 $CA99 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $CA9A DEFB $01
 $CA9B DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #03.
 $CA9C DEFB $04,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CA9E DEFB $02,$02
 $CAA0 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $CAA1 DEFB $01
 $CAA2 DEFB $5C                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #04.
 $CAA3 DEFB $13,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAA5 DEFB $02,$02
 $CAA7 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $CAA8 DEFB $01
 $CAA9 DEFB $74                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #05.
 $CAAA DEFB $05,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAAC DEFB $02,$02
 $CAAE DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $CAAF DEFB $01
 $CAB0 DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #06.
 $CAB1 DEFB $1F,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAB3 DEFB $02,$02
 $CAB5 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $CAB6 DEFB $01
 $CAB7 DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #07.
 $CAB8 DEFB $0E,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CABA DEFB $02,$02
 $CABC DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $CABD DEFB $01
 $CABE DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #08.
 $CABF DEFB $1D,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAC1 DEFB $02,$02
 $CAC3 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $CAC4 DEFB $01
 $CAC5 DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #09.
 $CAC6 DEFB $16,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAC8 DEFB $02,$02
 $CACA DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $CACB DEFB $01
 $CACC DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $CACD DEFB $FF                             ; Terminator.
; Furniture:
; .
; Item #01.
 $CACE DEFB $14,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAD0 DEFB $68                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $CAD1 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
; Item #02.
 $CAD2 DEFB $09,$0C                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAD4 DEFB $50                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $CAD5 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $CAD6 DEFB $FF                             ; Terminator.
; Lifts:
 $CAD7 DEFB $FF                             ; Terminator.
; Disappearing floors:
 $CAD8 DEFB $FF                             ; Terminator.

; Data: Room #01
;
; See #LINK:Rooms#room_01(Room #01).
;
; .
;
; #HTML(<img alt="room-bare-01" src="../images/scr/room-bare-01.png">)
; .
; The first seven bytes relate to the colours the room uses. See #R$AB44.
@label=DataRoom01
g$CAD9 DEFB $07                             ; Key Colour: #INK(#PEEK(#PC)).
 $CADA DEFB $04                             ; Closed Door Colour:
                                            ; #INK(#PEEK(#PC)).
 $CADB DEFB $00                             ; Unused?: #INK(#PEEK(#PC)).
 $CADC DEFB $07                             ; Scaffolding Colour:
                                            ; #INK(#PEEK(#PC)).
 $CADD DEFB $00                             ; Border Colour: #INK(#PEEK(#PC)).
 $CADE DEFB $01                             ; Paper Colour: #INK(#PEEK(#PC)).
 $CADF DEFB $06                             ; Ladder Colour: #INK(#PEEK(#PC)).
 $CAE0 DEFB $FF                             ; Terminator.
; Room scaffolding:
; .
; Scaffold #01.
 $CAE1 DEFB $21,$17                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAE3 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #02.
 $CAE4 DEFB $21,$12                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAE6 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #03.
 $CAE7 DEFB $21,$0D                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAE9 DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #04.
 $CAEA DEFB $21,$08                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAEC DEFB $10                             ; Length: #N(#PEEK(#PC)).
; Scaffold #05.
 $CAED DEFB $21,$03                         ; Start Coordinates:
                                            ; #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAEF DEFB $10                             ; Length: #N(#PEEK(#PC)).
 $CAF0 DEFB $FF                             ; Terminator.
; Doors:
; .
; Door #01.
 $CAF1 DEFB $07,$16                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAF3 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $CAF4 DEFB $02                             ; Leads to room: #N(#PEEK(#PC)).
; Door #02.
 $CAF5 DEFB $06,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAF7 DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
 $CAF8 DEFB $0B                             ; Leads to room: #N(#PEEK(#PC)).
; Door #03.
 $CAF9 DEFB $1E,$0C                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CAFB DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $CAFC DEFB $07                             ; Leads to room: #N(#PEEK(#PC)).
 $CAFD DEFB $FF                             ; Terminator.
; Ladders:
; .
; Ladder #01.
 $CAFE DEFB $10,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #02.
 $CB00 DEFB $14,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
; Ladder #03.
 $CB02 DEFB $10,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB04 DEFB $FF                             ; Terminator.
; Keys and locked doors.
; .
; Key/ Door #01.
 $CB05 DEFB $0C,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB07 DEFB $0E
 $CB08 DEFB $06,$02                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB0A DEFB $03
; Key/ Door #02.
 $CB0B DEFB $16,$17                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB0D DEFB $08
 $CB0E DEFB $0B,$01                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB10 DEFB $03
; Key/ Door #03.
 $CB11 DEFB $16,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB13 DEFB $20
 $CB14 DEFB $0B,$03                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB16 DEFB $03
; Key/ Door #04.
 $CB17 DEFB $0C,$12                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB19 DEFB $13
 $CB1A DEFB $15,$04                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB1C DEFB $03
; Key/ Door #05.
 $CB1D DEFB $18,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB1F DEFB $20
 $CB20 DEFB $06,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB22 DEFB $03
; Key/ Door #06.
 $CB23 DEFB $0C,$0D                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB25 DEFB $16
 $CB26 DEFB $0B,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB28 DEFB $03
; Key/ Door #07.
 $CB29 DEFB $16,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB2B DEFB $13
 $CB2C DEFB $10,$07                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB2E DEFB $03
; Key/ Door #08.
 $CB2F DEFB $0C,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB31 DEFB $1B
 $CB32 DEFB $15,$08                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB34 DEFB $03
 $CB35 DEFB $FF                             ; Terminator.
; Portholes:
 $CB36 DEFB $FF                             ; Terminator.
; Pirates:
; .
; Pirate #01.
 $CB37 DEFB $21,$06                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB39 DEFB $03,$03,$FF,$00,$20,$02,$03,$07
 $CB41 DEFB $01,$03,$00,$21,$06,$03
; Pirate #02.
 $CB47 DEFB $0A,$0B                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB49 DEFB $03,$03,$FF,$00,$20,$02,$03,$06
 $CB51 DEFB $01,$03,$00,$0A,$0B,$03
 $CB57 DEFB $FF                             ; Terminator.
; Items:
; .
; Item #01.
 $CB58 DEFB $06,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB5A DEFB $02,$02
 $CB5C DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $CB5D DEFB $01
 $CB5E DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #02.
 $CB5F DEFB $1F,$14                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB61 DEFB $02,$02
 $CB63 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $CB64 DEFB $01
 $CB65 DEFB $78                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #03.
 $CB66 DEFB $20,$0F                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB68 DEFB $02,$02
 $CB6A DEFB $07                             ; Colour: #INK(#PEEK(#PC)).
 $CB6B DEFB $01
 $CB6C DEFB $54                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #04.
 $CB6D DEFB $1B,$0A                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB6F DEFB $02,$02
 $CB71 DEFB $05                             ; Colour: #INK(#PEEK(#PC)).
 $CB72 DEFB $01
 $CB73 DEFB $58                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #05.
 $CB74 DEFB $14,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB76 DEFB $02,$02
 $CB78 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $CB79 DEFB $01
 $CB7A DEFB $5C                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #06.
 $CB7B DEFB $19,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB7D DEFB $02,$02
 $CB7F DEFB $03                             ; Colour: #INK(#PEEK(#PC)).
 $CB80 DEFB $01
 $CB81 DEFB $60                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
; Item #07.
 $CB82 DEFB $08,$05                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB84 DEFB $02,$02
 $CB86 DEFB $02                             ; Colour: #INK(#PEEK(#PC)).
 $CB87 DEFB $01
 $CB88 DEFB $64                             ; UDG: #R($8378+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $CB89 DEFB $FF                             ; Terminator.
; Furniture:
; .
; Item #01.
 $CB8A DEFB $12,$0C                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB8C DEFB $68                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $CB8D DEFB $04                             ; Colour: #INK(#PEEK(#PC)).
; Item #02.
 $CB8E DEFB $1D,$11                         ; Coordinates: #N(#PEEK(#PC))/
                                            ; #N(#PEEK(#PC+$01)).
 $CB90 DEFB $38                             ; UDG: #R($8678+(#PEEK(#PC))*$08)
                                            ; (#N(#PEEK(#PC))).
 $CB91 DEFB $06                             ; Colour: #INK(#PEEK(#PC)).
 $CB92 DEFB $FF                             ; Terminator.
; Lifts:
 $CB93 DEFB $FF                             ; Terminator.
; Disappearing floors:
 $CB94 DEFB $FF                             ; Terminator.

; Source Code Remnants
;
; Note: On load, this contains "Source Code Remnants" but is also used as a
; room buffer.
@label=ActiveRoomBuffer
u$CB95 DEFM "LD A,(HL)"         ; #STR(#PC,$04,$09)
 $CB9E DEFB $0D
 $CB9F DEFM "CP 33"             ; #STR(#PC,$04,$05)
 $CBA4 DEFB $0D
 $CBA5 DEFM "JP C,CD"           ; #STR(#PC,$04,$07)
 $CBAC DEFB $0D
 $CBAD DEFM "FOK:"              ; #STR(#PC,$04,$04)
 $CBB1 DEFB $0D
 $CBB2 DEFM ";THIS DIR OK"      ; #STR(#PC,$04,$0C)
 $CBBE DEFB $0D
 $CBBF DEFM "LD (IX+0),C"       ; #STR(#PC,$04,$0B)
 $CBCA DEFB $0D
 $CBCB DEFM "LD (IX+1),B"       ; #STR(#PC,$04,$0B)
 $CBD6 DEFB $0D
 $CBD7 DEFM "LD (IX+2),E"       ; #STR(#PC,$04,$0B)
 $CBE2 DEFB $0D
 $CBE3 DEFM "LD (IX+3),D"       ; #STR(#PC,$04,$0B)
 $CBEE DEFB $0D
 $CBEF DEFM "CALL DIX"          ; #STR(#PC,$04,$08)
 $CBF7 DEFB $0D
 $CBF8 DEFM "POPP:"             ; #STR(#PC,$04,$05)
 $CBFD DEFB $0D
 $CBFE DEFM "CALL OPSQ"         ; #STR(#PC,$04,$09)
 $CC07 DEFB $0D
 $CC08 DEFM "LD A,(IX+0)"       ; #STR(#PC,$04,$0B)
 $CC13 DEFB $0D
 $CC14 DEFM "LD (IX+13),A"      ; #STR(#PC,$04,$0C)
 $CC20 DEFB $0D
 $CC21 DEFM "LD A,(IX+1)"       ; #STR(#PC,$04,$0B)
 $CC2C DEFB $0D
 $CC2D DEFM "LD (IX+14),A"      ; #STR(#PC,$04,$0C)
 $CC39 DEFB $0D
 $CC3A DEFM "LD A,(IX+2)"       ; #STR(#PC,$04,$0B)
 $CC45 DEFB $0D
 $CC46 DEFM "LD (IX+11),A"      ; #STR(#PC,$04,$0C)
 $CC52 DEFB $0D
 $CC53 DEFM "LD A,(IX+3)"       ; #STR(#PC,$04,$0B)
 $CC5E DEFB $0D
 $CC5F DEFM "LD (IX+15),A"      ; #STR(#PC,$04,$0C)
 $CC6B DEFB $0D
 $CC6C DEFM ";TEST FOR HIT ROG" ; #STR(#PC,$04,$11)
 $CC7D DEFB $0D
 $CC7E DEFM "LD C,(IX+0)"       ; #STR(#PC,$04,$0B)
 $CC89 DEFB $0D
 $CC8A DEFM "DEC C"             ; #STR(#PC,$04,$05)
 $CC8F DEFB $0D
 $CC90 DEFM "SLA C"             ; #STR(#PC,$04,$05)
 $CC95 DEFB $0D
 $CC96 DEFM "SLA C"             ; #STR(#PC,$04,$05)
 $CC9B DEFB $0D
 $CC9C DEFM "LD A,(IX+2)"       ; #STR(#PC,$04,$0B)
 $CCA7 DEFB $0D
 $CCA8 DEFM "ADD A,C"           ; #STR(#PC,$04,$07)
 $CCAF DEFB $0D
 $CCB0 DEFM "LD C,A"            ; #STR(#PC,$04,$06)
 $CCB6 DEFB $0D
 $CCB7 DEFM "LD A,(MANST+2)"    ; #STR(#PC,$04,$0E)
 $CCC5 DEFB $0D
 $CCC6 DEFM "LD B,A"            ; #STR(#PC,$04,$06)
 $CCCC DEFB $0D
 $CCCD DEFM "LD A,(MANST)"      ; #STR(#PC,$04,$0C)
 $CCD9 DEFB $0D
 $CCDA DEFM "DEC A"             ; #STR(#PC,$04,$05)
 $CCDF DEFB $0D
 $CCE0 DEFM "SLA A"             ; #STR(#PC,$04,$05)
 $CCE5 DEFB $0D
 $CCE6 DEFM "SLA A"             ; #STR(#PC,$04,$05)
 $CCEB DEFB $0D
 $CCEC DEFM "ADD A,B"           ; #STR(#PC,$04,$07)
 $CCF3 DEFB $0D
 $CCF4 DEFM "ADD A,7"           ; #STR(#PC,$04,$07)
 $CCFB DEFB $0D
 $CCFC DEFM "SUB C"             ; #STR(#PC,$04,$05)
 $CD01 DEFB $0D
 $CD02 DEFM "CP 16"             ; #STR(#PC,$04,$05)
 $CD07 DEFB $0D
 $CD08 DEFM "JR NC,MI"          ; #STR(#PC,$04,$08)
 $CD10 DEFB $0D
 $CD11 DEFM "LD "               ; #STR(#PC,$04,$03)

; Game Entry Point
;
; #HTML(Manually write "<code>JP #R$FE69</code>" at #R$FEFE.)
@label=GameEntryPoint
c$CD14 LD HL,$FEFE   ; #REGhl=#R$FEFE.
 $CD17 LD A,$C3      ; {#HTML(Write #N$C3, which is the opcode for the
 $CD19 LD (HL),A     ; "<code>JP</code>" instruction to *#REGhl.)}
 $CD1A INC HL        ; Increment #REGhl by one.
 $CD1B LD A,$69      ; {Write #N$69 to *#REGhl.
 $CD1D LD (HL),A     ; }
 $CD1E INC HL        ; Increment #REGhl by one.
 $CD1F LD A,$FE      ; {Write #N$FE to *#REGhl.
 $CD21 LD (HL),A     ; }
; All will become clear soon...
 $CD22 LD HL,$F400   ; {Write #N$FE to #N($0104,$04,$04) bytes, starting from
 $CD25 LD BC,$0104   ; #R$F400.
@label=WriteInterruptJumpAddress
*$CD28 LD A,$FE      ;
 $CD2A LD (HL),A     ;
 $CD2B INC HL        ;
 $CD2C DEC BC        ;
 $CD2D LD A,B        ;
 $CD2E OR C          ;
 $CD2F JR NZ,$CD28   ; }
 $CD31 LD BC,$0000   ; {Write #N($0000,$04,$04) to: #LIST { *#R$FFFE } {
 $CD34 LD ($FFFE),BC ; *#R$FFFC } { *#R$FFFB } LIST#
 $CD38 LD ($FFFC),BC ;
 $CD3C LD ($FFFB),BC ; }
 $CD40 DI            ; Disable interrupts.
 $CD41 LD HL,$FA00   ; {Write #R$FA00 to *#R$FFF9.
 $CD44 LD ($FFF9),HL ; }
; This sets interrupt mode #N$02; when the system generates an interrupt,
; it'll use the high-order byte set here, together with a low-order byte
; generated from the system to form a 16-bit address to jump to.
; .
; As we've just set #N$FE to every address, this means that every generated
; interrupt will jump to #R$FEFE, which in turn will jump to #R$FE69.
 $CD47 LD A,$F4      ; {Set #N$F4 as the high-order byte in #REGi.
 $CD49 LD I,A        ; }
 $CD4B IM 2          ; Set interrupt mode #N$02.
 $CD4D LD A,$03      ; {Write #N$03 to: #LIST { *#R$FFF7 } { *#R$FFF8 } LIST#
 $CD4F LD ($FFF7),A  ;
 $CD52 LD ($FFF8),A  ; }
 $CD55 EI            ; Enable interrupts.
 $CD56 LD HL,$A06C   ; #REGhl=#R$A06C.
 $CD59 LD B,$80      ; #REGb=#N$80.
 $CD5B XOR A         ; {Write #N$00 to *#REGhl.
*$CD5C LD (HL),A     ; }
 $CD5D INC HL        ; Increment #REGhl by one.
 $CD5E DJNZ $CD5C    ; Decrease counter by one and loop back to #R$CD5C until
                     ; counter is zero.
 $CD60 EXX           ; Switch to the shadow registers.
 $CD61 PUSH HL       ; Stash #REGhl' on the stack.
 $CD62 EXX           ; Switch back to the normal registers.
 $CD63 XOR A         ; {#HTML(Write #N$00 to *<a rel="noopener nofollow"
 $CD64 LD ($5C6B),A  ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C6B.html">DF_SZ</a>.)
                     ; }
 $CD67 LD A,$02      ; #REGa=#N$02.
 $CD69 CALL $1601    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1601.html">CHAN_OPEN</a>.)
 $CD6C JP $CD86      ; Jump to #R$CD86.

; Set Default Keyboard Inputs
;
; Used by the routines at #R$CD86, #R$D0D4 and #R$D253.
;
; .
;
; See #R$D22C for the corresponding keymap table.
@label=SetDefaultKeyboardInputs
c$CD6F LD HL,$5BEB   ; {Write "5" (#N$04) to *#R$5BEB.
 $CD72 LD (HL),$04   ; }
 $CD74 INC HL        ; {Write "8" (#N$13) to *#R$5BEC.
 $CD75 LD (HL),$13   ; }
 $CD77 INC HL        ; {Write "7" (#N$0B) to *#R$5BED.
 $CD78 LD (HL),$0B   ; }
 $CD7A INC HL        ; {Write "6" (#N$03) to *#R$5BEE.
 $CD7B LD (HL),$03   ; }
 $CD7D INC HL        ; {Write "A" (#N$26) to *#R$5BEF.
 $CD7E LD (HL),$26   ; }
 $CD80 LD A,$24      ; {Write Keyboard Input (#N$24) to *#R$5BEA.
 $CD82 LD ($5BEA),A  ; }
 $CD85 RET           ; Return.

; Display Introduction Screen
;
; Used by the routines at #R$CD14, #R$D08A and #R$D602.
;
; .
;
; #PUSHS #UDGTABLE {
;   #SIM(start=$CD93,stop=$CDA8)
;   #FOR$01,$08||x|#SIM(start=$D0AC,stop=$D0D3)
;     #SCR$02(*title-screen-x)#PLOT(0,0,0)(title-screen-x)
;   ||
;   #UDGARRAY#(#ANIMATE$0F,$08(title-screen))
; } UDGTABLE# #POPS
@label=DisplayIntroductionScreen
c$CD86 LD A,$04      ; {Write #N$04 to *#R$5BF1.
 $CD88 LD ($5BF1),A  ; }
 $CD8B LD A,($5BEA)  ; {Call #R$CD6F if no control method has been set yet
 $CD8E CP $00        ; (as-in, game has just been loaded).
 $CD90 CALL Z,$CD6F  ; }
 $CD93 LD A,$03      ; {#HTML(Set the border to MAGENTA using <a rel="noopener
 $CD95 CALL $229B    ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/2294.html#229b">BORDER</a>.)
                     ; }
 $CD98 LD A,$03      ; {Write MAGENTA to *#R$5BD0.
 $CD9A LD ($5BD0),A  ; }
 $CD9D LD DE,$4000   ; #REGde=#R$4000(#N$4000).
 $CDA0 LD BC,$1B00   ; #REGbc=#N$1B00.
 $CDA3 LD HL,$6978   ; #REGhl=#R$6978.
 $CDA6 LDIR          ; Copy the introduction screen to the screen buffer.
; #HTML(Use <a rel="noopener nofollow"
; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a> as a counter.)
 $CDA8 LD BC,$0000   ; {#HTML(Reset *<a rel="noopener nofollow"
 $CDAB LD ($5C78),BC ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                     ; to #N($0000,$04,$04).)}
@label=IntroductionScreen_Loop
*$CDAF LD BC,($5C78) ; #HTML(#REGbc=*<a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $CDB3 LD A,B        ; {#HTML(Call #R$D602 if the timer held by <a
 $CDB4 CP $04        ; rel="noopener nofollow"
 $CDB6 CALL Z,$D602  ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                     ; is up.)}
 $CDB9 CALL $D0AC    ; Call #R$D0AC.
; Don't bother checking the Kempston joystick port if we don't have to.
 $CDBC LD A,($5BEA)  ; {Skip down to #R$CDC9 if *#R$5BEA is not set to Kempston
 $CDBF CP $0C        ; joystick (#N$0C).
 $CDC1 JR NZ,$CDC9   ; }
; Handle checking input from the Kempston joystick.
 $CDC3 IN A,($1F)    ; Read from the Kempston joystick port.
 $CDC5 CP $10        ; {Jump to #R$CDD1 if fire has been pressed.
 $CDC7 JR Z,$CDD1    ; }
; Even if the Kempston joystick is selected, we still check the keyboard here.
@label=IntroductionScreen_KeyboardCheck
*$CDC9 CALL $028E    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $CDCC LD A,E        ; {Loop back round to #R$CDAF if no keys have been pressed
 $CDCD CP $FF        ; (#REGe is equal to #N$FF).
 $CDCF JR Z,$CDAF    ; }
; Continue on to #R$CDD1.

; Display Title Screen
;
; Used by the routines at #R$CD86 and #R$D0E2.
;
; .
;
; #PUSHS
; #UDGTABLE
; { #SIM(start=$CDD1,stop=$CE1E)#SCR$02(title-screen) }
; UDGTABLE#
; #POPS
@label=TitleScreen
c$CDD1 LD A,$00      ; {#HTML(Write #COLOUR$00 (#N$00) to *<a rel="noopener
 $CDD3 LD ($5C8D),A  ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
                     ; }
 $CDD6 CALL $D4BE    ; Call #R$D4BE.
 $CDD9 LD A,$00      ; {#HTML(Set the border to BLACK using <a rel="noopener
 $CDDB CALL $229B    ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/2294.html#229b">BORDER</a>.)
                     ; }
 $CDDE LD A,$00      ; {Write #COLOUR$00 (#N$00) to *#R$5BD0.
 $CDE0 LD ($5BD0),A  ; }
; This entry point is used by the routines at #R$D0D4, #R$D0E2, #R$D10C,
; #R$D188 and #R$D253.
*$CDE3 LD DE,$D9FD   ; #REGde=#R$D9FD.
 $CDE6 CALL $D60E    ; Call #R$D60E.
 $CDE9 LD A,($5BEA)  ; {Call #R$D259 if *#R$5BEA is set to Keyboard Input
 $CDEC CP $24        ; (#N$24).
 $CDEE CALL Z,$D259  ; }
 $CDF1 CALL $D60E    ; Call #R$D60E with #R$DA3A.
 $CDF4 LD A,($5BEA)  ; {Call #R$D259 if *#R$5BEA is set to Interface 2 joystick
 $CDF7 CP $1C        ; (#N$1C).
 $CDF9 CALL Z,$D259  ; }
 $CDFC CALL $D60E    ; Call #R$D60E with #R$DA50.
 $CDFF LD A,($5BEA)  ; {Call #R$D259 if *#R$5BEA is set to Cursor joystick
 $CE02 CP $14        ; (#N$14).
 $CE04 CALL Z,$D259  ; }
 $CE07 CALL $D60E    ; Call #R$D60E with #R$DA6E.
 $CE0A LD A,($5BEA)  ; {Call #R$D259 if *#R$5BEA is set to Kempston joystick
 $CE0D CP $0C        ; (#N$0C).
 $CE0F CALL Z,$D259  ; }
 $CE12 CALL $D60E    ; Call #R$D60E with #R$DA87.
 $CE15 LD A,($5BEA)  ; #REGa=*#R$5BEA (unused, #REGa is overwritten immediately
                     ; by #R$D60E on the next line).
 $CE18 CALL $D60E    ; Call #R$D60E with #R$DAA2.
 $CE1B CALL $D60E    ; Call #R$D60E with #R$DAB7.
; Keep looping until we get user input.
@label=TitleScreen_InputLoop
*$CE1E CALL $D5CF    ; Call #R$D5CF.
 $CE21 CP $24        ; {Jump to #R$D253 if #REGa is set to Keyboard input
 $CE23 JP Z,$D253    ; (#N$24).}
 $CE26 CP $1C        ; {Jump to #R$D10C if #REGa is set to Interface 2 joystick
 $CE28 JP Z,$D10C    ; (#N$1C).}
 $CE2B CP $14        ; {Jump to #R$D0D4 if #REGa is set to Cursor joystick
 $CE2D JP Z,$D0D4    ; (#N$14).}
 $CE30 CP $0C        ; {Jump to #R$D0E2 if #REGa is set to Kempston joystick
 $CE32 JP Z,$D0E2    ; (#N$0C).}
 $CE35 CP $04        ; {Jump to #R$D188 if #REGa is set to User-Defined key
 $CE37 JP Z,$D188    ; input (#N$04).}
 $CE3A CP $23        ; {Jump to #R$CE1E if #REGa is NOT set to start the game
 $CE3C JR NZ,$CE1E   ; (#N$23).}
; Else, the player has selected "0" to start the game.
 $CE3E JP $D08A      ; Jump to #R$D08A.

; Hidden Goldfish Game
;
; See #POKE#goldfishGameAccess(Access Hidden Game).
;
; .
;
; #PUSHS #UDGTABLE {
;   #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CF21)
;   #FOR$01,$50(x,#SIM(start=$CF44,stop=$CF4E)#SIM(start=$CF73,stop=$CF76)
;     #SCR$02(*goldfish-gameplay-x)#PLOT(0,0,0)(goldfish-gameplay-x)
;   )
;   #UDGARRAY#(#ANIMATE$0F(goldfish-gameplay))
; } UDGTABLE# #POPS
@label=GoldfishGame
c$CE41 CALL $D4BE      ; Call #R$D4BE.
; Print the playing instructions.
; .
; #PUSHS #UDGTABLE
; { #SIM(start=$CDD1,stop=$CE1E)#SIM(start=$CE41,stop=$CE4A)#SCR$02(goldfish-game-instructions) }
; UDGTABLE# #POPS
 $CE44 LD DE,$DD9A     ; #REGde=#R$DD9A.
 $CE47 CALL $D60E      ; Call #R$D60E.
; Pause to let the message sink in...
 $CE4A LD BC,$012C     ; #REGbc=#N$012C (pause loops).
@label=GoldfishGame_PauseLoop
*$CE4D PUSH BC         ; Stash the pause loop counter on the stack.
 $CE4E CALL $D3A6      ; Call #R$D3A6.
 $CE51 POP BC          ; Restore the pause loop counter from the stack.
 $CE52 DEC BC          ; Decrease the pause loop counter by one.
 $CE53 LD A,B          ; {Jump to #R$CE4D until the pause loop counter is zero.
 $CE54 OR C            ;
 $CE55 JR NZ,$CE4D     ; }
; Initialise the number of goldfish needed to complete this mini-game.
; .
; See #POKE#goldfishGameNumberOfFish(Fish To Be Caught (Hidden Game)).
 $CE57 LD A,$14        ; {Write #N$14 to *#R$DB44.
 $CE59 LD ($DB44),A    ; }
 $CE5C LD A,$05        ; {#HTML(Set the border to CYAN using <a rel="noopener
 $CE5E CALL $229B      ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/2294.html#229b">BORDER</a>.)
                       ; }
 $CE61 LD A,$05        ; {Write CYAN (#N$05) to *#R$5BD0.
 $CE63 LD ($5BD0),A    ; }
 $CE66 LD A,$38        ; {#HTML(Write #COLOUR$38 (#N$38) to *<a rel="noopener
 $CE68 LD ($5C8D),A    ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
                       ; }
 $CE6B CALL $D4BE      ; Call #R$D4BE.
; Start colouring the game playarea.
; .
; This is colourised in bands. First, #N$10 blue lines (from the bottom).
; .
; #PUSHS #UDGTABLE
; { #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CE78)#SCR$02(goldfish-game-01) }
; UDGTABLE# #POPS
 $CE6E LD B,$10        ; #REGb=#N$10.
 $CE70 LD A,$08        ; {#HTML(Write #COLOUR$08 (#N$08) to *<a rel="noopener
 $CE72 LD ($5C8D),A    ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
                       ; }
 $CE75 CALL $0E44      ; #HTML(Clear the bottom #N$10 lines using <a
                       ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
; Next, #N$08 yellow lines (again, from the bottom).
; .
; #PUSHS #UDGTABLE
; { #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CE82)#SCR$02(goldfish-game-02) }
; UDGTABLE# #POPS
 $CE78 LD A,$30        ; {#HTML(Write #COLOUR$30 (#N$30) to *<a rel="noopener
 $CE7A LD ($5C8D),A    ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
                       ; }
 $CE7D LD B,$03        ; {#HTML(Clear the bottom #N$08 lines using <a
 $CE7F CALL $0E44      ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                       ; }
; Finally, #N$02 cyan lines (again, from the bottom).
; .
; #PUSHS #UDGTABLE
; { #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CE8C)#SCR$02(goldfish-game-03) }
; UDGTABLE# #POPS
 $CE82 LD A,$28        ; {#HTML(Write #COLOUR$28 (#N$28) to *<a rel="noopener
 $CE84 LD ($5C8D),A    ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
                       ; }
 $CE87 LD B,$02        ; {#HTML(Clear the bottom #N$02 lines using <a
 $CE89 CALL $0E44      ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                       ; }
; This entry point is used by the routine at #R$D08A.
@label=GoldfishGame_InitialiseGame
*$CE8C LD IX,$DC0E     ; #REGix=#R$DC0E.
 $CE90 LD (IX+$00),$0F ; Write #N$0F to *#REGix+#N$00.
 $CE94 LD (IX+$01),$0A ; Write #N$0A to *#REGix+#N$01.
 $CE98 LD (IX+$02),$03 ; Write #N$03 to *#REGix+#N$02.
 $CE9C LD (IX+$03),$03 ; Write #N$03 to *#REGix+#N$03.
 $CEA0 LD (IX+$04),$00 ; Write #N$00 to *#REGix+#N$04.
 $CEA4 LD (IX+$05),$00 ; Write #N$00 to *#REGix+#N$05.
 $CEA8 LD (IX+$06),$20 ; Write #N$20 to *#REGix+#N$06.
 $CEAC LD (IX+$07),$02 ; Write #N$02 to *#REGix+#N$07.
 $CEB0 LD (IX+$08),$01 ; Write #N$01 to *#REGix+#N$08.
 $CEB4 LD (IX+$09),$07 ; Write #N$07 to *#REGix+#N$09.
 $CEB8 LD (IX+$0A),$01 ; Write #N$01 to *#REGix+#N$0A.
 $CEBC LD (IX+$0B),$03 ; Write #N$03 to *#REGix+#N$0B.
 $CEC0 LD (IX+$0C),$03 ; Write #N$03 to *#REGix+#N$0C.
 $CEC4 LD (IX+$0D),$0F ; Write #N$0F to *#REGix+#N$0D.
 $CEC8 LD (IX+$0E),$0A ; Write #N$0A to *#REGix+#N$0E.
 $CECC LD (IX+$0F),$03 ; Write #N$03 to *#REGix+#N$0F.
 $CED0 LD BC,$0064     ; #REGbc=#N($0064,$04,$04).
 $CED3 LD DE,$DB46     ; #REGde=#R$DB46.
 $CED6 LD HL,$A06C     ; #REGhl=#R$A06C.
 $CED9 LDIR            ; Copy #N($0064,$04,$04) bytes of data from *#R$A06C to
                       ; *#R$DB46.
 $CEDB LD HL,$A06C     ; #REGhl=#R$A06C.
 $CEDE LD DE,$DBAA     ; #REGde=#R$DBAA.
 $CEE1 LD BC,$0064     ; #REGbc=#N($0064,$04,$04).
 $CEE4 LDIR            ; Copy #N($0064,$04,$04) bytes of data from *#R$A06C to
                       ; *#R$DBAA.
; Randomly choose sand UDGs and write them into the Sand Animation Buffer. Note; the count is one screen width
; +#N$01 (so #N$21) so the animation doesn't happen on-screen.
@label=PopulateSandBuffer
 $CEE6 LD DE,$DC22     ; #REGde=#R$DC22.
 $CEE9 LD B,$21        ; #REGb=#N$21 (counter; number of sand UDGs to copy).
@label=PopulateSandBuffer_Loop
*$CEEB PUSH BC         ; {Stash the sand UDG counter and sand animation buffer
 $CEEC PUSH DE         ; pointer on the stack.}
 $CEED CALL $D8D4      ; {Fetch a semi-random number from #N$00-#N$0F and store
 $CEF0 AND %00001111   ; it in #REGa.}
 $CEF2 LD E,A          ; {#REGhl=#R$964C+(#REGa*#N$08).
 $CEF3 LD D,$00        ;
 $CEF5 SLA E           ;
 $CEF7 SLA E           ;
 $CEF9 SLA E           ;
 $CEFB LD HL,$964C     ;
 $CEFE ADD HL,DE       ; }
 $CEFF POP DE          ; Restore the sand animation buffer pointer from the
                       ; stack.
 $CF00 LD BC,$0008     ; #REGbc=#N($0008,$04,$04).
 $CF03 LDIR            ; Copy a sand UDG (#N($0008,$04,$04) bytes of data) to
                       ; the sand animation buffer.
 $CF05 POP BC          ; Restore the sand UDG counter from the stack.
 $CF06 DJNZ $CEEB      ; Decrease the sand UDG counter by one and loop back to
                       ; #R$CEEB until it is zero.
; See; #R$99EC and #R$9CEC.
 $CF08 CALL $D870      ; Call #R$D870.
; Set up the status bar.
; .
; Set the co-ordinates of where we're going to PRINT AT.
 $CF0B LD B,$02        ; {#HTML(Set up the screen buffer location #N$02/#N$21
 $CF0D LD C,$21        ; using <a rel="noopener nofollow"
 $CF0F CALL $0DD9      ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                       ; }
; Restore the default ZX Spectrum font.
 $CF12 LD HL,$3C00     ; {#HTML(Write <a rel="noopener nofollow"
 $CF15 LD ($5C36),HL   ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                       ; (CHARSET-#N$100) to *<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
; Print the status bar messaging.
; .
; #PUSHS #UDGTABLE
; { #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CF1E)#SCR$02(goldfish-game-04) }
; UDGTABLE# #POPS
 $CF18 LD DE,$D9D2     ; #REGde=#R$D9D2.
 $CF1B CALL $D60E      ; Call #R$D60E.
; Draw the oxygen bar at the bottom of the screen.
; .
; #PUSHS #UDGTABLE
; { #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CF21)#SCR$02(goldfish-game-05) }
; UDGTABLE# #POPS
 $CF1E CALL $D2F8      ; Call #R$D2F8.
; Reset any bubble data.
 $CF21 LD HL,$DD2A     ; #REGhl=#R$DD2A.
 $CF24 LD A,$00        ; #REGa=#N$00.
 $CF26 LD B,$6E        ; #REGb=#N$6E.
@label=GoldfishGame_ClearBubblesLoop
*$CF28 LD (HL),A       ; Write #N$00 to *#REGhl.
 $CF29 INC HL          ; Increment #REGhl by one.
 $CF2A DJNZ $CF28      ; Decrease counter by one and loop back to #R$CF28 until
                       ; counter is zero.
; Set player game entry variables.
 $CF2C LD A,$00        ; {Write #N$00 to *#R$DB42.
 $CF2E LD ($DB42),A    ; }
 $CF31 LD A,$13        ; {Write #N$13 to *#R$D33E.
 $CF33 LD ($D33E),A    ; }
; The "normal" game just starts on completion of the Goldfish game.
@label=GoldfishGame_GameLoop
*$CF36 LD A,($DB44)    ; {Jump to #R$D08A if *#R$DB42 is equal to *#R$DB44.
 $CF39 LD B,A          ;
 $CF3A LD A,($DB42)    ;
 $CF3D CP B            ;
 $CF3E JP Z,$D08A      ; }
; Handle the player "spending" air (only every 16th frame).
 $CF41 CALL $D2F2      ; Call #R$D2F2.
 $CF44 CALL $D8E2      ; Call #R$D8E2.
 $CF47 LD A,($D93D)    ; {Increment *#R$D93D by one.
 $CF4A INC A           ;
 $CF4B LD ($D93D),A    ; }
 $CF4E CALL $D92A      ; Call #R$D92A.
; Add the "float up" effect on every fourth frame.
 $CF51 LD A,($D93D)    ; {Call #R$D5CB when #R$D93D is divisable by #N$04 (with
 $CF54 AND %00000011   ; no remainder).
 $CF56 CALL Z,$D5CB    ; }
 $CF59 LD BC,($DD98)   ; #REGbc=*#R$DD98.
 $CF5D CALL $D778      ; Call #R$D778.
 $CF60 CALL $D8D4      ; {Get a semi-random number between #N$01-#N$08 and
 $CF63 AND %00000111   ; store it in #REGb.
 $CF65 INC A           ;
 $CF66 LD B,A          ; }
 $CF67 CALL $D778      ; Call #R$D778.
 $CF6A CALL $D4CC      ; Call #R$D4CC.
 $CF6D CALL $D260      ; Call #R$D260.
 $CF70 CALL $D579      ; Call #R$D579.
 $CF73 CALL $D8A2      ; Call #R$D8A2.
 $CF76 LD A,($D33E)    ; {Jump to #R$CFA8 if *#R$D33E is equal to #N$00.
 $CF79 CP $00          ;
 $CF7B JP Z,$CFA8      ; }
 $CF7E LD A,($DD98)    ; {#REGb=*#R$DD98.
 $CF81 LD B,A          ; }
 $CF82 LD IX,$DB46     ; #REGix=#R$DB46.
@label=GoldfishGame_ProcessCreature
*$CF86 PUSH BC         ; Stash #REGbc on the stack.
 $CF87 LD A,(IX+$0A)   ; {Jump to #R$CFA0 if *#REGix+#N$0A is equal to #N$00.
 $CF8A CP $00          ;
 $CF8C JR Z,$CFA0      ; }
 $CF8E LD A,($DC0F)    ; #REGa=*#R$DC0F.
 $CF91 DEC A           ; Decrease #REGa by one.
 $CF92 ADD A,(IX+$08)  ; #REGa+=*#REGix+#N$08.
 $CF95 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $CF98 SUB B           ; #REGa-=#REGb.
 $CF99 LD B,(IX+$08)   ; #REGb=*#REGix+#N$08.
 $CF9C INC B           ; Increment #REGb by one.
 $CF9D CP B            ; {Jump to #R$CFF6 if #REGa is lower than #REGb.
 $CF9E JR C,$CFF6      ; }
; This entry point is used by the routine at #R$CFF6.
@label=GoldfishGame_NextCreature
*$CFA0 POP BC          ; Restore #REGbc from the stack.
 $CFA1 LD DE,$0018     ; #REGde=#N($0018,$04,$04).
 $CFA4 ADD IX,DE       ; #REGix+=#REGde.
 $CFA6 DJNZ $CF86      ; Decrease counter by one and loop back to #R$CF86 until
                       ; counter is zero.
; Print the number of fish the player has caught so far.
@label=GoldfishGame_PrintFishCaught
*$CFA8 LD A,$10        ; {Set INK: BLACK (#N$00).
 $CFAA RST $10         ;
 $CFAB LD A,$00        ;
 $CFAD RST $10         ; }
 $CFAE LD A,$11        ; {Set PAPER: CYAN (#N$05).
 $CFB0 RST $10         ;
 $CFB1 LD A,$05        ;
 $CFB3 RST $10         ; }
; Restore the default ZX Spectrum font.
 $CFB4 LD HL,$3C00     ; {#HTML(Write <a rel="noopener nofollow"
 $CFB7 LD ($5C36),HL   ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                       ; (CHARSET-#N$100) to *<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $CFBA LD B,$02        ; {#HTML(Set up the screen buffer location #N$02/#N$1C
 $CFBC LD C,$1C        ; using <a rel="noopener nofollow"
 $CFBE CALL $0DD9      ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                       ; }
; #HTML(Store *#R$DB42 in #REGbc so we can use <a
; href="https://skoolkid.github.io/rom/asm/1A1B.html">OUT_NUM_1</a> to print it
; to the screen.)
 $CFC1 LD A,($DB42)    ; {#REGbc=*#R$DB42.
 $CFC4 LD C,A          ;
 $CFC5 LD B,$00        ; }
 $CFC7 CALL $1A1B      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/1A1B.html">OUT_NUM_1</a>.)
 $CFCA LD A,$20        ; #REGa=ASCII "space" (#N$20).
 $CFCC CALL $D353      ; Call #R$D353.
 $CFCF LD A,($DC0F)    ; {Jump to #R$CF36 if *#R$DC0F is not equal to #N$10.
 $CFD2 CP $10          ;
 $CFD4 JP NZ,$CF36     ; }
 $CFD7 LD A,($DC11)    ; {Jump to #R$CF36 if *#R$DC11 is not equal to #N$03.
 $CFDA CP $03          ;
 $CFDC JP NZ,$CF36     ; }
 $CFDF LD A,($DC0E)    ; {#REGc=*#R$DC0E.
 $CFE2 LD C,A          ; }
 $CFE3 LD A,$21        ; #REGa=#N$21.
 $CFE5 SUB C           ; #REGa-=#REGc.
 $CFE6 LD HL,$47E0     ; #REGhl=#N$47E0 (screen buffer location).
 $CFE9 LD E,A          ; #REGe=#REGa.
 $CFEA LD D,$00        ; #REGd=#N$00.
 $CFEC ADD HL,DE       ; #REGhl+=#REGde.
 $CFED LD A,(HL)       ; {Jump to #R$D05B if *#REGhl is equal to #N$00.
 $CFEE CP $00          ;
 $CFF0 JP Z,$D05B      ; }
 $CFF3 JP $CF36        ; Jump to #R$CF36.

; Goldfish Game: Collision
;
; Used by the routine at #R$CE41.
;
; .
;
; The player has hit a sprite, let's see what it is.
@label=GoldfishGame_Collision
c$CFF6 LD A,($DC0E)    ; {#REGc=*#R$DC0E.
 $CFF9 LD C,A          ; }
 $CFFA LD A,(IX+$00)   ; #REGa=*#REGix+#N$00.
 $CFFD SUB (IX+$07)    ; #REGa-=*#REGix+#N$07.
 $D000 INC A           ; Increment #REGa by one.
 $D001 SUB C           ; #REGa-=#REGc.
 $D002 CP $02          ; {Jump to #R$CFA0 if #REGa is higher than #N$02.
 $D004 JR NC,$CFA0     ; }
 $D006 PUSH IX         ; Stash #REGix on the stack.
 $D008 LD HL,$0064     ; #REGhl=#N($0064,$04,$04).
 $D00B LD DE,$0064     ; #REGde=#N($0064,$04,$04).
 $D00E CALL $03B5      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/03B5.html">BEEPER</a>.)
 $D011 POP IX          ; Restore #REGix from the stack.
 $D013 LD A,(IX+$08)   ; {Jump to #R$D047 if *#REGix+#N$08 is not equal to
 $D016 CP $01          ; #N$01.
 $D018 JR NZ,$D047     ; }
; The player has caught a fish! Add it to the count and remove it from the
; screen.
@label=GoldfishGame_CaughtFish
 $D01A LD A,($DB42)    ; {Increment *#R$DB42 by one.
 $D01D INC A           ;
 $D01E LD ($DB42),A    ; }
 $D021 LD C,(IX+$00)   ; #REGc=Horizontal position (*#REGix+#N$00).
 $D024 LD B,(IX+$01)   ; #REGb=Vertical position (*#REGix+#N$01).
 $D027 LD E,(IX+$07)   ; #REGe=*#REGix+#N$07.
 $D02A LD D,(IX+$08)   ; #REGd=*#REGix+#N$08.
 $D02D LD A,(IX+$02)   ; {Jump to #R$D035 if *#REGix+#N$02 is equal to #N$03.
 $D030 CP $03          ;
 $D032 JR Z,$D035      ; }
 $D034 INC E           ; Increment #REGe by one.
*$D035 LD HL,$9F6C     ; {#HTML(Write #R$A06C(#N$9F6C) (#R$A06C) to *<a
 $D038 LD ($5C36),HL   ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $D03B LD A,$20        ; #REGa=#N$20.
 $D03D CALL $D460      ; Call #R$D460.
 $D040 LD (IX+$0A),$00 ; Write inactive (#N$00) to *#REGix+#N$0A.
 $D044 JP $CFA0        ; Jump to #R$CFA0.
; When any sea creature touches you they steal all of your fish.
@label=GoldfishGame_HitCreature
*$D047 XOR A           ; {Write #N$00 to *#R$DB42.
 $D048 LD ($DB42),A    ; }
 $D04B PUSH IX         ; Stash #REGix on the stack.
 $D04D LD HL,$00C8     ; #REGhl=#N($00C8,$04,$04).
 $D050 LD DE,$0032     ; #REGde=#N($0032,$04,$04).
 $D053 CALL $03B5      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/03B5.html">BEEPER</a>.)
 $D056 POP IX          ; Restore #REGix from the stack.
 $D058 JP $CFA0        ; Jump to #R$CFA0.

; Goldfish Game: Refill Oxygen
;
; Used by the routine at #R$CE41.
;
; .
;
; Fill the air gauge back up to maximum.
@label=GoldfishGame_RefillOxygen
c$D05B LD A,$13      ; {Write #N$13 to *#R$D33E.
 $D05D LD ($D33E),A  ; }
 $D060 CALL $D2F8    ; Call #R$D2F8.
 $D063 LD B,$0A      ; #REGb=#N$0A.
*$D065 PUSH BC       ; Stash #REGbc on the stack.
 $D066 LD A,$15      ; #REGa=#N$15.
 $D068 LD C,$FE      ; #REGc=#N$FE.
 $D06A LD B,$FF      ; #REGb=#N$FF.
 $D06C OUT (C),A     ;
 $D06E CALL $D8D4    ; Call #R$D8D4.
 $D071 LD B,A        ; #REGb=#REGa.
*$D072 DJNZ $D072    ; Decrease counter by one and loop back to #R$D072 until
                     ; counter is zero.
 $D074 CALL $D8D4    ; Call #R$D8D4.
 $D077 LD B,A        ; #REGb=#REGa.
*$D078 LD A,$05      ; #REGa=#N$05.
 $D07A PUSH BC       ; Stash #REGbc on the stack.
 $D07B LD C,$FE      ; #REGc=#N$FE.
 $D07D LD B,$FF      ; #REGb=#N$FF.
 $D07F OUT (C),A     ;
 $D081 POP BC        ; Restore #REGbc from the stack.
 $D082 DJNZ $D078    ; Decrease counter by one and loop back to #R$D078 until
                     ; counter is zero.
 $D084 POP BC        ; Restore #REGbc from the stack.
 $D085 DJNZ $D065    ; Decrease counter by one and loop back to #R$D065 until
                     ; counter is zero.
 $D087 JP $CF36      ; Jump to #R$CF36.

; Start Game
;
; Used by the routines at #R$CDD1 and #R$CE41.
;
; .
;
; When a new game starts, the player lives have already been set to #N$04 in
; #R$CD86.
; .
; *#R$5BF0 will be set to #N$02 after the player has collected the golden
; key and the game restarts.
; This is how the game ensures that the lives and booty count are not reset.
; .
; Game modes #N$01 and #N$02 appear to be mostly identical, however as the
; booty count is retained in the new game - this means the animals will continue
; to appear more frequently as the count checks if the number of items of booty
; is higher than 100. See the check at #R$E12A.
@label=StartGame
c$D08A LD A,($5BF1)  ; {Jump to #R$D099 if *#R$5BF1 is equal to #N$04.
 $D08D CP $04        ;
 $D08F JR Z,$D099    ; }
; Else the game has been looped already so set *GameState accordingly.
 $D091 LD A,$02      ; {Write "Game Looped Mode" (#N$02) to *#R$5BF0.
 $D093 LD ($5BF0),A  ; }
 $D096 JP $D09E      ; Jump to #R$D09E.
; This is a normal "new" game.
@label=SetNormalGame
*$D099 LD A,$01      ; {Write "Normal Game" (#N$01) to *#R$5BF0.
 $D09B LD ($5BF0),A  ; }
; Initialise...
@label=NewGame
*$D09E CALL $DEA8    ; Call #R$DEA8.
; This looks as though the game might start the Goldfish Game if you reach here
; without losing all your lives?
 $D0A1 LD A,($5BF1)  ; {Jump to #R$CD86 if *#R$5BF1 is equal to #N$FF.
 $D0A4 CP $FF        ;
 $D0A6 JP Z,$CD86    ; }
 $D0A9 JP $CE8C      ; Jump to #R$CE8C.

; Animate Title Screen
;
; Used by the routine at #R$CD86.
@label=AnimateTitleScreen
c$D0AC LD HL,$4000   ; #REGhl=#R$4000(#N$4000) (screen buffer destination).
 $D0AF LD DE,$6978   ; #REGde=#R$6978 (source).
; Find the next instance of "#N$05" in the source data.
@label=AnimateTitleScreen_Loop
*$D0B2 LD A,(DE)     ; {Jump to #R$D0C7 if *#REGde is not equal to #N$05.
 $D0B3 CP $05        ;
 $D0B5 JR NZ,$D0C7   ; }
 $D0B7 LD A,(HL)     ; {Seems to do nothing; as both #REGa and the flags are
 $D0B8 CP $00        ; overwritten in the #R$D8D4 call.}
 $D0BA CALL $D8D4    ; Call #R$D8D4.
; On returning; #REGa=(*#R$D86F*#N$05)+#N$01.
 $D0BD CP $80        ; {Jump to #R$D0C4 if #REGa is higher than #N$80.
 $D0BF JR NC,$D0C4   ; }
 $D0C1 LD (HL),A     ; Write #REGa to the screen buffer pointer address.
 $D0C2 JR $D0C7      ; Jump to #R$D0C7.
; This byte has finished its cycle, so reset it.
@label=AnimateTitleScreen_Reset
*$D0C4 LD A,$00      ; {Reset the current byte in the screen buffer back to
 $D0C6 LD (HL),A     ; #N$00.}
; Increment both source and destination pointers and loop back until the entire
; screen buffer has been processed.
@label=AnimateTitleScreen_Increment
*$D0C7 INC HL        ; Increment screen buffer pointer by one.
 $D0C8 INC DE        ; Increment source data pointer by one.
 $D0C9 LD A,H        ; {Jump to #R$D0B2 if #REGh is not equal to #N$58.
 $D0CA CP $58        ;
 $D0CC JR NZ,$D0B2   ; }
 $D0CE LD A,L        ; {Jump to #R$D0B2 if #REGl is not equal to #N$00.
 $D0CF CP $00        ;
 $D0D1 JR NZ,$D0B2   ; }
; The end of the screen buffer has been reached, so return.
 $D0D3 RET           ; Return.

; Set Cursor Joystick
;
; Used by the routine at #R$CDD1.
@label=SetCursorJoystick
c$D0D4 CALL $CD6F    ; Call #R$CD6F.
 $D0D7 LD A,$23      ; {Write #N$23 to *#REGhl.
 $D0D9 LD (HL),A     ; }
 $D0DA LD A,$14      ; {Write Cursor joystick (#N$14) to *#R$5BEA.
 $D0DC LD ($5BEA),A  ; }
 $D0DF JP $CDE3      ; Jump to #R$CDE3.

; Set Kempston Joystick
;
; Used by the routine at #R$CDD1.
@label=SetKempstonJoystick
c$D0E2 LD DE,$D9B6   ; #REGde=#R$D9B6.
 $D0E5 CALL $D60E    ; Call #R$D60E.
; Pause to let the message sink in...
 $D0E8 LD B,$64      ; #REGb=#N$64 (pause loops).
@label=SetKempstonJoystick_PauseLoop
*$D0EA PUSH BC       ; Stash the pause loop counter on the stack.
 $D0EB CALL $D3A6    ; Call #R$D3A6.
 $D0EE POP BC        ; Restore the pause loop counter from the stack.
 $D0EF DJNZ $D0EA    ; Decrease the pause loop counter by one and loop back to
                     ; #R$D0EA until the counter is zero.
; After the above loop we loop again, this gives the player the chance to abort
; setting this control method.
 $D0F1 LD BC,$03E8   ; #REGbc=#N$03E8 (counter).
@label=SetKempstonJoystick_Read
*$D0F4 IN A,($1F)    ; Read from the Kempston joystick port.
 $D0F6 CP $00        ; {Jump to #R$CDD1 if any control is being pressed.
 $D0F8 JP NZ,$CDD1   ; }
 $D0FB DEC BC        ; Decrease #REGbc by one.
 $D0FC LD A,B        ; {Jump to #R$D0F4 until #REGbc is zero.
 $D0FD OR C          ;
 $D0FE JR NZ,$D0F4   ; }
; Else, finally, set this control method.
 $D100 LD A,$0C      ; {Set Kempston joystick (#N$0C) to *#R$5BEA.
 $D102 LD ($5BEA),A  ; }
 $D105 JP $CDE3      ; Jump to #R$CDE3.

; Restart Set User-Defined Keys
;
; Used by the routine at #R$D188.
;
; .
;
; This subroutine is used when a duplicate control key has been detected. It performs housekeeping and then just
; kicks off #R$D188 again.
@label=Restart_SetUserDefinedKeys
c$D108 POP BC        ; Restore #REGbc from the stack.
 $D109 JP $D188      ; Jump to #R$D188.

; Set Interface 2 Joystick
;
; Used by the routine at #R$CDD1.
;
; .
;
; Discover which port is being used.
; .
; Ask the player to press the fire button on their joystick.
@label=SetInterface2Joystick
c$D10C LD DE,$D16F              ; #REGde=#R$D16F.
 $D10F CALL $D60E               ; Call #R$D60E.
; Pause to let the message sink in...
 $D112 LD BC,$03E8              ; #REGbc=#N$03E8 (pause loops).
@label=SetInterface2Joystick_Loop
*$D115 PUSH BC                  ; Stash the pause loop counter on the stack.
 $D116 CALL $D3A6               ; Call #R$D3A6.
 $D119 CALL $028E               ; #HTML(Call <a rel="noopener nofollow"
                                ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $D11C POP BC                   ; Restore the pause loop counter from the
                                ; stack.
 $D11D LD A,E                   ; {Jump to #R$D14D if the left-hand joystick
 $D11E CP $04                   ; port fire button was pressed (#N$04 == "5").
 $D120 JP Z,$D14D               ; }
 $D123 CP $23                   ; {Jump to #R$D135 if the right-hand joystick
 $D125 JP Z,$D135               ; port fire button was pressed (#N$23 == "0").}
 $D128 DEC BC                   ; Decrease the pause loop counter by one.
 $D129 LD A,C                   ; {Jump to #R$D115 until the pause loop counter
 $D12A OR B                     ; is zero.
 $D12B JR NZ,$D115              ; }
; No response from the player, so do nothing and return.
 $D12D LD B,$12                 ; {#HTML(Clear the bottom #N$12 lines using <a
 $D12F CALL $0E44               ; rel="noopener nofollow"
                                ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                                ; }
 $D132 JP $CDE3                 ; Jump to #R$CDE3.
; Sets the user-defined keys for the right-hand Interface 2 joystick.
@label=SetInterface2Joystick_Right
*$D135 LD DE,$5BEB              ; #REGde=#R$5BEB.
 $D138 LD HL,$D16A              ; #REGhl=#R$D16A.
 $D13B LD BC,$0005              ; #REGbc=#N($0005,$04,$04).
 $D13E LDIR                     ; Copy the keymap to the user-defined keys
                                ; store.
 $D140 LD A,$1C                 ; {Write Interface 2 joystick (#N$1C) to
 $D142 LD ($5BEA),A             ; *#R$5BEA.}
 $D145 LD B,$12                 ; {#HTML(Clear the bottom #N$12 lines using <a
 $D147 CALL $0E44               ; rel="noopener nofollow"
                                ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                                ; }
 $D14A JP $CDE3                 ; Jump to #R$CDE3.
; Sets the user-defined keys for the left-hand Interface 2 joystick.
@label=SetInterface2Joystick_Left
*$D14D LD DE,$5BEB              ; #REGde=#R$5BEB.
 $D150 LD HL,$D165              ; #REGhl=#R$D165.
 $D153 LD BC,$0005              ; #REGbc=#N($0005,$04,$04).
 $D156 LDIR                     ; Copy the keymap to the user-defined keys
                                ; store.
 $D158 LD A,$1C                 ; {Write Interface 2 joystick (#N$1C) to
 $D15A LD ($5BEA),A             ; *#R$5BEA.}
 $D15D LD B,$12                 ; {#HTML(Clear the bottom #N$12 lines using <a
 $D15F CALL $0E44               ; rel="noopener nofollow"
                                ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                                ; }
 $D162 JP $CDE3                 ; Jump to #R$CDE3.
; The key maps for left and right Interface 2 joystick ports.
@label=Interface2KeyMap_Left
 $D165 DEFB $24,$1C,$0C,$14,$04 ;
@label=Interface2KeyMap_Right
 $D16A DEFB $03,$0B,$1B,$13,$23 ;

; Messaging: Press Fire Button
@label=Messaging_PressFireButton
t$D16F DEFB $16,$14,$07         ; PRINT AT: #N(#PEEK(#PC+$01)),
                                ; #N(#PEEK(#PC+$02)).
 $D172 DEFB $12,$01             ; FLASH: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $D174 DEFM "PRESS FIRE BUTTON" ; "#STR(#PC,$04,$11)".
 $D185 DEFB $12,$00             ; FLASH: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $D187 DEFB $FF                 ; Terminator.

; Set User-Defined Keys
;
; Used by the routines at #R$CDD1 and #R$D108.
;
; .
;
; #PUSHS #UDGTABLE {
;   #SIM(sp=$68DD)
;   #SIM(start=$CDD1,stop=$CDE9)
;   #SIM(start=$CD6F,stop=$CD85)
;   #SIM(start=$D188,stop=$D19D)
;   #SIM(start=$D1A6,stop=$D1BF)
;   #SCR$02(user-defined-keys)
; } UDGTABLE# #POPS
@label=SetUserDefinedKeys
c$D188 LD A,$00      ; {Reset *#R$D20C to #N$00.
 $D18A LD ($D20C),A  ; }
 $D18D LD A,$24      ; {Write Keyboard Input (#N$24) to *#R$5BEA.
 $D18F LD ($5BEA),A  ; }
; Don't clear the whole screen. Leave the header from the title screen.
 $D192 LD B,$12      ; {#HTML(Clear the bottom #N$12 lines using <a
 $D194 CALL $0E44    ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                     ; }
@label=UserDefinedKeys_Loop
*$D197 LD DE,$DACB   ; #REGde=#R$DACB.
 $D19A CALL $D60E    ; Call #R$D60E.
; Pause to let the message sink in...
 $D19D LD B,$0A      ; #REGb=#N$0A (pause loops).
@label=UserDefinedKeys_PauseLoop
*$D19F PUSH BC       ; Stash #REGbc on the stack.
 $D1A0 CALL $D3A6    ; Call #R$D3A6.
 $D1A3 POP BC        ; Restore #REGbc from the stack.
 $D1A4 DJNZ $D19F    ; Decrease counter by one and loop back to #R$D19F until
                     ; counter is zero.
; Display each (current) user-defined key, and the relevant messaging.
 $D1A6 LD A,$00      ; {Call #R$D20D using key position: #N$00.
 $D1A8 CALL $D20D    ; }
 $D1AB LD A,$01      ; {Call #R$D20D using key position: #N$01.
 $D1AD CALL $D20D    ; }
 $D1B0 LD A,$02      ; {Call #R$D20D using key position: #N$02.
 $D1B2 CALL $D20D    ; }
 $D1B5 LD A,$03      ; {Call #R$D20D using key position: #N$03.
 $D1B7 CALL $D20D    ; }
 $D1BA LD A,$04      ; {Call #R$D20D using key position: #N$04.
 $D1BC CALL $D20D    ; }
; Fetch the user input.
@label=UserDefinedKeys_InputLoop
*$D1BF CALL $028E    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $D1C2 LD A,E        ; {Loop back to #R$D1BF until any key has been pressed.
 $D1C3 CP $FF        ;
 $D1C5 JR Z,$D1BF    ; }
 $D1C7 CP $20        ; {Jump to #R$D1EE if "SPACE" has been pressed (#N$20).
 $D1C9 JP Z,$D1EE    ; }
 $D1CC PUSH AF       ; Stash the keypress on the stack briefly.
; Create an offset for the currently in-focus key position using #REGde.
 $D1CD LD A,($D20C)  ; {#REGe=*#R$D20C.
 $D1D0 LD E,A        ; }
 $D1D1 POP AF        ; Restore the keypress from the stack.
 $D1D2 LD D,$00      ; #REGd=#N$00 (to finish creating the offset for the
                     ; current key position using #REGde).
 $D1D4 LD HL,$5BEB   ; {#REGhl=#R$5BEB+#REGde.
 $D1D7 ADD HL,DE     ; }
 $D1D8 LD (HL),A     ; Write the keypress code to the appropriate position in
                     ; the user-defined keys table held by *#REGhl.
; A small pause loop to give the user a chance to release the key.
 $D1D9 LD B,$02      ; #REGb=#N$02 (pause loops).
@label=UserDefinedKeys_Debounce
*$D1DB PUSH BC       ; Stash #REGbc on the stack.
 $D1DC CALL $D3A6    ; Call #R$D3A6.
 $D1DF POP BC        ; Restore #REGbc from the stack.
 $D1E0 DJNZ $D1DB    ; Decrease counter by one and loop back to #R$D1DB until
                     ; counter is zero.
; Move onto the next key position.
 $D1E2 LD A,($D20C)  ; {Increment *#R$D20C by one.
 $D1E5 INC A         ;
 $D1E6 LD ($D20C),A  ; }
 $D1E9 CP $05        ; {Loop back to #R$D197 until all #N$05 keys have been
 $D1EB JP NZ,$D197   ; defined.}
; Each value is checked against other values ahead of it. It doesn't need to check "behind" as e.g.
; consider the following table:
; #TABLE(default,centre,centre,centre,centre,centre,centre)
; { =h,r2 Cycle | =h,r2 Using | =h,c4 Positions }
; { =h #N$01 | =h #N$02 | =h #N$03 | =h #N$04 }
; { =h #N$01 | #N$01 | #N$02 | #N$03 | #N$04 | #N$05 }
; { =h #N$02 | #N$02 | #N$03 | #N$04 | #N$05 |  ---  }
; { =h #N$03 | #N$03 | #N$04 | #N$05 |  ---  |  ---  }
; { =h #N$04 | #N$04 | #N$05 |  ---  |  ---  |  ---  }
; TABLE#
; .
; On the 1st cycle; #N$01 is checked against #N$02, #N$03, #N$04 and #N$05.
; .
; So on the 2nd cycle, there's no need to check #N$02 against #N$01 as this
; already happened in the 1st cycle.
; .
; And so on...
@label=CheckForDuplicates
*$D1EE LD B,$04      ; Set a counter; there are #N$04 other keys to check at
                     ; the beginning of the cycle.
 $D1F0 LD HL,$5BEB   ; Set a pointer in #REGhl to the beginning of the key
                     ; storage: #R$5BEB.
@label=CheckForDuplicates_Loop
*$D1F3 PUSH BC       ; Stash the current key map counter on the stack (this is
                     ; reduced by one on each cycle).
 $D1F4 LD A,(HL)     ; Does nothing, this is immediately overwritten in the
                     ; loop below.
; Clone #REGhl into #REGde to prepare for the checking loop.
 $D1F5 PUSH HL       ; {#REGde=#REGhl (using the stack).
 $D1F6 POP DE        ; }
; Process this cycle. *#REGhl points to the current "checking" key map value,
; and #REGde is incremented on each cycle to check against it.
@label=CheckForDuplicates_CheckLoop
*$D1F7 INC DE        ; *#REGde will contain the comparison key map value, so
                     ; increment #REGde by one.
 $D1F8 LD A,(DE)     ; {If there's a match between *#REGde and *#REGhl, jump to
 $D1F9 CP (HL)       ; #R$D108 and get the user to try again.
 $D1FA JP Z,$D108    ; }
 $D1FD DJNZ $D1F7    ; Decrease the key map counter by one and loop back to
                     ; #R$D1F7 until all key map values have been checked.
; This cycle is finished, so prepare for the next one.
 $D1FF POP BC        ; Restore the key map counter from the stack.
 $D200 INC HL        ; Move the value pointer to the next value.
 $D201 DEC B         ; Decrease the key map counter by one, each cycle checks
                     ; one less key value.
 $D202 JR NZ,$D1F3   ; Jump to #R$D1F3 until all key map values have been
                     ; checked.
; We are good! Clear the screen and move back to the title screen.
 $D204 LD B,$12      ; {#HTML(Clear the bottom #N$12 lines using <a
 $D206 CALL $0E44    ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                     ; }
 $D209 JP $CDE3      ; Jump to #R$CDE3.

; Current In-Focus User-Defined Key
;
; Contains the currently in-focus key position; used for highlighting.
@label=Current_UserDefinedKey
g$D20C DEFB $00

; Print User-Defined Key
;
; Used by the routine at #R$D188.
;
; A The key position
; DE Pointer to the key position messaging
@label=PrintUserDefinedKey
c$D20D PUSH DE       ; Stash the key position messaging pointer on the stack.
 $D20E LD E,A        ; Store the current position in an offset...
 $D20F LD A,($D20C)  ; {Call #R$D259 to highlight this key if it's the one currently in focus
 $D212 CP E          ; (i.e. if *#R$D20C is equal to the position currently being printed).
 $D213 CALL Z,$D259  ; }
 $D216 LD D,$00      ; #REGd=#N$00 (to finish creating the offset for the
                     ; current key position using #REGde).
; Point to the key in the user-defined key table relating to the requested key
; position.
 $D218 LD HL,$5BEB   ; {#REGhl=#R$5BEB+#REGde.
 $D21B ADD HL,DE     ; }
 $D21C EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D21D LD A,(DE)     ; {Fetch the key for this position and store it in #REGde
 $D21E LD E,A        ; as an offset.
 $D21F LD D,$00      ; }
; Point to the relevant key in the keymap table.
 $D221 LD HL,$D22C   ; {#REGhl=#R$D22C+#REGde.
 $D224 ADD HL,DE     ; }
 $D225 LD A,(HL)     ; Fetch the key value from the keymap table and store it
                     ; in #REGa.
 $D226 RST $10       ; #HTML(Print it to the screen using RST <a rel="noopener
                     ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0010.html">#N$10</a>.)
; Print the "action" messaging to signify what this key is for, e.g. "LEFT",
; "RIGHT", etc...
 $D227 POP DE        ; Restore the key position messaging pointer from the
                     ; stack.
 $D228 JP $D60E      ; Jump to #R$D60E.

; Unused
u$D22B RET           ; This is never reached.

; Table: Key Map
;
; See #R$CD6F for an example of how this is used. Each key is stored as
; an offset. So a stored value of #N$05 equates to the "T" key.
@label=Table_UserDefinedKeyMap
g$D22C DEFB $42      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D22D DEFB $48      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D22E DEFB $59      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D22F DEFB $36      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D230 DEFB $35      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D231 DEFB $54      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D232 DEFB $47      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D233 DEFB $56      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D234 DEFB $4E      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D235 DEFB $4A      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D236 DEFB $55      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D237 DEFB $37      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D238 DEFB $34      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D239 DEFB $52      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D23A DEFB $46      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D23B DEFB $43      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D23C DEFB $4D      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D23D DEFB $4B      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D23E DEFB $49      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D23F DEFB $38      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D240 DEFB $33      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D241 DEFB $45      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D242 DEFB $44      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D243 DEFB $58      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D244 DEFB $20      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D245 DEFB $4C      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D246 DEFB $4F      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D247 DEFB $39      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D248 DEFB $32      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D249 DEFB $57      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D24A DEFB $53      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D24B DEFB $5A      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D24C DEFB $20      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D24D DEFB $20      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D24E DEFB $50      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D24F DEFB $30      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D250 DEFB $31      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D251 DEFB $51      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D252 DEFB $41      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".

; Set Default Keys
;
; Used by the routine at #R$CDD1.
@label=SetDefaultKeys
c$D253 CALL $CD6F    ; Call #R$CD6F.
 $D256 JP $CDE3      ; Jump to #R$CDE3.

; Turn Inverse On
;
; Used by the routines at #R$CDD1 and #R$D20D.
@label=InverseOn
c$D259 LD A,$14      ; {INVERSE: ON.
 $D25B RST $10       ;
 $D25C LD A,$01      ;
 $D25E RST $10       ; }
 $D25F RET           ; Return.

; Goldfish Game: Handler: Bubbles
;
; Used by the routine at #R$CE41.
@label=GoldfishGame_Handler_Bubbles
c$D260 LD IX,$DD2A     ; #REGix=#R$DD2A.
 $D264 LD B,$05        ; #REGb=#N$05 (counter; maximum number of bubbles).
@label=Handler_Bubbles_Loop
*$D266 PUSH BC         ; Stash the bubble counter on the stack.
 $D267 LD A,(IX+$0A)   ; {Jump to #R$D2B1 if the bubble state (*#REGix+#N$0A)
 $D26A CP $00          ; is inactive (#N$00).
 $D26C JP Z,$D2B1      ; }
; A bubble exists, so we need to redraw it in a new position. Hence, we erase
; it first here.
 $D26F LD A,$14        ; {Set INVERSE: ON
 $D271 RST $10         ;
 $D272 LD A,$01        ;
 $D274 RST $10         ; }
; Fetch the current co-ordinates.
 $D275 LD C,(IX+$00)   ; #REGc=Horizontal position (*#REGix+#N$00).
 $D278 LD B,(IX+$01)   ; #REGb=Vertical position (*#REGix+#N$01).
; Plot while using inverse will erase the bubble (it's only a single pixel).
 $D27B CALL $22E5      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/22DC.html#22e5">PLOT_SUB</a>.)
; Prepare for drawing the new bubble.
 $D27E LD A,$14        ; {Set INVERSE: OFF
 $D280 RST $10         ;
 $D281 LD A,$00        ;
 $D283 RST $10         ; }
; Fetch the current co-ordinates.
 $D284 LD C,(IX+$00)   ; #REGc=Horizontal position (*#REGix+#N$00).
 $D287 LD B,(IX+$01)   ; #REGb=Vertical position (*#REGix+#N$01).
; Move the bubble to the new position.
; .
; The bubble always moves "up" three pixels and accelerates to the right
; exponentially.
 $D28A INC C           ; {Increment #REGc by three.
 $D28B INC C           ;
 $D28C INC C           ; }
 $D28D LD A,(IX+$05)   ; #REGa=horizontal velocity (*#REGix+#N$05).
 $D290 INC (IX+$05)    ; Increment the horizontal velocity (*#REGix+#N$05) by
                       ; one to simulate acceleration.
 $D293 ADD A,B         ; {#REGb+=the velocity value.
 $D294 LD B,A          ; }
 $D295 CP $70          ; {Jump to #R$D2AB if #REGa is higher than #N$70.
 $D297 JR NC,$D2AB     ; }
; Update the data table with the new co-ordinates.
 $D299 LD (IX+$00),C   ; Write #REGc to horizontal position (*#REGix+#N$00).
 $D29C LD (IX+$01),B   ; Write #REGb to vertical position (*#REGix+#N$01).
; Draw the bubble to the screen buffer.
@label=Handler_Bubbles_Plot
*$D29F CALL $22E5      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/22DC.html#22e5">PLOT_SUB</a>.)
; Move onto the next bubble.
@label=Handler_Bubbles_Next
*$D2A2 POP BC          ; Restore the bubble counter from the stack.
 $D2A3 LD DE,$000B     ; {#REGix+=#N($000B,$04,$04).
 $D2A6 ADD IX,DE       ; }
 $D2A8 DJNZ $D266      ; Decrease the bubble counter by one and loop back to
                       ; #R$D266 until all bubbles have been evaluated.
 $D2AA RET             ; Return.
; The bubble has finished its cycle so deactivate it.
@label=Handler_Bubbles_Deactivate
*$D2AB LD (IX+$0A),$00 ; Write inactive (#N$00) to bubble state
                       ; (*#REGix+#N$0A).
 $D2AF JR $D2A2        ; Jump to #R$D2A2.
; Decide if a new bubble should be created.
@label=Handler_Bubbles_Generate
*$D2B1 CALL $D8D4      ; Call #R$D8D4.
 $D2B4 CP $03          ; {Jump to #R$D2A2 if #REGa is lower than #N$03.
 $D2B6 JR C,$D2A2      ; }
; No bubbles if the players oxygen has run out.
 $D2B8 LD A,($D33E)    ; {Jump to #R$D2A2 if *#R$D33E is equal to #N$00.
 $D2BB CP $00          ;
 $D2BD JR Z,$D2A2      ; }
; Generate a new bubble.
; .
; Fetch the player co-ordinates to determine the bubbles starting position.
 $D2BF LD BC,($DC0E)   ; #REGbc=*#R$DC0E.
 $D2C3 LD A,$21        ; #REGa=#N$21.
 $D2C5 SUB C           ; #REGa-=#REGc.
 $D2C6 SLA A           ; Shift #REGa left (with carry).
 $D2C8 SLA A           ; Shift #REGa left (with carry).
 $D2CA SLA A           ; Shift #REGa left (with carry).
 $D2CC ADD A,$06       ; #REGa+=#N$06.
 $D2CE LD (IX+$00),A   ; Write #REGa to horizontal position (*#REGix+#N$00).
 $D2D1 LD A,B          ; #REGa=#REGb.
 $D2D2 DEC A           ; {Decrease #REGa by two.
 $D2D3 DEC A           ; }
 $D2D4 SLA A           ; {Shift #REGa left three positions (with carry).
 $D2D6 SLA A           ;
 $D2D8 SLA A           ; }
 $D2DA CP $70          ; {Jump to #R$D2A2 if #REGa is higher than #N$70.
 $D2DC JR NC,$D2A2     ; }
; Active the bubble.
 $D2DE LD (IX+$01),A   ; Write #REGa to horizontal position (*#REGix+#N$01).
 $D2E1 LD (IX+$0A),$01 ; Write "active" (#N$01) to bubble state
                       ; (*#REGix+#N$0A).
 $D2E5 LD (IX+$05),$01 ; Write #N$01 to the horizontal velocity
                       ; (*#REGix+#N$05).
; Fetch the current co-ordinates, and jump to plot the new bubble on the
; screen.
 $D2E9 LD C,(IX+$00)   ; #REGc=Horizontal position (*#REGix+#N$00).
 $D2EC LD B,(IX+$01)   ; #REGb=Vertical position (*#REGix+#N$01).
 $D2EF JP $D29F        ; Jump to #R$D29F.

; Goldfish Game: Air Bar
;
; Used by the routine at #R$CE41.
;
; .
;
; Only remove air every 16th frame.
@label=GoldfishGame_AirBar
c$D2F2 LD A,($D93D)                         ; #REGa=*#R$D93D.
 $D2F5 AND %00001111                        ; {Only proceed every 16th frame,
 $D2F7 RET NZ                               ; otherwise return.}
; This entry point is used by the routines at #R$CE41 and #R$D05B.
@label=GoldfishGame_PrintAirBar
*$D2F8 LD HL,$D22E                          ; {#HTML(Write #R$D32E(#N$D22E)
 $D2FB LD ($5C36),HL                        ; (#R$D32E) to *<a rel="noopener
                                            ; nofollow"
                                            ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                                            ; }
; Set the co-ordinates of where we're going to PRINT AT.
 $D2FE LD B,$02                             ; {#HTML(Set up the screen buffer
 $D300 LD C,$15                             ; location #N$15/#N$02 using <a
 $D302 CALL $0DD9                           ; rel="noopener nofollow"
                                            ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                                            ; }
; Set the attributes.
 $D305 LD A,$10                             ; {Set INK: RED (#N$02).
 $D307 RST $10                              ;
 $D308 LD A,$02                             ;
 $D30A RST $10                              ; }
 $D30B LD A,$11                             ; {Set PAPER: CYAN (#N$05).
 $D30D RST $10                              ;
 $D30E LD A,$05                             ;
 $D310 RST $10                              ; }
 $D311 LD A,($D33E)                         ; {Is *#R$D33E zero?
 $D314 CP $00                               ; }
 $D316 PUSH AF                              ; Stash the current oxygen level on
                                            ; the stack.
 $D317 CALL Z,$D550                         ; Call #R$D550 if the current
                                            ; oxygen level is zero.
 $D31A POP AF                               ; Restore the current oxygen level
                                            ; from the stack.
 $D31B JR Z,$D32A                           ; Jump to #R$D32A if the current
                                            ; oxygen level is zero.
; The player has air, so deplete it here.
; .
; See #POKE#goldfishGameInfiniteOxygen(Infinite Oxygen (Hidden Game)).
 $D31D DEC A                                ; {Decrease the current oxygen
 $D31E LD ($D33E),A                         ; level by one, and write it back
                                            ; to *#R$D33E.}
; Now draw a visual representation of the air level to the screen.
 $D321 LD B,A                               ; {#REGb=the current oxygen
 $D322 INC B                                ; level+#N$01 (as a counter for
                                            ; drawing the air bar).}
 $D323 LD A,$20                             ; #REGa=#R$D32E (#N$20).
@label=GoldfishGame_PrintAirBar_Loop
*$D325 PUSH AF                              ; Stash the air bar UDG reference
                                            ; on the stack.
 $D326 RST $10                              ; #HTML(Print to the screen using
                                            ; RST <a rel="noopener nofollow"
                                            ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0010.html">#N$10</a>.)
 $D327 POP AF                               ; Restore the air bar UDG reference
                                            ; from the stack.
 $D328 DJNZ $D325                           ; Decrease the air bar counter by
                                            ; one and loop back to #R$D325
                                            ; until the counter is zero.
; Print some empty space to mask off the end of the air bar.
@label=GoldfishGame_PrintNoAirBar
*$D32A LD A,$21                             ; #REGa=#R$D336 (#N$21).
 $D32C RST $10                              ; #HTML(Print to the screen using
                                            ; RST <a rel="noopener nofollow"
                                            ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0010.html">#N$10</a>.)
 $D32D RET                                  ; Return.
@label=UDG_AirBar
 $D32E DEFB $00,$00,$FF,$FF,$FF,$FF,$00,$00 ; #UDGTABLE {
                                            ; #UDG(addr=#PC,attr=$2A) }
                                            ; UDGTABLE#
@label=UDG_NoAirBar
 $D336 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE {
                                            ; #UDG(addr=#PC,attr=$2A) }
                                            ; UDGTABLE#

; Goldfish Game: Oxygen Level
@label=GoldfishGame_OxygenLevel
g$D33E DEFB $13

; Routine at D33F
;
; Used by the routine at #R$D3AF.
c$D33F LD HL,($5C36) ; {#HTML(Stash the current character set pointer at *<a
 $D342 PUSH HL       ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>
                     ; on the stack.)}
 $D343 LD HL,$9F6C   ; {#HTML(Write #R$A06C(#N$9F6C) (#R$A06C) to *<a
 $D346 LD ($5C36),HL ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $D349 LD A,$20      ; #REGa=#N$20.
 $D34B CALL $D460    ; Call #R$D460.
 $D34E POP HL        ; {#HTML(Restore the previous character set pointer from
 $D34F LD ($5C36),HL ; the stack, and write it to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $D352 RET           ; Return.

; Goldfish Game: Print Colour UDG
;
; Used by the routines at #R$CE41, #R$D460, #R$D647 and #R$D8E2.
;
; A Character to print
;
; Identical clone of #R$E6DC.
; .
; Compare against the non-colour version at #R$A817.
@label=GoldfishGame_PrintColourUDG
c$D353 EXX           ; Switch to the shadow registers.
 $D354 LD E,A        ; {#REGde'=#REGa*#N$08.
 $D355 LD D,$00      ;
 $D357 SLA E         ;
 $D359 RL D          ;
 $D35B SLA E         ;
 $D35D RL D          ;
 $D35F SLA E         ;
 $D361 RL D          ; }
 $D363 LD HL,($5C36) ; {#HTML(#REGhl'=*<a rel="noopener nofollow"
 $D366 ADD HL,DE     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>+#REGde'.)
                     ; }
 $D367 LD DE,($5C84) ; {#HTML(Increment *<a rel="noopener nofollow"
 $D36B INC DE        ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>
 $D36C LD ($5C84),DE ; by one.)}
 $D370 DEC DE        ; Decrease #REGde' by one.
; All character blocks are 1 x 8 bytes.
; .
; Copy the data from the current character set to the screen buffer.
 $D371 LD B,$08      ; #REGb'=#N$08 (byte counter).
@label=PrintColourUDG_Loop
*$D373 LD A,(HL)     ; #REGa=*#REGhl'.
 $D374 LD (DE),A     ; Write #REGa to *#REGde'.
 $D375 INC HL        ; Increment #REGhl' by one.
 $D376 INC D         ; Increment #REGd' by one.
 $D377 DJNZ $D373    ; Decrease counter by one and loop back to #R$D373 until
                     ; counter is zero.
; Calculate the attribute buffer position.
 $D379 LD BC,($5C88) ; #HTML(#REGbc'=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C88.html">S_POSN</a>.)
 $D37D LD HL,$5800   ; #REGhl'=#N$5800 (attribute buffer location).
 $D380 DEC C         ; Decrease #REGc' by one.
 $D381 LD ($5C88),BC ; #HTML(Write #REGbc' to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C88.html">S_POSN</a>.)
 $D385 INC C         ; Increment #REGc' by one.
 $D386 LD A,$21      ; {#REGe'=#N$21-#REGc'.
 $D388 SUB C         ;
 $D389 LD E,A        ; }
 $D38A LD D,$00      ; #REGd'=#N$00.
 $D38C ADD HL,DE     ; #REGhl'+=#REGde'.
 $D38D LD A,$18      ; {#REGe'=#N$18-#REGb'.
 $D38F SUB B         ;
 $D390 LD E,A        ; }
 $D391 SLA E         ; {Shift #REGe' left four positions (with carry).
 $D393 SLA E         ;
 $D395 SLA E         ;
 $D397 SLA E         ; }
 $D399 RL D          ; Rotate #REGd' left.
 $D39B SLA E         ; Shift #REGe' left (with carry).
 $D39D RL D          ; Rotate #REGd' left.
 $D39F ADD HL,DE     ; #REGhl'+=#REGde'.
 $D3A0 LD A,($5C8F)  ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8F.html">ATTR_T</a>.)
 $D3A3 LD (HL),A     ; Write #REGa to *#REGhl'.
 $D3A4 EXX           ; Switch back to the normal registers.
 $D3A5 RET           ; Return.

; Small Pause
;
; Used by the routines at #R$CE41, #R$D0E2, #R$D10C, #R$D188 and #R$D5CF.
@label=SmallPause
c$D3A6 LD BC,$1388   ; #REGbc=#N$1388.
@label=SmallPause_Loop
*$D3A9 DEC BC        ; Decrease #REGbc by one.
 $D3AA LD A,B        ; {Jump to #R$D3A9 until #REGbc is zero.
 $D3AB OR C          ;
 $D3AC JR NZ,$D3A9   ; }
 $D3AE RET           ; Return.

; Routine at D3AF
;
; Used by the routines at #R$D4CC and #R$D778.
c$D3AF LD A,C        ; #REGa=#REGc.
 $D3B0 SUB (IX+$0D)  ; #REGa-=*#REGix+#N$0D.
 $D3B3 JR Z,$D3C1    ; Jump to #R$D3C1 if the result is zero.
 $D3B5 CP $FF        ; Compare #REGa with #N$FF.
 $D3B7 PUSH AF       ; Stash #REGaf on the stack.
 $D3B8 CALL Z,$D3EA  ; Call #R$D3EA if #REGa was equal to #N$FF on line
                     ; #R$D3B3.
 $D3BB POP AF        ; Restore #REGaf from the stack.
 $D3BC CALL NZ,$D405 ; Call #R$D405 if #REGa was not equal to #N$FF on line
                     ; #R$D3B3.
 $D3BF JR $D3CC      ; Jump to #R$D3CC.
*$D3C1 LD A,E        ; {Jump to #R$D3CC if #REGe is equal to *#REGix+#N$0B.
 $D3C2 CP (IX+$0B)   ;
 $D3C5 JR Z,$D3CC    ; }
 $D3C7 CP $03        ; {Call #R$D405 if #REGe is equal to #N$03.
 $D3C9 CALL Z,$D405  ; }
*$D3CC LD A,B        ; #REGa=#REGb.
 $D3CD SUB (IX+$0E)  ; #REGa-=*#REGix+#N$0E.
 $D3D0 JR Z,$D3DE    ; Jump to #R$D3DE if the result is zero.
 $D3D2 CP $FF        ; Compare #REGa with #N$FF.
 $D3D4 PUSH AF       ; Stash #REGaf on the stack.
 $D3D5 CALL Z,$D445  ; Call #R$D445 if #REGa was equal to #N$FF on line
                     ; #R$D3D2.
 $D3D8 POP AF        ; Restore #REGaf from the stack.
 $D3D9 CALL NZ,$D425 ; Call #R$D425 if #REGa was not equal to #N$FF on line
                     ; #R$D3D2.
 $D3DC JR $D3E9      ; Jump to #R$D3E9.
*$D3DE LD A,D        ; {Jump to #R$D3E9 if #REGd is equal to *#REGix+#N$0F.
 $D3DF CP (IX+$0F)   ;
 $D3E2 JR Z,$D3E9    ; }
 $D3E4 CP $03        ; {Call #R$D425 if #REGd is equal to #N$03.
 $D3E6 CALL Z,$D425  ; }
*$D3E9 RET           ; Return.
*$D3EA PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $D3EB PUSH DE       ; }
 $D3EC LD C,(IX+$0D) ; #REGc=*#REGix+#N$0D.
 $D3EF LD B,(IX+$0E) ; #REGb=*#REGix+#N$0E.
 $D3F2 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $D3F5 LD E,$01      ; #REGe=#N$01.
 $D3F7 LD A,(IX+$03) ; {Jump to #R$D3FF if *#REGix+#N$03 is equal to #N$03.
 $D3FA CP $03        ;
 $D3FC JR Z,$D3FF    ; }
 $D3FE INC D         ; Increment #REGd by one.
*$D3FF CALL $D33F    ; Call #R$D33F.
 $D402 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $D403 POP BC        ; }
 $D404 RET           ; Return.
*$D405 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $D406 PUSH DE       ; }
 $D407 LD A,(IX+$0D) ; #REGa=*#REGix+#N$0D.
 $D40A LD C,(IX+$07) ; #REGc=*#REGix+#N$07.
 $D40D SUB C         ; #REGa-=#REGc.
 $D40E LD C,A        ; #REGc=#REGa.
 $D40F LD B,(IX+$0E) ; #REGb=*#REGix+#N$0E.
 $D412 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $D415 LD E,$01      ; #REGe=#N$01.
 $D417 LD A,(IX+$03) ; {Jump to #R$D41F if *#REGix+#N$03 is equal to #N$03.
 $D41A CP $03        ;
 $D41C JR Z,$D41F    ; }
 $D41E INC D         ; Increment #REGd by one.
*$D41F CALL $D33F    ; Call #R$D33F.
 $D422 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $D423 POP BC        ; }
 $D424 RET           ; Return.
*$D425 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $D426 PUSH DE       ; }
 $D427 LD A,(IX+$0E) ; #REGa=*#REGix+#N$0E.
 $D42A LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $D42D SUB D         ; #REGa-=#REGd.
 $D42E LD B,A        ; #REGb=#REGa.
 $D42F LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $D432 LD C,(IX+$0D) ; #REGc=*#REGix+#N$0D.
 $D435 LD D,$01      ; #REGd=#N$01.
 $D437 LD A,(IX+$02) ; {Jump to #R$D43F if *#REGix+#N$02 is equal to #N$03.
 $D43A CP $03        ;
 $D43C JR Z,$D43F    ; }
 $D43E INC E         ; Increment #REGe by one.
*$D43F CALL $D33F    ; Call #R$D33F.
 $D442 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $D443 POP BC        ; }
 $D444 RET           ; Return.
*$D445 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $D446 PUSH DE       ; }
 $D447 LD C,(IX+$0D) ; #REGc=*#REGix+#N$0D.
 $D44A LD B,(IX+$0E) ; #REGb=*#REGix+#N$0E.
 $D44D LD D,$01      ; #REGd=#N$01.
 $D44F LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $D452 LD A,(IX+$02) ; {Jump to #R$D45A if *#REGix+#N$02 is equal to #N$03.
 $D455 CP $03        ;
 $D457 JR Z,$D45A    ; }
 $D459 INC E         ; Increment #REGe by one.
*$D45A CALL $D33F    ; Call #R$D33F.
 $D45D POP DE        ; {Restore #REGde and #REGbc from the stack.
 $D45E POP BC        ; }
 $D45F RET           ; Return.

; Goldfish Game: Print Sprite
;
; Used by the routines at #R$CFF6, #R$D33F and #R$D870.
;
; A Sprite ID (where to begin)
; BC Print co-ordinates
; D Sprite height
; E Sprite width
@label=GoldfishGame_PrintSprite
c$D460 PUSH HL       ; Preserve #REGhl on the stack as it's not actively used.
; Store the Sprite ID. Note; it is incremented on each UDG character
; block being printed (see #R$D47F), hence why it's -#N$01 here.
 $D461 DEC A         ; {Decrease the Spite ID by one and store it at *#R$DB3C.
 $D462 LD ($DB3C),A  ; }
 $D465 LD A,E        ; {Store the Sprite width at *#R$DB3B.
 $D466 LD ($DB3B),A  ; }
; Ensure that we're printing within the screen boundaries.
@label=GoldfishGame_PrintSprite_Loop
*$D469 LD A,C        ; {Jump to #R$D49A if #REGc is lower than #N$02.
 $D46A CP $02        ;
 $D46C JP C,$D49A    ; }
 $D46F LD A,($DB3B)  ; {#REGe=*#R$DB3B.
 $D472 LD E,A        ; }
 $D473 LD A,C        ; {Jump to #R$D4AB if #REGc is higher than #N$22.
 $D474 CP $22        ;
 $D476 JP NC,$D4AB   ; }
@label=GoldfishGame_PrintSprite_At
*$D479 PUSH BC       ; {Stash the print co-ordinates and the sprite height/
 $D47A PUSH DE       ; width on the stack.}
; Set the current printing location.
 $D47B CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $D47E POP DE        ; Restore the sprite height/ width from the stack, they're
                     ; used here as loop counters.
; Action this sprite ID (+#N$01, and print it to the screen buffer).
@label=GoldfishGame_PrintSprite_PrintUDG
*$D47F LD A,($DB3C)  ; {Increment *#R$DB3C by one.
 $D482 INC A         ;
 $D483 LD ($DB3C),A  ; }
 $D486 CALL $D353    ; Call #R$D353.
 $D489 LD A,C        ; {Call #R$D49C if #REGc is equal to #N$02.
 $D48A CP $02        ;
 $D48C CALL Z,$D49C  ; }
; Keep track of where we're printing to on the screen.
 $D48F DEC C         ; Move right one character block.
 $D490 DEC E         ; Decrease the sprite width counter by one.
 $D491 JR NZ,$D47F   ; Jump to #R$D47F until the sprite width counter is zero.
; A row of the sprite has been printed, so restore the screen position and move
; onto the next line.
 $D493 POP BC        ; Restore the current print co-ordinates from the stack.
 $D494 DEC D         ; Decrease the sprite height counter by one.
 $D495 JR Z,$D49A    ; Jump to #R$D49A if the whole sprite has now finished
                     ; printing.
 $D497 DEC B         ; Move down one row.
 $D498 JR $D469      ; Jump to #R$D469.
; Housekeeping, and return.
@label=GoldfishGame_PrintSprite_Return
*$D49A POP HL        ; Restore #REGhl from the stack.
 $D49B RET           ; Return.
*$D49C DEC E         ; Decrease #REGe by one.
 $D49D PUSH AF       ; Stash #REGaf on the stack.
 $D49E INC E         ; Increment #REGe by one.
 $D49F LD A,($DB3C)  ; {Increment *#R$DB3C by one.
 $D4A2 INC A         ;
 $D4A3 LD ($DB3C),A  ; }
 $D4A6 POP AF        ; Restore #REGaf from the stack.
 $D4A7 RET Z         ; Return if #REGa  is zero.
 $D4A8 DEC E         ; Decrease #REGe by one.
 $D4A9 JR $D49C      ; Jump to #R$D49C.
; Try to discover the printable part of the sprite.
@label=GoldfishGame_FindViewableSprite
*$D4AB LD A,($DB3C)  ; {Increment *#R$DB3C by one.
 $D4AE INC A         ;
 $D4AF LD ($DB3C),A  ; }
 $D4B2 DEC E         ; Decrease the sprite width counter by one.
 $D4B3 JP Z,$D49A    ; Jump to #R$D49A if the sprite width counter is zero.
 $D4B6 DEC C         ; Move right one character block.
 $D4B7 LD A,C        ; {Jump to #R$D479 if #REGc is higher than #N$22.
 $D4B8 CP $22        ;
 $D4BA JR NC,$D479   ; }
 $D4BC JR $D4AB      ; Keep looping back to #R$D4AB until we either return if this is
                     ; invalid, or find a printable part of the sprite.

; Clear Screen
;
; Used by the routines at #R$CDD1 and #R$CE41.
;
; .
;
; The whole screen is #N$18 lines.
; .
; #HTML(Will use the colour set at <a rel="noopener nofollow"
; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
@label=ClearScreen
c$D4BE LD B,$18      ; {#HTML(Clear the bottom #N$18 lines using <a
 $D4C0 CALL $0E44    ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                     ; }
 $D4C3 RET           ; Return.

; Goldfish Game: Move Player Right
;
; Used by the routines at #R$D55C and #R$D579.
@label=GoldfishGame_PlayerMoveRight
c$D4C4 DEC (IX+$04)  ; Decrease *#REGix+#N$04 by one.
 $D4C7 RET           ; Return.

; Goldfish Game: Move Player Left
;
; Used by the routines at #R$D55C and #R$D579.
@label=GoldfishGame_PlayerMoveLeft
c$D4C8 INC (IX+$04)  ; Increment *#REGix+#N$04 by one.
 $D4CB RET           ; Return.

; Routine at D4CC
;
; Used by the routine at #R$CE41.
c$D4CC LD IX,$DC0E     ; #REGix=#R$DC0E.
 $D4D0 LD A,$11        ; {Set PAPER: BLUE (#N$01).
 $D4D2 RST $10         ;
 $D4D3 LD A,$01        ;
 $D4D5 RST $10         ; }
 $D4D6 LD A,(IX+$05)   ; {Jump to #R$D4E1 if *#REGix+#N$05 is equal to #N$00.
 $D4D9 CP $00          ;
 $D4DB JR Z,$D4E1      ; }
 $D4DD LD (IX+$04),$00 ; Write #N$04 to *#REGix+#N$04.
*$D4E1 CALL $D616      ; Call #R$D616.
 $D4E4 LD A,C          ; {Jump to #R$D547 if #REGc is equal to #N$19.
 $D4E5 CP $19          ;
 $D4E7 JP Z,$D547      ; }
 $D4EA CP $0D          ; {Jump to #R$D547 if #REGc is equal to #N$0D.
 $D4EC JP Z,$D547      ; }
 $D4EF LD A,B          ; {Jump to #R$D547 if #REGb is equal to #N$11.
 $D4F0 CP $11          ;
 $D4F2 JP Z,$D547      ; }
 $D4F5 CP $05          ; {Jump to #R$D547 if #REGb is equal to #N$05.
 $D4F7 JP Z,$D547      ; }
 $D4FA LD A,C          ; {Jump to #R$D50C if #REGc is not equal to
 $D4FB CP (IX+$00)     ; *#REGix+#N$00.
 $D4FE JR NZ,$D50C     ; }
 $D500 LD A,B          ; {Jump to #R$D50C if #REGb is not equal to
 $D501 CP (IX+$01)     ; *#REGix+#N$01.
 $D504 JR NZ,$D50C     ; }
 $D506 LD A,(IX+$03)   ; {Jump to #R$D50C if *#REGix+#N$03 is equal to #REGd.
 $D509 CP D            ;
 $D50A JR Z,$D50C      ; }
*$D50C LD (IX+$00),C   ; Write #REGc to *#REGix+#N$00.
 $D50F LD (IX+$01),B   ; Write #REGb to *#REGix+#N$01.
 $D512 LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $D515 LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $D518 PUSH DE         ; Stash #REGde on the stack.
 $D519 CALL $D3AF      ; Call #R$D3AF.
 $D51C POP DE          ; Restore #REGde from the stack.
 $D51D LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $D520 LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $D523 LD HL,$934C     ; Does nothing, this is immediately overwritten on the
                       ; next line.
 $D526 LD HL,$9EEC     ; {#HTML(Write #R$9FEC(#N$9EEC) to *<a rel="noopener
 $D529 LD ($5C36),HL   ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $D52C CALL $D647      ; Call #R$D647.
 $D52F LD A,(IX+$00)   ; #REGa=*#REGix+#N$00.
 $D532 LD (IX+$0D),A   ; Write #REGa to *#REGix+#N$0D.
 $D535 LD A,(IX+$01)   ; #REGa=*#REGix+#N$01.
 $D538 LD (IX+$0E),A   ; Write #REGa to *#REGix+#N$0E.
 $D53B LD A,(IX+$03)   ; #REGa=*#REGix+#N$03.
 $D53E LD (IX+$0F),A   ; Write #REGa to *#REGix+#N$0F.
 $D541 LD A,(IX+$02)   ; #REGa=*#REGix+#N$02.
 $D544 LD (IX+$0B),A   ; Write #REGa to *#REGix+#N$0B.
*$D547 LD (IX+$04),$00 ; Write #N$00 to *#REGix+#N$04.
 $D54B LD (IX+$05),$00 ; Write #N$00 to *#REGix+#N$05.
 $D54F RET             ; Return.

; Routine at D550
;
; Used by the routine at #R$D2F2.
c$D550 LD BC,$0000   ; {Write #N($0000,$04,$04) to: #LIST { *#R$DC12/ *#R$DC13
 $D553 LD ($DC12),BC ; } { *#R$DB42 } LIST#
 $D557 LD ($DB42),BC ; }
 $D55B RET           ; Return.

; Controls: Kempston Joystick
;
; Used by the routine at #R$D579.
@label=Controls_KempstonJoystick
c$D55C IN A,($1F)    ; Read from the Kempston joystick port.
 $D55E PUSH AF       ; Stash the control on the stack.
 $D55F AND $02       ; {If left has been pressed, call #R$D4C8.
 $D561 CALL NZ,$D4C8 ; }
 $D564 POP AF        ; {Restore the current control but keep it on the stack.
 $D565 PUSH AF       ; }
 $D566 AND $04       ; {If down has been pressed, call #R$D5C7.
 $D568 CALL NZ,$D5C7 ; }
 $D56B POP AF        ; {Restore the current control but keep it on the stack.
 $D56C PUSH AF       ; }
 $D56D AND $08       ; {If up has been pressed, call #R$D5CB.
 $D56F CALL NZ,$D5CB ; }
 $D572 POP AF        ; Restore the current control from the stack.
 $D573 AND $01       ; {If right has been pressed, call #R$D4C4.
 $D575 JP NZ,$D4C4   ; }
 $D578 RET           ; Return.

; Goldfish Game: Player Controls
;
; Used by the routine at #R$CE41.
;
; .
;
; See #R$ED35.
@label=GoldfishGame_PlayerControls
c$D579 LD IX,$DC0E   ; #REGix=#R$DC0E.
 $D57D LD A,($5BEA)  ; {Jump to #R$D55C if *#R$5BEA is set to Kempston joystick
 $D580 CP $0C        ; (#N$0C).
 $D582 JP Z,$D55C    ; }
 $D585 CALL $028E    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $D588 LD A,E        ; #REGa=the keypress.
 $D589 LD HL,$5BEB   ; {Jump to #R$D4C8 if #REGa is equal to *#R$5BEB.
 $D58C CP (HL)       ;
 $D58D JP Z,$D4C8    ; }
 $D590 INC HL        ; {Jump to #R$D4C4 if #REGa is equal to *#R$5BEC.
 $D591 CP (HL)       ;
 $D592 JP Z,$D4C4    ; }
 $D595 INC HL        ; {Jump to #R$D5CB if #REGa is equal to *#R$5BED.
 $D596 CP (HL)       ;
 $D597 JP Z,$D5CB    ; }
 $D59A INC HL        ; {Jump to #R$D5C7 if #REGa is equal to *#R$5BEE.
 $D59B CP (HL)       ;
 $D59C JP Z,$D5C7    ; }
 $D59F RET           ; Return.

; Unused
u$D5A0 LD A,$02      ; {#HTML(Write #N$02 to <a
 $D5A2 LD ($5C6B),A  ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C6B.html">DF_SZ</a>.)
                     ; }
 $D5A5 POP BC        ; Restore #REGbc from the stack.
 $D5A6 EXX           ; Switch to the shadow registers.
 $D5A7 POP HL        ; Restore #REGhl' from the stack.
 $D5A8 EXX           ; Switch back to the normal registers.
; Restore the default ZX Spectrum font.
 $D5A9 LD HL,$3C00   ; {#HTML(Write <a rel="noopener nofollow"
 $D5AC LD ($5C36),HL ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                     ; (CHARSET-#N$100) to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $D5AF RET           ; Return.

; Toggle Music
;
; Used by the routine at #R$D5CF.
;
; .
;
; Mostly a clone of #R$ED7D.
@label=ToggleMusic
c$D5B0 LD A,($FFF8)  ; {Jump to #R$D5BF if *#R$FFF8 is equal to #N$00.
 $D5B3 CP $00        ;
 $D5B5 JR Z,$D5BF    ; }
 $D5B7 LD A,$00      ; {Write OFF (#N$00) to *#R$FFF8.
 $D5B9 LD ($FFF8),A  ; }
 $D5BC JP $D5D6      ; Jump to #R$D5D6.
@label=ToggleMusicOn
*$D5BF LD A,$01      ; {Write ON (#N$01) to *#R$FFF8.
 $D5C1 LD ($FFF8),A  ; }
 $D5C4 JP $D5D6      ; Jump to #R$D5D6.

; Goldfish Game: Move Player Down
;
; Used by the routines at #R$D55C and #R$D579.
@label=GoldfishGame_PlayerMoveDown
c$D5C7 DEC (IX+$05)  ; Decrease *#REGix+#N$05 by one.
 $D5CA RET           ; Return.

; Goldfish Game: Move Player Up
;
; Used by the routines at #R$CE41, #R$D55C and #R$D579.
@label=GoldfishGame_PlayerMoveUp
c$D5CB INC (IX+$05)  ; Increment *#REGix+#N$05 by one.
 $D5CE RET           ; Return.

; Menu Keypress
;
; Used by the routine at #R$CDD1.
;
; .
;
; #HTML(Use <a rel="noopener nofollow"
; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a> as a timer.)
@label=MenuKeypress
c$D5CF LD BC,$0000   ; {#HTML(Reset *<a rel="noopener nofollow"
 $D5D2 LD ($5C78),BC ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                     ; to #N($0000,$04,$04).)}
; This entry point is used by the routine at #R$D5B0.
@label=MenuKeypress_Loop
*$D5D6 LD BC,($5C78) ; #HTML(#REGbc=*<a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $D5DA LD A,B        ; {#HTML(Jump to #R$D602 if the timer held by <a
 $D5DB CP $04        ; rel="noopener nofollow"
 $D5DD JP Z,$D602    ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                     ; is up.)}
 $D5E0 CALL $D3A6    ; Call #R$D3A6 (presumably to debounce).
; Fetch the players pressed key (if any) and handle it.
; .
; No keys being pressed returns a #N$FF response.
 $D5E3 CALL $028E    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $D5E6 LD A,E        ; {Jump to #R$D5B0 if the fire button has been pressed.
 $D5E7 CP $10        ;
 $D5E9 JP Z,$D5B0    ; }
 $D5EC CP $FF        ; {Return if any button has been pressed.
 $D5EE RET NZ        ; }
 $D5EF LD A,($5BEA)  ; {Jump to #R$D5F9 if *#R$5BEA is set to Kempston joystick
 $D5F2 CP $0C        ; (#N$0C).
 $D5F4 JP Z,$D5F9    ; }
 $D5F7 JR $D5D6      ; Jump to #R$D5D6.
; Handle checking if the player has pressed fire on their Kempston joystick.
@label=MenuKeypress_Kempston
*$D5F9 IN A,($1F)    ; Read from the Kempston joystick port.
 $D5FB AND %00010000 ; {Jump to #R$D5D6 if fire has not been pressed.
 $D5FD JR Z,$D5D6    ; }
 $D5FF LD A,$23      ; #REGa=#N$23.
 $D601 RET           ; Return.

; Demo Mode
;
; Used by the routines at #R$CD86 and #R$D5CF.
@label=DemoMode
c$D602 POP BC        ; Restore #REGbc from the stack.
 $D603 LD A,$03      ; {Write "Demo Mode" (#N$03) to #R$5BF0.
 $D605 LD ($5BF0),A  ; }
 $D608 CALL $DEA8    ; Call #R$DEA8.
 $D60B JP $CD86      ; Jump to #R$CD86.

; Print String
;
; Used by the routines at #R$CDD1, #R$CE41, #R$D0E2, #R$D10C, #R$D188 and
; #R$D20D.
;
; DE Pointer to string data
@label=PrintString
c$D60E LD A,(DE)     ; Fetch a character from the string data pointer.
 $D60F INC DE        ; Increment the string data pointer by one.
 $D610 CP $FF        ; {Return if the current character is equal to #N$FF (the
 $D612 RET Z         ; terminator).}
 $D613 RST $10       ; #HTML(Print to the screen using RST <a rel="noopener
                     ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0010.html">#N$10</a>.)
 $D614 JR $D60E      ; Jump to #R$D60E.

; Routine at D616
;
; Used by the routines at #R$D4CC and #R$D778.
c$D616 LD C,(IX+$00) ; #REGc=*#REGix+#N$00.
 $D619 LD B,(IX+$01) ; #REGb=*#REGix+#N$01.
 $D61C LD E,(IX+$02) ; #REGe=*#REGix+#N$02.
 $D61F LD D,(IX+$03) ; #REGd=*#REGix+#N$03.
 $D622 LD A,(IX+$04) ; #REGa=*#REGix+#N$04.
 $D625 ADD A,E       ; #REGa+=#REGe.
 $D626 CP $80        ; {Jump to #R$D630 if #REGa is higher than #N$80.
 $D628 JR NC,$D630   ; }
 $D62A CP $04        ; {Jump to #R$D633 if #REGa is lower than #N$04.
 $D62C JR C,$D633    ; }
 $D62E INC C         ; {Increment #REGc by two.
 $D62F INC C         ; }
*$D630 DEC C         ; Decrease #REGc by one.
 $D631 AND %00000011 ; Keep only bits 0-1.
*$D633 LD E,A        ; #REGe=#REGa.
 $D634 LD A,(IX+$05) ; #REGa=*#REGix+#N$05.
 $D637 ADD A,D       ; #REGa+=#REGd.
 $D638 CP $80        ; {Jump to #R$D642 if #REGa is higher than #N$80.
 $D63A JR NC,$D642   ; }
 $D63C CP $04        ; {Jump to #R$D645 if #REGa is lower than #N$04.
 $D63E JR C,$D645    ; }
 $D640 INC B         ; {Increment #REGb by two.
 $D641 INC B         ; }
*$D642 DEC B         ; Decrease #REGb by one.
 $D643 AND %00000011 ; Keep only bits 0-1.
*$D645 LD D,A        ; #REGd=#REGa.
 $D646 RET           ; Return.

; Routine at D647
;
; Used by the routines at #R$D4CC and #R$D778.
c$D647 LD DE,$A0EC   ; #REGde=#R$A0EC.
 $D64A LD HL,$A06C   ; #REGhl=#R$A06C.
 $D64D LD BC,$0080   ; #REGbc=#N($0080,$04,$04).
 $D650 LDIR          ; Copy #N($0080,$04,$04) bytes of data from #R$A06C to
                     ; #R$A0EC.
 $D652 LD A,$10      ; {Set INK: *#REGix+#N$09.
 $D654 RST $10       ;
 $D655 LD A,(IX+$09) ;
 $D658 RST $10       ; }
 $D659 LD HL,($5C36) ; #HTML(#REGhl=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $D65C PUSH HL       ; Stash #REGhl on the stack.
 $D65D PUSH IY       ; Stash #REGiy on the stack.
 $D65F PUSH IX       ; Stash #REGix on the stack.
 $D661 LD E,(IX+$06) ; {#REGde=(*#REGix+#N$06)*#N$08.
 $D664 LD D,$00      ;
 $D666 SLA E         ;
 $D668 RL D          ;
 $D66A SLA E         ;
 $D66C RL D          ;
 $D66E SLA E         ;
 $D670 RL D          ; }
 $D672 ADD HL,DE     ; #REGhl+=#REGde.
 $D673 LD B,(IX+$02) ; #REGb=*#REGix+#N$02.
 $D676 INC B         ; Increment #REGb by one.
 $D677 LD C,$00      ; #REGc=#N$00.
 $D679 LD ($DB38),BC ; Write #REGbc to *#R$DB38.
 $D67D LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $D680 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $D683 LD A,D        ; #REGa=#REGd.
 $D684 INC A         ; Increment #REGa by one.
 $D685 SLA A         ; {Shift #REGa left three positions (with carry).
 $D687 SLA A         ;
 $D689 SLA A         ; }
 $D68B LD C,A        ; #REGc=#REGa.
 $D68C LD B,$00      ; #REGb=#N$00.
 $D68E LD IY,$A0F4   ; #REGiy=#R$A0F4.
 $D692 ADD IY,BC     ; #REGiy+=#REGbc.
 $D694 LD C,E        ; #REGc=#REGe.
 $D695 SLA C         ; {Shift #REGc left three positions (with carry).
 $D697 SLA C         ;
 $D699 SLA C         ; }
 $D69B LD B,$00      ; #REGb=#N$00.
 $D69D LD ($DB36),BC ; Write #REGbc to *#R$DB36.
 $D6A1 LD IX,$A0F4   ; #REGix=#R$A0F4.
*$D6A5 PUSH HL       ; {Stash #REGhl, #REGde and #REGhl on the stack.
 $D6A6 PUSH DE       ;
*$D6A7 PUSH HL       ; }
 $D6A8 LD B,$08      ; #REGb=#N$08.
*$D6AA PUSH BC       ; Stash #REGbc on the stack.
 $D6AB LD A,(HL)     ; #REGa=*#REGhl.
 $D6AC LD BC,($DB38) ; #REGbc=*#R$DB38.
*$D6B0 SLA A         ; Shift #REGa left (with carry).
 $D6B2 RL C          ; Rotate #REGc left.
 $D6B4 SLA A         ; Shift #REGa left (with carry).
 $D6B6 RL C          ; Rotate #REGc left.
 $D6B8 DJNZ $D6B0    ; Decrease counter by one and loop back to #R$D6B0 until
                     ; counter is zero.
 $D6BA LD (IY+$00),A ; Write #REGa to *#REGiy+#N$00.
 $D6BD LD A,C        ; #REGa=#REGc.
 $D6BE OR (IX+$00)   ; Merge the bits from *#REGix+#N$00.
 $D6C1 LD (IX+$00),A ; Write #REGa to *#REGix+#N$00.
 $D6C4 INC HL        ; Increment #REGhl by one.
 $D6C5 INC IX        ; Increment #REGix by one.
 $D6C7 INC IY        ; Increment #REGiy by one.
 $D6C9 POP BC        ; Restore #REGbc from the stack.
 $D6CA DJNZ $D6AA    ; Decrease counter by one and loop back to #R$D6AA until
                     ; counter is zero.
 $D6CC POP HL        ; Restore #REGhl from the stack.
 $D6CD LD BC,($DB36) ; #REGbc=*#R$DB36.
 $D6D1 ADD HL,BC     ; #REGhl+=#REGbc.
 $D6D2 DEC D         ; Decrease #REGd by one.
 $D6D3 JR NZ,$D6A7   ; Jump to #R$D6A7 until #REGd is zero.
 $D6D5 POP DE        ; Restore #REGde from the stack.
 $D6D6 LD BC,$0008   ; #REGbc=#N($0008,$04,$04).
 $D6D9 ADD IX,BC     ; #REGix+=#REGbc.
 $D6DB ADD IY,BC     ; #REGiy+=#REGbc.
 $D6DD POP HL        ; Restore #REGhl from the stack.
 $D6DE ADD HL,BC     ; #REGhl+=#REGbc.
 $D6DF DEC E         ; Decrease #REGe by one.
 $D6E0 JR NZ,$D6A5   ; Jump to #R$D6A5 until #REGe is zero.
 $D6E2 LD HL,$9FEC   ; #REGhl=#R$9FEC.
 $D6E5 POP IX        ; Restore #REGix from the stack.
 $D6E7 LD A,(IX+$03) ; #REGa=*#REGix+#N$03.
 $D6EA INC A         ; Increment #REGa by one.
 $D6EB SLA A         ; Shift #REGa left (with carry).
 $D6ED LD E,A        ; #REGe=#REGa.
 $D6EE LD D,$00      ; #REGd=#N$00.
 $D6F0 ADD HL,DE     ; #REGhl+=#REGde.
 $D6F1 LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $D6F4 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $D6F7 LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $D6FA LD A,(IX+$02) ; {Jump to #R$D702 if *#REGix+#N$02 is equal to #N$03.
 $D6FD CP $03        ;
 $D6FF JR Z,$D702    ; }
 $D701 INC E         ; Increment #REGe by one.
*$D702 INC D         ; Increment #REGd by one.
 $D703 LD A,D        ; #REGa=#REGd.
 $D704 LD ($DB38),A  ; Write #REGa to *#R$DB38.
 $D707 LD A,$03      ; {Jump to #R$D70F if #N$03 is not equal to *#REGix+#N$03.
 $D709 CP (IX+$03)   ;
 $D70C JR NZ,$D70F   ; }
 $D70E DEC D         ; Decrease #REGd by one.
*$D70F LD B,(IX+$01) ; #REGb=*#REGix+#N$01.
 $D712 LD C,(IX+$00) ; #REGc=*#REGix+#N$00.
 $D715 LD A,D        ; #REGa=#REGd.
 $D716 LD A,$20      ; #REGa=#N$20.
 $D718 POP IY        ; Restore #REGiy from the stack.
 $D71A LD A,$20      ; #REGa=#N$20.
*$D71C PUSH AF       ; {Stash #REGaf, #REGde and #REGbc on the stack.
 $D71D PUSH DE       ;
 $D71E PUSH BC       ; }
 $D71F LD D,A        ; #REGd=#REGa.
 $D720 LD A,C        ; {Jump to #R$D759 if #REGc is higher than #N$22.
 $D721 CP $22        ;
 $D723 JR NC,$D759   ; }
*$D725 PUSH DE       ; Stash #REGde on the stack.
 $D726 CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $D729 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $D72A POP BC        ; }
 $D72B PUSH BC       ; Stash #REGbc on the stack.
 $D72C LD A,D        ; #REGa=#REGd.
*$D72D CALL $D353    ; Call #R$D353.
 $D730 LD A,C        ; #REGa=#REGc.
 $D731 CP $02        ; Compare #REGa with #N$02.
 $D733 CALL Z,$D74C  ; Call #R$D74C zero.
 $D736 DEC C         ; Decrease #REGc by one.
 $D737 LD A,($DB38)  ; {#REGd+=*#R$DB38.
 $D73A ADD A,D       ;
 $D73B LD D,A        ; }
 $D73C DEC E         ; Decrease #REGe by one.
 $D73D JR NZ,$D72D   ; Jump to #R$D72D until #REGe is zero.
 $D73F POP BC        ; {Restore #REGbc, #REGde and #REGaf from the stack.
 $D740 POP DE        ;
 $D741 POP AF        ; }
 $D742 DEC B         ; Decrease #REGb by one.
 $D743 INC A         ; Increment #REGa by one.
 $D744 DEC D         ; Decrease #REGd by one.
 $D745 JR NZ,$D71C   ; Jump to #R$D71C until #REGd is zero.
*$D747 POP HL        ; Restore #REGhl from the stack.
 $D748 LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $D74B RET           ; Return.
*$D74C DEC E         ; Decrease #REGe by one.
 $D74D PUSH AF       ; Stash #REGaf on the stack.
 $D74E INC E         ; Increment #REGe by one.
 $D74F POP AF        ; Restore #REGaf from the stack.
 $D750 RET Z         ; Return if #REGe is zero.
 $D751 DEC E         ; Decrease #REGe by one.
 $D752 LD A,($DB38)  ; {#REGd+=*#R$DB38.
 $D755 ADD A,D       ;
 $D756 LD D,A        ; }
 $D757 JR $D74C      ; Jump to #R$D74C.
*$D759 LD A,($DB38)  ; {#REGd+=*#R$DB38.
 $D75C ADD A,D       ;
 $D75D LD D,A        ; }
 $D75E DEC E         ; Decrease #REGe by one.
 $D75F JP Z,$D76B    ; Jump to #R$D76B if #REGe is zero.
 $D762 DEC C         ; Decrease #REGc by one.
 $D763 LD A,C        ; {Jump to #R$D759 if #REGc is higher than #N$22.
 $D764 CP $22        ;
 $D766 JR NC,$D759   ; }
 $D768 JP $D725      ; Jump to #R$D725.
*$D76B POP BC        ; {Restore #REGbc, #REGbc and #REGbc from the stack.
 $D76C POP BC        ;
 $D76D POP BC        ; }
 $D76E JP $D747      ; Jump to #R$D747.

; Routine at D771
;
; Used by the routine at #R$D778.
c$D771 LD (IX+$0A),$00 ; Write #N$00 to *#REGix+#N$0A.
 $D775 JP $D7DE        ; Jump to #R$D7DE.

; Routine at D778
;
; Used by the routine at #R$CE41.
c$D778 LD A,$11        ; {Set PAPER: BLUE (#N$01).
 $D77A RST $10         ;
 $D77B LD A,$01        ;
 $D77D RST $10         ; }
 $D77E LD IX,$DB46     ; #REGix=#R$DB46.
*$D782 PUSH BC         ; Stash #REGbc on the stack.
 $D783 LD A,(IX+$0A)   ; {Jump to #R$D7E7 if *#REGix+#N$0A is equal to #N$00.
 $D786 CP $00          ;
 $D788 JP Z,$D7E7      ; }
 $D78B LD L,(IX+$10)   ; #REGl=*#REGix+#N$10.
 $D78E LD H,(IX+$11)   ; #REGh=*#REGix+#N$11.
 $D791 LD ($5C36),HL   ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $D794 LD A,$10        ; {Set INK: *#REGix+#N$09.
 $D796 RST $10         ;
 $D797 LD A,(IX+$09)   ;
 $D79A RST $10         ; }
 $D79B LD A,(IX+$06)   ; #REGa=*#REGix+#N$06.
 $D79E ADD A,(IX+$12)  ; #REGa+=*#REGix+#N$12.
 $D7A1 CP (IX+$13)     ; {Jump to #R$D7A8 if #REGa is not equal to
 $D7A4 JR NZ,$D7A8     ; *#REGix+#N$13.}
 $D7A6 LD A,$20        ; {Write #N$20 to *#REGix+#N$06.
*$D7A8 LD (IX+$06),A   ; }
 $D7AB CALL $D616      ; Call #R$D616.
 $D7AE LD (IX+$00),C   ; Write #REGc to *#REGix+#N$00.
 $D7B1 LD (IX+$01),B   ; Write #REGb to *#REGix+#N$01.
 $D7B4 LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $D7B7 LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $D7BA CALL $D3AF      ; Call #R$D3AF.
 $D7BD LD A,C          ; {Jump to #R$D771 if #REGc is equal to #N$01.
 $D7BE CP $01          ;
 $D7C0 JP Z,$D771      ; }
 $D7C3 CALL $D647      ; Call #R$D647.
 $D7C6 LD A,(IX+$00)   ; {Write *#REGix+#N$00 to *#REGix+#N$0D.
 $D7C9 LD (IX+$0D),A   ; }
 $D7CC LD A,(IX+$01)   ; {Write *#REGix+#N$01 to *#REGix+#N$0E.
 $D7CF LD (IX+$0E),A   ; }
 $D7D2 LD A,(IX+$02)   ; {Write *#REGix+#N$02 to *#REGix+#N$0B.
 $D7D5 LD (IX+$0B),A   ; }
 $D7D8 LD A,(IX+$03)   ; {Write *#REGix+#N$03 to *#REGix+#N$0F.
 $D7DB LD (IX+$0F),A   ; }
; This entry point is used by the routine at #R$D771.
*$D7DE LD DE,$0018     ; #REGde=#N($0018,$04,$04).
 $D7E1 ADD IX,DE       ; #REGix+=#REGde.
 $D7E3 POP BC          ; Restore #REGbc from the stack.
 $D7E4 DJNZ $D782      ; Decrease counter by one and loop back to #R$D782 until
                       ; counter is zero.
 $D7E6 RET             ; Return.
*$D7E7 CALL $D8D4      ; Call #R$D8D4.
 $D7EA AND %00000111   ; Keep only bits 0-2.
 $D7EC SUB $02         ; #REGa-=#N$02.
 $D7EE CP $05          ; {Jump to #R$D7F4 if #REGa is lower than #N$05.
 $D7F0 JR C,$D7F4      ; }
 $D7F2 LD A,$04        ; #REGa=#N$04.
*$D7F4 LD E,A          ; #REGe=#REGa.
 $D7F5 LD D,$00        ; #REGd=#N$00.
 $D7F7 SLA E           ; {Shift #REGe left three positions (with carry).
 $D7F9 SLA E           ;
 $D7FB SLA E           ; }
 $D7FD PUSH DE         ; Stash #REGde on the stack.
 $D7FE POP HL          ; Restore #REGhl from the stack.
 $D7FF SLA E           ; Shift #REGe left (with carry).
 $D801 RL D            ; Rotate #REGd left.
 $D803 ADD HL,DE       ; #REGhl+=#REGde.
 $D804 LD DE,$D93E     ; #REGde=#R$D93E.
 $D807 ADD HL,DE       ; #REGhl+=#REGde.
 $D808 PUSH IX         ; Stash #REGix on the stack.
 $D80A POP DE          ; Restore #REGde from the stack.
 $D80B LD BC,$0018     ; #REGbc=#N($0018,$04,$04).
 $D80E LDIR            ; LDIR.
*$D810 CALL $D8D4      ; Call #R$D8D4.
 $D813 AND %00001111   ; Keep only bits 0-3.
 $D815 ADD A,$06       ; #REGa+=#N$06.
 $D817 CP $11          ; {Jump to #R$D810 if #REGa is higher than #N$11.
 $D819 JR NC,$D810     ; }
 $D81B RES 0,A         ; Reset bit 0 of #REGa.
 $D81D LD (IX+$01),A   ; Write #REGa to *#REGix+#N$01.
 $D820 LD (IX+$0E),A   ; Write #REGa to *#REGix+#N$0E.
 $D823 PUSH IY         ; Stash #REGiy on the stack.
 $D825 LD IY,$DB46     ; #REGiy=#R$DB46.
 $D829 LD L,A          ; #REGl=#REGa.
 $D82A LD BC,($DD98)   ; #REGbc=*#R$DD98.
*$D82E LD A,(IY+$0A)   ; {Jump to #R$D843 if *#REGiy+#N$0A is equal to #N$00.
 $D831 CP $00          ;
 $D833 JR Z,$D843      ; }
 $D835 LD A,(IY+$01)   ; {Jump to #R$D843 if *#REGiy+#N$01 is not equal to
 $D838 CP L            ; #REGl.
 $D839 JR NZ,$D843     ; }
 $D83B LD A,(IY+$00)   ; {Jump to #R$D867 if *#REGiy+#N$00 is higher than
 $D83E CP $0F          ; #N$0F.
 $D840 JP NC,$D867     ; }
*$D843 LD DE,$0018     ; #REGde=#N($0018,$04,$04).
 $D846 ADD IY,DE       ; #REGiy+=#REGde.
 $D848 DJNZ $D82E      ; Decrease counter by one and loop back to #R$D82E until
                       ; counter is zero.
 $D84A POP IY          ; Restore #REGiy from the stack.
 $D84C LD A,$01        ; {Write #N$01 to *#REGix+#N$0A.
 $D84E LD (IX+$0A),A   ; }
 $D851 LD A,$22        ; {#REGa=#N$22+*#REGix+#N$07.
 $D853 ADD A,(IX+$07)  ; }
 $D856 LD (IX+$00),A   ; Write #REGa to *#REGix+#N$00.
 $D859 LD (IX+$0D),A   ; Write #REGa to *#REGix+#N$0D.
 $D85C LD (IX+$02),$01 ; Write #N$01 to *#REGix+#N$02.
 $D860 LD (IX+$0B),$01 ; Write #N$01 to *#REGix+#N$0B.
 $D864 JP $D7DE        ; Jump to #R$D7DE.
*$D867 POP IY          ; Restore #REGiy from the stack.
 $D869 JP $D7DE        ; Jump to #R$D7DE.
 $D86C POP IX          ; Restore #REGix from the stack.
 $D86E RET             ; Return.

; Data block at D86F
b$D86F DEFB $00

; Goldfish Game: Print Boats
;
; Used by the routine at #R$CE41.
;
; .
;
; Set attributes.
@label=GoldfishGame_PrintBoats
c$D870 LD A,$10      ; {Set INK: BLACK (#N$00).
 $D872 RST $10       ;
 $D873 XOR A         ;
 $D874 RST $10       ; }
 $D875 LD A,$11      ; {Set PAPER: WHITE (#N$07).
 $D877 RST $10       ;
 $D878 LD A,$07      ;
 $D87A RST $10       ; }
; Graphics are created like fonts, they are 8x8 pixel UDG character blocks
; arranged sequentially into grids.
 $D87B LD HL,$98EC   ; {#HTML(Write #R$99EC(#N$98EC) (#R$99EC) to *<a
 $D87E LD ($5C36),HL ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
; Start fetching UDGs from #R$99EC.
 $D881 LD A,$20      ; #REGa=initial sprite ID: #N$20.
 $D883 LD C,$0F      ; {Print co-ordinates: #N$0F/ #N$18.
 $D885 LD B,$18      ; }
 $D887 LD D,$08      ; {Width and height: #N$0C/ #N$08.
 $D889 LD E,$0C      ; }
 $D88B CALL $D460    ; Call #R$D460.
 $D88E LD HL,$9BEC   ; {#HTML(Write #R$9CEC(#N$9BEC) (#R$9CEC) to *<a
 $D891 LD ($5C36),HL ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
; Start fetching UDGs from #R$9CEC.
 $D894 LD A,$20      ; #REGa=initial sprite ID: #N$20.
 $D896 LD C,$21      ; {Print co-ordinates: #N$21/ #N$18.
 $D898 LD B,$18      ; }
 $D89A LD D,$08      ; {Width and height: #N$0C/ #N$08.
 $D89C LD E,$0C      ; }
 $D89E CALL $D460    ; Call #R$D460.
 $D8A1 RET           ; Return.

; Goldfish Game: Animate Boats
;
; Used by the routine at #R$CE41.
;
; .
;
; #PUSHS #UDGTABLE {
;   #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CF0B)
;   #FOR$01,$50||x|#SIM(start=$CF47,stop=$CF4E)#SIM(start=$D8A8,stop=$D8D3)
;     #SCR$02,$00,$00,$20,$09(*boats-x)#PLOT(0,0,0)(boats-x)
;   ||
;   #UDGARRAY#(#ANIMATE$23(boats))
; } UDGTABLE# #POPS
@label=GoldfishGame_AnimateBoats
c$D8A2 LD A,($D93D)  ; #REGa=*#R$D93D.
 $D8A5 AND %00000001 ; Keep only bit 0.
 $D8A7 RET Z         ; Return if the result is zero.
 $D8A8 LD DE,$4000   ; #REGde=#R$4000(#N$4000) (screen buffer location).
 $D8AB LD B,$08      ; #REGb=#N$08.
*$D8AD PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $D8AE PUSH DE       ; }
 $D8AF LD B,$08      ; #REGb=#N$08.
*$D8B1 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $D8B2 PUSH DE       ; }
 $D8B3 LD A,(DE)     ; #REGa=*#REGde.
 $D8B4 RL A          ; Rotate #REGa left.
 $D8B6 PUSH AF       ; Stash #REGaf on the stack.
 $D8B7 LD HL,$001F   ; #REGhl=#N($001F,$04,$04).
 $D8BA ADD HL,DE     ; #REGhl+=#REGde.
 $D8BB LD B,$20      ; #REGb=#N$20.
*$D8BD POP AF        ; Restore #REGaf from the stack.
 $D8BE RL (HL)       ; Rotate *#REGhl left.
 $D8C0 PUSH AF       ; Stash #REGaf on the stack.
 $D8C1 DEC HL        ; Decrease #REGhl by one.
 $D8C2 DJNZ $D8BD    ; Decrease counter by one and loop back to #R$D8BD until
                     ; counter is zero.
 $D8C4 POP AF        ; {Restore #REGaf and #REGde from the stack.
 $D8C5 POP DE        ; }
 $D8C6 LD HL,$0020   ; #REGhl=#N($0020,$04,$04).
 $D8C9 ADD HL,DE     ; #REGhl+=#REGde.
 $D8CA EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D8CB POP BC        ; Restore #REGbc from the stack.
 $D8CC DJNZ $D8B1    ; Decrease counter by one and loop back to #R$D8B1 until
                     ; counter is zero.
 $D8CE POP DE        ; {Restore #REGde and #REGbc from the stack.
 $D8CF POP BC        ; }
 $D8D0 INC D         ; Increment #REGd by one.
 $D8D1 DJNZ $D8AD    ; Decrease counter by one and loop back to #R$D8AD until
                     ; counter is zero.
 $D8D3 RET           ; Return.

; Update Animation Counter
;
; Used by the routines at #R$CE41, #R$D05B, #R$D0AC, #R$D260 and #R$D778.
;
; .
;
; This routine simply updates *#R$D86F with (*#R$D86F*#N$05)+#N$01.
@label=UpdateAnimationCounter
c$D8D4 LD A,($D86F)  ; #REGa=*#R$D86F.
 $D8D7 LD B,A        ; #REGb=#REGa.
 $D8D8 INC B         ; Increment #REGb by one.
 $D8D9 SLA A         ; {Shift #REGa left two positions (with carry).
 $D8DB SLA A         ; }
 $D8DD ADD A,B       ; #REGa+=#REGb.
 $D8DE LD ($D86F),A  ; Write #REGa to *#R$D86F.
 $D8E1 RET           ; Return.

; Goldfish Game: Animate Sand
;
; Used by the routine at #R$CE41.
;
; .
;
; #PUSHS #UDGTABLE {
;   #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CF08)
;   #FOR$01,$50||x|#SIM(start=$D8E2,stop=$D929)
;     #SCR$02,$00,$13,$20,$03(*sand-x)#PLOT(0,0,0)(sand-x)
;   ||
;   #UDGARRAY#(#ANIMATE$0F(sand))
; } UDGTABLE# #POPS
; .
; Set the attributes.
@label=GoldfishGame_AnimateSand
c$D8E2 LD A,$11      ; {Set PAPER: BLUE (#N$01).
 $D8E4 RST $10       ;
 $D8E5 LD A,$01      ;
 $D8E7 RST $10       ; }
 $D8E8 LD HL,$DB22   ; {#HTML(Write #R$DC22(#N$DB22) (#R$DC22) to *<a
 $D8EB LD ($5C36),HL ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $D8EE LD A,$10      ; {Set INK: YELLOW (#N$06).
 $D8F0 RST $10       ;
 $D8F1 LD A,$06      ;
 $D8F3 RST $10       ; }
; Set the co-ordinates of where we're going to PRINT AT.
 $D8F4 LD B,$04      ; {#HTML(Set up the screen buffer location #N$21/#N$04
 $D8F6 LD C,$21      ; using <a rel="noopener nofollow"
 $D8F8 CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
; Print the current sand UDGs to the screen buffer.
 $D8FB LD A,$20      ; #REGa=#N$20 (base sprite ID).
@label=PrintSand_Loop
*$D8FD PUSH AF       ; Stash the current sand sprite ID on the stack.
 $D8FE CALL $D353    ; Call #R$D353.
 $D901 POP AF        ; Restore the current sand sprite ID from the stack.
 $D902 INC A         ; Move onto the next sand sprite ID.
 $D903 CP $40        ; {Keep looping back to #R$D8FD until the sand sprite ID
 $D905 JR NZ,$D8FD   ; is equal to #N$40.}
; Now move all the UDGs one pixel to the right. The next time this
; routine is called, the sand will appear to have moved when it's printed to
; the screen.
 $D907 LD DE,$DC22   ; #REGde=#R$DC22.
 $D90A LD B,$08      ; #REGb=#N$08 (line counter; each sand UDG is #N$08
                     ; bytes).
@label=AnimateSandLine_Loop
*$D90C PUSH BC       ; {Stash the line counter and the sand UDG buffer pointer
 $D90D PUSH DE       ; on the stack.}
 $D90E LD HL,$00F8   ; {#REGhl=#REGde+#N($00F8,$04,$04).
 $D911 ADD HL,DE     ; }
 $D912 LD A,(HL)     ; #REGa=*#REGhl.
 $D913 RRA           ; Rotate #REGa right one position.
 $D914 POP HL        ; Restore the sand buffer pointer from the stack.
 $D915 PUSH HL       ; But keep a copy of it (the sand buffer position) on the
                     ; stack still.
 $D916 LD DE,$0008   ; #REGde=#N($0008,$04,$04).
 $D919 LD B,$20      ; #REGb=#N$20 (UDG counter; the total number of sand UDGs
                     ; in the row).
 $D91B PUSH AF       ; Stash #REGaf on the stack.
@label=AnimateSandUDG_Loop
*$D91C POP AF        ; Restore #REGaf from the stack.
 $D91D RR (HL)       ; Rotate *#REGhl right.
 $D91F PUSH AF       ; Stash #REGaf on the stack.
 $D920 ADD HL,DE     ; #REGhl+=#REGde.
 $D921 DJNZ $D91C    ; Decrease counter by one and loop back to #R$D91C until
                     ; counter is zero.
 $D923 POP AF        ; {Restore #REGaf and #REGde from the stack.
 $D924 POP DE        ; }
 $D925 INC DE        ; Increment #REGde by one.
 $D926 POP BC        ; Restore the line counter from the stack.
 $D927 DJNZ $D90C    ; Decrease the line counter by one and loop back to
                     ; #R$D90C until all lines have been rotated.
 $D929 RET           ; Return.

; Routine at D92A
;
; Used by the routine at #R$CE41.
c$D92A LD IX,$DC0E   ; #REGix=#R$DC0E.
 $D92E LD A,(IX+$06) ; #REGa=*#REGix+#N$06.
 $D931 ADD A,$02     ; #REGa+=#N$02.
 $D933 CP $30        ; {Jump to #R$D939 if #REGa is not equal to #N$30.
 $D935 JR NZ,$D939   ; }
 $D937 LD A,$20      ; #REGa=#N$20.
*$D939 LD (IX+$06),A ; Write #REGa to *#REGix+#N$06.
 $D93C RET           ; Return.

; Goldfish Game: Buoyancy Counter
;
; This value is incremented every frame, and every 4th frame will cause the
; player to rise.
@label=GoldfishGame_BuoyancyCounter
g$D93D DEFB $00

; Data block at D93E
w$D93E DEFW $0A23
 $D940 DEFW $0303
 $D942 DEFW $00FF
 $D944 DEFW $0420
 $D946 DEFW $0502
 $D948 DEFW $0300
 $D94A DEFW $2303
 $D94C DEFW $030A
 $D94E DEFW $95CC
 $D950 DEFW $4008
 $D952 DEFW $0000
 $D954 DEFW $0000
 $D956 DEFW $0D23
 $D958 DEFW $0303
 $D95A DEFW $00FF
 $D95C DEFW $0320
 $D95E DEFW $0202
 $D960 DEFW $0300
 $D962 DEFW $2303
 $D964 DEFW $030D
 $D966 DEFW $96CC
 $D968 DEFW $3806
 $D96A DEFW $0000
 $D96C DEFW $0000
 $D96E DEFW $0D23
 $D970 DEFW $0303
 $D972 DEFW $00FF
 $D974 DEFW $0320
 $D976 DEFW $0302
 $D978 DEFW $0300
 $D97A DEFW $2303
 $D97C DEFW $030D
 $D97E DEFW $978C
 $D980 DEFW $3806
 $D982 DEFW $0000
 $D984 DEFW $0000
 $D986 DEFW $0D23
 $D988 DEFW $0303
 $D98A DEFW $00FF
 $D98C DEFW $0220
 $D98E DEFW $0402
 $D990 DEFW $0300
 $D992 DEFW $2303
 $D994 DEFW $030D
 $D996 DEFW $984C
 $D998 DEFW $3004
 $D99A DEFW $0000
 $D99C DEFW $0000
 $D99E DEFW $0D23
 $D9A0 DEFW $0303
 $D9A2 DEFW $00FF
 $D9A4 DEFW $0120
 $D9A6 DEFW $0601
 $D9A8 DEFW $0300
 $D9AA DEFW $2303
 $D9AC DEFW $030D
 $D9AE DEFW $98CC
 $D9B0 DEFW $2401
 $D9B2 DEFW $0000
 $D9B4 DEFW $0000

; Messaging: Release Joystick
@label=Messaging_ReleaseJoystick
t$D9B6 DEFB $16,$14,$07        ; PRINT AT: #N(#PEEK(#PC+$01)),
                               ; #N(#PEEK(#PC+$02)).
 $D9B9 DEFB $11,$00            ; PAPER: #N(#PEEK(#PC+$01)).
 $D9BB DEFB $10,$07            ; INK: #N(#PEEK(#PC+$01)).
 $D9BD DEFB $12,$01            ; FLASH: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $D9BF DEFM "RELEASE JOYSTICK" ; "#STR(#PC,$04,$10)".
 $D9CF DEFB $12,$00            ; FLASH: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $D9D1 DEFM $FF                ; Terminator.

; Messaging: Fish Game Status Bar
@label=Messaging_FishGameStatusBar
t$D9D2 DEFB $11,$05                                  ; PAPER:
                                                     ; #N(#PEEK(#PC+$01)).
 $D9D4 DEFB $10,$00                                  ; INK: #N(#PEEK(#PC+$01)).
 $D9D6 DEFM "FISH  0 AIR                           " ; "#STR(#PC,$04,$20)".
 $D9FC DEFM $FF                                      ; Terminator.

; Messaging: Title Screen
@label=Messaging_TitleScreen
t$D9FD DEFB $11,$05                        ; PAPER: #N(#PEEK(#PC+$01)).
 $D9FF DEFB $10,$00                        ; INK: #N(#PEEK(#PC+$01)).
 $DA01 DEFB $16,$01,$0C                    ; PRINT AT: #N(#PEEK(#PC+$01)),
                                           ; #N(#PEEK(#PC+$02)).
 $DA04 DEFM " BOOTY "                      ; "#STR(#PC,$04,$07)".
 $DA0B DEFB $16,$03,$07                    ; PRINT AT: #N(#PEEK(#PC+$01)),
                                           ; #N(#PEEK(#PC+$02)).
 $DA0E DEFM " BY JOHN F. CAIN. "           ; "#STR(#PC,$04,$12)".
 $DA20 DEFB $16,$05,$05                    ; PRINT AT: #N(#PEEK(#PC+$01)),
                                           ; #N(#PEEK(#PC+$02)).
 $DA23 DEFM " ",$7F," 1984 JOHN F. CAIN. " ; "#STR(#PC,$04,$16)".
 $DA39 DEFB $FF                            ; Terminator.

; Messaging: Menu Item - Keyboard
@label=Messaging_MenuKeyboard
t$DA3A DEFB $10,$07        ; INK: #N(#PEEK(#PC+$01)).
 $DA3C DEFB $11,$00        ; PAPER: #N(#PEEK(#PC+$01)).
 $DA3E DEFB $16,$08,$07    ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DA41 DEFM "1 - KEYBOARD" ; "#STR(#PC,$04,$0C)".
 $DA4D DEFB $14,$00        ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DA4F DEFB $FF            ; Terminator.

; Messaging: Menu Item - Interface 2 Joystick
@label= Messaging_MenuInterface2Joystick
t$DA50 DEFB $16,$0A,$07                ; PRINT AT: #N(#PEEK(#PC+$01)),
                                       ; #N(#PEEK(#PC+$02)).
 $DA53 DEFM "2 - INTERFACE 2 JOYSTICK" ; "#STR(#PC,$04,$18)".
 $DA6B DEFB $14,$00                    ; INVERSE:
                                       ; #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DA6D DEFB $FF                        ; Terminator.

; Messaging: Menu Item - Cursor Joystick
@label=Messaging_MenuCursorJoystick
t$DA6E DEFB $16,$0C,$07           ; PRINT AT: #N(#PEEK(#PC+$01)),
                                  ; #N(#PEEK(#PC+$02)).
 $DA71 DEFM "3 - CURSOR JOYSTICK" ; "#STR(#PC,$04,$13)".
 $DA84 DEFB $14,$00               ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DA86 DEFB $FF                   ; Terminator.

; Messaging: Menu Item - Kempston Joystick
@label=Messaging_MenuKempstonJoystick
t$DA87 DEFB $16,$0E,$07             ; PRINT AT: #N(#PEEK(#PC+$01)),
                                    ; #N(#PEEK(#PC+$02)).
 $DA8A DEFM "4 - KEMPSTON JOYSTICK" ; "#STR(#PC,$04,$15)".
 $DA9F DEFB $14,$00                 ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DAA1 DEFB $FF                     ; Terminator.

; Messaging: Menu Item - Define Keys
@label=Messaging_MenuDefineKeys
t$DAA2 DEFB $16,$10,$07       ; PRINT AT: #N(#PEEK(#PC+$01)),
                              ; #N(#PEEK(#PC+$02)).
 $DAA5 DEFM "5 - DEFINE KEYS" ; "#STR(#PC,$04,$0F)".
 $DAB4 DEFB $14,$00           ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DAB6 DEFB $FF               ; Terminator.

; Messaging: Menu Item - Start Game
@label=Messaging_MenuStartGame
t$DAB7 DEFB $16,$12,$07      ; PRINT AT: #N(#PEEK(#PC+$01)),
                             ; #N(#PEEK(#PC+$02)).
 $DABA DEFM "0 - START GAME" ; "#STR(#PC,$04,$0E)".
 $DAC8 DEFB $14,$00          ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DACA DEFB $FF              ; Terminator.

; Messaging: Define Keys
@label=Messaging_DefineKeys
t$DACB DEFB $11,$00       ; PAPER: #N(#PEEK(#PC+$01)).
 $DACD DEFB $10,$07       ; INK: #N(#PEEK(#PC+$01)).
 $DACF DEFB $16,$09,$0A   ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DAD2 DEFM "DEFINE KEYS" ; "#STR(#PC,$04,$0B)".
 $DADD DEFB $16,$0B,$0A   ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DAE0 DEFB $FF           ; Terminator.

; Messaging: Left
@label=Messaging_Left
t$DAE1 DEFB $14,$00     ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DAE3 DEFM " - LEFT"   ; "#STR(#PC,$04,$07)".
 $DAEA DEFB $16,$0D,$0A ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DAED DEFB $FF         ; Terminator.

; Messaging: Right
@label=Messaging_Right
t$DAEE DEFB $14,$00     ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DAF0 DEFM " - RIGHT"  ; "#STR(#PC,$04,$08)".
 $DAF8 DEFB $16,$0F,$0A ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DAFB DEFB $FF         ; Terminator.

; Messaging: Up
@label=Messaging_Up
t$DAFC DEFB $14,$00     ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DAFE DEFM " - UP"     ; "#STR(#PC,$04,$05)".
 $DB03 DEFB $16,$11,$0A ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DB06 DEFB $FF         ; Terminator.

; Messaging: Down
@label=Messaging_Down
t$DB07 DEFB $14,$00     ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DB09 DEFM " - DOWN"   ; "#STR(#PC,$04,$07)".
 $DB10 DEFB $16,$13,$0A ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DB13 DEFB $FF         ; Terminator.

; Messaging: Enter Room/ Space Exits
@label=Messaging_EnterRoomSpaceExits
t$DB14 DEFB $14,$00         ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DB16 DEFM " - ENTER ROOM" ; "#STR(#PC,$04,$0D)".
 $DB23 DEFB $16,$15,$0A     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DB26 DEFB $12,$01         ; FLASH: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DB28 DEFM "SPACE EXITS"   ; "#STR(#PC,$04,$0B)".
 $DB33 DEFB $12,$00         ; FLASH: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DB35 DEFB $FF             ; Terminator.

; Game status buffer entry at DB36
g$DB36 DEFB $00,$00

; Game status buffer entry at DB38
g$DB38 DEFB $00,$00,$00

; Goldfish Game: Temporary Sprite Width
@label=GoldfishGame_TempSpriteWidth
g$DB3B DEFB $00

; Goldfish Game: Temporary Sprite ID
@label=GoldfishGame_TempSpriteID
g$DB3C DEFB $00

; Data block at DB3D
b$DB3D DEFB $00,$00,$00,$00,$00

; Goldfish Game: Numer Of Fish Caught
@label=GoldfishGame_FishCaught
g$DB42 DEFB $00

; Unused
u$DB43 DEFB $00

; Goldfish Game: Numer Of Fish Needed
;
; The number of fish needed to complete the game; see #R$CE57.
@label=GoldfishGame_FishToCollect
g$DB44 DEFB $00

; Unused
u$DB45 DEFB $00

; Data block at DB46
b$DB46 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $DB5E DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $DB76 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $DB8E DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $DBA6 DEFB $00,$00,$00,$00
 $DBAA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBB2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBBA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBC2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBCA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBD2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBDA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBE2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBEA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBF2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBFA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC02 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC0A DEFB $00,$00,$00,$00

; Goldfish Game: Player Attributes
@label=GoldfishGame_PlayerAttributes
g$DC0E DEFB $00
 $DC0F DEFB $00
 $DC10 DEFB $00
 $DC11 DEFB $00
@label=Player_X
 $DC12 DEFB $00                 ; X co-ordinate.
@label=Player_Y
 $DC13 DEFB $00                 ; Y co-ordinate.
 $DC14 DEFB $00
 $DC15 DEFB $00
 $DC16 DEFB $00
 $DC17 DEFB $00
 $DC18 DEFB $00
 $DC19 DEFB $00
 $DC1A DEFB $00
 $DC1B DEFB $00
 $DC1C DEFB $00
 $DC1D DEFB $00,$00,$00,$00,$00

; Buffer: Sand Animation (Goldfish Game)
;
; Populated by #R$CEE6.
@label=Buffer_SandAnimation
g$DC22 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC2A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC32 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC3A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC42 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC4A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC52 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC5A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC62 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC6A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC72 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC7A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC82 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC8A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC92 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC9A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCA2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCAA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCB2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCBA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCC2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCCA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCD2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCDA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCE2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCEA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCF2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCFA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD02 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD0A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD12 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD1A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD22 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Data: Bubbles (Goldfish Game)
@label=Data_Bubbles
g$DD2A DEFB $00             ; X Position.
 $DD2B DEFB $00             ; Y Position.
 $DD2C DEFB $00,$00,$00
 $DD2F DEFB $00             ; Horizontal velocity.
 $DD30 DEFB $00,$00,$00,$00
 $DD34 DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD35 DEFB $00             ; X Position.
 $DD36 DEFB $00             ; Y Position.
 $DD37 DEFB $00,$00,$00
 $DD3A DEFB $00             ; Horizontal velocity.
 $DD3B DEFB $00,$00,$00,$00
 $DD3F DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD40 DEFB $00             ; X Position.
 $DD41 DEFB $00             ; Y Position.
 $DD42 DEFB $00,$00,$00
 $DD45 DEFB $00             ; Horizontal velocity.
 $DD46 DEFB $00,$00,$00,$00
 $DD4A DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD4B DEFB $00             ; X Position.
 $DD4C DEFB $00             ; Y Position.
 $DD4D DEFB $00,$00,$00
 $DD50 DEFB $00             ; Horizontal velocity.
 $DD51 DEFB $00,$00,$00,$00
 $DD55 DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD56 DEFB $00             ; X Position.
 $DD57 DEFB $00             ; Y Position.
 $DD58 DEFB $00,$00,$00
 $DD5B DEFB $00             ; Horizontal velocity.
 $DD5C DEFB $00,$00,$00,$00
 $DD60 DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD61 DEFB $00             ; X Position.
 $DD62 DEFB $00             ; Y Position.
 $DD63 DEFB $00,$00,$00
 $DD66 DEFB $00             ; Horizontal velocity.
 $DD67 DEFB $00,$00,$00,$00
 $DD6B DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD6C DEFB $00             ; X Position.
 $DD6D DEFB $00             ; Y Position.
 $DD6E DEFB $00,$00,$00
 $DD71 DEFB $00             ; Horizontal velocity.
 $DD72 DEFB $00,$00,$00,$00
 $DD76 DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD77 DEFB $00             ; X Position.
 $DD78 DEFB $00             ; Y Position.
 $DD79 DEFB $00,$00,$00
 $DD7C DEFB $00             ; Horizontal velocity.
 $DD7D DEFB $00,$00,$00,$00
 $DD81 DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD82 DEFB $00             ; X Position.
 $DD83 DEFB $00             ; Y Position.
 $DD84 DEFB $00,$00,$00
 $DD87 DEFB $00             ; Horizontal velocity.
 $DD88 DEFB $00,$00,$00,$00
 $DD8C DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD8D DEFB $00             ; X Position.
 $DD8E DEFB $00             ; Y Position.
 $DD8F DEFB $00,$00,$00
 $DD92 DEFB $00             ; Horizontal velocity.
 $DD93 DEFB $00,$00,$00,$00
 $DD97 DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#

; Data block at DD98
b$DD98 DEFB $08,$08

; Messaging: Goldfish Game
@label=Messaging_GoldfishGame
t$DD9A DEFB $16,$04,$02                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $DD9D DEFM "   BOOTY BY JOHN F CAIN   "       ; "#STR(#PC,$04,$1A)".
 $DDB7 DEFB $16,$0C,$07                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $DDBA DEFM "CATCH 20 GOLDFISH"                ; "#STR(#PC,$04,$11)".
 $DDCB DEFB $16,$0E,$04                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $DDCE DEFM "BUT DONT RUN OUT OF AIR"          ; "#STR(#PC,$04,$17)".
 $DDE5 DEFB $16,$10,$00                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $DDE8 DEFM "OR GET TOO CLOSE TO THE BIG FISH" ; "#STR(#PC,$04,$20)".
 $DE08 DEFB $FF                                ; Terminator.

; Unused
u$DE09 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE11 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE19 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE21 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE29 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE31 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE39 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE41 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE49 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE51 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE59 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE61 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE69 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE71 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE79 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE81 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE89 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE91 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE99 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEA1 DEFB $00,$00,$00,$00,$00,$00,$00

; Initialise Game
;
; Used by the routines at #R$D08A and #R$D602.
;
; .
;
; Don't reset player lives or booty count if the game has already been
; completed and has looped around to start again.
@label=InitialiseGame
c$DEA8 LD A,($5BF0)  ; {Jump to #R$DEBC if *#R$5BF0 is set to "Game Looped
 $DEAB CP $02        ; Mode" (#N$02).
 $DEAD JP Z,$DEBC    ; }
; Initialise new Game State attributes.
 $DEB0 LD A,$03      ; {Write #N$03 to *#R$5BF1.
 $DEB2 LD ($5BF1),A  ; }
 $DEB5 LD BC,$0000   ; {Write #N($0000,$04,$04) to *#R$5BF4.
 $DEB8 LD ($5BF4),BC ; }
; This entry point is used by the routine at #R$DFD3.
@label=InitialiseGameStates
*$DEBC XOR A         ; {Write #N$00 to *#R$5BD3.
 $DEBD LD ($5BD3),A  ; }
 $DEC0 LD BC,$007D   ; {Write #N($007D,$04,$04) to *#R$5BF2.
 $DEC3 LD ($5BF2),BC ; }
 $DEC7 JR $DECE      ; Jump to #R$DECE.
; This entry point is used by the routine at #R$E361.
@label=SetFirstRoom
*$DEC9 LD A,$01      ; {Write #N$01 to *#R$5BD3.
 $DECB LD ($5BD3),A  ; }
; Initialise Player starting attributes.
@label=InitialisePlayer
*$DECE LD DE,$F231   ; {Copy #N($0014,$04,$04) bytes of data from #R$F245 to
 $DED1 LD HL,$F245   ; #R$F231.
 $DED4 LD BC,$0014   ;
 $DED7 LDIR          ; }
 $DED9 LD A,$00      ; {Write #N$00 to: #LIST { *#R$F33A } { *#R$F33F } {
 $DEDB LD ($F33A),A  ; *#R$E479 } LIST#
 $DEDE LD ($F33F),A  ;
 $DEE1 LD ($E479),A  ; }
 $DEE4 LD A,$00      ; {Write #N$00 to *#R$F2DB.
 $DEE6 LD ($F2DB),A  ; }
 $DEE9 LD A,$00      ; {#HTML(Write #N$00 to: #LIST
 $DEEB LD ($F31C),A  ; { *#R$F31C }
 $DEEE LD ($5C78),A  ; { *<a rel="noopener nofollow" href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a> }
 $DEF1 LD ($5C79),A  ; { *<a rel="noopener nofollow" href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES+#N$01</a> }
 $DEF4 LD ($F340),A  ; { *#R$F340 }
                     ; LIST#)}
; This also draws the whole room.
 $DEF7 CALL $E0A9    ; Call #R$E0A9.
; Restore the default ZX Spectrum font.
 $DEFA LD HL,$3C00   ; {#HTML(Write <a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
 $DEFD LD ($5C36),HL ; (CHARSET-#N$100) to *<a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $DF00 LD A,$10      ; {Set INK: YELLOW (#N$06).
 $DF02 RST $10       ;
 $DF03 LD A,$06      ;
 $DF05 RST $10       ; }
 $DF06 LD A,$11      ; {Set PAPER: *#R$5BD0.
 $DF08 RST $10       ;
 $DF09 LD A,($5BD0)  ;
 $DF0C RST $10       ; }
 $DF0D CALL $E064    ; Call #R$E064.
 $DF10 CALL $E058    ; Call #R$E058.
; This is the beginning of the game loop.
@label=Game_Loop
*$DF13 LD A,$11      ; {Set PAPER: *#R$5BD1.
 $DF15 RST $10       ;
 $DF16 LD A,($5BD1)  ;
 $DF19 RST $10       ; }
 $DF1A CALL $E22D    ; Call #R$E22D.
 $DF1D CALL $F1FC    ; Call #R$F1FC.
 $DF20 CALL $E47A    ; Call #R$E47A.
 $DF23 CALL $E3E0    ; Call #R$E3E0.
 $DF26 CALL $F001    ; Call #R$F001.
 $DF29 CALL $E9D9    ; Call #R$E9D9.
 $DF2C CALL $E821    ; Call #R$E821.
 $DF2F LD A,($5BF0)  ; {Call #R$EBD8 if *#R$5BF0 is not set to "Demo Mode"
 $DF32 CP $03        ; (#N$03).
 $DF34 CALL NZ,$EBD8 ; }
 $DF37 CALL $E4F1    ; Call #R$E4F1.
 $DF3A LD A,($E820)  ; {Jump to #R$DF45 if *#R$E820 is equal to #N$00.
 $DF3D CP $00        ;
 $DF3F JR Z,$DF45    ; }
 $DF41 DEC A         ; Decrease #REGa by one.
 $DF42 LD ($E820),A  ; Write #REGa to *#R$E820.
*$DF45 LD A,($5BEA)  ; {Call #R$E30B if *#R$5BEA is set to Kempston joystick
 $DF48 CP $0C        ; (#N$0C).
 $DF4A CALL Z,$E30B  ; }
 $DF4D LD A,($5BEA)  ; {Call #R$ED35 if *#R$5BEA is not set to Kempston
 $DF50 CP $0C        ; joystick (#N$0C).
 $DF52 CALL NZ,$ED35 ; }
 $DF55 CALL $E5F4    ; Call #R$E5F4.
 $DF58 CALL $E581    ; Call #R$E581.
; Display the currently carried key.
; .
; Set attributes.
 $DF5B LD A,$10      ; {Set INK: YELLOW (#N$06).
 $DF5D RST $10       ;
 $DF5E LD A,$06      ;
 $DF60 RST $10       ; }
 $DF61 LD A,$11      ; {Set PAPER: *#R$5BD0.
 $DF63 RST $10       ;
 $DF64 LD A,($5BD0)  ;
 $DF67 RST $10       ; }
 $DF68 LD C,$1B      ; {#HTML(Set up the screen buffer location #N$1B/#N$01
 $DF6A LD B,$01      ; using <a rel="noopener nofollow"
 $DF6C CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
; Restore the default ZX Spectrum font.
 $DF6F LD HL,$3C00   ; {#HTML(Write <a rel="noopener nofollow"
 $DF72 LD ($5C36),HL ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                     ; (CHARSET-#N$100) to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $DF75 LD IX,$F231   ; #REGix=#R$F231.
 $DF79 LD A,(IX+$10) ; #REGa=*#REGix+#N$10.
 $DF7C ADD A,$30     ; #REGa+=#N$30.
 $DF7E CALL $E6DC    ; Call #R$E6DC.
 $DF81 LD BC,($5BF2) ; #REGbc=*#R$5BF2.
 $DF85 LD A,C        ; {Call #R$DFD3 if #REGbc is zero.
 $DF86 OR B          ;
 $DF87 CALL Z,$DFD3  ; }
 $DF8A LD A,($5BF0)  ; {Jump to #R$DF13 if *#R$5BF0 is not set to "Demo Mode"
 $DF8D CP $03        ; (#N$03).
 $DF8F JP NZ,$DF13   ; }
; Else, this is the demo mode - so check the timer.
 $DF92 LD A,($5C79)  ; {#HTML(Loop back round to #R$DF13 until *<a
 $DF95 CP $03        ; rel="noopener nofollow"
 $DF97 JP NZ,$DF13   ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES+#N$01</a>
                     ; is equal to #N$03.)}
 $DF9A LD A,($F340)  ; {Increment *#R$F340 by one.
 $DF9D INC A         ;
 $DF9E LD ($F340),A  ; }
 $DFA1 CP $02        ; {Call #R$ED8F if *#R$F340 is equal to #N$02.
 $DFA3 CALL Z,$ED8F  ; }
 $DFA6 CALL $E349    ; {Get a random room number between #N$02 and #N$11.
 $DFA9 AND %00001111 ;
 $DFAB ADD A,$02     ; }
 $DFAD CALL $EE84    ; Call #R$EE84.
; #HTML(Reset the *<a rel="noopener nofollow"
; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a> counter back
; to #N($0000,$04,$04).)
 $DFB0 LD A,$00      ; {#HTML(Write #N$00 to: #LIST
 $DFB2 LD ($5C78),A  ; { *<a rel="noopener nofollow" href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a> }
 $DFB5 LD ($5C79),A  ; { *<a rel="noopener nofollow" href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES+#N$01</a> }
                     ; LIST#)}
 $DFB8 JP $DF13      ; Jump to #R$DF13.

; Graphics: Golden Key
@label=Graphics_GoldenKey
b$DFBB DEFB $7E,$FF,$C3,$C3,$FF,$7E,$18,$18 ; {#UDGTABLE {
 $DFC3 DEFB $18,$18,$18,$1F,$1E,$1F,$1E,$1F ; #UDGS$01,$02,$04(golden-key)(#UDG(#PC+$08*$y,attr=$06)(*golden-key)golden-key)
                                            ; } UDGTABLE#}

; Force Game-Over
;
; Used by the routine at #R$DFD3.
@label=ForceGameOver
c$DFCB LD A,$00      ; {Write #N$00 to #R$5BF1.
 $DFCD LD ($5BF1),A  ; }
 $DFD0 JP $E3A4      ; Jump to #R$E3A4.

; All Treasure Collected
;
; Used by the routine at #R$DEA8.
;
; .
;
; Restore the default ZX Spectrum font.
@label=AllTreasureCollected
c$DFD3 LD HL,$3C00   ; {#HTML(Write <a rel="noopener nofollow"
 $DFD6 LD ($5C36),HL ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                     ; (CHARSET-#N$100) to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
; Set the attributes.
 $DFD9 LD A,$10      ; {Set INK: WHITE (#N$07).
 $DFDB RST $10       ;
 $DFDC LD A,$07      ;
 $DFDE RST $10       ; }
 $DFDF LD A,$11      ; {Set PAPER: *#R$5BD1.
 $DFE1 RST $10       ;
 $DFE2 LD A,($5BD1)  ;
 $DFE5 RST $10       ; }
; Don't decrease *#R$5BFF every frame, we track a count of the frames and only
; decrease it every 20th frame.
 $DFE6 LD BC,($5BFA) ; {Decrease *#R$5BFA by one.
 $DFEA DEC BC        ;
 $DFEB LD ($5BFA),BC ; }
 $DFEF LD A,B        ; {Skip to #R$E004 if *#R$5BFA is not yet zero.
 $DFF0 OR C          ;
 $DFF1 JR NZ,$E004   ; }
; #N$14 frames have passed, so decrease the actual timer and check that it
; hasn't expired yet.
 $DFF3 LD BC,$0014   ; {Reset *#R$5BFA back to #N($0014,$04,$04).
 $DFF6 LD ($5BFA),BC ; }
 $DFFA LD A,($5BFF)  ; {Decrease *#R$5BFF by one.
 $DFFD DEC A         ;
 $DFFE LD ($5BFF),A  ; }
; Player lives don't matter with the Golden Key section of the game, once the
; timer expires it's Game Over.
 $E001 JP Z,$DFCB    ; Jump to #R$DFCB if *#R$5BFF is zero.
; Display the Golden Key timer.
@label=DisplayGoldenKeyTimer
*$E004 LD C,$0C      ; {#HTML(Set up the screen buffer location #N$0C/#N$02
 $E006 LD B,$02      ; using <a rel="noopener nofollow"
 $E008 CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
; #HTML(Store *#R$5BFF in #REGbc so we can use <a
; href="https://skoolkid.github.io/rom/asm/1A1B.html">OUT_NUM_1</a> to print it
; to the screen.)
 $E00B LD B,$00      ; {#REGbc=*#R$5BFF.
 $E00D LD A,($5BFF)  ;
 $E010 LD C,A        ; }
 $E011 CALL $1A1B    ; #HTML(Call <a
                     ; href="https://skoolkid.github.io/rom/asm/1A1B.html">OUT_NUM_1</a>.)
; The ASCII space after the timer acts to clear "extra" digits when the timer
; transitions to being single digit.
 $E014 LD A,$20      ; #REGa=ASCII "space" (#N$20).
 $E016 CALL $E6DC    ; Call #R$E6DC.
; Is the Golden Key in the current room?
 $E019 LD A,($5BD3)  ; {Return if *#R$5BD3 is not equal to *#R$5BFC.
 $E01C LD HL,$5BFC   ;
 $E01F CP (HL)       ;
 $E020 RET NZ        ; }
; It is in this room, so display it.
 $E021 LD BC,($5BFD) ; #REGbc=*#R$5BFD.
 $E025 LD HL,$DEBB   ; {#HTML(Write #R$DFBB(#N$DEBB) (#R$DFBB) to *<a
 $E028 LD ($5C36),HL ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $E02B LD A,$10      ; {Set INK: YELLOW (#N$06).
 $E02D RST $10       ;
 $E02E LD A,$06      ;
 $E030 RST $10       ; }
 $E031 LD A,$20      ; #REGa=#N$20 (base sprite ID).
 $E033 LD DE,$0201   ; #REGde=Set the sprite width/ height (#N$02/ #N$01).
 $E036 CALL $EA93    ; Call #R$EA93.
; Handle player collision with the Golden Key.
 $E039 LD IX,$F231   ; #REGix=#R$F231.
 $E03D LD BC,($5BFD) ; #REGbc=*#R$5BFD.
 $E041 LD A,(IX+$00) ; {Return if the players horizontal co-ordinate is not
 $E044 CP C          ; equal to the Golden Key horizontal co-ordinate.
 $E045 RET NZ        ; }
 $E046 LD A,(IX+$01) ; {Return if the players vertical co-ordinate is not equal
 $E049 CP B          ; to the Golden Key vertical co-ordinate.
 $E04A RET NZ        ; }
; The player has collected the Golden Key!
; .
; Hilariously, just beep at the player and restart the game. Zero fanfare!
 $E04B LD DE,$00C8   ; #REGde=#N($00C8,$04,$04).
 $E04E LD HL,$00C8   ; #REGhl=#N($00C8,$04,$04).
 $E051 CALL $03B5    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/03B5.html">BEEPER</a>.)
 $E054 POP BC        ; Restore #REGbc from the stack.
 $E055 JP $DEBC      ; Jump to #R$DEBC.

; Reset Sound Flags
;
; Used by the routines at #R$DEA8, #R$ED8F and #R$EE5B.
@label=ResetSoundFlags
c$E058 LD HL,$A06C   ; #REGhl=#R$A06C.
 $E05B LD DE,$FFFB   ; #REGde=#R$FFFB.
 $E05E LD BC,$0064   ; #REGbc=#N($0064,$04,$04).
 $E061 LDIR          ; Copy #N($0064,$04,$04) bytes of data from *#R$A06C to
                     ; *#R$FFFB.
 $E063 RET           ; Return.

; Print Status Bar Icons
;
; Used by the routines at #R$DEA8 and #R$E0A9.
@label=PrintStatusBarIcons
c$E064 LD HL,$F15B   ; {#HTML(Write #R$F25B(#N$F15B) (#R$F25B) to *<a
 $E067 LD ($5C36),HL ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
; Set up the screen buffer position.
 $E06A LD C,$21      ; {#HTML(Set up the screen buffer location #N$01/#N$21
 $E06C LD B,$01      ; using <a rel="noopener nofollow"
 $E06E CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
; Skip showing any lives if the player is using their last life.
 $E071 LD A,($5BF1)  ; {Jump to #R$E080 if *#R$5BF1 is equal to #N$00.
 $E074 CP $00        ;
 $E076 JR Z,$E080    ; }
; Display a life icon for each life the player has.
; .
; #HTML(<img alt="life" src="../images/udgs/life.png">)
 $E078 LD B,A        ; #REGb=#R$5BF1 (number of lives counter).
@label=PrintLifeIcon_Loop
*$E079 LD A,$21      ; #REGa=Player life icon (#N$21).
 $E07B CALL $E6DC    ; Call #R$E6DC.
 $E07E DJNZ $E079    ; Decrease lives counter by one and loop back to #R$E079
                     ; until all lives have been printed.
; Put a space between the lives and the key icon.
; .
; Restore the default ZX Spectrum font.
@label=PrintKeyIcon
*$E080 LD HL,$3C00   ; {#HTML(Write <a rel="noopener nofollow"
 $E083 LD ($5C36),HL ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                     ; (CHARSET-#N$100) to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $E086 LD A,$20      ; #REGa=ASCII "space" (#N$20).
 $E088 CALL $E6DC    ; Call #R$E6DC.
; Set up the screen buffer position.
 $E08B LD C,$1D      ; {#HTML(Set up the screen buffer location #N$01/#N$1D
 $E08D LD B,$01      ; using <a rel="noopener nofollow"
 $E08F CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
 $E092 LD HL,$F15B   ; {#HTML(Write #R$F25B(#N$F15B) (#R$F25B) to *<a
 $E095 LD ($5C36),HL ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
; Display the key icon.
; .
; #HTML(<img alt="key" src="../images/udgs/key.png">)
 $E098 LD A,$22      ; #REGa=Key icon left (#N$22).
 $E09A CALL $E6DC    ; Call #R$E6DC.
 $E09D LD A,$23      ; #REGa=Key icon right (#N$23).
 $E09F CALL $E6DC    ; Call #R$E6DC.
; Restore the default ZX Spectrum font.
 $E0A2 LD HL,$3C00   ; {#HTML(Write <a rel="noopener nofollow"
 $E0A5 LD ($5C36),HL ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                     ; (CHARSET-#N$100) to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $E0A8 RET           ; Return.

; Print Status Bar
;
; Used by the routines at #R$DEA8 and #R$EE5B.
@label=PrintStatusBar
c$E0A9 CALL $A804    ; Call #R$A804.
; Restore the default ZX Spectrum font.
 $E0AC LD HL,$3C00   ; {#HTML(Write <a rel="noopener nofollow"
 $E0AF LD ($5C36),HL ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                     ; (CHARSET-#N$100) to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
; Set up the attributes.
 $E0B2 LD A,$10      ; {Set INK: YELLOW (#N$06).
 $E0B4 RST $10       ;
 $E0B5 LD A,$06      ;
 $E0B7 RST $10       ; }
 $E0B8 LD A,$11      ; {Set PAPER: *#R$5BD0.
 $E0BA RST $10       ;
 $E0BB LD A,($5BD0)  ;
 $E0BE RST $10       ; }
; Set up the screen buffer position.
 $E0BF LD C,$21      ; {#HTML(Set up the screen buffer location #N$01/#N$21
 $E0C1 LD B,$01      ; using <a rel="noopener nofollow"
 $E0C3 CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
; Print the status bar text at the bottom of the screen.
 $E0C6 LD B,$20      ; #REGb=#N$20 (length of status bar string).
 $E0C8 LD DE,$F2BB   ; #REGde=#R$F2BB.
@label=PrintStatusBar_Loop
*$E0CB LD A,(DE)     ; Fetch a character from *#REGde and store it in the
                     ; accumulator.
 $E0CC INC DE        ; Increment the string pointer by one.
 $E0CD CALL $E6DC    ; Call #R$E6DC.
 $E0D0 DJNZ $E0CB    ; Decrease the string length counter by one and loop back
                     ; to #R$E0CB until the string is printed.
; Prints the "Booty" count.
 $E0D2 LD C,$13      ; {#HTML(Set up the screen buffer location #N$01/#N$13
 $E0D4 LD B,$01      ; using <a rel="noopener nofollow"
 $E0D6 CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
; #HTML(Store *#R$5BF4 in #REGbc so we can use <a
; href="https://skoolkid.github.io/rom/asm/1A1B.html">OUT_NUM_1</a> to print it
; to the screen.)
 $E0D9 LD BC,($5BF4) ; #REGbc=*#R$5BF4.
 $E0DD CALL $1A1B    ; #HTML(Call <a
                     ; href="https://skoolkid.github.io/rom/asm/1A1B.html">OUT_NUM_1</a>.)
; Prints the "Treasure" count.
 $E0E0 LD C,$05      ; {#HTML(Set up the screen buffer location #N$01/#N$05
 $E0E2 LD B,$01      ; using <a rel="noopener nofollow"
 $E0E4 CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
; #HTML(Store *#R$5BF2 in #REGbc so we can use <a
; href="https://skoolkid.github.io/rom/asm/1A1B.html">OUT_NUM_1</a> to print it
; to the screen.)
 $E0E7 LD BC,($5BF2) ; #REGbc=*#R$5BF2.
 $E0EB CALL $1A1B    ; #HTML(Call <a
                     ; href="https://skoolkid.github.io/rom/asm/1A1B.html">OUT_NUM_1</a>.)
 $E0EE CALL $E064    ; Call #R$E064.
 $E0F1 LD A,($5BF2)  ; {Return if *#R$5BF2 is not equal to #N$00.
 $E0F4 CP $00        ;
 $E0F6 RET NZ        ; }
; This entry point is used by the routine at #R$E5F4.
@label=PrintFindTheGoldKey
*$E0F7 LD A,$10      ; {Set INK: WHITE (#N$07).
 $E0F9 RST $10       ;
 $E0FA LD A,$07      ;
 $E0FC RST $10       ; }
 $E0FD LD A,$11      ; {Set PAPER: *#R$5BD1.
 $E0FF RST $10       ;
 $E100 LD A,($5BD1)  ;
 $E103 RST $10       ; }
 $E104 LD B,$02      ; {#HTML(Set up the screen buffer location #N$02/#N$21
 $E106 LD C,$21      ; using <a rel="noopener nofollow"
 $E108 CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
 $E10B LD B,$20      ; #HTML(#REGb=#N$20 (length of "find the gold key in
                     ; <em>xx</em> seconds" string).)
 $E10D LD DE,$E6BC   ; #REGde=#R$E6BC.
@label=PrintFindTheGoldKey_Loop
*$E110 LD A,(DE)     ; Fetch a character from *#REGde and store it in the
                     ; accumulator.
 $E111 CALL $E6DC    ; Call #R$E6DC.
 $E114 INC DE        ; Increment the string pointer by one.
 $E115 DJNZ $E110    ; Decrease the string length counter by one and loop back
                     ; to #R$E110 until the string is printed.
 $E117 RET           ; Return.

; Routine at E118
;
; Used by the routine at #R$E12A.
c$E118 POP HL        ; Restore #REGhl from the stack.
 $E119 LD A,$00      ; {Write #N$00 to *#R$F31C.
 $E11B LD ($F31C),A  ; }
 $E11E RET           ; Return.

; Increased Frequency Animals Event Timing
;
; Used by the routine at #R$E12A.
@label=IncreasedFrequencyAnimalsEventTiming
c$E11F LD HL,($5C78) ; {#HTML(Jump to #R$E13C if
 $E122 LD DE,$0352   ; *<a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES</a>
 $E125 SBC HL,DE     ; is higher than #N$0352.)
 $E127 JR NC,$E13C   ; }
 $E129 RET           ; Else, return.

; Animals Event Timing
;
; Used by the routine at #R$E22D.
;
; .
;
; *#R$5BF4 starts at #N($0000,$04,$04) and counts up for every item of
; booty collected.
; This means that, the chance that animals appear increases when the player has
; collected over 100 items (of booty, not treasure - which counts down from #N($007D,$04,$04)).
@label=AnimalsEventTiming
c$E12A LD BC,($5BF4)   ; {If the player has collected over 100 items of booty
 $E12E LD A,C          ; (in *#R$5BF4) then jump to #R$E11F.
 $E12F CP $64          ;
 $E131 JR NC,$E11F     ; }
 $E133 LD HL,($5C78)   ; {#HTML(Return if
 $E136 LD DE,$0578     ; *<a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES</a>
 $E139 SBC HL,DE       ; is lower than #N$0578.)
 $E13B RET C           ; }
; #HTML(Use <a rel="noopener nofollow"
; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a> as a counter.)
@label=StartAnimalsEvent
*$E13C LD HL,$0000     ; {#HTML(Reset
 $E13F LD ($5C78),HL   ; *<a rel="noopener nofollow" href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                       ; to #N($0000,$04,$04) to start a new event cycle.)}
 $E142 CALL $E349      ; Call #R$E349.
 $E145 AND %00000011   ; Ensure the random number is between #N$00 and #N$03.
 $E147 LD HL,$F317     ; {#REGhl=#R$F317+the random number.
 $E14A LD E,A          ;
 $E14B LD D,$00        ;
 $E14D ADD HL,DE       ; }
 $E14E PUSH HL         ; Stash #REGhl on the stack.
 $E14F INC HL          ; Increment #REGhl by one.
 $E150 LD A,(HL)       ; #REGa=*#REGhl.
 $E151 LD IX,($5BDA)   ; #REGix=#R$5BDA.
 $E155 LD B,A          ; #REGb=#REGa.
*$E156 LD A,(IX+$00)   ; {Jump to #R$E172 if *#REGix+#N$00 is equal to #N$FF.
 $E159 CP $FF          ;
 $E15B JR Z,$E172      ; }
 $E15D LD A,(IX+$01)   ; {Jump to #R$E16B if *#REGix+#N$01 is not equal to
 $E160 CP B            ; #REGb.
 $E161 JR NZ,$E16B     ; }
 $E163 LD A,(IX+$05)   ; {Jump to #R$E118 if *#REGix+#N$05 is not equal to
 $E166 CP $00          ; #N$00.
 $E168 JP NZ,$E118     ; }
*$E16B LD DE,$0006     ; {#REGix+=#N($0006,$04,$04).
 $E16E ADD IX,DE       ; }
 $E170 JR $E156        ; Jump to #R$E156.
*$E172 LD IX,$F31C     ; #REGix=#R$F31C.
 $E176 CALL $E349      ; Call #R$E349.
 $E179 BIT 3,A         ; Test bit 3 of #REGa.
 $E17B JR Z,$E197      ; Jump to #R$E197 if {} is zero.
 $E17D LD (IX+$00),$02 ; Write #N$02 to *#REGix+#N$00.
 $E181 LD (IX+$02),$01 ; Write #N$01 to *#REGix+#N$02.
 $E185 LD (IX+$04),$01 ; Write #N$01 to *#REGix+#N$04.
 $E189 LD (IX+$05),$00 ; Write #N$00 to *#REGix+#N$05.
 $E18D LD (IX+$0B),$01 ; Write #N$01 to *#REGix+#N$0B.
 $E191 LD (IX+$0D),$02 ; Write #N$02 to *#REGix+#N$0D.
 $E195 JR $E1AF        ; Jump to #R$E1AF.
*$E197 LD (IX+$00),$25 ; Write #N$25 to *#REGix+#N$00.
 $E19B LD (IX+$02),$00 ; Write #N$00 to *#REGix+#N$02.
 $E19F LD (IX+$04),$FF ; Write #N$FF to *#REGix+#N$04.
 $E1A3 LD (IX+$05),$00 ; Write #N$00 to *#REGix+#N$05.
 $E1A7 LD (IX+$0B),$00 ; Write #N$00 to *#REGix+#N$0B.
 $E1AB LD (IX+$0D),$24 ; Write #N$24 to *#REGix+#N$0D.
*$E1AF CALL $E349      ; Call #R$E349.
 $E1B2 BIT 5,A         ; Test bit 5 of #REGa.
 $E1B4 JR Z,$E1FE      ; Jump to #R$E1FE if {} is zero.
 $E1B6 POP HL          ; Restore #REGhl from the stack.
 $E1B7 PUSH HL         ; Stash #REGhl on the stack.
 $E1B8 LD A,(HL)       ; {#HTML(Set up the screen buffer location #N$21/*#REGhl
 $E1B9 LD B,A          ; using <a rel="noopener nofollow"
 $E1BA LD C,$21        ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E1BC CALL $0DD9      ; }
 $E1BF LD HL,($5C84)   ; #HTML(#REGhl=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E1C2 LD B,$20        ; #REGb=#N$20.
*$E1C4 LD A,(HL)       ; #REGa=*#REGhl.
 $E1C5 INC HL          ; Increment #REGhl by one.
 $E1C6 CP $FF          ; {Jump to #R$E118 if #REGa is not equal to #N$FF.
 $E1C8 JP NZ,$E118     ; }
 $E1CB DJNZ $E1C4      ; Decrease counter by one and loop back to #R$E1C4 until
                       ; counter is zero.
 $E1CD POP HL          ; Restore #REGhl from the stack.
 $E1CE LD A,(HL)       ; #REGa=*#REGhl.
 $E1CF INC A           ; Increment #REGa by one.
 $E1D0 LD (IX+$01),A   ; Write #REGa to *#REGix+#N$01.
 $E1D3 LD (IX+$0E),A   ; Write #REGa to *#REGix+#N$0E.
 $E1D6 LD (IX+$03),$03 ; Write #N$03 to *#REGix+#N$03.
 $E1DA LD (IX+$0F),$03 ; Write #N$03 to *#REGix+#N$0F.
 $E1DE LD (IX+$06),$20 ; Write #N$20 to *#REGix+#N$06.
 $E1E2 LD (IX+$09),$03 ; Write #N$03 to *#REGix+#N$09.
 $E1E6 LD (IX+$07),$04 ; Write #N$04 to *#REGix+#N$07.
 $E1EA LD (IX+$08),$01 ; Write #N$01 to *#REGix+#N$08.
 $E1EE LD A,$01        ; {Write #N$01 to *#R$FFFF.
 $E1F0 LD ($FFFF),A    ; }
 $E1F3 LD A,(IX+$04)   ; {Return if *#REGix+#N$04 is equal to #N$01.
 $E1F6 CP $01          ;
 $E1F8 RET Z           ; }
 $E1F9 LD (IX+$06),$24 ; Write #N$24 to *#REGix+#N$06.
 $E1FD RET             ; Return.
*$E1FE POP HL          ; Restore #REGhl from the stack.
 $E1FF LD A,(HL)       ; #REGa=*#REGhl.
 $E200 INC A           ; {Increment #REGa by three.
 $E201 INC A           ;
 $E202 INC A           ; }
 $E203 LD (IX+$01),A   ; Write #REGa to *#REGix+#N$01.
 $E206 LD (IX+$0E),A   ; Write #REGa to *#REGix+#N$0E.
 $E209 LD (IX+$03),$03 ; Write #N$03 to *#REGix+#N$03.
 $E20D LD (IX+$06),$28 ; Write #N$28 to *#REGix+#N$06.
 $E211 LD (IX+$09),$06 ; Write #N$06 to *#REGix+#N$09.
 $E215 LD (IX+$07),$02 ; Write #N$02 to *#REGix+#N$07.
 $E219 LD (IX+$08),$02 ; Write #N$02 to *#REGix+#N$08.
 $E21D LD A,$02        ; {Write #N$02 to *#R$FFFF.
 $E21F LD ($FFFF),A    ; }
 $E222 LD A,(IX+$04)   ; {Return if *#REGix+#N$04 is equal to #N$FF.
 $E225 CP $FF          ;
 $E227 RET Z           ; }
 $E228 LD (IX+$06),$2C ; Write #N$2C to *#REGix+#N$06.
 $E22C RET             ; Return.

; Handler: Animals
;
; Used by the routine at #R$DEA8.
@label=Handler_Animals
c$E22D LD IX,$F31C     ; #REGix=#R$F31C.
 $E231 LD A,(IX+$00)   ; {Jump to #R$E12A if *#REGix+#N$00 is equal to #N$00.
 $E234 CP $00          ;
 $E236 JP Z,$E12A      ; }
 $E239 LD HL,$934C     ; {#HTML(Write #R$944C(#N$934C) (#R$944C) to *<a
 $E23C LD ($5C36),HL   ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $E23F CALL $EEA6      ; Call #R$EEA6.
 $E242 LD (IX+$00),C   ; Write #REGc to *#REGix+#N$00.
 $E245 LD (IX+$01),B   ; Write #REGb to *#REGix+#N$01.
 $E248 LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $E24B LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $E24E LD A,E          ; {Jump to #R$E283 if #REGe is not equal to #N$03.
 $E24F CP $03          ;
 $E251 JR NZ,$E283     ; }
 $E253 LD A,(IX+$04)   ; {Jump to #R$E271 if *#REGix+#N$04 is equal to #N$FF.
 $E256 CP $FF          ;
 $E258 JR Z,$E271      ; }
 $E25A LD A,C          ; #REGa=#REGc.
 $E25B SUB (IX+$07)    ; #REGa-=*#REGix+#N$07.
 $E25E CP $02          ; {Jump to #R$E283 if #REGa is lower than #N$02.
 $E260 JR C,$E283      ; }
 $E262 CP $22          ; {Jump to #R$E283 if #REGa is higher than #N$22.
 $E264 JR NC,$E283     ; }
 $E266 LD C,A          ; #REGc=#REGa.
 $E267 LD E,$01        ; #REGe=#N$01.
 $E269 LD D,(IX+$08)   ; #REGd=*#REGix+#N$08.
 $E26C CALL $E787      ; Call #R$E787.
 $E26F JR $E283        ; Jump to #R$E283.
*$E271 INC C           ; Increment #REGc by one.
 $E272 LD A,C          ; {Jump to #R$E283 if #REGc is higher than #N$22.
 $E273 CP $22          ;
 $E275 JR NC,$E283     ; }
 $E277 CP $02          ; {Jump to #R$E283 if #REGc is lower than #N$02.
 $E279 JR C,$E283      ; }
 $E27B LD E,$01        ; #REGe=#N$01.
 $E27D LD D,(IX+$08)   ; #REGd=*#REGix+#N$08.
 $E280 CALL $E787      ; Call #R$E787.
*$E283 LD A,(IX+$00)   ; {Jump to #R$E301 if *#REGix+#N$00 is equal to #N$26.
 $E286 CP $26          ;
 $E288 JP Z,$E301      ; }
 $E28B CP $01          ; {Jump to #R$E301 if *#REGix+#N$00 is equal to #N$01.
 $E28D JP Z,$E301      ; }
 $E290 LD A,(IX+$06)   ; {Jump to #R$E29F if *#REGix+#N$06 is lower than #N$25.
 $E293 CP $25          ;
 $E295 JR C,$E29F      ; }
 $E297 ADD A,$08       ; #REGa+=#N$08.
 $E299 CP $47          ; {Jump to #R$E29F if #REGa is lower than #N$47.
 $E29B JR C,$E29F      ; }
 $E29D SUB $20         ; #REGa-=#N$20.
*$E29F LD (IX+$06),A   ; Write #REGa to *#REGix+#N$06.
 $E2A2 CALL $EED7      ; Call #R$EED7.
 $E2A5 LD A,(IX+$00)   ; {Write *#REGix+#N$00 to *#REGix+#N$0D.
 $E2A8 LD (IX+$0D),A   ; }
 $E2AB LD A,(IX+$01)   ; {Write *#REGix+#N$01 to *#REGix+#N$0E.
 $E2AE LD (IX+$0E),A   ; }
 $E2B1 LD A,(IX+$02)   ; {Write *#REGix+#N$02 to *#REGix+#N$0B.
 $E2B4 LD (IX+$0B),A   ; }
 $E2B7 LD A,(IX+$03)   ; {Write *#REGix+#N$03 to *#REGix+#N$0F.
 $E2BA LD (IX+$0F),A   ; }
 $E2BD LD A,(IX+$08)   ; #REGa=*#REGix+#N$08.
 $E2C0 ADD A,$03       ; #REGa+=#N$03.
 $E2C2 LD C,A          ; #REGc=#REGa.
 $E2C3 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $E2C6 LD A,($F232)    ; #REGa=*#R$F232.
 $E2C9 DEC A           ; Decrease #REGa by one.
 $E2CA ADD A,(IX+$08)  ; #REGa+=*#REGix+#N$08.
 $E2CD SUB B           ; #REGa-=#REGb.
 $E2CE CP C            ; {Return if #REGa is higher than #REGc.
 $E2CF RET NC          ; }
 $E2D0 LD A,(IX+$07)   ; #REGa=*#REGix+#N$07.
 $E2D3 ADD A,$02       ; #REGa+=#N$02.
 $E2D5 SLA A           ; {Shift #REGa left two positions (with carry).
 $E2D7 SLA A           ; }
 $E2D9 LD B,A          ; #REGb=#REGa.
 $E2DA LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $E2DD LD A,($F233)    ; {#REGd=*#R$F233.
 $E2E0 LD D,A          ; }
 $E2E1 LD A,C          ; #REGa=#REGc.
 $E2E2 SLA A           ; {Shift #REGa left two positions (with carry).
 $E2E4 SLA A           ; }
 $E2E6 ADD A,(IX+$02)  ; {#REGc=#REGa+*#REGix+#N$02.
 $E2E9 LD C,A          ; }
 $E2EA LD A,($F231)    ; #REGa=*#R$F231.
 $E2ED ADD A,(IX+$07)  ; #REGa+=*#REGix+#N$07.
 $E2F0 SLA A           ; Shift #REGa left (with carry).
 $E2F2 SLA A           ; Shift #REGa left (with carry).
 $E2F4 ADD A,D         ; #REGa+=#REGd.
 $E2F5 DEC A           ; Decrease #REGa by one.
 $E2F6 SUB C           ; #REGa-=#REGc.
; See #POKE#immuneBirdsRats(Immune To Birds & Rats).
 $E2F7 CP B            ; {Return if #REGa is higher than #REGb.
 $E2F8 RET NC          ; }
 $E2F9 LD A,$01        ; {Write #N$01 to *#R$FFFE.
 $E2FB LD ($FFFE),A    ; }
 $E2FE JP $E3A4        ; Jump to #R$E3A4.
*$E301 LD (IX+$00),$00 ; Write #N$00 to *#REGix+#N$00.
 $E305 LD A,$00        ; {Write #N$00 to *#R$FFFF.
 $E307 LD ($FFFF),A    ; }
 $E30A RET             ; Return.

; Player Controls Kempston
;
; Used by the routine at #R$DEA8.
@label=PlayerControls_Kempston
c$E30B LD IX,$F231   ; #REGix=#R$F231.
 $E30F LD A,($5BF0)  ; {Jump to #R$E31E if *#R$5BF0 is not set to "Demo Mode"
 $E312 CP $03        ; (#N$03).
 $E314 JR NZ,$E31E   ; }
 $E316 IN A,($1F)    ; Read from the Kempston joystick port.
 $E318 AND %00011111 ; Keep only bits 0-4.
 $E31A JP NZ,$ED8F   ; Jump to #R$ED8F if the result is not zero.
 $E31D RET           ; Return.
; The control is stored at *#R$F342 but does not appear to be referenced again
; outside of this routine.
@label=Check_PlayerControls_Kempston
*$E31E IN A,($1F)    ; Read from the Kempston joystick port.
 $E320 LD ($F342),A  ; Write #REGa to *#R$F342.
; Check for "fire".
 $E323 AND %00010000 ; Keep only bit 4.
 $E325 JP NZ,$EE5B   ; Jump to #R$EE5B if the result is not zero.
; Check for "right".
 $E328 LD A,($F342)  ; #REGa=*#R$F342.
 $E32B AND %00000001 ; Keep only bit 0.
 $E32D JP NZ,$EB05   ; Jump to #R$EB05 if the result is not zero.
; Check for "left".
 $E330 LD A,($F342)  ; #REGa=*#R$F342.
 $E333 AND %00000010 ; Keep only bit 1.
 $E335 JP NZ,$EB49   ; Jump to #R$EB49 if the result is not zero.
; Check for "down".
 $E338 LD A,($F342)  ; #REGa=*#R$F342.
 $E33B AND %00000100 ; Keep only bit 2.
 $E33D JP NZ,$ED9A   ; Jump to #R$ED9A if the result is not zero.
; Check for "up".
 $E340 LD A,($F342)  ; #REGa=*#R$F342.
 $E343 AND %00001000 ; Keep only bit 3.
 $E345 JP NZ,$EE08   ; Jump to #R$EE08 if the result is not zero.
; No controls were pressed, just return.
 $E348 RET           ; Return.

; Get Random Number
;
; Used by the routines at #R$DEA8, #R$E12A, #R$E361 and #R$E3C2.
;
; O:A The random number
;
; (((#REGb + #REGc) % #N$100 + #N$AB) % #N$100) * #N$100 + (#REGc + #N$CD) %
; #N$100
@label=GetRandomNumber
c$E349 PUSH BC       ; Stash #REGbc on the stack.
 $E34A LD BC,($F343) ; #REGbc=*#R$F343.
 $E34E XOR A         ; Reset the flags.
 $E34F LD A,C        ; {#REGb=#REGb+#REGc.
 $E350 ADD A,B       ;
 $E351 LD B,A        ; }
 $E352 XOR A         ; Reset the flags.
 $E353 LD A,$CD      ; {#REGc=#N$CD+#REGc.
 $E355 ADD A,C       ;
 $E356 LD C,A        ; }
 $E357 LD A,$AB      ; {#REGb+=#N$AB.
 $E359 ADC A,B       ;
 $E35A LD B,A        ; }
 $E35B LD ($F343),BC ; Write the updated #REGbc backit  to *#R$F343.
 $E35F POP BC        ; Restore #REGbc from the stack.
 $E360 RET           ; Return.

; Routine at E361
;
; Used by the routine at #R$EE5B.
c$E361 LD A,$07      ; {Write #N$07 to *#R$FFFE.
 $E363 LD ($FFFE),A  ; }
 $E366 LD HL,$5AA0   ; #REGhl=#N$5AA0 (attribute buffer location).
 $E369 LD B,$15      ; #REGb=#N$15.
*$E36B PUSH HL       ; {Stash #REGhl and #REGbc on the stack.
 $E36C PUSH BC       ; }
 $E36D LD B,$20      ; #REGb=#N$20.
*$E36F LD A,$29      ; #REGa=#COLOUR$29 (#N$29).
 $E371 LD (HL),A     ; Write #REGa to *#REGhl.
 $E372 INC HL        ; Increment #REGhl by one.
 $E373 DJNZ $E36F    ; Decrease counter by one and loop back to #R$E36F until
                     ; counter is zero.
 $E375 LD B,$C8      ; #REGb=#N$C8.
*$E377 PUSH BC       ; Stash #REGbc on the stack.
 $E378 LD BC,$FFFE   ; #REGbc=#N$FFFE.
 $E37B LD A,($5BD0)  ; #REGa=*#R$5BD0.
 $E37E ADD A,$10     ; #REGa+=#N$10.
 $E380 OUT (C),A     ; Send #REGa to port *#REGc.
 $E382 CALL $E349    ; Call #R$E349.
 $E385 LD B,A        ; #REGb=#REGa.
*$E386 DJNZ $E386    ; Decrease counter by one and loop back to #R$E386 until
                     ; counter is zero.
 $E388 LD BC,$FFFE   ; #REGbc=#N$FFFE.
 $E38B LD A,($5BD0)  ; #REGa=*#R$5BD0.
 $E38E OUT (C),A     ; Send #REGa to port *#REGc.
 $E390 CALL $E349    ; Call #R$E349.
 $E393 LD B,A        ; #REGb=#REGa.
*$E394 DJNZ $E394    ; Decrease counter by one and loop back to #R$E394 until
                     ; counter is zero.
 $E396 POP BC        ; Restore #REGbc from the stack.
 $E397 DJNZ $E377    ; Decrease counter by one and loop back to #R$E377 until
                     ; counter is zero.
 $E399 POP BC        ; {Restore #REGbc and #REGhl from the stack.
 $E39A POP HL        ; }
 $E39B LD DE,$0020   ; #REGde=#N($0020,$04,$04).
 $E39E XOR A         ; #REGa=#N$00.
 $E39F SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $E3A1 DJNZ $E36B    ; Decrease counter by one and loop back to #R$E36B until
                     ; counter is zero.
; This entry point is used by the routine at #R$E3E0.
*$E3A3 POP BC        ; Restore #REGbc from the stack.
; Lose A Life
; .
; This entry point is used by the routines at #R$DEA8, #R$E22D, #R$EBD8 and
; #R$F001.
@label=LoseLife
*$E3A4 LD A,$01      ; {Write #N$01 to *#R$FFFB.
 $E3A6 LD ($FFFB),A  ; }
 $E3A9 POP BC        ; Restore #REGbc from the stack.
 $E3AA LD HL,$0064   ; #REGhl=#N($0064,$04,$04).
 $E3AD LD DE,$00C8   ; #REGde=#N($00C8,$04,$04).
 $E3B0 CALL $03B5    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/03B5.html">BEEPER</a>.)
; See #POKE#infiniteLives(Infinite Lives).
 $E3B3 LD A,($5BF1)  ; {Decrease *#R$5BF1 by one.
 $E3B6 DEC A         ;
 $E3B7 LD ($5BF1),A  ; }
 $E3BA CP $FF        ; {Call #R$ED8F is *#R$5BF1 is equal to #N$FF.
 $E3BC CALL Z,$ED8F  ; }
; See #POKE#dontGoBackStart(Don't Go Back To Start)
 $E3BF JP $DEC9      ; Jump to #R$DEC9.

; Controller: Is There A Bomb?
;
; Used by the routine at #R$E5F4.
;
; BC Position coordinates for where to place the bomb
@label=Controller_BombCheck
c$E3C2 CALL $E349    ; Call #R$E349.
 $E3C5 CP $40        ; {Return if the random number is higher than #N$40.
 $E3C7 RET NC        ; }
; See #POKE#bombsDontExplode(Bombs Don't Explode).
 $E3C8 LD A,($E479)  ; {Return if *#R$E479 indicates a bomb already exists on
 $E3CB CP $00        ; the screen - we can only process one at-a-time.
 $E3CD RET NZ        ; }
; We're good to create a bomb!
 $E3CE LD A,$20      ; {Set the base sprite (#R$934C(#N$20)) to *#R$E475.
 $E3D0 LD ($E475),A  ; }
 $E3D3 LD ($E46F),BC ; Write the coordinates (#REGbc) to *#R$E46F for where it
                     ; should appear.
; Initialise the bomb, and the sound for it.
 $E3D7 LD A,$01      ; {Write #N$01 to: #LIST { *#R$E479 } { *#R$FFFD } LIST#
 $E3D9 LD ($E479),A  ;
 $E3DC LD ($FFFD),A  ; }
 $E3DF RET           ; Return.

; Handler: Explosion
;
; Used by the routine at #R$DEA8.
@label=Handler_Explosion
c$E3E0 LD A,($F2DB)    ; {Return if *#R$F2DB is equal to #N$00.
 $E3E3 CP $00          ;
 $E3E5 RET Z           ; }
 $E3E6 LD IX,$F2DB     ; #REGix=#R$F2DB.
 $E3EA LD HL,$F15B     ; {#HTML(Write #R$F25B(#N$F15B) (#R$F25B) to *<a
 $E3ED LD ($5C36),HL   ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $E3F0 LD A,$10        ; {Set INK: WHITE (#N$07).
 $E3F2 RST $10         ;
 $E3F3 LD A,$07        ;
 $E3F5 RST $10         ; }
 $E3F6 LD B,$05        ; #REGb=#N$05 (five "sparks").
@label=Handler_Explosion_Loop
*$E3F8 PUSH BC         ; Stash the sparks counter on the stack.
 $E3F9 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $E3FC LD DE,$0101     ; #REGde=Set the sprite width/ height (#N$01/ #N$01).
 $E3FF LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $E402 LD A,C          ; {Jump to #R$E412 if #REGc is higher than #N$22.
 $E403 CP $22          ;
 $E405 JR NC,$E412     ; }
 $E407 CP $02          ; {Jump to #R$E412 if #REGc is lower than #N$02.
 $E409 JR C,$E412      ; }
 $E40B PUSH BC         ; {Stash #REGbc and #REGde on the stack.
 $E40C PUSH DE         ; }
 $E40D CALL $E787      ; Call #R$E787.
 $E410 POP DE          ; {Restore #REGde and #REGbc from the stack.
 $E411 POP BC          ; }
*$E412 LD A,(IX+$03)   ; {#REGb+=*#REGix+#N$03.
 $E415 ADD A,B         ;
 $E416 LD B,A          ; }
 $E417 LD A,(IX+$02)   ; {#REGc+=*#REGix+#N$02.
 $E41A ADD A,C         ;
 $E41B LD C,A          ; }
 $E41C INC (IX+$05)    ; Increment *#REGix+#N$05 by one.
 $E41F LD A,(IX+$05)   ; {Jump to #R$E464 if *#REGix+#N$05 is equal to #N$04.
 $E422 CP $04          ;
 $E424 JR Z,$E464      ; }
 $E426 LD A,C          ; {Jump to #R$E45B if #REGc is higher than #N$22.
 $E427 CP $22          ;
 $E429 JR NC,$E45B     ; }
 $E42B CP $02          ; {Jump to #R$E45B if #REGc is lower than #N$02.
 $E42D JR C,$E45B      ; }
 $E42F LD (IX+$00),C   ; Write #REGc to *#REGix+#N$00.
 $E432 LD (IX+$01),B   ; Write #REGb to *#REGix+#N$01.
 $E435 LD DE,$0101     ; #REGde=Set the sprite width/ height (#N$01/ #N$01).
 $E438 LD A,$20        ; #REGa=Sprite ID (#N$20).
 $E43A CALL $EA93      ; Call #R$EA93.
 $E43D LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $E440 LD A,($F232)    ; #REGa=*#R$F232.
 $E443 SUB B           ; #REGa-=#REGb.
 $E444 CP $02          ; {Jump to #R$E45B if #REGa is higher than #N$02.
 $E446 JR NC,$E45B     ; }
 $E448 LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $E44B LD A,($F231)    ; #REGa=*#R$F231.
 $E44E SUB C           ; #REGa-=#REGc.
 $E44F CP $02          ; {Jump to #R$E45B if #REGa is higher than #N$02.
 $E451 JR NC,$E45B     ; }
 $E453 LD A,$03        ; {Write #N$03 to *#R$FFFE.
 $E455 LD ($FFFE),A    ; }
 $E458 JP $E3A3        ; Jump to #R$E3A3.
@label=Handler_Explosion_Next
*$E45B LD DE,$0006     ; {#REGix+=#N($0006,$04,$04).
 $E45E ADD IX,DE       ; }
 $E460 POP BC          ; Restore sparks counter from the stack.
 $E461 DJNZ $E3F8      ; Decrease sparks counter by one and loop back to
                       ; #R$E3F8 until counter is zero.
 $E463 RET             ; Return.
; This spark has run its course, remove it.
@label=Handler_Explosion_Housekeep
*$E464 LD (IX+$00),$00 ; Write #N$00 to *#REGix+#N$00.
 $E468 LD A,$00        ; {Write #N$00 to *#R$FFFD.
 $E46A LD ($FFFD),A    ; }
 $E46D JR $E45B        ; Jump to #R$E45B.

; Table: Bomb
@label=TableBomb_Position
g$E46F DEFB $00,$00
 $E471 DEFB $00
 $E472 DEFB $00
 $E473 DEFB $00
 $E474 DEFB $00
@label=TableBomb_SpriteID
 $E475 DEFB $00
 $E476 DEFB $00
 $E477 DEFB $00
 $E478 DEFB $00
@label=TableBomb_Flag
 $E479 DEFB $00

; Handler: Bomb
;
; Used by the routine at #R$DEA8.
@label=Handler_Bomb
c$E47A LD A,($E479)  ; {Return if *#R$E479 is equal to #N$00.
 $E47D CP $00        ;
 $E47F RET Z         ; }
; Only continue every other frame.
 $E480 LD A,($F341)  ; #REGa=*#R$F341.
 $E483 INC A         ; Increment #REGa by one.
 $E484 AND %00000001 ; Ensure #REGa is only ever #N$00 or #N$01.
 $E486 LD ($F341),A  ; Write #REGa back to *#R$F341.
 $E489 CP $00        ; {Return if #REGa is not equal to #N$00.
 $E48B RET NZ        ; }
; Set up the bomb.
 $E48C LD HL,$924C   ; {#HTML(Write #R$934C(#N$924C) (#R$934C) to *<a
 $E48F LD ($5C36),HL ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $E492 LD A,$10      ; {Set INK: YELLOW (#N$06).
 $E494 RST $10       ;
 $E495 LD A,$06      ;
 $E497 RST $10       ; }
; The fuse burning down acts as a countdown before the explosion.
 $E498 LD A,($E475)  ; #REGa=*#R$E475.
 $E49B ADD A,$04     ; #REGa+=#N$04.
 $E49D CP $40        ; {Jump to #R$E4AF if #REGa is equal to #N$40.
 $E49F JR Z,$E4AF    ; }
 $E4A1 LD ($E475),A  ; Write the new frame ID back to *#R$E475.
; Print the bomb on the screen.
 $E4A4 LD BC,($E46F) ; #REGbc=*#R$E46F.
 $E4A8 LD DE,$0202   ; #REGde=Set the sprite width/ height (#N$02/ #N$02).
 $E4AB CALL $EA93    ; Call #R$EA93.
 $E4AE RET           ; Return.
; The bomb has been lit!
@label=IgniteBomb
*$E4AF LD BC,($E46F) ; #REGbc=*#R$E46F.
 $E4B3 LD DE,$0202   ; #REGde=Set the sprite width/ height (#N$02/ #N$02).
 $E4B6 CALL $E787    ; Call #R$E787.
 $E4B9 LD A,$00      ; {Write #N$00 to: #LIST { *#R$FFFD } { *#R$E479 } LIST#
 $E4BB LD ($FFFD),A  ;
 $E4BE LD ($E479),A  ; }
 $E4C1 LD A,($F2DB)  ; {Return if an explosion is already in-progress, only one
 $E4C4 CP $00        ; bomb can explode at a time.
 $E4C6 RET NZ        ; }
; There are #N$05 sparks, and each occupies #N$06 bytes.
 $E4C7 LD DE,$F2DB   ; {Copy #N($001E,$04,$04) bytes of data from #R$F2F9 to
 $E4CA LD HL,$F2F9   ; #R$F2DB.
 $E4CD LD BC,$001E   ;
 $E4D0 LDIR          ; }
 $E4D2 LD BC,($E46F) ; #REGbc=*#R$E46F.
 $E4D6 DEC B         ; Move down one line.
; Update each spark with the starting co-ordinates.
 $E4D7 LD IX,$F2DB   ; #REGix=#R$F2DB.
 $E4DB LD L,$05      ; #REGl=#N$05 (counter; number of sparks).
@label=SetSparksStartingPosition
*$E4DD LD (IX+$00),C ; Write #REGc to *#REGix+#N$00.
 $E4E0 LD (IX+$01),B ; Write #REGb to *#REGix+#N$01.
 $E4E3 LD DE,$0006   ; {#REGix+=#N($0006,$04,$04).
 $E4E6 ADD IX,DE     ; }
 $E4E8 DEC L         ; Decrease spark counter by one.
 $E4E9 JR NZ,$E4DD   ; Jump to #R$E4DD until all sparks have been processed.
 $E4EB LD A,$02      ; {Write #N$02 to *#R$FFFD.
 $E4ED LD ($FFFD),A  ; }
 $E4F0 RET           ; Return.

; Handler: Lifts 2
;
; Used by the routine at #R$DEA8.
@label=Handler_Lifts2
c$E4F1 LD IX,($5BE4) ; #REGix=#R$5BE4.
; Are we done?
@label=Handler_Lifts2_Loop
*$E4F5 LD A,(IX+$00) ; {Return if the terminator character has been received
 $E4F8 CP $FF        ; instead of a co-ordinate (#N$FF).
 $E4FA RET Z         ; }
 $E4FB LD A,(IX+$05) ; {Jump to #R$E531 if *#REGix+#N$05 is equal to #N$00.
 $E4FE CP $00        ;
 $E500 JR Z,$E531    ; }
 $E502 LD C,(IX+$00) ; #REGc=*#REGix+#N$00.
 $E505 LD B,(IX+$01) ; #REGb=*#REGix+#N$01.
 $E508 LD A,(IX+$03) ; {Jump to #R$E547 if *#REGix+#N$03 is equal to #N$03.
 $E50B CP $03        ;
 $E50D JR Z,$E547    ; }
 $E50F CP $02        ; {Jump to #R$E538 if *#REGix+#N$03 is equal to #N$02.
 $E511 JR Z,$E538    ; }
 $E513 CP $01        ; {Jump to #R$E554 if *#REGix+#N$03 is equal to #N$01.
 $E515 JR Z,$E554    ; }
 $E517 DEC B         ; Decrease #REGb by one.
 $E518 CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
*$E51B LD D,$04      ; #REGd=#N$04.
*$E51D LD B,(IX+$07) ; #REGb=*#REGix+#N$07.
 $E520 LD A,$FF      ; #REGa=#N$FF.
 $E522 LD HL,($5C84) ; #HTML(#REGhl=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E525 INC H         ; Increment #REGh by one.
 $E526 LD ($5C84),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E529 DEC H         ; Decrease #REGh by one.
*$E52A LD (HL),A     ; Write #REGa to *#REGhl.
 $E52B INC HL        ; Increment #REGhl by one.
 $E52C DJNZ $E52A    ; Decrease counter by one and loop back to #R$E52A until
                     ; counter is zero.
 $E52E DEC D         ; Decrease #REGd by one.
 $E52F JR NZ,$E51D   ; Jump to #R$E51D until #REGd is zero.
*$E531 LD DE,$0010   ; {#REGix+=#N($0010,$04,$04).
 $E534 ADD IX,DE     ; }
 $E536 JR $E4F5      ; Jump to #R$E4F5.
*$E538 CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E53B LD HL,($5C84) ; #HTML(#REGhl=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E53E INC H         ; {Increment #REGh by four.
 $E53F INC H         ;
 $E540 INC H         ;
 $E541 INC H         ; }
 $E542 LD ($5C84),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E545 JR $E51B      ; Jump to #R$E51B.
*$E547 CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E54A LD HL,($5C84) ; #HTML(#REGhl=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E54D INC H         ; {Increment #REGh by two.
 $E54E INC H         ; }
 $E54F LD ($5C84),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E552 JR $E51B      ; Jump to #R$E51B.
*$E554 PUSH BC       ; Stash #REGbc on the stack.
 $E555 CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E558 LD HL,($5C84) ; #HTML(#REGhl=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E55B LD A,H        ; {#REGh+=#N$06.
 $E55C ADD A,$06     ;
 $E55E LD H,A        ; }
 $E55F LD ($5C84),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E562 LD D,$02      ; #REGd=#N$02.
*$E564 LD HL,($5C84) ; #HTML(#REGhl=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E567 INC H         ; Increment #REGh by one.
 $E568 LD ($5C84),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E56B DEC H         ; Decrease #REGh by one.
 $E56C LD A,$FF      ; #REGa=#N$FF.
 $E56E LD B,(IX+$07) ; #REGb=*#REGix+#N$07.
*$E571 LD (HL),A     ; Write #REGa to *#REGhl.
 $E572 INC HL        ; Increment #REGhl by one.
 $E573 DJNZ $E571    ; Decrease counter by one and loop back to #R$E571 until
                     ; counter is zero.
 $E575 DEC D         ; Decrease #REGd by one.
 $E576 JR NZ,$E564   ; Jump to #R$E564 until #REGd is zero.
 $E578 POP BC        ; Restore #REGbc from the stack.
 $E579 DEC B         ; Decrease #REGb by one.
 $E57A CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E57D LD D,$02      ; #REGd=#N$02.
 $E57F JR $E51D      ; Jump to #R$E51D.

; Handler: Disappearing Floors
;
; Used by the routine at #R$DEA8.
@label=Handler_DisappearingFloors
c$E581 LD IX,($5BE6)   ; #REGix=#R$5BE6.
; Are we done?
@label=Handler_DisappearingFloors_Loop
*$E585 LD A,(IX+$00)   ; {Return if the terminator character has been received
 $E588 CP $FF          ; instead of a co-ordinate (#N$FF).
 $E58A RET Z           ; }
 $E58B LD A,(IX+$02)   ; #REGa=*#REGix+#N$02.
 $E58E AND %10000000   ; Keep only bit 7.
 $E590 JP Z,$E5C5      ; Jump to #R$E5C5 if the result is zero.
 $E593 LD HL,$9F6C     ; {#HTML(Write #R$A06C(#N$9F6C) (#R$A06C) to *<a
 $E596 LD ($5C36),HL   ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $E599 INC (IX+$05)    ; Increment *#REGix+#N$05 by one.
 $E59C LD A,(IX+$04)   ; {Jump to #R$E5B0 if *#REGix+#N$04 is not equal to
 $E59F CP (IX+$05)     ; *#REGix+#N$05.
 $E5A2 JR NZ,$E5B0     ; }
 $E5A4 LD A,(IX+$02)   ; #REGa=*#REGix+#N$02.
 $E5A7 AND %01111111   ; Keep only bits 0-6.
 $E5A9 LD (IX+$02),A   ; Write #REGa to *#REGix+#N$02.
 $E5AC LD (IX+$05),$00 ; Write #N$00 to *#REGix+#N$05.
*$E5B0 LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $E5B3 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $E5B6 LD A,(IX+$02)   ; #REGa=*#REGix+#N$02.
 $E5B9 AND %01111111   ; Keep only bits 0-6.
 $E5BB LD E,A          ; #REGe=Sprite width (#REGa).
 $E5BC LD D,$01        ; #REGd=Sprite height (#N$01).
 $E5BE LD A,$20        ; #REGa=base sprite ID (#N$20).
 $E5C0 CALL $EA93      ; Call #R$EA93.
 $E5C3 JR $E5ED        ; Jump to #R$E5ED.
*$E5C5 LD A,(IX+$03)   ; #REGa=*#REGix+#N$03.
 $E5C8 INC (IX+$05)    ; Increment *#REGix+#N$05 by one.
 $E5CB CP (IX+$05)     ; {Jump to #R$E5DC if #REGa is not equal to
 $E5CE JR NZ,$E5DC     ; *#REGix+#N$05.}
 $E5D0 LD A,(IX+$02)   ; #REGa=*#REGix+#N$02.
 $E5D3 OR %10000000    ; Set bit 7.
 $E5D5 LD (IX+$02),A   ; Write #REGa to *#REGix+#N$02.
 $E5D8 LD (IX+$05),$00 ; Write #N$00 to *#REGix+#N$05.
*$E5DC LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $E5DF LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $E5E2 LD A,(IX+$02)   ; #REGa=*#REGix+#N$02.
 $E5E5 AND %01111111   ; Keep only bits 0-6.
 $E5E7 LD E,A          ; #REGe=Sprite width (#REGa).
 $E5E8 LD D,$01        ; #REGd=Sprite height (#N$01).
 $E5EA CALL $E787      ; Call #R$E787.
@label=Handler_DisappearingFloors_Next
*$E5ED LD DE,$0006     ; {#REGix+=#N($0006,$04,$04).
 $E5F0 ADD IX,DE       ; }
 $E5F2 JR $E585        ; Jump to #R$E585.

; Handler: Items
;
; Used by the routine at #R$DEA8.
@label=Handler_Items
c$E5F4 LD IX,($5BE0)   ; #REGix=*#R$5BE0.
; Are we done?
@label=Handler_Items_Loop
*$E5F8 LD A,(IX+$00)   ; {Return if the terminator character has been received
 $E5FB CP $FF          ; instead of a co-ordinate (#N$FF).
 $E5FD RET Z           ; }
 $E5FE LD C,A          ; #REGc=#REGa.
 $E5FF LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $E602 LD A,(IX+$05)   ; {Jump to #R$E61A if this item has already been
 $E605 CP $00          ; "collected".
 $E607 JR Z,$E61A      ; }
 $E609 LD A,($F232)    ; #REGa=*#R$F232.
 $E60C DEC A           ; Decrease #REGa by one.
 $E60D CP B            ; {Jump to #R$E61A if #REGa is not equal to #REGb.
 $E60E JR NZ,$E61A     ; }
 $E610 LD A,($F231)    ; #REGa=*#R$F231.
 $E613 SUB C           ; #REGa-=#REGc.
 $E614 JR Z,$E621      ; {Jump to #R$E621 if #REGa is either zero or #N$FF.
 $E616 CP $FF          ;
 $E618 JR Z,$E621      ; }
@label=Handler_Items_Next
*$E61A LD DE,$0007     ; {#REGix+=#N($0007,$04,$04).
 $E61D ADD IX,DE       ; }
 $E61F JR $E5F8        ; Jump to #R$E5F8.
@label=Item_Collected
*$E621 CALL $E3C2      ; Call #R$E3C2.
 $E624 LD A,$04        ; {Write #N$04 to *#R$FFFE.
 $E626 LD ($FFFE),A    ; }
 $E629 LD A,$00        ; #REGa=#N$00.
 $E62B LD D,$02        ; {#REGde=Set the sprite width/ height (#N$02/ #N$02).
 $E62D LD E,$02        ; }
 $E62F PUSH DE         ; Stash #REGde on the stack.
 $E630 CALL $E72F      ; Call #R$E72F.
 $E633 CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E636 POP DE          ; Restore #REGde from the stack.
 $E637 LD HL,$9F6C     ; {#HTML(Write #R$A06C(#N$9F6C) (#R$A06C) to *<a
 $E63A LD ($5C36),HL   ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $E63D LD A,$20        ; #REGa=#N$20.
 $E63F CALL $EA93      ; Call #R$EA93.
 $E642 LD (IX+$05),$00 ; Write "collected" (#N$00) to  (*#REGix+#N$05).
 $E646 LD A,$10        ; {Set INK: YELLOW (#N$06).
 $E648 RST $10         ;
 $E649 LD A,$06        ;
 $E64B RST $10         ; }
 $E64C LD A,$11        ; {Set PAPER: *#R$5BD0.
 $E64E RST $10         ;
 $E64F LD A,($5BD0)    ;
 $E652 RST $10         ; }
; Restore the default ZX Spectrum font.
 $E653 LD HL,$3C00     ; {#HTML(Write <a rel="noopener nofollow"
 $E656 LD ($5C36),HL   ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                       ; (CHARSET-#N$100) to *<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $E659 LD C,$13        ; {#HTML(Set up the screen buffer location #N$13/#N$01
 $E65B LD B,$01        ; using <a rel="noopener nofollow"
 $E65D CALL $0DD9      ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                       ; }
 $E660 LD BC,($5BF4)   ; {Increment *#R$5BF4 by one.
 $E664 INC BC          ;
 $E665 LD ($5BF4),BC   ; }
 $E669 CALL $1A1B      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/1A1B.html">OUT_NUM_1</a>.)
 $E66C LD C,$05        ; {#HTML(Set up the screen buffer location #N$05/#N$01
 $E66E LD B,$01        ; using <a rel="noopener nofollow"
 $E670 CALL $0DD9      ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                       ; }
 $E673 LD BC,($5BF2)   ; {Decrease *#R$5BF2 by one.
 $E677 DEC BC          ;
 $E678 LD ($5BF2),BC   ; }
 $E67C LD A,B          ; {Jump to #R$E699 if #REGb is not equal to #N$00.
 $E67D CP $00          ;
 $E67F JR NZ,$E699     ; }
 $E681 LD A,C          ; {Jump to #R$E699 if #REGc is not equal to #N$32.
 $E682 CP $32          ;
 $E684 JR NZ,$E699     ; }
 $E686 LD A,($5BD3)    ; {Write *#R$5BD3 to *#R$5BFC.
 $E689 LD ($5BFC),A    ; }
 $E68C LD A,(IX+$00)   ; {Write *#REGix+#N$00 to *#R$5BFD.
 $E68F LD ($5BFD),A    ; }
 $E692 LD A,(IX+$01)   ; #REGa=*#REGix+#N$01.
 $E695 INC A           ; Increment #REGa by one.
 $E696 LD ($5BFE),A    ; Write #REGa to *#R$5BFE.
*$E699 LD A,C          ; {Compare #REGc with #N$00.
 $E69A CP $00          ; }
 $E69C PUSH AF         ; Stash #REGaf on the stack.
 $E69D CALL NZ,$1A1B   ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/1A1B.html">OUT_NUM_1</a>
                       ; if #REGc was not zero on line #R$E699.)
 $E6A0 LD A,$20        ; #REGa=ASCII "space" (#N$20).
 $E6A2 CALL $E6DC      ; Call #R$E6DC.
 $E6A5 POP AF          ; Restore #REGaf from the stack.
 $E6A6 RET NZ          ; Return if {} is not zero.
 $E6A7 LD A,$2D        ; {Write #N$2D to *#R$5BFF.
 $E6A9 LD ($5BFF),A    ; }
 $E6AC LD BC,$0014     ; {Write #N($0014,$04,$04) to *#R$5BFA.
 $E6AF LD ($5BFA),BC   ; }
; Restore the default ZX Spectrum font.
 $E6B3 LD HL,$3C00     ; {#HTML(Write <a rel="noopener nofollow"
 $E6B6 LD ($5C36),HL   ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                       ; (CHARSET-#N$100) to *<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $E6B9 JP $E0F7        ; Jump to #R$E0F7.

; Messaging: Find The Gold Key
@label=Messaging_FindTheGoldKey
t$E6BC DEFM "FIND THE GOLD KEY IN    SECONDS!" ; "#STR(#PC,$04,$20)".

; Print Colour Character
;
; Used by the routines at #R$DEA8, #R$DFD3, #R$E064, #R$E0A9, #R$E5F4, #R$E787,
; #R$EA93 and #R$EED7.
;
; A Character to print
@label=PrintColourCharacter
c$E6DC EXX           ; Switch to the shadow registers.
 $E6DD LD E,A        ; {#REGde'=#REGa*#N$08.
 $E6DE LD D,$00      ;
 $E6E0 SLA E         ;
 $E6E2 RL D          ;
 $E6E4 SLA E         ;
 $E6E6 RL D          ;
 $E6E8 SLA E         ;
 $E6EA RL D          ; }
 $E6EC LD HL,($5C36) ; {#HTML(#REGhl'=*<a rel="noopener nofollow"
 $E6EF ADD HL,DE     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>+#REGde'.)
                     ; }
 $E6F0 LD DE,($5C84) ; {#HTML(Increment *<a rel="noopener nofollow"
 $E6F4 INC DE        ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>
 $E6F5 LD ($5C84),DE ; by one.)}
 $E6F9 DEC DE        ; Decrease #REGde' by one.
; All character blocks are 1 x 8 bytes.
; .
; Copy the data from the current character set to the screen buffer.
 $E6FA LD B,$08      ; #REGb'=#N$08 (byte counter).
@label=PrintColourCharacter_Loop
*$E6FC LD A,(HL)     ; Fetch the byte from the character set.
 $E6FD LD (DE),A     ; Write the byte to the screen buffer.
 $E6FE INC HL        ; Increment the character set data pointer in #REGhl' by
                     ; one.
 $E6FF INC D         ; Move down one line in the screen buffer.
 $E700 DJNZ $E6FC    ; Decrease the byte counter by one and loop back to
                     ; #R$E6FC until all lines of the letter have been written
                     ; to the screen buffer.
; Calculate the attribute buffer position.
 $E702 LD BC,($5C88) ; #HTML(#REGbc'=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C88.html">S_POSN</a>.)
 $E706 LD HL,$5800   ; #REGhl'=#N$5800 (attribute buffer location).
 $E709 DEC C         ; Decrease #REGc' by one.
 $E70A LD ($5C88),BC ; #HTML(Write #REGbc' to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C88.html">S_POSN</a>.)
 $E70E INC C         ; Increment #REGc' by one.
 $E70F LD A,$21      ; {#REGe'=#N$21-#REGc'.
 $E711 SUB C         ;
 $E712 LD E,A        ; }
 $E713 LD D,$00      ; #REGd'=#N$00.
 $E715 ADD HL,DE     ; #REGhl'+=#REGde'.
 $E716 LD A,$18      ; {#REGe'=#N$18-#REGb'.
 $E718 SUB B         ;
 $E719 LD E,A        ; }
 $E71A SLA E         ; {Shift #REGe' left four positions (with carry).
 $E71C SLA E         ;
 $E71E SLA E         ;
 $E720 SLA E         ; }
 $E722 RL D          ; Rotate #REGd' left.
 $E724 SLA E         ; Shift #REGe' left (with carry).
 $E726 RL D          ; Rotate #REGd' left.
 $E728 ADD HL,DE     ; #REGhl'+=#REGde'.
 $E729 LD A,($5C8F)  ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8F.html">ATTR_T</a>.)
 $E72C LD (HL),A     ; Write #REGa to *#REGhl'.
 $E72D EXX           ; Switch back to the normal registers.
 $E72E RET           ; Return.

; Routine at E72F
;
; Used by the routines at #R$E5F4, #R$EB8D and #R$F107.
c$E72F PUSH AF       ; {Stash #REGaf, #REGbc, #REGde and #REGhl on the stack.
 $E730 PUSH BC       ;
 $E731 PUSH DE       ;
 $E732 PUSH HL       ; }
 $E733 DEC A         ; Decrease #REGa by one.
 $E734 LD ($F336),A  ; Write #REGa to *#R$F336.
 $E737 LD A,E        ; #REGa=#REGe.
 $E738 LD ($F335),A  ; Write #REGa to *#R$F335.
*$E73B LD A,($F335)  ; #REGa=*#R$F335.
 $E73E LD E,A        ; #REGe=#REGa.
 $E73F PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $E740 PUSH DE       ; }
 $E741 CALL $E762    ; Call #R$E762.
 $E744 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $E745 POP BC        ; }
*$E746 LD A,($F336)  ; #REGa=*#R$F336.
 $E749 INC A         ; Increment #REGa by one.
 $E74A CP $00        ; {Jump to #R$E751 if #REGa is equal to #N$00.
 $E74C JR Z,$E751    ; }
 $E74E LD ($F336),A  ; Write #REGa to *#R$F336.
*$E751 CALL $E804    ; Call #R$E804.
 $E754 DEC E         ; Decrease #REGe by one.
 $E755 JR NZ,$E746   ; Jump to #R$E746 until #REGe is zero.
 $E757 DEC D         ; Decrease #REGd by one.
 $E758 JR Z,$E75D    ; Jump to #R$E75D if #REGd is zero.
 $E75A DEC B         ; Decrease #REGb by one.
 $E75B JR $E73B      ; Jump to #R$E73B.
*$E75D POP HL        ; {Restore #REGhl, #REGde, #REGbc and #REGaf from the
 $E75E POP DE        ; stack.
 $E75F POP BC        ;
 $E760 POP AF        ; }
 $E761 RET           ; Return.

; Routine at E762
;
; Used by the routines at #R$E72F, #R$E787, #R$F001 and #R$F107.
c$E762 LD A,$18      ; {#REGe=#N$18-#REGb.
 $E764 SUB B         ;
 $E765 LD E,A        ; }
 $E766 LD D,$00      ; #REGd=#N$00.
 $E768 SLA E         ; {#REGde*=#N$100.
 $E76A RL D          ;
 $E76C SLA E         ;
 $E76E RL D          ;
 $E770 SLA E         ;
 $E772 RL D          ;
 $E774 SLA E         ;
 $E776 RL D          ;
 $E778 SLA E         ;
 $E77A RL D          ; }
 $E77C LD A,$21      ; {#REGl=#N$21-#REGc.
 $E77E SUB C         ;
 $E77F LD L,A        ; }
 $E780 LD H,$00      ; #REGh=#N$00.
 $E782 ADD HL,DE     ; #REGhl+=#REGde.
 $E783 LD ($F330),HL ; Write #REGhl to *#R$F330.
 $E786 RET           ; Return.

; Mask Sprite?
;
; Used by the routines at #R$E22D, #R$E3E0, #R$E47A, #R$E581 and #R$E9E2.
@label=MaskSprite
c$E787 LD HL,($5C36) ; {#HTML(Stash *<a rel="noopener nofollow"
 $E78A PUSH HL       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>
                     ; on the stack.)}
 $E78B LD HL,$8378   ; {#HTML(Write #R$8478(#N$8378) (#R$8478) to *<a
 $E78E LD ($5C36),HL ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $E791 LD A,E        ; {Write #REGe to *#R$F335.
 $E792 LD ($F335),A  ; }
*$E795 LD A,($F335)  ; {#REGe=*#R$F335.
 $E798 LD E,A        ; }
 $E799 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $E79A PUSH DE       ; }
 $E79B CALL $E762    ; Call #R$E762.
 $E79E CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E7A1 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $E7A2 POP BC        ; }
*$E7A3 PUSH DE       ; Stash #REGde on the stack.
 $E7A4 LD HL,($F330) ; {Increment *#R$F330 by one.
 $E7A7 INC HL        ;
 $E7A8 LD ($F330),HL ; }
 $E7AB DEC HL        ; Decrease #REGhl by one.
 $E7AC LD DE,$A1C4   ; {#REGhl+=#R$A1C4.
 $E7AF ADD HL,DE     ; }
 $E7B0 LD A,(HL)     ; #REGa=*#REGhl.
 $E7B1 POP DE        ; Restore #REGde from the stack.
 $E7B2 CP $00        ; {Jump to #R$E7BD if #REGa is not equal to #N$00.
 $E7B4 JR NZ,$E7BD   ; }
 $E7B6 LD A,$20      ; #REGa=#N$20.
 $E7B8 CALL $E6DC    ; Call #R$E6DC.
 $E7BB JR $E7D3      ; Jump to #R$E7D3.
*$E7BD PUSH AF       ; {Stash #REGaf and #REGaf on the stack.
 $E7BE PUSH AF       ; }
 $E7BF AND %10000000 ; Keep only bit 7.
 $E7C1 CALL NZ,$E7FB ; Call #R$E7FB not zero.
 $E7C4 POP AF        ; Restore #REGaf from the stack.
 $E7C5 AND %01111111 ; Keep only bits 0-6.
 $E7C7 RST $10       ;
 $E7C8 POP AF        ; Restore #REGaf from the stack.
 $E7C9 JR Z,$E7D3    ; Jump to #R$E7D3 if {} is zero.
 $E7CB PUSH HL       ; Stash #REGhl on the stack.
 $E7CC LD HL,$8378   ; {#HTML(Write #R$8478(#N$8378) (#R$8478) to *<a
 $E7CF LD ($5C36),HL ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $E7D2 POP HL        ; Restore #REGhl from the stack.
*$E7D3 PUSH DE       ; {Stash #REGde and #REGhl on the stack.
 $E7D4 PUSH HL       ; }
 $E7D5 LD HL,($F330) ; #REGhl=*#R$F330.
 $E7D8 DEC HL        ; Decrease #REGhl by one.
 $E7D9 LD DE,$A4E4   ; {#REGhl+=#R$A4E4.
 $E7DC ADD HL,DE     ; }
 $E7DD LD A,(HL)     ; {Jump to #R$E7EB if *#REGhl is equal to #N$00.
 $E7DE CP $00        ;
 $E7E0 JR Z,$E7EB    ; }
 $E7E2 LD DE,$5800   ; #REGde=#N$5800 (attribute buffer location).
 $E7E5 LD HL,($F330) ; #REGhl=*#R$F330.
 $E7E8 DEC HL        ; Decrease #REGhl by one.
 $E7E9 ADD HL,DE     ; #REGhl+=#REGde.
 $E7EA LD (HL),A     ; Write #REGa to *#REGhl.
*$E7EB POP HL        ; {Restore #REGhl and #REGde from the stack.
 $E7EC POP DE        ; }
 $E7ED DEC E         ; Decrease #REGe by one.
 $E7EE JR NZ,$E7A3   ; Jump to #R$E7A3 until #REGe is zero.
 $E7F0 DEC D         ; Decrease #REGd by one.
 $E7F1 JR Z,$E7F6    ; Jump to #R$E7F6 if #REGd is zero.
 $E7F3 DEC B         ; Decrease #REGb by one.
 $E7F4 JR $E795      ; Jump to #R$E795.
*$E7F6 POP HL        ; Restore #REGhl from the stack.
 $E7F7 LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $E7FA RET           ; Return.
*$E7FB PUSH HL       ; Stash #REGhl on the stack.
 $E7FC LD HL,$8678   ; {#HTML(Write #R$8778(#N$8678) (#R$8778) to *<a
 $E7FF LD ($5C36),HL ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $E802 POP HL        ; Restore #REGhl from the stack.
 $E803 RET           ; Return.

; Routine at E804
;
; Used by the routines at #R$E72F and #R$F107.
c$E804 PUSH AF       ; {Stash #REGaf, #REGde and #REGhl on the stack.
 $E805 PUSH DE       ;
 $E806 PUSH HL       ; }
 $E807 LD HL,($F330) ; {Increment *#R$F330 by one.
 $E80A INC HL        ;
 $E80B LD ($F330),HL ; }
 $E80E DEC HL        ; Decrease #REGhl by one.
 $E80F LD DE,$A1C4   ; {#REGhl+=#R$A1C4.
 $E812 ADD HL,DE     ; }
 $E813 LD (HL),A     ; Write #REGa to *#REGhl.
 $E814 LD DE,$0320   ; {#REGhl+=#N$0320.
 $E817 ADD HL,DE     ; }
 $E818 LD A,($5C8F)  ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8F.html">ATTR_T</a>.)
 $E81B LD (HL),A     ; Write #REGa to *#REGhl.
 $E81C POP HL        ; {Restore #REGhl, #REGde and #REGaf from the stack.
 $E81D POP DE        ;
 $E81E POP AF        ; }
 $E81F RET           ; Return.

; Data block at E820
b$E820 DEFB $00

; Handler: Lifts
;
; Used by the routine at #R$DEA8.
;
; .
;
; Only action lifts every other frame.
@label=Handler_Lifts
c$E821 LD A,($F334)    ; #REGa=*#R$F334.
 $E824 INC A           ; Increment #REGa by one.
 $E825 AND %00000001   ; Ensure #REGa is either #N$00 or #N$01.
 $E827 LD ($F334),A    ; Write #REGa back to *#R$F334.
 $E82A CP $01          ; {Return if #REGa is not equal to #N$01.
 $E82C RET NZ          ; }
; Set the UDG graphics pointer.
 $E82D LD HL,$F17B     ; {#HTML(Write #R$F27B(#N$F17B) (#R$F27B) to *<a
 $E830 LD ($5C36),HL   ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
; Find active lifts.
 $E833 LD IX,($5BE4)   ; #REGix=*#R$5BE4.
; Are we done?
@label=Handler_Lifts_Loop
*$E837 LD A,(IX+$00)   ; {Return if the terminator character has been received
 $E83A CP $FF          ; instead of a co-ordinate (#N$FF).
 $E83C RET Z           ; }
 $E83D LD A,(IX+$04)   ; {Jump to #R$E946 if *#REGix+#N$04 is equal to #N$00.
 $E840 CP $00          ;
 $E842 JP Z,$E946      ; }
 $E845 LD A,($F240)    ; {Jump to #R$E8B5 if *#R$F240 is not equal to #N$03.
 $E848 CP $03          ;
 $E84A JR NZ,$E8B5     ; }
 $E84C LD E,(IX+$07)   ; #REGe=*#REGix+#N$07.
 $E84F LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $E852 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $E855 LD A,($F23F)    ; #REGa=*#R$F23F.
 $E858 SUB $03         ; #REGa-=#N$03.
 $E85A CP B            ; {Jump to #R$E8B5 if #REGa is not equal to #REGb.
 $E85B JR NZ,$E8B5     ; }
 $E85D LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $E860 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $E863 PUSH BC         ; Stash #REGbc on the stack.
 $E864 CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E867 LD HL,($5C84)   ; #HTML(#REGhl=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E86A POP BC          ; Restore #REGbc from the stack.
 $E86B INC B           ; Increment #REGb by one.
 $E86C PUSH HL         ; Stash #REGhl on the stack.
 $E86D CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E870 POP HL          ; Restore #REGhl from the stack.
 $E871 LD DE,($5C84)   ; #HTML(#REGde=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E875 LD A,D          ; {#REGd+=#N$07.
 $E876 ADD A,$07       ;
 $E878 LD D,A          ; }
 $E879 LD B,(IX+$07)   ; #REGb=*#REGix+#N$07.
 $E87C LD A,(IX+$02)   ; {Jump to #R$E884 if *#REGix+#N$02 is higher than
 $E87F CP $02          ; #N$02.
 $E881 JR NC,$E884     ; }
 $E883 INC B           ; Increment #REGb by one.
*$E884 LD A,(DE)       ; #REGa=*#REGde.
 $E885 AND (HL)        ; Merge the bits from *#REGhl.
 $E886 JR NZ,$E88E     ; Jump to #R$E88E if the result is not zero.
 $E888 INC HL          ; Increment #REGhl by one.
 $E889 INC DE          ; Increment #REGde by one.
 $E88A DJNZ $E884      ; Decrease counter by one and loop back to #R$E884 until
                       ; counter is zero.
 $E88C JR $E8B5        ; Jump to #R$E8B5.
*$E88E LD A,$02        ; {Write #N$02 to *#R$E820.
 $E890 LD ($E820),A    ; }
 $E893 LD A,(IX+$04)   ; {Jump to #R$E8A4 if *#REGix+#N$04 is equal to #N$00.
 $E896 CP $00          ;
 $E898 JR Z,$E8A4      ; }
 $E89A CP $FF          ; Compare #REGa with #N$FF.
 $E89C PUSH AF         ; Stash #REGaf on the stack.
 $E89D CALL Z,$E92E    ; Call #R$E92E zero.
 $E8A0 POP AF          ; Restore #REGaf from the stack.
 $E8A1 CALL NZ,$E926   ; Call #R$E926 not zero.
*$E8A4 LD A,(IX+$05)   ; {Jump to #R$E8B5 if *#REGix+#N$05 is equal to #N$00.
 $E8A7 CP $00          ;
 $E8A9 JR Z,$E8B5      ; }
 $E8AB CP $FF          ; Compare #REGa with #N$FF.
 $E8AD PUSH AF         ; Stash #REGaf on the stack.
 $E8AE CALL Z,$E93E    ; Call #R$E93E if #REGa was equal to #N$FF on line
                       ; #R$E8AB.
 $E8B1 POP AF          ; Restore #REGaf from the stack.
 $E8B2 CALL NZ,$E936   ; Call #R$E936 if #REGa was not equal to #N$FF on line
                       ; #R$E8AB.
@label=Handler_Lifts_Next
*$E8B5 CALL $EEA6      ; Call #R$EEA6.
 $E8B8 LD A,(IX+$04)   ; {Compare *#REGix+#N$04 with #N$00.
 $E8BB CP $00          ; }
 $E8BD PUSH AF         ; Stash #REGaf on the stack.
 $E8BE CALL Z,$E901    ; Call #R$E901 if *#REGix+#N$04 was equal to #N$00 on
                       ; line #R$E8BB.
 $E8C1 POP AF          ; Restore #REGaf from the stack.
 $E8C2 CALL NZ,$E8DC   ; Call #R$E8DC if *#REGix+#N$04 was not equal to #N$00
                       ; on line #R$E8BB.
 $E8C5 LD (IX+$00),C   ; Write #REGc to *#REGix+#N$00.
 $E8C8 LD (IX+$01),B   ; Write #REGb to *#REGix+#N$01.
 $E8CB LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $E8CE LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $E8D1 CALL $EED7      ; Call #R$EED7.
 $E8D4 LD DE,$0010     ; {#REGix+=#N($0010,$04,$04).
 $E8D7 ADD IX,DE       ; }
 $E8D9 JP $E837        ; Jump to #R$E837.
*$E8DC LD A,(IX+$04)   ; {Jump to #R$E8F2 if *#REGix+#N$04 is equal to #N$FF.
 $E8DF CP $FF          ;
 $E8E1 JR Z,$E8F2      ; }
 $E8E3 LD A,(IX+$0A)   ; {Return if *#REGix+#N$0A is not equal to #REGc.
 $E8E6 CP C            ;
 $E8E7 RET NZ          ; }
 $E8E8 LD A,(IX+$0B)   ; {Return if *#REGix+#N$0B is not equal to #REGe.
 $E8EB CP E            ;
 $E8EC RET NZ          ; }
 $E8ED LD (IX+$04),$FF ; Write #N$FF to *#REGix+#N$04.
 $E8F1 RET             ; Return.
*$E8F2 LD A,(IX+$0C)   ; {Return if *#REGix+#N$0C is not equal to #REGc.
 $E8F5 CP C            ;
 $E8F6 RET NZ          ; }
 $E8F7 LD A,(IX+$0D)   ; {Return if *#REGix+#N$0D is not equal to #REGe.
 $E8FA CP E            ;
 $E8FB RET NZ          ; }
 $E8FC LD (IX+$04),$01 ; Write #N$01 to *#REGix+#N$04.
 $E900 RET             ; Return.
*$E901 LD A,(IX+$05)   ; {Jump to #R$E917 if *#REGix+#N$05 is equal to #N$FF.
 $E904 CP $FF          ;
 $E906 JR Z,$E917      ; }
 $E908 LD A,(IX+$0A)   ; {Return if *#REGix+#N$0A is not equal to #REGb.
 $E90B CP B            ;
 $E90C RET NZ          ; }
 $E90D LD A,(IX+$0B)   ; {Return if *#REGix+#N$0B is not equal to #REGd.
 $E910 CP D            ;
 $E911 RET NZ          ; }
 $E912 LD (IX+$05),$FF ; Write #N$FF to *#REGix+#N$05.
 $E916 RET             ; Return.
*$E917 LD A,(IX+$0C)   ; {Return if *#REGix+#N$0C is not equal to #REGb.
 $E91A CP B            ;
 $E91B RET NZ          ; }
 $E91C LD A,(IX+$0D)   ; {Return if *#REGix+#N$0D is not equal to #REGd.
 $E91F CP D            ;
 $E920 RET NZ          ; }
 $E921 LD (IX+$05),$01 ; Write #N$01 to *#REGix+#N$05.
 $E925 RET             ; Return.
*$E926 LD A,($F235)    ; {Increment *#R$F235 by one.
 $E929 INC A           ;
 $E92A LD ($F235),A    ; }
 $E92D RET             ; Return.
*$E92E LD A,($F235)    ; {Decrease *#R$F235 by one.
 $E931 DEC A           ;
 $E932 LD ($F235),A    ; }
 $E935 RET             ; Return.
*$E936 LD A,($F236)    ; {Increment *#R$F236 by one.
 $E939 INC A           ;
 $E93A LD ($F236),A    ; }
 $E93D RET             ; Return.
*$E93E LD A,($F236)    ; {Decrease *#R$F236 by one.
 $E941 DEC A           ;
 $E942 LD ($F236),A    ; }
 $E945 RET             ; Return.
*$E946 LD A,($F240)    ; #REGa=*#R$F240.
 $E949 INC A           ; Increment #REGa by one.
 $E94A AND %00000011   ; Keep only bits 0-1.
 $E94C CP (IX+$03)     ; {Jump to #R$E8B5 if #REGa is not equal to
 $E94F JP NZ,$E8B5     ; *#REGix+#N$03.}
 $E952 LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $E955 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $E958 LD A,(IX+$03)   ; #REGa=*#REGix+#N$03.
 $E95B CP $00          ; Compare #REGa with #N$00.
 $E95D LD A,($F23F)    ; #REGa=*#R$F23F.
 $E960 JR Z,$E963      ; Jump to #R$E963 if #REGa was equal to #N$00 on line
                       ; #R$E95B.
 $E962 DEC A           ; Decrease #REGa by one.
*$E963 SUB $02         ; #REGa-=#N$02.
 $E965 CP B            ; {Jump to #R$E8B5 if #REGa is not equal to #REGb.
 $E966 JP NZ,$E8B5     ; }
 $E969 LD A,(IX+$03)   ; #REGa=*#REGix+#N$03.
 $E96C LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $E96F LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $E972 PUSH AF         ; Stash #REGaf on the stack.
 $E973 CP $03          ; {Call #R$E9B7 if #REGa is equal to #N$03.
 $E975 CALL Z,$E9B7    ; }
 $E978 POP AF          ; Restore #REGaf from the stack.
 $E979 PUSH AF         ; Stash #REGaf on the stack.
 $E97A CP $02          ; {Call #R$E9AA if #REGa is equal to #N$02.
 $E97C CALL Z,$E9AA    ; }
 $E97F POP AF          ; Restore #REGaf from the stack.
 $E980 PUSH AF         ; Stash #REGaf on the stack.
 $E981 CP $01          ; {Call #R$E99B if #REGa is equal to #N$01.
 $E983 CALL Z,$E99B    ; }
 $E986 POP AF          ; Restore #REGaf from the stack.
 $E987 CP $00          ; {Call #R$E9C2 if #REGa is equal to #N$00.
 $E989 CALL Z,$E9C2    ; }
 $E98C LD B,(IX+$07)   ; #REGb=*#REGix+#N$07.
*$E98F LD A,(DE)       ; #REGa=*#REGde.
 $E990 AND (HL)        ; Merge the bits from *#REGhl.
 $E991 JP NZ,$E88E     ; Jump to #R$E88E if the result is not zero.
 $E994 INC HL          ; Increment #REGhl by one.
 $E995 INC DE          ; Increment #REGde by one.
 $E996 DJNZ $E98F      ; Decrease counter by one and loop back to #R$E98F until
                       ; counter is zero.
 $E998 JP $E8B5        ; Jump to #R$E8B5.
*$E99B CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E99E LD HL,($5C84)   ; #HTML(#REGhl=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E9A1 INC H           ; {Increment #REGh by five.
 $E9A2 INC H           ;
 $E9A3 INC H           ;
 $E9A4 INC H           ;
 $E9A5 INC H           ; }
 $E9A6 PUSH HL         ; {#REGde=#REGhl (using the stack).
 $E9A7 POP DE          ; }
 $E9A8 INC H           ; Increment #REGh by one.
 $E9A9 RET             ; Return.
*$E9AA CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E9AD LD HL,($5C84)   ; #HTML(#REGhl=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E9B0 INC H           ; {Increment #REGh by three.
 $E9B1 INC H           ;
 $E9B2 INC H           ; }
 $E9B3 PUSH HL         ; {#REGde=#REGhl (using the stack).
 $E9B4 POP DE          ; }
 $E9B5 INC H           ; Increment #REGh by one.
 $E9B6 RET             ; Return.
*$E9B7 CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E9BA LD HL,($5C84)   ; #HTML(#REGhl=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E9BD INC H           ; Increment #REGh by one.
 $E9BE PUSH HL         ; {#REGde=#REGhl (using the stack).
 $E9BF POP DE          ; }
 $E9C0 INC H           ; Increment #REGh by one.
 $E9C1 RET             ; Return.
*$E9C2 PUSH BC         ; Stash #REGbc on the stack.
 $E9C3 CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E9C6 POP BC          ; Restore #REGbc from the stack.
 $E9C7 LD DE,($5C84)   ; #HTML(#REGde=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E9CB LD A,D          ; {#REGd+=#N$07.
 $E9CC ADD A,$07       ;
 $E9CE LD D,A          ; }
 $E9CF PUSH DE         ; Stash #REGde on the stack.
 $E9D0 DEC B           ; Decrease #REGb by one.
 $E9D1 CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E9D4 POP DE          ; Restore #REGde from the stack.
 $E9D5 LD HL,($5C84)   ; #HTML(#REGhl=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E9D8 RET             ; Return.

; In-Game Pause
;
; Used by the routines at #R$DEA8 and #R$ED35.
@label=InGamePause
c$E9D9 LD BC,$07D0   ; #REGbc=#N$07D0.
@label=InGamePause_Loop
*$E9DC DEC BC        ; Decrease #REGbc by one.
 $E9DD LD A,B        ; {Jump to #R$E9DC until #REGbc is zero.
 $E9DE OR C          ;
 $E9DF JR NZ,$E9DC   ; }
 $E9E1 RET           ; Return.

; Routine at E9E2
;
; Used by the routines at #R$EBD8 and #R$F001.
c$E9E2 LD A,C        ; #REGa=#REGc.
 $E9E3 SUB (IX+$0D)  ; #REGa-=*#REGix+#N$0D.
 $E9E6 JR Z,$E9F4    ; Jump to #R$E9F4 if the result is zero.
 $E9E8 CP $FF        ; Compare #REGa with #N$FF.
 $E9EA PUSH AF       ; Stash #REGaf on the stack.
 $E9EB CALL Z,$EA1D  ; Call #R$EA1D was equal to #N$FF (on line #R$E9E8).
 $E9EE POP AF        ; Restore #REGaf from the stack.
 $E9EF CALL NZ,$EA38 ; Call #R$EA38 was not equal to #N$FF (on line #R$E9E8).
 $E9F2 JR $E9FF      ; Jump to #R$E9FF.
*$E9F4 LD A,E        ; {Jump to #R$E9FF if #REGe is equal to *#REGix+#N$0B.
 $E9F5 CP (IX+$0B)   ;
 $E9F8 JR Z,$E9FF    ; }
 $E9FA CP $03        ; {Call #R$EA38 if #REGe is equal to #N$03.
 $E9FC CALL Z,$EA38  ; }
*$E9FF LD A,B        ; #REGa=#REGb.
 $EA00 SUB (IX+$0E)  ; #REGa-=*#REGix+#N$0E.
 $EA03 JR Z,$EA11    ; Jump to #R$EA11 if the result is zero.
 $EA05 CP $FF        ; Compare #REGa with #N$FF.
 $EA07 PUSH AF       ; Stash #REGaf on the stack.
 $EA08 CALL Z,$EA78  ; Call #R$EA78 if #REGa was equal to #N$FF (on line
                     ; #R$EA05).
 $EA0B POP AF        ; Restore #REGaf from the stack.
 $EA0C CALL NZ,$EA58 ; Call #R$EA58 if #REGa was not equal to #N$FF (on line
                     ; #R$EA05).
 $EA0F JR $EA1C      ; Jump to #R$EA1C.
*$EA11 LD A,D        ; {Jump to #R$EA1C if #REGd is equal to *#REGix+#N$0F.
 $EA12 CP (IX+$0F)   ;
 $EA15 JR Z,$EA1C    ; }
 $EA17 CP $03        ; {Call #R$EA58 if #REGd is equal to #N$03.
 $EA19 CALL Z,$EA58  ; }
*$EA1C RET           ; Return.
*$EA1D PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $EA1E PUSH DE       ; }
 $EA1F LD C,(IX+$0D) ; #REGc=*#REGix+#N$0D.
 $EA22 LD B,(IX+$0E) ; #REGb=*#REGix+#N$0E.
 $EA25 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $EA28 LD E,$01      ; #REGe=#N$01.
 $EA2A LD A,(IX+$0F) ; {Jump to #R$EA32 if *#REGix+#N$0F is equal to #N$03.
 $EA2D CP $03        ;
 $EA2F JR Z,$EA32    ; }
 $EA31 INC D         ; Increment #REGd by one.
*$EA32 CALL $E787    ; Call #R$E787.
 $EA35 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $EA36 POP BC        ; }
 $EA37 RET           ; Return.
*$EA38 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $EA39 PUSH DE       ; }
 $EA3A LD A,(IX+$0D) ; #REGa=*#REGix+#N$0D.
 $EA3D LD C,(IX+$07) ; #REGc=*#REGix+#N$07.
 $EA40 SUB C         ; #REGa-=#REGc.
 $EA41 LD C,A        ; #REGc=#REGa.
 $EA42 LD B,(IX+$0E) ; #REGb=*#REGix+#N$0E.
 $EA45 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $EA48 LD E,$01      ; #REGe=#N$01.
 $EA4A LD A,(IX+$03) ; {Jump to #R$EA52 if *#REGix+#N$03 is equal to #N$03.
 $EA4D CP $03        ;
 $EA4F JR Z,$EA52    ; }
 $EA51 INC D         ; Increment #REGd by one.
*$EA52 CALL $E787    ; Call #R$E787.
 $EA55 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $EA56 POP BC        ; }
 $EA57 RET           ; Return.
*$EA58 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $EA59 PUSH DE       ; }
 $EA5A LD A,(IX+$0E) ; #REGa=*#REGix+#N$0E.
 $EA5D LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $EA60 SUB D         ; #REGa-=#REGd.
 $EA61 LD B,A        ; #REGb=#REGa.
 $EA62 LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $EA65 LD C,(IX+$0D) ; #REGc=*#REGix+#N$0D.
 $EA68 LD D,$01      ; #REGd=#N$01.
 $EA6A LD A,(IX+$02) ; {Jump to #R$EA72 if *#REGix+#N$02 is equal to #N$03.
 $EA6D CP $03        ;
 $EA6F JR Z,$EA72    ; }
 $EA71 INC E         ; Increment #REGe by one.
*$EA72 CALL $E787    ; Call #R$E787.
 $EA75 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $EA76 POP BC        ; }
 $EA77 RET           ; Return.
*$EA78 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $EA79 PUSH DE       ; }
 $EA7A LD C,(IX+$0D) ; #REGc=*#REGix+#N$0D.
 $EA7D LD B,(IX+$0E) ; #REGb=*#REGix+#N$0E.
 $EA80 LD D,$01      ; #REGd=#N$01.
 $EA82 LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $EA85 LD A,(IX+$0B) ; {Jump to #R$EA8D if *#REGix+#N$0B is equal to #N$03.
 $EA88 CP $03        ;
 $EA8A JR Z,$EA8D    ; }
 $EA8C INC E         ; Increment #REGe by one.
*$EA8D CALL $E787    ; Call #R$E787.
 $EA90 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $EA91 POP BC        ; }
 $EA92 RET           ; Return.

; Print Sprite
;
; Used by the routines at #R$DFD3, #R$E3E0, #R$E47A, #R$E581, #R$E5F4, #R$EB8D,
; #R$F107 and #R$F1FC.
;
; A Sprite ID
; B Vertical co-ordinate
; C Horizontal co-ordinate
; D Height (in character blocks)
; E Width (in character blocks)
@label=PrintSprite
c$EA93 PUSH HL       ; Stash #REGhl on the stack.
 $EA94 DEC A         ; Decrease #REGa by one.
 $EA95 LD ($F336),A  ; Write #REGa to *#R$F336.
 $EA98 LD A,E        ; {Write #REGe to *#R$F335.
 $EA99 LD ($F335),A  ; }
*$EA9C LD A,C        ; {Jump to #R$EACD if #REGc is lower than #N$02.
 $EA9D CP $02        ;
 $EA9F JP C,$EACD    ; }
 $EAA2 LD A,($F335)  ; {#REGe=*#R$F335.
 $EAA5 LD E,A        ; }
 $EAA6 LD A,C        ; {Jump to #R$EADE if #REGc is higher than #N$22.
 $EAA7 CP $22        ;
 $EAA9 JP NC,$EADE   ; }
*$EAAC PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $EAAD PUSH DE       ; }
 $EAAE CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $EAB1 POP DE        ; Restore #REGde from the stack.
*$EAB2 LD A,($F336)  ; {Increment *#R$F336 by one.
 $EAB5 INC A         ;
 $EAB6 LD ($F336),A  ; }
 $EAB9 CALL $E6DC    ; Call #R$E6DC.
 $EABC LD A,C        ; {Call #R$EACF if #REGc is equal to #N$02.
 $EABD CP $02        ;
 $EABF CALL Z,$EACF  ; }
 $EAC2 DEC C         ; Decrease #REGc by one.
 $EAC3 DEC E         ; Decrease #REGe by one.
 $EAC4 JR NZ,$EAB2   ; Jump to #R$EAB2 until #REGe is zero.
 $EAC6 POP BC        ; Restore #REGbc from the stack.
 $EAC7 DEC D         ; Decrease #REGd by one.
 $EAC8 JR Z,$EACD    ; Jump to #R$EACD if #REGd is zero.
 $EACA DEC B         ; Decrease #REGb by one.
 $EACB JR $EA9C      ; Jump to #R$EA9C.
*$EACD POP HL        ; Restore #REGhl from the stack.
 $EACE RET           ; Return.
*$EACF DEC E         ; Decrease #REGe by one.
 $EAD0 PUSH AF       ; Stash #REGaf on the stack.
 $EAD1 INC E         ; Increment #REGe by one.
 $EAD2 LD A,($F336)  ; {Increment *#R$F336 by one.
 $EAD5 INC A         ;
 $EAD6 LD ($F336),A  ; }
 $EAD9 POP AF        ; Restore #REGaf from the stack.
 $EADA RET Z         ; Return if *#R$F336 is zero.
 $EADB DEC E         ; Decrease #REGe by one.
 $EADC JR $EACF      ; Jump to #R$EACF.
*$EADE LD A,($F336)  ; {Increment *#R$F336 by one.
 $EAE1 INC A         ;
 $EAE2 LD ($F336),A  ; }
 $EAE5 DEC E         ; Decrease #REGe by one.
 $EAE6 JP Z,$EACD    ; Jump to #R$EACD if #REGe is zero.
 $EAE9 DEC C         ; Decrease #REGc by one.
 $EAEA LD A,C        ; {Jump to #R$EAAC if #REGc is higher than #N$22.
 $EAEB CP $22        ;
 $EAED JR NC,$EAAC   ; }
 $EAEF JR $EADE      ; Jump to #R$EADE.
 $EAF1 LD B,$18      ; {#HTML(Clear the bottom #N$18 lines using <a
 $EAF3 CALL $0E44    ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                     ; }
 $EAF6 LD BC,$0640   ; #REGbc=#N$0640.
 $EAF9 LD HL,$A1C4   ; #REGhl=#R$A1C4.
*$EAFC XOR A         ; {Write #N$00 to *#REGhl.
 $EAFD LD (HL),A     ; }
 $EAFE INC HL        ; Increment #REGhl by one.
 $EAFF DEC BC        ; Decrease #REGbc by one.
 $EB00 LD A,B        ; {Jump to #R$EAFC until #REGbc is zero.
 $EB01 OR C          ;
 $EB02 JR NZ,$EAFC   ; }
 $EB04 RET           ; Return.

; Player: Move Right
;
; Used by the routines at #R$E30B and #R$ED35.
;
; IX On entry will be set to #R$F231
@label=PlayerMoveRight
c$EB05 LD A,(IX+$11)   ; {Return if *#REGix+#N$11 is equal to #N$02.
 $EB08 CP $02          ;
 $EB0A RET Z           ; }
 $EB0B CP $03          ; {Jump to #R$EB26 if *#REGix+#N$11 is not equal to
 $EB0D JR NZ,$EB26     ; #N$03.}
 $EB0F LD A,(IX+$03)   ; {Return if *#REGix+#N$03 is not equal to #N$03.
 $EB12 CP $03          ;
 $EB14 RET NZ          ; }
 $EB15 LD A,$FF        ; {Write #N$FF to *#R$F32D.
 $EB17 LD ($F32D),A    ; }
 $EB1A LD A,(IX+$01)   ; {Jump to #R$EB26 if *#REGix+#N$01 is equal to
 $EB1D CP (IX+$12)     ; *#REGix+#N$12.
 $EB20 JR Z,$EB26      ; }
 $EB22 CP (IX+$13)     ; {Return if *#REGix+#N$01 is not equal to
 $EB25 RET NZ          ; *#REGix+#N$13.}
*$EB26 LD A,(IX+$11)   ; {Jump to #R$EB35 if *#REGix+#N$11 is equal to #N$13.
 $EB29 CP $13          ;
 $EB2B JR Z,$EB35      ; }
 $EB2D LD (IX+$11),$13 ; Write #N$13 to *#REGix+#N$11.
 $EB31 LD (IX+$06),$1A ; Write #N$1A to *#REGix+#N$06.
*$EB35 LD A,(IX+$06)   ; #REGa=*#REGix+#N$06.
 $EB38 ADD A,$06       ; #REGa+=#N$06.
 $EB3A LD (IX+$06),A   ; Write #REGa to *#REGix+#N$06.
 $EB3D CP $50          ; {Jump to #R$EB45 if #REGa is not equal to #N$50.
 $EB3F JR NZ,$EB45     ; }
 $EB41 LD (IX+$06),$20 ; Write #N$20 to *#REGix+#N$06.
*$EB45 DEC (IX+$04)    ; Decrease *#REGix+#N$04 by one.
 $EB48 RET             ; Return.

; Player: Move Left
;
; Used by the routines at #R$E30B and #R$ED35.
;
; IX On entry will be set to #R$F231
@label=PlayerMoveLeft
c$EB49 LD A,(IX+$11)   ; {Return if *#REGix+#N$11 is equal to #N$02.
 $EB4C CP $02          ;
 $EB4E RET Z           ; }
 $EB4F CP $03          ; {Jump to #R$EB6A if *#REGix+#N$11 is not equal to
 $EB51 JR NZ,$EB6A     ; #N$03.}
 $EB53 LD A,(IX+$03)   ; {Return if *#REGix+#N$03 is not equal to #N$03.
 $EB56 CP $03          ;
 $EB58 RET NZ          ; }
 $EB59 LD A,$FF        ; {Write #N$FF to *#R$F32D.
 $EB5B LD ($F32D),A    ; }
 $EB5E LD A,(IX+$01)   ; {Jump to #R$EB6A if *#REGix+#N$01 is equal to
 $EB61 CP (IX+$12)     ; *#REGix+#N$12.
 $EB64 JR Z,$EB6A      ; }
 $EB66 CP (IX+$13)     ; {Return if *#REGix+#N$01 is not equal to
 $EB69 RET NZ          ; *#REGix+#N$13.}
*$EB6A LD A,(IX+$11)   ; {Jump to #R$EB79 if *#REGix+#N$11 is equal to #N$04.
 $EB6D CP $04          ;
 $EB6F JR Z,$EB79      ; }
 $EB71 LD (IX+$11),$04 ; Write #N$04 to *#REGix+#N$11.
 $EB75 LD (IX+$06),$4A ; Write #N$4A to *#REGix+#N$06.
*$EB79 LD A,(IX+$06)   ; #REGa=*#REGix+#N$06.
 $EB7C ADD A,$06       ; #REGa+=#N$06.
 $EB7E LD (IX+$06),A   ; Write #REGa to *#REGix+#N$06.
 $EB81 CP $80          ; {Jump to #R$EB89 if #REGa is not equal to #N$80.
 $EB83 JR NZ,$EB89     ; }
 $EB85 LD (IX+$06),$50 ; Write #N$50 to *#REGix+#N$06.
*$EB89 INC (IX+$04)    ; Increment *#REGix+#N$04 by one.
 $EB8C RET             ; Return.

; Handler: Unlock Door
;
; Used by the routine at #R$EBD8.
@label=Handler_UnlockDoor
c$EB8D LD A,$05        ; {Write #N$05 to *#R$FFFE.
 $EB8F LD ($FFFE),A    ; }
 $EB92 PUSH IX         ; Stash #REGix on the stack.
 $EB94 PUSH HL         ; {#REGix=#REGhl (using the stack).
 $EB95 POP IX          ; }
 $EB97 PUSH BC         ; {Stash #REGbc and #REGde on the stack.
 $EB98 PUSH DE         ; }
 $EB99 LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $EB9C LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $EB9F DEC B           ; Decrease #REGb by one.
 $EBA0 LD (IX+$05),$00 ; Write #N$00 to *#REGix+#N$05.
 $EBA4 PUSH BC         ; Stash #REGbc on the stack.
 $EBA5 PUSH IX         ; Stash #REGix on the stack.
 $EBA7 LD DE,$0032     ; #REGde=#N($0032,$04,$04).
 $EBAA LD HL,$00C8     ; #REGhl=#N($00C8,$04,$04).
 $EBAD CALL $03B5      ; #HTML(Call <a
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/03B5.html">BEEPER</a>.)
 $EBB0 POP IX          ; Restore #REGix from the stack.
 $EBB2 POP BC          ; Restore #REGbc from the stack.
 $EBB3 LD HL,($5C36)   ; {#HTML(Stash *<a rel="noopener nofollow"
 $EBB6 PUSH HL         ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>
                       ; on the stack.)}
 $EBB7 LD HL,$9F6C     ; {#HTML(Write #R$A06C(#N$9F6C) (#R$A06C) to *<a
 $EBBA LD ($5C36),HL   ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $EBBD LD D,$04        ; {#REGde=Set the sprite width/ height (#N$01/ #N$04).
 $EBBF LD E,$01        ; }
 $EBC1 LD A,$00        ; #REGa=#N$00.
 $EBC3 CALL $E72F      ; Call #R$E72F.
 $EBC6 LD A,$20        ; #REGa=#N$20.
 $EBC8 CALL $EA93      ; Call #R$EA93.
 $EBCB POP HL          ; {#HTML(Restore the previous value of *<a rel="noopener
 $EBCC LD ($5C36),HL   ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>
                       ; from the stack.)}
 $EBCF POP DE          ; {Restore #REGde, #REGbc and #REGix from the stack.
 $EBD0 POP BC          ;
 $EBD1 POP IX          ; }
 $EBD3 LD (IX+$10),$00 ; Write #N$00 to *#REGix+#N$10.
 $EBD7 RET             ; Return.

; Handler: Player
;
; Used by the routine at #R$DEA8.
@label=Handler_Player
c$EBD8 LD IX,$F231     ; #REGix=#R$F231.
 $EBDC LD A,$10        ; {Set INK: CYAN (#N$05).
 $EBDE RST $10         ;
 $EBDF LD A,$05        ;
 $EBE1 RST $10         ; }
 $EBE2 XOR A           ; {Write #N$00 to *#R$F32F.
 $EBE3 LD ($F32F),A    ; }
 $EBE6 LD A,($E820)    ; {Jump to #R$EC49 if *#R$E820 is not equal to #N$00.
 $EBE9 CP $00          ;
 $EBEB JR NZ,$EC49     ; }
 $EBED LD A,(IX+$11)   ; {Jump to #R$EC49 if *#REGix+#N$11 is equal to #N$03.
 $EBF0 CP $03          ;
 $EBF2 JR Z,$EC49      ; }
 $EBF4 LD A,(IX+$05)   ; {Jump to #R$EC49 if *#REGix+#N$05 is not equal to
 $EBF7 CP $00          ; #N$00.
 $EBF9 JR NZ,$EC49     ; }
 $EBFB LD A,(IX+$03)   ; {Jump to #R$EC3D if *#REGix+#N$03 is not equal to
 $EBFE CP $03          ; #N$03.
 $EC00 JP NZ,$EC3D     ; }
 $EC03 LD A,(IX+$01)   ; {Jump to #R$EC1A if *#REGix+#N$01 is equal to #N$1A.
 $EC06 CP $1A          ;
 $EC08 JR Z,$EC1A      ; }
 $EC0A CP $15          ; {Jump to #R$EC1A if *#REGix+#N$01 is equal to #N$15.
 $EC0C JR Z,$EC1A      ; }
 $EC0E CP $10          ; {Jump to #R$EC1A if *#REGix+#N$01 is equal to #N$10.
 $EC10 JR Z,$EC1A      ; }
 $EC12 CP $0B          ; {Jump to #R$EC1A if *#REGix+#N$01 is equal to #N$0B.
 $EC14 JR Z,$EC1A      ; }
 $EC16 CP $06          ; {Jump to #R$EC3D if *#REGix+#N$01 is not equal to
 $EC18 JR NZ,$EC3D     ; #N$06.}
*$EC1A LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $EC1D LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $EC20 DEC B           ; {Decrease #REGb by three.
 $EC21 DEC B           ;
 $EC22 DEC B           ; }
 $EC23 CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $EC26 LD HL,($5C84)   ; #HTML(#REGhl=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $EC29 LD A,($F32C)    ; #REGa=*#R$F32C.
 $EC2C AND (HL)        ; Merge the bits from *#REGhl.
 $EC2D JR NZ,$EC49     ; Jump to #R$EC49 if the result is not zero.
 $EC2F INC HL          ; Increment #REGhl by one.
 $EC30 LD A,($F32D)    ; #REGa=*#R$F32D.
 $EC33 AND (HL)        ; Merge the bits from *#REGhl.
 $EC34 JR NZ,$EC49     ; Jump to #R$EC49 if the result is not zero.
 $EC36 INC HL          ; Increment #REGhl by one.
 $EC37 LD A,($F32E)    ; #REGa=*#R$F32E.
 $EC3A AND (HL)        ; Merge the bits from *#REGhl.
 $EC3B JR NZ,$EC49     ; Jump to #R$EC49 if the result is not zero.
*$EC3D DEC (IX+$05)    ; Decrease *#REGix+#N$05 by one.
 $EC40 LD A,($F33A)    ; {Increment *#R$F33A by one.
 $EC43 INC A           ;
 $EC44 LD ($F33A),A    ; }
 $EC47 JR $EC59        ; Jump to #R$EC59.
*$EC49 LD A,($F33F)    ; #REGa=*#R$F33F.
 $EC4C LD ($FFFC),A    ; Write #REGa to *#R$FFFC.
 $EC4F CP $00          ; {Jump to #R$E3A4 if #REGa is not equal to #N$00.
 $EC51 JP NZ,$E3A4     ; }
 $EC54 LD A,$00        ; {Write #N$00 to *#R$F33A.
 $EC56 LD ($F33A),A    ; }
*$EC59 CALL $EEA6      ; Call #R$EEA6.
 $EC5C LD A,C          ; {Jump to #R$ED10 if #REGc is equal to #N$22.
 $EC5D CP $22          ;
 $EC5F JP Z,$ED10      ; }
 $EC62 CP $03          ; {Jump to #R$ED10 if #REGc is equal to #N$03.
 $EC64 JP Z,$ED10      ; }
 $EC67 LD A,B          ; {Jump to #R$ED10 if #REGb is equal to #N$18.
 $EC68 CP $18          ;
 $EC6A JP Z,$ED10      ; }
 $EC6D CP $04          ; {Jump to #R$E3A4 if #REGb is equal to #N$04.
 $EC6F JP Z,$E3A4      ; }
 $EC72 LD A,C          ; {Jump to #R$EC84 if #REGc is not equal to
 $EC73 CP (IX+$00)     ; *#REGix+#N$00.
 $EC76 JR NZ,$EC84     ; }
 $EC78 LD A,B          ; {Jump to #R$EC84 if #REGb is not equal to
 $EC79 CP (IX+$01)     ; *#REGix+#N$01.
 $EC7C JR NZ,$EC84     ; }
 $EC7E LD A,(IX+$03)   ; {Jump to #R$ECA5 if *#REGix+#N$03 is equal to #REGd.
 $EC81 CP D            ;
 $EC82 JR Z,$ECA5      ; }
*$EC84 LD A,$01        ; {Write #N$01 to *#R$F32F.
 $EC86 LD ($F32F),A    ; }
 $EC89 PUSH DE         ; {Stash #REGde and #REGbc on the stack.
 $EC8A PUSH BC         ; }
 $EC8B LD A,(IX+$11)   ; {Jump to #R$EC94 if *#REGix+#N$11 is not equal to
 $EC8E CP $13          ; #N$13.
 $EC90 JR NZ,$EC94     ; }
 $EC92 DEC C           ; {Decrease #REGc by two.
 $EC93 DEC C           ; }
*$EC94 CALL $F1AF      ; Call #R$F1AF.
 $EC97 POP BC          ; {Restore #REGbc and #REGde from the stack.
 $EC98 POP DE          ; }
 $EC99 CP $FF          ; {Jump to #R$ECA5 if #REGa is equal to #N$FF.
 $EC9B JR Z,$ECA5      ; }
; See #POKE#walkthroughDoors(Walkthrough All Doors).
 $EC9D CP (IX+$10)     ; {Jump to #R$ED10 if #REGa is not equal to
 $ECA0 JR NZ,$ED10     ; *#REGix+#N$10.}
 $ECA2 CALL $EB8D      ; Call #R$EB8D.
*$ECA5 LD (IX+$00),C   ; Write #REGc to *#REGix+#N$00.
 $ECA8 LD (IX+$01),B   ; Write #REGb to *#REGix+#N$01.
 $ECAB LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $ECAE LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $ECB1 PUSH DE         ; Stash #REGde on the stack.
 $ECB2 CALL $E9E2      ; Call #R$E9E2.
 $ECB5 POP DE          ; Restore #REGde from the stack.
 $ECB6 LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $ECB9 LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $ECBC LD A,($F33A)    ; {Call #R$ED19 if *#R$F33A is higher than #N$08.
 $ECBF CP $08          ;
 $ECC1 CALL NC,$ED19   ; }
 $ECC4 LD HL,$8978     ; {#HTML(Write #R$8A78(#N$8978) (#R$8A78) to *<a
 $ECC7 LD ($5C36),HL   ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $ECCA CALL $EED7      ; Call #R$EED7.
 $ECCD LD A,($A10B)    ; {Write *#R$A10B to *#R$F32C.
 $ECD0 LD ($F32C),A    ; }
 $ECD3 LD A,($A12B)    ; {Write *#R$A12B to *#R$F32D.
 $ECD6 LD ($F32D),A    ; }
 $ECD9 LD A,($A14B)    ; {Write *#R$A14B to *#R$F32E.
 $ECDC LD ($F32E),A    ; }
 $ECDF LD A,(IX+$00)   ; {Write *#REGix+#N$00 to *#REGix+#N$0D.
 $ECE2 LD (IX+$0D),A   ; }
 $ECE5 LD A,(IX+$01)   ; {Write *#REGix+#N$01 to *#REGix+#N$0E.
 $ECE8 LD (IX+$0E),A   ; }
 $ECEB LD A,(IX+$03)   ; {Write *#REGix+#N$03 to *#REGix+#N$0F.
 $ECEE LD (IX+$0F),A   ; }
 $ECF1 LD A,(IX+$02)   ; {Write *#REGix+#N$02 to *#REGix+#N$0B.
 $ECF4 LD (IX+$0B),A   ; }
 $ECF7 LD A,($F32F)    ; {Jump to #R$ED10 if *#R$F32F is equal to #N$00.
 $ECFA CP $00          ;
 $ECFC JR Z,$ED10      ; }
 $ECFE LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $ED01 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $ED04 LD A,(IX+$11)   ; {Jump to #R$ED0D if *#REGix+#N$11 is not equal to
 $ED07 CP $13          ; #N$13.
 $ED09 JR NZ,$ED0D     ; }
 $ED0B DEC C           ; {Decrease #REGc by two.
 $ED0C DEC C           ; }
*$ED0D CALL $F107      ; Call #R$F107.
*$ED10 LD (IX+$04),$00 ; Write #N$00 to *#REGix+#N$04.
 $ED14 LD (IX+$05),$00 ; Write #N$00 to *#REGix+#N$05.
 $ED18 RET             ; Return.
*$ED19 LD A,$01        ; {Write #N$01 to *#R$F33F.
 $ED1B LD ($F33F),A    ; }
 $ED1E LD (IX+$11),$02 ; Write #N$02 to *#REGix+#N$11.
 $ED22 LD A,(IX+$06)   ; {Jump to #R$ED2F if *#REGix+#N$06 is lower than #N$9E.
 $ED25 CP $9E          ;
 $ED27 JR C,$ED2F      ; }
 $ED29 ADD A,$06       ; #REGa+=#N$06.
 $ED2B CP $B0          ; {Jump to #R$ED31 if #REGa is not equal to #N$B0.
 $ED2D JR NZ,$ED31     ; }
*$ED2F LD A,$9E        ; {Write #N$9E to *#REGix+#N$06.
*$ED31 LD (IX+$06),A   ; }
 $ED34 RET             ; Return.

; Player Controls
;
; Used by the routine at #R$DEA8.
;
; .
;
; See #R$D579.
@label=PlayerControls
c$ED35 CALL $028E    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $ED38 LD A,($5BF0)  ; {Jump to #R$ED46 if *#R$5BF0 is not set to "Demo Mode"
 $ED3B CP $03        ; (#N$03).
 $ED3D JR NZ,$ED46   ; }
 $ED3F LD A,E        ; #REGa=the keypress.
 $ED40 CP $FF        ; {Return if no keys have been pressed.
 $ED42 RET Z         ; }
 $ED43 JP $ED8F      ; Jump to #R$ED8F.
; All player controls directly alter the user-defined keys except for
; (obviously) the Kempston joystick.
@label=Check_PlayerControls
*$ED46 LD IX,$F231   ; #REGix=#R$F231.
 $ED4A LD A,E        ; #REGa=the keypress.
; Check against #R$5BEB.
 $ED4B LD HL,$5BEB   ; Check the first user-defined key at #R$5BEB.
 $ED4E CP (HL)       ; {Jump to #R$EB49 if "left" has been pressed.
 $ED4F JP Z,$EB49    ; }
; Check against #R$5BEC.
 $ED52 INC HL        ; Check the next user-defined key.
 $ED53 CP (HL)       ; {Jump to #R$EB05 if "right" has been pressed.
 $ED54 JP Z,$EB05    ; }
; Check against #R$5BED.
 $ED57 INC HL        ; Check the next user-defined key.
 $ED58 CP (HL)       ; {Jump to #R$EE08 if "up" has been pressed.
 $ED59 JP Z,$EE08    ; }
; Check against #R$5BEE.
 $ED5C INC HL        ; Check the next user-defined key.
 $ED5D CP (HL)       ; {Jump to #R$ED9A if "down" has been pressed.
 $ED5E JP Z,$ED9A    ; }
; Check against #R$5BEF.
 $ED61 INC HL        ; Check the next user-defined key.
 $ED62 CP (HL)       ; {Jump to #R$EE5B if "fire" has been pressed.
 $ED63 JP Z,$EE5B    ; }
; Toggle the music on/ off - I wish I knew this in 1984!
 $ED66 CP $10        ; {Jump to #R$ED7D if #REGa is equal to #N$10.
 $ED68 JP Z,$ED7D    ; }
; Was the game paused?
 $ED6B CP $22        ; {Return if #REGa is not equal to #N$22.
 $ED6D RET NZ        ; }
; Handle the game being paused.
 $ED6E DI            ; Disable interrupts.
@label=InGamePauseLoop
*$ED6F CALL $E9D9    ; Call #R$E9D9.
 $ED72 CALL $028E    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $ED75 LD A,E        ; {Jump to #R$ED6F if no keys have been pressed.
 $ED76 CP $FF        ;
 $ED78 JP Z,$ED6F    ; }
 $ED7B EI            ; Re-enable interrupts.
 $ED7C RET           ; Return.

; In-Game Toggle Music
;
; Used by the routine at #R$ED35.
;
; .
;
; A clone in functionality of #R$D5B0, just the check is the opposite way round
; and we return instead of jumping.
@label=InGame_ToggleMusic
c$ED7D LD A,($FFF8)  ; {Jump to #R$ED8A if *#R$FFF8 is equal to #N$01.
 $ED80 CP $01        ;
 $ED82 JR Z,$ED8A    ; }
 $ED84 LD A,$01      ; {Write ON (#N$01) to *#R$FFF8.
 $ED86 LD ($FFF8),A  ; }
 $ED89 RET           ; Return.
@label=ToggleMusicOff
*$ED8A XOR A         ; {Write OFF (#N$00) to *#R$FFF8.
 $ED8B LD ($FFF8),A  ; }
 $ED8E RET           ; Return.

; Routine at ED8F
;
; Used by the routines at #R$DEA8, #R$E30B, #R$E361 and #R$ED35.
c$ED8F POP BC        ; Restore #REGbc from the stack.
; Restore the default ZX Spectrum font.
 $ED90 LD HL,$3C00   ; {#HTML(Write <a rel="noopener nofollow"
 $ED93 LD ($5C36),HL ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                     ; (CHARSET-#N$100) to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $ED96 CALL $E058    ; Call #R$E058.
 $ED99 RET           ; Return.

; Handler: Ladders Descending
;
; Used by the routines at #R$E30B and #R$ED35.
;
; IX On entry will be set to #R$F231
@label=Handler_LaddersDescending
c$ED9A LD A,(IX+$11)   ; {Jump to #R$EDED if *#REGix+#N$11 is equal to #N$03.
 $ED9D CP $03          ;
 $ED9F JR Z,$EDED      ; }
 $EDA1 LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $EDA4 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $EDA7 LD HL,($5BD8)   ; #REGhl=*#R$5BD8.
@label=Handler_LaddersDescending_Loop
*$EDAA LD A,(HL)       ; {Return if *#REGhl is equal to #N$FF.
 $EDAB CP $FF          ;
 $EDAD RET Z           ; }
 $EDAE INC HL          ; Increment #REGhl by one.
 $EDAF CP C            ; {Jump to #R$EDB5 if #REGa is equal to #REGc.
 $EDB0 JR Z,$EDB5      ; }
 $EDB2 INC HL          ; Increment #REGhl by one.
 $EDB3 JR $EDAA        ; Jump to #R$EDAA.
@label=Action_LadderDescend
*$EDB5 LD A,(HL)       ; #REGa=*#REGhl.
 $EDB6 DEC A           ; {Decrease #REGa by two.
 $EDB7 DEC A           ; }
 $EDB8 LD (IX+$13),A   ; Write #REGa to *#REGix+#N$13.
 $EDBB ADD A,$05       ; #REGa+=#N$05.
 $EDBD LD (IX+$12),A   ; Write #REGa to *#REGix+#N$12.
 $EDC0 INC HL          ; Increment #REGhl by one.
 $EDC1 SUB B           ; #REGa-=#REGb.
 $EDC2 CP $04          ; {Jump to #R$EDAA if #REGa is higher than #N$04.
 $EDC4 JR NC,$EDAA     ; }
 $EDC6 LD A,(IX+$11)   ; {Jump to #R$EDD5 if *#REGix+#N$11 is equal to #N$03.
 $EDC9 CP $03          ;
 $EDCB JR Z,$EDD5      ; }
; Write the frame before the player sprite we actually want (#R$8D78(#N$80)) to be the active frame.
; This is because the first thing to occur is to add #N$06 to it, so it'll then be correct.
 $EDCD LD (IX+$06),$7A ; Write #R$8D48(#N$7A) to *#REGix+#N$06 (*#R$F237).
 $EDD1 LD (IX+$11),$03 ; Write #N$03 to *#REGix+#N$11.
@label=AnimateDescending
*$EDD5 LD A,(IX+$06)   ; {Increment *#REGix+#N$06 (*#R$F237) by #N$06.
 $EDD8 ADD A,$06       ;
 $EDDA LD (IX+$06),A   ; }
 $EDDD CP $98          ; {Jump to #R$EDE5 if the frame is within the boundaries of the frames
 $EDDF JR NZ,$EDE5     ; available for this animation (frame ID #R$8E38(#N$98) is the first frame of the next animation).
                       ; }
; Reset the climbing-down player sprite to the first frame in the animation.
 $EDE1 LD (IX+$06),$80 ; Write #R$8D78(#N$80) to *#REGix+#N$06 (*#R$F237).
@label=SkipResetDescendingFrame
*$EDE5 DEC (IX+$05)    ; Decrease *#REGix+#N$05 by one.
 $EDE8 LD (IX+$02),$03 ; Write #N$03 to *#REGix+#N$02.
 $EDEC RET             ; Return.
*$EDED LD A,(IX+$01)   ; {Jump to #R$EDD5 if *#REGix+#N$01 is not equal to
 $EDF0 CP (IX+$13)     ; *#REGix+#N$13.
 $EDF3 JR NZ,$EDD5     ; }
 $EDF5 RET             ; Return.
; This entry point is used by the routine at #R$EE08.
*$EDF6 LD A,(IX+$12)   ; {Jump to #R$EE42 if *#REGix+#N$01 is not equal to
 $EDF9 LD B,A          ; *#REGix+#N$12.
 $EDFA LD A,(IX+$01)   ;
 $EDFD CP B            ;
 $EDFE JR NZ,$EE42     ; }
 $EE00 LD A,(IX+$03)   ; {Jump to #R$EE42 if *#REGix+#N$03 is not equal to
 $EE03 CP $03          ; #N$03.
 $EE05 JR NZ,$EE42     ; }
 $EE07 RET             ; Return.

; Handler: Ladders Ascending
;
; Used by the routines at #R$E30B and #R$ED35.
;
; IX On entry will be set to #R$F231
@label=Handler_LaddersAscending
c$EE08 LD A,(IX+$11)   ; {Jump to #R$EDF6 if *#REGix+#N$11 is equal to #N$03.
 $EE0B CP $03          ;
 $EE0D JR Z,$EDF6      ; }
 $EE0F LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $EE12 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $EE15 LD HL,($5BD8)   ; #REGhl=*#R$5BD8.
@label=Handler_LaddersAscending_Loop
*$EE18 LD A,(HL)       ; {Return if *#REGhl is equal to #N$FF.
 $EE19 CP $FF          ;
 $EE1B RET Z           ; }
 $EE1C INC HL          ; Increment #REGhl by one.
 $EE1D CP C            ; {Jump to #R$EE23 if #REGa is equal to #REGc.
 $EE1E JR Z,$EE23      ; }
 $EE20 INC HL          ; Increment #REGhl by one.
 $EE21 JR $EE18        ; Jump to #R$EE18.
@label=Action_LadderAscend
*$EE23 LD A,(HL)       ; #REGa=*#REGhl.
 $EE24 INC HL          ; Increment #REGhl by one.
 $EE25 DEC A           ; {Decrease #REGa by two.
 $EE26 DEC A           ; }
 $EE27 CP B            ; {Jump to #R$EE18 if #REGa is not equal to #REGb.
 $EE28 JR NZ,$EE18     ; }
 $EE2A LD (IX+$13),A   ; Write #REGa to *#REGix+#N$13.
 $EE2D ADD A,$05       ; #REGa+=#N$05.
 $EE2F LD (IX+$12),A   ; Write #REGa to *#REGix+#N$12.
 $EE32 INC HL          ; Increment #REGhl by one.
 $EE33 LD A,(IX+$11)   ; {Jump to #R$EE42 if *#REGix+#N$11 is equal to #N$03.
 $EE36 CP $03          ;
 $EE38 JR Z,$EE42      ; }
; Write the frame after the player sprite we actually want (#R$8E08(#N$92)) to be the active frame.
; This is because the first thing to occur is to subtract #N$06 from it, so it'll then be correct.
 $EE3A LD (IX+$06),$98 ; Write #R$8E38(#N$98) to *#REGix+#N$06 (*#R$F237).
 $EE3E LD (IX+$11),$03 ; Write #N$03 to *#REGix+#N$11.
; This entry point is used by the routine at #R$ED9A.
@label=AnimateAscending
*$EE42 LD A,(IX+$06)   ; {Decrease *#REGix+#N$06 (*#R$F237) by #N$06.
 $EE45 SUB $06         ;
 $EE47 LD (IX+$06),A   ; }
 $EE4A CP $7A          ; {Jump to #R$EE52 if the frame is within the boundaries of the frames
 $EE4C JR NZ,$EE52     ; available for this animation (frame ID #R$8D48(#N$7A) is the first frame of the next animation).
                       ; }
; Reset the climbing-up player sprite to the first frame in the animation.
 $EE4E LD (IX+$06),$92 ; Write #R$8E08(#N$92) to *#REGix+#N$06 (*#R$F237).
@label=SkipResetAscendingFrame
*$EE52 LD (IX+$05),$01 ; Write #N$01 to *#REGix+#N$05 (*#R$F236).
 $EE56 LD (IX+$02),$03 ; Write #N$03 to *#REGix+#N$02 (*#R$F233).
 $EE5A RET             ; Return.

; Handler: Doors
;
; Used by the routines at #R$E30B and #R$ED35.
@label=Handler_Doors
c$EE5B LD IX,($5BD6) ; #REGix=*#R$5BD6.
 $EE5F LD BC,($F231) ; #REGbc=*#R$F231.
; Are we done?
@label=Handler_Doors_Loop
*$EE63 LD A,(IX+$00) ; {Return if the terminator character has been received
 $EE66 CP $FF        ; instead of a co-ordinate (#N$FF).
 $EE68 RET Z         ; }
 $EE69 SUB C         ; #REGa-=#REGc.
 $EE6A CP $02        ; {Jump to #R$EE75 if #REGa is higher than #N$02.
 $EE6C JR NC,$EE75   ; }
 $EE6E LD A,(IX+$01) ; #REGa=*#REGix+#N$01.
 $EE71 DEC A         ; Decrease #REGa by one.
 $EE72 CP B          ; {Jump to #R$EE7C if #REGa is equal to #REGb.
 $EE73 JR Z,$EE7C    ; }
@label=Handler_Doors_Next
*$EE75 LD DE,$0004   ; {#REGix+=#N($0004,$04,$04).
 $EE78 ADD IX,DE     ; }
 $EE7A JR $EE63      ; Jump to #R$EE63.
*$EE7C LD A,(IX+$03) ; {Call #R$E361 if *#REGix+#N$03 is equal to #N$15.
 $EE7F CP $15        ;
 $EE81 CALL Z,$E361  ; }
; This entry point is used by the routine at #R$DEA8.
@label=ChangeRoom
*$EE84 LD ($5BD3),A  ; Write #REGa to *#R$5BD3.
 $EE87 LD A,$00      ; {Write #N$00 to: #LIST
 $EE89 LD ($F241),A  ; { *#R$F241 }
 $EE8C LD ($F2DB),A  ; { *#R$F2DB }
 $EE8F LD ($E479),A  ; { *#R$E479 }
 $EE92 LD ($F31C),A  ; { *#R$F31C }
                     ; LIST#}
 $EE95 LD A,$01      ; {Write #N$01 to *#R$F242.
 $EE97 LD ($F242),A  ; }
; Write the front-facing player sprite to be the active frame.
; .
; This ensures the player appears to be emerging from the door.
 $EE9A LD A,$98      ; {Write #R$8E38(#N$98) to *#R$F237.
 $EE9C LD ($F237),A  ; }
; This also draws the whole room.
 $EE9F CALL $E0A9    ; Call #R$E0A9.
 $EEA2 CALL $E058    ; Call #R$E058.
 $EEA5 RET           ; Return.

; Routine at EEA6
;
; Used by the routines at #R$E22D, #R$E821, #R$EBD8 and #R$F001.
c$EEA6 LD C,(IX+$00) ; #REGc=*#REGix+#N$00.
 $EEA9 LD B,(IX+$01) ; #REGb=*#REGix+#N$01.
 $EEAC LD E,(IX+$02) ; #REGe=*#REGix+#N$02.
 $EEAF LD D,(IX+$03) ; #REGd=*#REGix+#N$03.
 $EEB2 LD A,(IX+$04) ; #REGa=*#REGix+#N$04.
 $EEB5 ADD A,E       ; #REGa+=#REGe.
 $EEB6 CP $80        ; {Jump to #R$EEC0 if #REGa is higher than #N$80.
 $EEB8 JR NC,$EEC0   ; }
 $EEBA CP $04        ; {Jump to #R$EEC3 if #REGa is lower than #N$04.
 $EEBC JR C,$EEC3    ; }
 $EEBE INC C         ; {Increment #REGc by two.
 $EEBF INC C         ; }
*$EEC0 DEC C         ; Decrease #REGc by one.
 $EEC1 AND %00000011 ; Keep only bits 0-1.
*$EEC3 LD E,A        ; #REGe=#REGa.
 $EEC4 LD A,(IX+$05) ; #REGa=*#REGix+#N$05.
 $EEC7 ADD A,D       ; #REGa+=#REGd.
 $EEC8 CP $80        ; {Jump to #R$EED2 if #REGa is higher than #N$80.
 $EECA JR NC,$EED2   ; }
 $EECC CP $04        ; {Jump to #R$EED5 if #REGa is lower than #N$04.
 $EECE JR C,$EED5    ; }
 $EED0 INC B         ; {Increment #REGb by two.
 $EED1 INC B         ; }
*$EED2 DEC B         ; Decrease #REGb by one.
 $EED3 AND %00000011 ; Keep only bits 0-1.
*$EED5 LD D,A        ; #REGd=#REGa.
 $EED6 RET           ; Return.

; Routine at EED7
;
; Used by the routines at #R$E22D, #R$E821, #R$EBD8 and #R$F001.
c$EED7 LD DE,$A0EC   ; #REGde=#R$A0EC.
 $EEDA LD HL,$A06C   ; #REGhl=#R$A06C.
 $EEDD LD BC,$0080   ; #REGbc=#N($0080,$04,$04).
 $EEE0 LDIR          ; Copy #N($0080,$04,$04) bytes of data from *#REGhl to
                     ; *#REGde.
 $EEE2 LD A,$10      ; {Set INK: *#REGix+#N$09.
 $EEE4 RST $10       ;
 $EEE5 LD A,(IX+$09) ;
 $EEE8 RST $10       ; }
 $EEE9 LD HL,($5C36) ; #HTML(#REGhl=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $EEEC PUSH HL       ; Stash #REGhl on the stack.
 $EEED PUSH IY       ; Stash #REGiy on the stack.
 $EEEF PUSH IX       ; Stash #REGix on the stack.
 $EEF1 LD E,(IX+$06) ; #REGe=*#REGix+#N$06.
 $EEF4 LD D,$00      ; #REGd=#N$00.
 $EEF6 SLA E         ; Shift #REGe left (with carry).
 $EEF8 RL D          ; Rotate #REGd left.
 $EEFA SLA E         ; Shift #REGe left (with carry).
 $EEFC RL D          ; Rotate #REGd left.
 $EEFE SLA E         ; Shift #REGe left (with carry).
 $EF00 RL D          ; Rotate #REGd left.
 $EF02 ADD HL,DE     ; #REGhl+=#REGde.
 $EF03 LD B,(IX+$02) ; #REGb=*#REGix+#N$02.
 $EF06 INC B         ; Increment #REGb by one.
 $EF07 LD C,$00      ; #REGc=#N$00.
 $EF09 LD ($F332),BC ; Write #REGbc to *#R$F332.
 $EF0D LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $EF10 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $EF13 LD A,D        ; #REGa=#REGd.
 $EF14 INC A         ; Increment #REGa by one.
 $EF15 SLA A         ; {Shift #REGa left three positions (with carry).
 $EF17 SLA A         ;
 $EF19 SLA A         ; }
 $EF1B LD C,A        ; #REGc=#REGa.
 $EF1C LD B,$00      ; #REGb=#N$00.
 $EF1E LD IY,$A0F4   ; #REGiy=#R$A0F4.
 $EF22 ADD IY,BC     ; #REGiy+=#REGbc.
 $EF24 LD C,E        ; #REGc=#REGe.
 $EF25 SLA C         ; Shift #REGc left (with carry).
 $EF27 SLA C         ; Shift #REGc left (with carry).
 $EF29 SLA C         ; Shift #REGc left (with carry).
 $EF2B LD B,$00      ; #REGb=#N$00.
 $EF2D LD ($F33C),BC ; Write #REGbc to *#R$F33C.
 $EF31 LD IX,$A0F4   ; #REGix=#R$A0F4.
*$EF35 PUSH HL       ; {Stash #REGhl, #REGde and #REGhl on the stack.
 $EF36 PUSH DE       ;
*$EF37 PUSH HL       ; }
 $EF38 LD B,$08      ; #REGb=#N$08.
*$EF3A PUSH BC       ; Stash #REGbc on the stack.
 $EF3B LD A,(HL)     ; #REGa=*#REGhl.
 $EF3C LD BC,($F332) ; #REGbc=*#R$F332.
*$EF40 SLA A         ; Shift #REGa left (with carry).
 $EF42 RL C          ; Rotate #REGc left.
 $EF44 SLA A         ; Shift #REGa left (with carry).
 $EF46 RL C          ; Rotate #REGc left.
 $EF48 DJNZ $EF40    ; Decrease counter by one and loop back to #R$EF40 until
                     ; counter is zero.
 $EF4A LD (IY+$00),A ; Write #REGa to *#REGiy+#N$00.
 $EF4D LD A,C        ; #REGa=#REGc.
 $EF4E OR (IX+$00)   ; Set the bits of #REGa with *#REGix+#N$00.
 $EF51 LD (IX+$00),A ; Write #REGa to *#REGix+#N$00.
 $EF54 INC HL        ; Increment #REGhl by one.
 $EF55 INC IX        ; Increment #REGix by one.
 $EF57 INC IY        ; Increment #REGiy by one.
 $EF59 POP BC        ; Restore #REGbc from the stack.
 $EF5A DJNZ $EF3A    ; Decrease counter by one and loop back to #R$EF3A until
                     ; counter is zero.
 $EF5C POP HL        ; Restore #REGhl from the stack.
 $EF5D LD BC,($F33C) ; {#REGhl+=*#R$F33C.
 $EF61 ADD HL,BC     ; }
 $EF62 DEC D         ; Decrease #REGd by one.
 $EF63 JR NZ,$EF37   ; Jump to #R$EF37 until #REGd is zero.
 $EF65 POP DE        ; Restore #REGde from the stack.
 $EF66 LD BC,$0008   ; #REGbc=#N($0008,$04,$04).
 $EF69 ADD IX,BC     ; #REGix+=#REGbc.
 $EF6B ADD IY,BC     ; #REGiy+=#REGbc.
 $EF6D POP HL        ; Restore #REGhl from the stack.
 $EF6E ADD HL,BC     ; #REGhl+=#REGbc.
 $EF6F DEC E         ; Decrease #REGe by one.
 $EF70 JR NZ,$EF35   ; Jump to #R$EF35 until #REGe is zero.
 $EF72 LD HL,$9FEC   ; #REGhl=#R$9FEC.
 $EF75 POP IX        ; Restore #REGix from the stack.
 $EF77 LD A,(IX+$03) ; #REGa=*#REGix+#N$03.
 $EF7A INC A         ; Increment #REGa by one.
 $EF7B SLA A         ; Shift #REGa left (with carry).
 $EF7D LD E,A        ; #REGe=#REGa.
 $EF7E LD D,$00      ; #REGd=#N$00.
 $EF80 ADD HL,DE     ; #REGhl+=#REGde.
 $EF81 LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $EF84 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $EF87 LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $EF8A LD A,(IX+$02) ; {Jump to #R$EF92 if *#REGix+#N$02 is equal to #N$03.
 $EF8D CP $03        ;
 $EF8F JR Z,$EF92    ; }
 $EF91 INC E         ; Increment #REGe by one.
*$EF92 INC D         ; Increment #REGd by one.
 $EF93 LD A,D        ; #REGa=#REGd.
 $EF94 LD ($F33E),A  ; Write #REGa to *#R$F33E.
 $EF97 LD A,$03      ; {Jump to #R$EF9F if #N$03 is not equal to *#REGix+#N$03.
 $EF99 CP (IX+$03)   ;
 $EF9C JR NZ,$EF9F   ; }
 $EF9E DEC D         ; Decrease #REGd by one.
*$EF9F LD B,(IX+$01) ; #REGb=*#REGix+#N$01.
 $EFA2 LD C,(IX+$00) ; #REGc=*#REGix+#N$00.
 $EFA5 LD A,D        ; #REGa=#REGd.
 $EFA6 LD A,$20      ; #REGa=#N$20.
 $EFA8 POP IY        ; Restore #REGiy from the stack.
 $EFAA LD A,$20      ; #REGa=#N$20.
*$EFAC PUSH AF       ; {Stash #REGaf, #REGde and #REGbc on the stack.
 $EFAD PUSH DE       ;
 $EFAE PUSH BC       ; }
 $EFAF LD D,A        ; #REGd=#REGa.
 $EFB0 LD A,C        ; {Jump to #R$EFE9 if #REGc is higher than #N$22.
 $EFB1 CP $22        ;
 $EFB3 JR NC,$EFE9   ; }
*$EFB5 PUSH DE       ; Stash #REGde on the stack.
 $EFB6 CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $EFB9 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $EFBA POP BC        ; }
 $EFBB PUSH BC       ; Stash #REGbc on the stack.
 $EFBC LD A,D        ; #REGa=#REGd.
*$EFBD CALL $E6DC    ; Call #R$E6DC.
 $EFC0 LD A,C        ; {Call #R$EFDC if #REGc is equal to #N$02.
 $EFC1 CP $02        ;
 $EFC3 CALL Z,$EFDC  ; }
 $EFC6 DEC C         ; Decrease #REGc by one.
 $EFC7 LD A,($F33E)  ; {#REGd+=*#R$F33E.
 $EFCA ADD A,D       ;
 $EFCB LD D,A        ; }
 $EFCC DEC E         ; Decrease #REGe by one.
 $EFCD JR NZ,$EFBD   ; Jump to #R$EFBD until #REGe is zero.
 $EFCF POP BC        ; {Restore #REGbc, #REGde and #REGaf from the stack.
 $EFD0 POP DE        ;
 $EFD1 POP AF        ; }
 $EFD2 DEC B         ; Decrease #REGb by one.
 $EFD3 INC A         ; Increment #REGa by one.
 $EFD4 DEC D         ; Decrease #REGd by one.
 $EFD5 JR NZ,$EFAC   ; Jump to #R$EFAC until #REGd is zero.
*$EFD7 POP HL        ; Restore #REGhl from the stack.
 $EFD8 LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $EFDB RET           ; Return.
*$EFDC DEC E         ; Decrease #REGe by one.
 $EFDD PUSH AF       ; Stash #REGaf on the stack.
 $EFDE INC E         ; Increment #REGe by one.
 $EFDF POP AF        ; Restore #REGaf from the stack.
 $EFE0 RET Z         ; Return if #REGe is zero.
 $EFE1 DEC E         ; Decrease #REGe by one.
 $EFE2 LD A,($F33E)  ; {#REGd+=*#R$F33E.
 $EFE5 ADD A,D       ;
 $EFE6 LD D,A        ; }
 $EFE7 JR $EFDC      ; Jump to #R$EFDC.
*$EFE9 LD A,($F33E)  ; {#REGd+=*#R$F33E.
 $EFEC ADD A,D       ;
 $EFED LD D,A        ; }
 $EFEE DEC E         ; Decrease #REGe by one.
 $EFEF JP Z,$EFFB    ; Jump to #R$EFFB if #REGe is zero.
 $EFF2 DEC C         ; Decrease #REGc by one.
 $EFF3 LD A,C        ; {Jump to #R$EFE9 if #REGc is higher than #N$22.
 $EFF4 CP $22        ;
 $EFF6 JR NC,$EFE9   ; }
 $EFF8 JP $EFB5      ; Jump to #R$EFB5.
*$EFFB POP BC        ; {Restore #REGbc, #REGbc and #REGbc from the stack.
 $EFFC POP BC        ;
 $EFFD POP BC        ; }
 $EFFE JP $EFD7      ; Jump to #R$EFD7.

; Handler: Pirates
;
; Used by the routine at #R$DEA8.
;
; .
;
; See #POKE#noPirates(No Pirates).
@label=Handler_Pirates
c$F001 LD A,($F334)    ; {Return if *#R$F334 is equal to #N$00.
 $F004 CP $00          ;
 $F006 RET Z           ; }
 $F007 LD HL,$8E28     ; {#HTML(Write #R$8F28(#N$8E28) (#R$8F28) to *<a
 $F00A LD ($5C36),HL   ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $F00D LD IX,($5BDE)   ; #REGix=*#R$5BDE.
@label=Handler_Pirates_Loop
*$F011 LD A,(IX+$00)   ; {Return if Pirate state (*#REGix+#N$00) is equal to
 $F014 CP $FF          ; OFF (#N$FF).
 $F016 RET Z           ; }
 $F017 LD A,$10        ; {Set INK: Pirate attribute (*#REGix+#N$09).
 $F019 RST $10         ;
 $F01A LD A,(IX+$09)   ;
 $F01D RST $10         ; }
; Update the sprite frame.
 $F01E LD A,(IX+$06)   ; Fetch the current Pirate sprite reference
                       ; (*#REGix+#N$06).
 $F021 ADD A,$06       ; Add #N$06.
 $F023 LD (IX+$06),A   ; Write it back to the current Pirate sprite reference
                       ; (*#REGix+#N$06).
 $F026 CP $4A          ; {Jump to #R$F02E if #REGa is not equal to #N$4A.
 $F028 JR NZ,$F02E     ; }
 $F02A LD (IX+$06),$20 ; Write #N$20 (facing right) to Pirate sprite reference
                       ; (*#REGix+#N$06).
@label=Handler_Pirates_CheckSpriteFrames
*$F02E CP $80          ; {Jump to #R$F036 if #REGa is not equal to #N$80.
 $F030 JR NZ,$F036     ; }
 $F032 LD (IX+$06),$50 ; Write #N$50 (facing left) to Pirate sprite reference
                       ; (*#REGix+#N$06).
@label=Handler_Pirates_SkipSpriteFrames
*$F036 CALL $EEA6      ; Call #R$EEA6.
 $F039 LD A,C          ; {Jump to #R$F0EE if #REGc is equal to #N$22.
 $F03A CP $22          ;
 $F03C JP Z,$F0EE      ; }
 $F03F CP $03          ; {Jump to #R$F0E3 if #REGc is equal to #N$03.
 $F041 JP Z,$F0E3      ; }
 $F044 PUSH DE         ; {Stash #REGde and #REGbc on the stack.
 $F045 PUSH BC         ; }
 $F046 LD A,(IX+$04)   ; {Jump to #R$F04F if the direction the Pirate is moving
 $F049 CP $FF          ; (*#REGix+#N$04) is not right (#N$FF).
 $F04B JR NZ,$F04F     ; }
 $F04D DEC C           ; {Decrease #REGc by two.
 $F04E DEC C           ; }
*$F04F CALL $F1AF      ; Call #R$F1AF.
 $F052 POP BC          ; {Restore #REGbc and #REGde from the stack.
 $F053 POP DE          ; }
 $F054 CP $FF          ; {Jump to #R$F0F9 if #REGa is not equal to #N$FF.
 $F056 JP NZ,$F0F9     ; }
 $F059 PUSH BC         ; {Stash #REGbc and #REGde on the stack.
 $F05A PUSH DE         ; }
 $F05B DEC B           ; {Decrease #REGb by three.
 $F05C DEC B           ;
 $F05D DEC B           ; }
 $F05E LD A,(IX+$04)   ; {Jump to #R$F067 if the direction the Pirate is moving
 $F061 CP $FF          ; (*#REGix+#N$04) is not right (#N$FF).
 $F063 JR NZ,$F067     ; }
 $F065 DEC C           ; {Decrease #REGc by two.
 $F066 DEC C           ; }
*$F067 CALL $E762      ; Call #R$E762.
 $F06A LD HL,$A1C4     ; #REGhl=#R$A1C4.
 $F06D LD DE,($F330)   ; #REGde=*#R$F330.
 $F071 ADD HL,DE       ; #REGhl+=#REGde.
 $F072 POP DE          ; {Restore #REGde and #REGbc from the stack.
 $F073 POP BC          ; }
 $F074 LD A,(HL)       ; {Jump to #R$F0F9 if *#REGhl is lower than #N$21.
 $F075 CP $21          ;
 $F077 JP C,$F0F9      ; }
 $F07A LD (IX+$00),C   ; Write #REGc to *#REGix+#N$00.
 $F07D LD (IX+$01),B   ; Write #REGb to *#REGix+#N$01.
 $F080 LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $F083 LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $F086 CALL $E9E2      ; Call #R$E9E2.
*$F089 CALL $EED7      ; Call #R$EED7.
 $F08C LD A,(IX+$00)   ; {Write *#REGix+#N$00 to *#REGix+#N$0D.
 $F08F LD (IX+$0D),A   ; }
 $F092 LD A,(IX+$01)   ; {Write *#REGix+#N$01 to *#REGix+#N$0E.
 $F095 LD (IX+$0E),A   ; }
 $F098 LD A,(IX+$02)   ; {Write *#REGix+#N$02 to *#REGix+#N$0B.
 $F09B LD (IX+$0B),A   ; }
 $F09E LD A,(IX+$03)   ; {Write *#REGix+#N$03 to *#REGix+#N$0F.
 $F0A1 LD (IX+$0F),A   ; }
 $F0A4 LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $F0A7 DEC C           ; Decrease #REGc by one.
 $F0A8 SLA C           ; {Shift #REGc left two positions (with carry).
 $F0AA SLA C           ; }
 $F0AC LD A,(IX+$02)   ; #REGa=*#REGix+#N$02.
 $F0AF ADD A,C         ; #REGa+=#REGc.
 $F0B0 LD C,A          ; #REGc=#REGa.
 $F0B1 LD A,($F233)    ; {#REGb=*#R$F233.
 $F0B4 LD B,A          ; }
 $F0B5 LD A,($F231)    ; #REGa=*#R$F231.
 $F0B8 DEC A           ; Decrease #REGa by one.
 $F0B9 SLA A           ; {Shift #REGa left two positions (with carry).
 $F0BB SLA A           ; }
 $F0BD ADD A,B         ; #REGa+=#REGb.
 $F0BE ADD A,$07       ; #REGa+=#N$07.
 $F0C0 SUB C           ; #REGa-=#REGc.
; See #POKE#immunePirates(Immune To Pirates).
 $F0C1 CP $10          ; {Jump to #R$F0DB if #REGa is higher than #N$10.
 $F0C3 JR NC,$F0DB     ; }
 $F0C5 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $F0C8 LD A,($F232)    ; #REGa=*#R$F232.
 $F0CB ADD A,$02       ; #REGa+=#N$02.
 $F0CD SUB B           ; #REGa-=#REGb.
 $F0CE CP $06          ; {Jump to #R$F0DB if #REGa is higher than #N$06.
 $F0D0 JP NC,$F0DB     ; }
 $F0D3 LD A,$02        ; {Write #N$02 to *#R$FFFE.
 $F0D5 LD ($FFFE),A    ; }
 $F0D8 JP $E3A4        ; Jump to #R$E3A4.
; Move onto the next Pirate.
@label=Handler_Pirate_Next
*$F0DB LD DE,$0010     ; {#REGix+=#N($0010,$04,$04).
 $F0DE ADD IX,DE       ; }
 $F0E0 JP $F011        ; Jump to #R$F011.
; Alters the direction of the Pirate to now face and move left.
@label=Handler_Pirate_TurnLeft
*$F0E3 LD (IX+$04),$01 ; Write #N$01 (move left) to Pirate direction
                       ; (*#REGix+#N$04).
 $F0E7 LD (IX+$06),$50 ; Write #N$50 (facing left) to Pirate sprite reference
                       ; (*#REGix+#N$06).
 $F0EB JP $F089        ; Jump to #R$F089.
; Alters the direction of the Pirate to now face and move right.
@label=Handler_Pirate_TurnRight
*$F0EE LD (IX+$04),$FF ; Write #N$FF (move right) to Pirate direction
                       ; (*#REGix+#N$04).
 $F0F2 LD (IX+$06),$20 ; Write #N$20 (facing right) to Pirate sprite reference
                       ; (*#REGix+#N$06).
 $F0F6 JP $F089        ; Jump to #R$F089.
; Handle making the Pirate about-turn.
@label=Pirate_TurnController
*$F0F9 LD A,(IX+$04)   ; {Jump to #R$F0E3 if the direction the Pirate is moving
 $F0FC CP $FF          ; (*#REGix+#N$04) is right (#N$FF).
 $F0FE JP Z,$F0E3      ; }
 $F101 JP $F0EE        ; Jump to #R$F0EE.

; Handler: Housekeeping
;
; Used by the routines at #R$F107 and #R$F1AF.
;
; .
;
; Clears the data reference from the stack before returning.
@label=Handler_Housekeeping
c$F104 POP IX        ; Restore the current data reference from the stack.
 $F106 RET           ; Return.

; Handler: Keys And Locked Doors
;
; Used by the routine at #R$EBD8.
@label=Handler_KeysAndLockedDoors
c$F107 PUSH IX         ; Stash #REGix on the stack.
 $F109 LD IX,($5BDA)   ; #REGix=*#R$5BDA.
@label=Handler_KeysAndLockedDoors_Loop
*$F10D LD A,(IX+$00)   ; {Jump to #R$F104 if the terminator character has been
 $F110 CP $FF          ; received instead of a co-ordinate (#N$FF).
 $F112 JR Z,$F104      ; }
 $F114 LD A,(IX+$05)   ; #REGa=*#REGix+#N$05.
 $F117 AND %00000010   ; Keep only bit 1.
 $F119 JR Z,$F127      ; Jump to #R$F127 if the result is zero.
 $F11B LD A,(IX+$02)   ; {Jump to #R$F127 if *#REGix+#N$02 is not equal to
 $F11E CP C            ; #REGc.
 $F11F JR NZ,$F127     ; }
 $F121 LD A,(IX+$03)   ; {Jump to #R$F12E if *#REGix+#N$03 is equal to #REGb.
 $F124 CP B            ;
 $F125 JR Z,$F12E      ; }
@label=Handler_KeysAndLockedDoors_Next
*$F127 LD DE,$0006     ; {#REGix+=#N($0006,$04,$04).
 $F12A ADD IX,DE       ; }
 $F12C JR $F10D        ; Jump to #R$F10D.
*$F12E LD A,$06        ; {Write #N$06 to *#R$FFFE.
 $F130 LD ($FFFE),A    ; }
 $F133 LD (IX+$05),$01 ; Write #N$01 to *#REGix+#N$05.
 $F137 LD C,(IX+$02)   ; #REGc=*#REGix+#N$02.
 $F13A LD B,(IX+$03)   ; #REGb=*#REGix+#N$03.
 $F13D LD E,$01        ; {Set the sprite width/ height in #REGde (#N$01/#N$02).
 $F13F LD D,$02        ; }
 $F141 LD A,$00        ; #REGa=#N$00.
 $F143 CALL $E72F      ; Call #R$E72F.
 $F146 LD HL,($5C36)   ; {#HTML(Stash *<a rel="noopener nofollow"
 $F149 PUSH HL         ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>
                       ; on the stack.)}
 $F14A LD HL,$9F6C     ; {#HTML(Write #R$A06C(#N$9F6C) (#R$A06C) to *<a
 $F14D LD ($5C36),HL   ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $F150 LD A,$20        ; #REGa=#N$20.
 $F152 CALL $EA93      ; Call #R$EA93.
 $F155 POP HL          ; {#HTML(Restore the original value of *<a rel="noopener
 $F156 LD ($5C36),HL   ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>
                       ; from the stack.)}
 $F159 LD A,(IX+$04)   ; #REGa=*#REGix+#N$04.
 $F15C POP IX          ; Restore #REGix from the stack.
 $F15E PUSH AF         ; Stash #REGaf on the stack.
 $F15F LD A,(IX+$10)   ; {Jump to #R$F1AA if *#REGix+#N$10 is equal to #N$00.
 $F162 CP $00          ;
 $F164 JR Z,$F1AA      ; }
 $F166 PUSH IX         ; Stash #REGix on the stack.
 $F168 CALL $F1E5      ; Call #R$F1E5.
 $F16B LD HL,($5C36)   ; {#HTML(Stash *<a rel="noopener nofollow"
 $F16E PUSH HL         ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>
                       ; on the stack.)}
 $F16F LD HL,$8378     ; {#HTML(Write #R$8478(#N$8378) (#R$8478) to *<a
 $F172 LD ($5C36),HL   ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $F175 LD A,$10        ; {Set INK: *#R$5BCC.
 $F177 RST $10         ;
 $F178 LD A,($5BCC)    ;
 $F17B RST $10         ; }
 $F17C LD (IX+$05),$03 ; Write #N$03 to *#REGix+#N$05.
 $F180 LD C,(IX+$02)   ; #REGc=*#REGix+#N$02.
 $F183 LD B,(IX+$03)   ; #REGb=*#REGix+#N$03.
 $F186 PUSH BC         ; Stash #REGbc on the stack.
 $F187 CALL $E762      ; Call #R$E762.
 $F18A CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $F18D LD A,(IX+$04)   ; #REGa=*#REGix+#N$04.
 $F190 ADD A,$41       ; #REGa+=#N$41. TODO #R$8588
 $F192 CALL $E804      ; Call #R$E804.
 $F195 RST $10         ; #HTML(Print to the screen using RST <a rel="noopener
                       ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0010.html">#N$10</a>.)
 $F196 POP BC          ; Restore #REGbc from the stack.
 $F197 DEC B           ; Decrease #REGb by one.
 $F198 CALL $E762      ; Call #R$E762.
 $F19B CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $F19E LD A,$4B        ; #REGa=#R$85D0 (#N$4B).
 $F1A0 CALL $E804      ; Call #R$E804.
 $F1A3 RST $10         ; #HTML(Print to the screen using RST <a rel="noopener
                       ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0010.html">#N$10</a>.)
 $F1A4 POP HL          ; {#HTML(Restore the original value of *<a rel="noopener
 $F1A5 LD ($5C36),HL   ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>
                       ; from the stack.)}
 $F1A8 POP IX          ; Restore #REGix from the stack.
*$F1AA POP AF          ; Restore #REGaf from the stack.
 $F1AB LD (IX+$10),A   ; Write #REGa to *#REGix+#N$10.
 $F1AE RET             ; Return.

; Routine at F1AF
;
; Used by the routines at #R$EBD8 and #R$F001.
c$F1AF PUSH IX       ; Stash #REGix on the stack.
 $F1B1 LD IX,($5BDA) ; #REGix=*#R$5BDA.
 $F1B5 LD DE,$0006   ; #REGde=#N($0006,$04,$04).
*$F1B8 LD A,$FF      ; {Jump to #R$F104 if the terminator character has been
 $F1BA CP (IX+$00)   ; received instead of a co-ordinate (#N$FF).
 $F1BD JP Z,$F104    ; }
 $F1C0 LD A,C        ; {Jump to #R$F1E1 if #REGc is not equal to *#REGix+#N$00.
 $F1C1 CP (IX+$00)   ;
 $F1C4 JR NZ,$F1E1   ; }
 $F1C6 LD A,(IX+$01) ; #REGa=*#REGix+#N$01.
 $F1C9 DEC A         ; {Decrease #REGa by two.
 $F1CA DEC A         ; }
 $F1CB CP B          ; {Jump to #R$F1E1 if #REGa is not equal to #REGb.
 $F1CC JR NZ,$F1E1   ; }
 $F1CE LD A,(IX+$05) ; {Compare *#REGix+#N$05 with #N$00.
 $F1D1 CP $00        ; }
 $F1D3 LD A,$FF      ; #REGa=#N$FF.
 $F1D5 JP Z,$F104    ; Jump to #R$F104 if *#REGix+#N$05 was equal to #N$00 on
                     ; line #R$F1CE.
 $F1D8 LD A,(IX+$04) ; #REGa=*#REGix+#N$04.
 $F1DB PUSH IX       ; {#REGhl=#REGix (using the stack).
 $F1DD POP HL        ; }
 $F1DE POP IX        ; Restore #REGix from the stack.
 $F1E0 RET           ; Return.
*$F1E1 ADD IX,DE     ; #REGix+=#REGde.
 $F1E3 JR $F1B8      ; Jump to #R$F1B8.

; Routine at F1E5
;
; Used by the routine at #R$F107.
c$F1E5 LD DE,$0006   ; #REGde=#N($0006,$04,$04).
 $F1E8 LD C,A        ; #REGc=#REGa.
 $F1E9 LD IX,($5BDA) ; #REGix=*#R$5BDA.
*$F1ED LD A,(IX+$00) ; {Return if the terminator character has been received
 $F1F0 CP $FF        ; instead of a co-ordinate (#N$FF).
 $F1F2 RET Z         ; }
 $F1F3 LD A,C        ; {Return if #REGc is equal to *#REGix+#N$04.
 $F1F4 CP (IX+$04)   ;
 $F1F7 RET Z         ; }
 $F1F8 ADD IX,DE     ; #REGix+=#REGde.
 $F1FA JR $F1ED      ; Jump to #R$F1ED.

; Handler: Port Hole
;
; Used by the routine at #R$DEA8.
;
; .
;
; Set the UDG graphics pointer.
@label=Handler_PortHole
c$F1FC LD HL,$914C   ; {#HTML(Write #R$924C(#N$914C) (#R$924C) to *<a
 $F1FF LD ($5C36),HL ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
; Set the attributes.
 $F202 LD A,$10      ; {Set INK: CYAN (#N$05).
 $F204 RST $10       ;
 $F205 LD A,$05      ;
 $F207 RST $10       ; }
; Only action the port holes every 4th frame.
 $F208 LD A,($F259)  ; #REGa=*#R$F259.
 $F20B INC A         ; Increment #REGa by one.
 $F20C AND %00000011 ; Ensure #REGa is a number between #N$00-#N$03.
 $F20E LD ($F259),A  ; Write #REGa to *#R$F259.
 $F211 RET NZ        ; Return if #REGa is not zero.
; The data is stored as: #TABLE(default,centre,centre)
; { =h Byte Offset | =h Data }
; { +#N$00 | Horizontal Position }
; { +#N$01 | Vertical Position }
; { +#N$02 | Frame/ Sprite ID }
; TABLE#
; .
; Find active port holes.
 $F212 LD HL,($5BDC) ; #REGhl=*#R$5BDC.
; Keep looping through the table data until we reach a terminator (#N$FF).
@label=Handler_PortHole_Loop
*$F215 LD C,(HL)     ; {Fetch the horizontal and vertical position of the port
 $F216 INC HL        ; hole from the port hole data pointer.
 $F217 LD B,(HL)     ; }
 $F218 INC HL        ; Increment the port hole data pointer by one.
; Are we done?
 $F219 LD A,$FF      ; {Return if the terminator character has been received
 $F21B CP C          ; instead of a co-ordinate (#N$FF).
 $F21C RET Z         ; }
; Move onto the next frame.
 $F21D LD A,(HL)     ; Retrieve the frame/ sprite ID from the port hole data
                     ; pointer.
 $F21E ADD A,$04     ; Add #N$04 to the current frame/ sprite ID, as the port
                     ; hole graphic is made using #N$04 UDG characters.
 $F220 CP $40        ; {If the frame/ sprite ID value is under #N$40 then jump
 $F222 JR NZ,$F226   ; to #R$F226 (the last frame/ sprite ID is #N$3C).}
; Reset the sprite ID back to the first frame/ sprite ID.
 $F224 LD A,$20      ; #REGa=base sprite ID (#N$20).
; Update the frame reference in the data table and print the port hole to the
; screen.
@label=PrintPortHole
*$F226 LD (HL),A     ; Update the frame/ sprite ID back to the port hole data.
 $F227 INC HL        ; Increment the port hole data pointer by one.
 $F228 LD D,$02      ; {#REGde=Set the sprite width/ height (#N$02/ #N$02).
 $F22A LD E,$02      ; }
 $F22C CALL $EA93    ; Call #R$EA93.
; Keeping looping around, this only finishes when a terminator is received.
 $F22F JR $F215      ; Jump to #R$F215.

; Table: Player Attributes
@label=TablePlayerAttributes
g$F231 DEFB $00      ; Horizontal co-ordinate (#N$21-#N$04).
 $F232 DEFB $00      ; Vertical co-ordinate (#N$15-#N$06).
 $F233 DEFB $00      ; Horizontal position in character block (#N$00-#N$03).
 $F234 DEFB $00      ; Vertical position in character block (#N$00-#N$03).
 $F235 DEFB $00      ; Horizontal movement indicator:
                     ; #TABLE(default,centre,centre)
                     ; { =h Byte | =h Meaning }
                     ; { #N$00 | Stationary }
                     ; { #N$01 | Moving Left }
                     ; { #N$FF | Moving Right }
                     ; TABLE#
 $F236 DEFB $00      ; Vertical movement indicator:
                     ; #TABLE(default,centre,centre)
                     ; { =h Byte | =h Meaning }
                     ; { #N$00 | Stationary }
                     ; { #N$01 | Moving Up }
                     ; { #N$FF | Moving Down }
                     ; TABLE#
@label=PlayerSpriteID
 $F237 DEFB $00      ; Sprite frame ID:
                     ; #TABLE(default,centre,centre)
                     ; { =h Byte | =h Meaning }
                     ; { #R$8A78(#N$20) | Facing Right Frame 1 }
                     ; { #R$8AA8(#N$26) | Facing Right Frame 2 }
                     ; { #R$8AD8(#N$2C) | Facing Right Frame 3 }
                     ; { #R$8B08(#N$32) | Facing Right Frame 4 }
                     ; { #R$8B38(#N$38) | Facing Right Frame 5 }
                     ; { #R$8B68(#N$3E) | Facing Right Frame 6 }
                     ; { #R$8B98(#N$44) | Facing Right Frame 7 }
                     ; { #R$8BC8(#N$4A) | Facing Right Frame 8 }
                     ; { #R$8BF8(#N$50) | Facing Left Frame 1 }
                     ; { #R$8C28(#N$56) | Facing Left Frame 2 }
                     ; { #R$8C58(#N$5C) | Facing Left Frame 3 }
                     ; { #R$8C88(#N$62) | Facing Left Frame 4 }
                     ; { #R$8CB8(#N$68) | Facing Left Frame 5 }
                     ; { #R$8CE8(#N$6E) | Facing Left Frame 6 }
                     ; { #R$8D18(#N$74) | Facing Left Frame 7 }
                     ; { #R$8D48(#N$7A) | Facing Left Frame 8 }
                     ; TABLE#
 $F238 DEFB $00      ; Sprite width: #N$02.
 $F239 DEFB $00      ; Sprite height: #N$03.
 $F23A DEFB $00      ; Sprite attribute: CYAN (#N$05).
 $F23B DEFB $00
 $F23C DEFB $00
 $F23D DEFB $00
 $F23E DEFB $00
 $F23F DEFB $00
 $F240 DEFB $00
@label=PlayerKeyHeld
 $F241 DEFB $00      ; Key (in possession).
 $F242 DEFB $00
 $F243 DEFB $00
 $F244 DEFB $00

; Table: Default Player Attributes
;
; See #R$F231.
@label=TableDefaultPlayerAttributes
g$F245 DEFB $10      ; Starting horizontal co-ordinate: #N(#PEEK(#PC)).
 $F246 DEFB $16      ; Starting vertical co-ordinate: #N(#PEEK(#PC)).
 $F247 DEFB $03      ; Starting horizontal offset: #N(#PEEK(#PC)).
 $F248 DEFB $03      ; Starting vertical offset: #N(#PEEK(#PC)).
 $F249 DEFB $00      ; Horizontal movement: #MAP(#PEEK(#PC))(?,0:stationary).
 $F24A DEFB $00      ; Vertical movement: #MAP(#PEEK(#PC))(?,0:stationary).
 $F24B DEFB $20      ; Starting sprite frame ID: #N(#PEEK(#PC)).
 $F24C DEFB $02      ; Sprite width: #N(#PEEK(#PC)).
 $F24D DEFB $03      ; Sprite height: #N(#PEEK(#PC)).
 $F24E DEFB $05      ; Sprite attribute: CYAN #N(#PEEK(#PC)).
 $F24F DEFB $01
 $F250 DEFB $00
 $F251 DEFB $00
 $F252 DEFB $10
 $F253 DEFB $16
 $F254 DEFB $03
 $F255 DEFB $00      ; Key (in possession): #MAP(#PEEK(#PC))(?,0:none).
 $F256 DEFB $00
 $F257 DEFB $00
 $F258 DEFB $00

; Port Hole Timer Frame Skip
;
; This value is incremented every frame, and every 4th frame will animate the port holes (if there are any).
; See #R$F1FC.
@label=TimerPortHole_FrameSkip
g$F259 DEFB $FF

; Unused
u$F25A DEFB $00

; Graphics: Extra
@label=Graphics_Spark
b$F25B DEFB $10,$1B,$3E,$1C,$F8,$30,$12,$10 ; #UDGTABLE {
                                            ; #UDG(#PC,attr=$0F)(spark) }
                                            ; UDGTABLE#
@label=Graphics_Life
 $F263 DEFB $38,$38,$10,$FE,$38,$38,$28,$6C ; #UDGTABLE {
                                            ; #UDG(#PC,attr=$06)(life) }
                                            ; UDGTABLE#
@label=Graphics_Key
 $F26B DEFB $00,$70,$88,$8F,$8F,$88,$70,$00 ; {#UDGTABLE {
 $F273 DEFB $00,$00,$00,$FE,$FE,$3E,$2A,$00 ; #UDGS$02,$01,$04(key)(#UDG(#PC+$08*$x,attr=$06)(*key)key)
                                            ; } UDGTABLE#}

; Graphics: Lifts
@label=Graphics_Lifts
b$F27B DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F283 DEFB $3F,$3F,$3F,$3F,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F28B DEFB $FF,$FF,$FF,$FF,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F293 DEFB $FC,$FC,$FC,$FC,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F29B DEFB $00,$00,$FF,$FF,$FF,$FF,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F2A3 DEFB $00,$00,$FF,$FF,$FF,$FF,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F2AB DEFB $00,$00,$FF,$FF,$FF,$FF,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F2B3 DEFB $00,$00,$FF,$FF,$FF,$FF,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#

; Messaging: Game Status Bar
@label=Messaging_GameStatusBar
t$F2BB DEFM "        BOOTY      TREASURE     " ; "#STR(#PC,$04,$20)".

; Table: Bomb Sparks
;
; Used by the routines at #R$E47A (for creation) and #R$E3E0 for animation.
; .
; Initial values are populated from #R$F2F9.
;
; .
;
; Explosion: #N($01+((#PC-$F2DB)/$06)).
@label=TableBombSparks
g$F2DB DEFB $00      ; Horizontal position.
 $F2DC DEFB $00      ; Vertical position.
 $F2DD DEFB $00      ; Velocity: Left.
 $F2DE DEFB $00      ; Velocity: Up.
 $F2DF DEFB $00      ; Velocity: Right.
 $F2E0 DEFB $00      ; Timer (max. #N$04).
; Explosion: #N($01+((#PC-$F2DB)/$06)).
 $F2E1 DEFB $00      ; Horizontal position.
 $F2E2 DEFB $00      ; Vertical position.
 $F2E3 DEFB $00      ; Velocity: Left.
 $F2E4 DEFB $00      ; Velocity: Up.
 $F2E5 DEFB $00      ; Velocity: Right.
 $F2E6 DEFB $00      ; Timer (max. #N$04).
; Explosion: #N($01+((#PC-$F2DB)/$06)).
 $F2E7 DEFB $00      ; Horizontal position.
 $F2E8 DEFB $00      ; Vertical position.
 $F2E9 DEFB $00      ; Velocity: Left.
 $F2EA DEFB $00      ; Velocity: Up.
 $F2EB DEFB $00      ; Velocity: Right.
 $F2EC DEFB $00      ; Timer (max. #N$04).
; Explosion: #N($01+((#PC-$F2DB)/$06)).
 $F2ED DEFB $00      ; Horizontal position.
 $F2EE DEFB $00      ; Vertical position.
 $F2EF DEFB $00      ; Velocity: Left.
 $F2F0 DEFB $00      ; Velocity: Up.
 $F2F1 DEFB $00      ; Velocity: Right.
 $F2F2 DEFB $00      ; Timer (max. #N$04).
; Explosion: #N($01+((#PC-$F2DB)/$06)).
 $F2F3 DEFB $00      ; Horizontal position.
 $F2F4 DEFB $00      ; Vertical position.
 $F2F5 DEFB $00      ; Velocity: Left.
 $F2F6 DEFB $00      ; Velocity: Up.
 $F2F7 DEFB $00      ; Velocity: Right.
 $F2F8 DEFB $00      ; Timer (max. #N$04).

; Table: Default Bomb Sparks
;
; Used by the routine at #R$E47A.
; .
; These default values are copied to #R$F2DB.
;
; .
;
; Explosion: #N($01+((#PC-$F2F9)/$06)).
@label=TableDefaultBombSparks
g$F2F9 DEFB $00      ; Horizontal position.
 $F2FA DEFB $00      ; Vertical position.
 $F2FB DEFB $01      ; Velocity: Left.
 $F2FC DEFB $00      ; Velocity: Up.
 $F2FD DEFB $00      ; Velocity: Right.
 $F2FE DEFB $00      ; Timer (max. #N$04).
; Explosion: #N($01+((#PC-$F2F9)/$06)).
 $F2FF DEFB $00      ; Horizontal position.
 $F300 DEFB $00      ; Vertical position.
 $F301 DEFB $01      ; Velocity: Left.
 $F302 DEFB $01      ; Velocity: Up.
 $F303 DEFB $00      ; Velocity: Right.
 $F304 DEFB $00      ; Timer (max. #N$04).
; Explosion: #N($01+((#PC-$F2F9)/$06)).
 $F305 DEFB $00      ; Horizontal position.
 $F306 DEFB $00      ; Vertical position.
 $F307 DEFB $00      ; Velocity: Left.
 $F308 DEFB $01      ; Velocity: Up.
 $F309 DEFB $00      ; Velocity: Right.
 $F30A DEFB $00      ; Timer (max. #N$04).
; Explosion: #N($01+((#PC-$F2F9)/$06)).
 $F30B DEFB $00      ; Horizontal position.
 $F30C DEFB $00      ; Vertical position.
 $F30D DEFB $FF      ; Velocity: Left.
 $F30E DEFB $01      ; Velocity: Up.
 $F30F DEFB $00      ; Velocity: Right.
 $F310 DEFB $00      ; Timer (max. #N$04).
; Explosion: #N($01+((#PC-$F2F9)/$06)).
 $F311 DEFB $00      ; Horizontal position.
 $F312 DEFB $00      ; Vertical position.
 $F313 DEFB $FF      ; Velocity: Left.
 $F314 DEFB $00      ; Velocity: Up.
 $F315 DEFB $00      ; Velocity: Right.
 $F316 DEFB $00      ; Timer (max. #N$04).

; Data block at F317
b$F317 DEFB $03,$08,$0D,$12,$17

; Game status buffer entry at F31C
g$F31C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F324 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F32C DEFB $FF
 $F32D DEFB $FF
 $F32E DEFB $FF
 $F32F DEFB $00
 $F330 DEFB $00,$00
 $F332 DEFB $00,$00

; Lifts/ Pirates Frame Skip
;
; See #R$E821 and #R$F001.
@label=LiftsPiratesFrameSkip
g$F334 DEFB $00      ; Will be either #N$00 or #N$01.

; Active Sprite Width
;
; The width of the sprite actively being printed.
@label=ActiveSpriteWidth
g$F335 DEFB $00

; Active Sprite ID
;
; The ID of the sprite actively being printed. Note; this starts off as
; -1 of the real value as it increments to the base sprite ID in the printing loop.
@label=ActiveSpriteID
g$F336 DEFB $00

; Unused
u$F337 DEFB $00,$00,$00

; Data block at F33A
b$F33A DEFB $00,$00
 $F33C DEFB $00,$00
 $F33E DEFB $00
 $F33F DEFB $00

; Demo Mode Timer
;
; Used by the routine at #R$DEA8.
@label=TimerDemoMode
g$F340 DEFB $00

; Bomb Frame Skip
;
; See #R$E480.
@label=BombFrameSkip
g$F341 DEFB $00      ; Will be either #N$00 or #N$01.

; Kempston Control
@label=KempstonControl
g$F342 DEFB $00      ; Temporarily holds the action from the last time the
                     ; Kempston joystick port was read.

; Random Number Seed
;
; Used by the routine at #R$E349. Not random at all!
@label=RandomNumberSeed
g$F343 DEFW $0000

; Unused
u$F345 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F34D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F355 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F35D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F365 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F36D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F375 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F37D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F385 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F38D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F395 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F39D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3A5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3AD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3B5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3BD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3C5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3CD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3D5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3DD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3E5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3ED DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3F5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3FD DEFB $00,$00,$00

; Interrupt Low-Order Byte Jump Table
;
; Used as the low-order byte when an interrupt is generated.
; The high-order byte is also #N$FE, meaning all interrupts jump to #R$FEFE.
; .
; See #R$CD14, #R$FE69 and #R$FEFE.
@label=InterruptLowOrderByteJumpTable
b$F400 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F408 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F410 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F418 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F420 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F428 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F430 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F438 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F440 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F448 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F450 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F458 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F460 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F468 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F470 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F478 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F480 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F488 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F490 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F498 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F4A0 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F4A8 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F4B0 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F4B8 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F4C0 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F4C8 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F4D0 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F4D8 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F4E0 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F4E8 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F4F0 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE
 $F4F8 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE

; Unused
u$F500 DEFB $FE,$FE,$FE,$FE,$00,$00,$00,$00
 $F508 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F510 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F518 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F520 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F528 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F530 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F538 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F540 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F548 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F550 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F558 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F560 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F568 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F570 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F578 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F580 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F588 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F590 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F598 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F600 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F608 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F610 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Sound Generator: White Noise
;
; Used by the routines at #R$F7D8 and #R$F7F6.
@label=SoundGenerator_WhiteNoise
c$F618 PUSH BC       ; {Stash #REGbc and #REGbc on the stack.
 $F619 PUSH BC       ; }
 $F61A CALL $F63A    ; Call #R$F63A.
 $F61D LD BC,$FFFE   ; #REGbc=#N$FFFE.
 $F620 LD A,($5BD0)  ; #REGa=*#R$5BD0.
 $F623 OUT (C),A     ; Send #REGa to port *#REGc.
 $F625 POP BC        ; Restore #REGbc from the stack.
 $F626 CALL $F63A    ; Call #R$F63A.
 $F629 LD BC,$FFFE   ; #REGbc=#N$FFFE.
 $F62C LD A,($5BD0)  ; #REGa=*#R$5BD0.
 $F62F OR %00010000  ; Turn on the speaker (set bit 4).
 $F631 OUT (C),A     ; Send #REGa to port *#REGc.
 $F633 POP BC        ; Restore #REGbc from the stack.
 $F634 DEC DE        ; Decrease #REGde by one.
 $F635 LD A,D        ; {Jump to #R$F618 until #REGde is zero.
 $F636 OR E          ;
 $F637 JR NZ,$F618   ; }
 $F639 RET           ; Return.
@label=WhiteNoiseGenerator
*$F63A PUSH BC       ; Stash #REGbc on the stack.
 $F63B CALL $F8AF    ; Call #R$F8AF.
 $F63E AND B         ; Merge the bits from #REGb.
 $F63F LD B,A        ; #REGb=#REGa.
 $F640 CP $00        ; {Jump to #R$F646 if #REGa is zero.
 $F642 JR Z,$F646    ; }
@label=WhiteNoiseDelay
*$F644 DJNZ $F644    ; Decrease counter by one and loop back to #R$F644 until
                     ; counter is zero.
@label=WhiteNoiseHouseKeeping
*$F646 POP BC        ; Restore #REGbc from the stack.
 $F647 RET           ; Return.

; Play Wave #1
;
; Used by the routines at #R$F6DB, #R$F7C2, #R$F80D and #R$F837.
;
; BC Delay
; DE Duration
@label=PlayWave1
c$F648 PUSH BC       ; Stash the delay counter on the stack.
 $F649 LD A,($5BD0)  ; {Send *#R$5BD0 to the speaker port.
 $F64C LD BC,$FFFE   ;
 $F64F OUT (C),A     ; }
 $F651 POP BC        ; Restore the delay counter from the stack.
 $F652 PUSH BC       ; Stash the delay counter on the stack.
 $F653 CALL $F8C0    ; Call #R$F8C0.
 $F656 LD A,($5BD0)  ; #REGa=*#R$5BD0.
 $F659 LD BC,$FFFE   ; #REGbc=#N$FFFE.
 $F65C OR %00010000  ; Turn on the speaker (set bit 4).
 $F65E OUT (C),A     ; Send #REGa to port *#REGc.
 $F660 POP BC        ; Restore the delay counter from the stack.
 $F661 PUSH BC       ; Stash the delay counter on the stack.
 $F662 CALL $F8C0    ; Call #R$F8C0.
 $F665 POP BC        ; Restore the delay counter from the stack.
 $F666 DEC DE        ; Decrease the duration counter by one.
 $F667 LD A,E        ; {Keep looping back to #R$F648 until the duration counter
 $F668 OR D          ; is zero.
 $F669 JR NZ,$F648   ; }
 $F66B RET           ; Return.

; Play Wave #2
;
; Used by the routines at #R$F723, #R$F753, #R$F774, #R$F7A4 and #R$F888.
;
; BC Delay
; DE Duration
@label=PlayWave2
c$F66C PUSH BC       ; {Stash the delay counter on the stack twice.
 $F66D PUSH BC       ; }
 $F66E CALL $F8C0    ; Call #R$F8C0.
 $F671 LD BC,$FFFE   ; {Send *#R$5BD0 to the speaker port.
 $F674 LD A,($5BD0)  ;
 $F677 OUT (C),A     ; }
 $F679 POP BC        ; Restore the delay counter from the stack.
 $F67A CALL $F8C0    ; Call #R$F8C0.
 $F67D LD BC,$FFFE   ; #REGbc=#N$FFFE.
 $F680 LD A,($5BD0)  ; #REGa=*#R$5BD0.
 $F683 OR %00010000  ; Turn on the speaker (set bit 4).
 $F685 OUT (C),A     ; Send #REGa to the speaker port.
 $F687 POP BC        ; Restore the delay counter from the stack.
 $F688 INC BC        ; Increment the delay counter by one.
 $F689 DEC DE        ; Decrease the duration counter by one.
 $F68A LD A,E        ; {Keep looping back to #R$F66C until the duration counter
 $F68B OR D          ; is zero.
 $F68C JR NZ,$F66C   ; }
 $F68E RET           ; Return.

; Play Wave #3
;
; .
;
; BC Delay
; DE Duration
@label=PlayWave3
u$F68F PUSH BC       ; {Stash the delay counter on the stack twice.
 $F690 PUSH BC       ; }
 $F691 CALL $F8C0    ; Call #R$F8C0.
 $F694 LD BC,$FFFE   ; {Send *#R$5BD0 to the speaker port.
 $F697 LD A,($5BD0)  ;
 $F69A OUT (C),A     ; }
 $F69C POP BC        ; Restore the delay counter from the stack.
 $F69D CALL $F8C0    ; Call #R$F8C0.
 $F6A0 LD BC,($FFFE) ; #REGbc=*#N$FFFE.
 $F6A4 LD A,($5BD0)  ; #REGa=*#R$5BD0.
 $F6A7 OR %00010000  ; Turn on the speaker (set bit 4).
 $F6A9 OUT (C),A     ; Send #REGa to the speaker port.
 $F6AB POP BC        ; Restore the delay counter from the stack.
 $F6AC DEC BC        ; {Decrease the delay counter by three.
 $F6AD DEC BC        ;
 $F6AE DEC BC        ; }
 $F6AF DEC DE        ; Decrease the duration counter by one.
 $F6B0 LD A,D        ; {Keep looping back to #R$F68F until the duration counter
 $F6B1 OR E          ; is zero.
 $F6B2 JR NZ,$F68F   ; }
 $F6B4 RET           ; Return.

; Play Wave #4
;
; Used by the routines at #R$F73B, #R$F753 and #R$F78C.
;
; BC Delay
; DE Duration
@label=PlayWave4
c$F6B5 PUSH BC       ; {Stash the delay counter on the stack twice.
 $F6B6 PUSH BC       ; }
 $F6B7 CALL $F8C0    ; Call #R$F8C0.
 $F6BA LD BC,$FFFE   ; {Send *#R$5BD0 to the speaker.
 $F6BD LD A,($5BD0)  ;
 $F6C0 OUT (C),A     ; }
 $F6C2 POP BC        ; Restore the delay counter from the stack.
 $F6C3 CALL $F8C0    ; Call #R$F8C0.
 $F6C6 LD BC,$FFFE   ; #REGbc=#N$FFFE.
 $F6C9 LD A,($5BD0)  ; #REGa=*#R$5BD0.
 $F6CC OR %00010000  ; Turn on the speaker (set bit 4).
 $F6CE OUT (C),A     ; Send #REGa to the speaker port.
 $F6D0 POP BC        ; Restore the other delay counter from the stack.
 $F6D1 DEC BC        ; Decrease the delay counter by one.
 $F6D2 LD A,C        ; {Return if the delay counter is zero.
 $F6D3 OR B          ;
 $F6D4 RET Z         ; }
 $F6D5 DEC DE        ; Decrease the duration counter by one.
 $F6D6 LD A,D        ; {Keep looping back to #R$F6B5 until the duration counter
 $F6D7 OR E          ; is zero.
 $F6D8 JR NZ,$F6B5   ; }
 $F6DA RET           ; Return.

; Music: Theme Tune
;
; Used by the routine at #R$FE69.
@label=MusicThemeTune
c$F6DB LD A,($FFF8)  ; {Jump to #R$F712 if *#R$FFF8 is equal to #N$00.
 $F6DE CP $00        ;
 $F6E0 JR Z,$F712    ; }
 $F6E2 PUSH BC       ; Stash #REGbc on the stack.
 $F6E3 LD A,($FE88)  ; {#REGc=*#R$FE88.
 $F6E6 LD C,A        ; }
 $F6E7 LD A,($FFF7)  ; #REGa=*#R$FFF7.
 $F6EA AND C         ; Merge the bits from #REGc.
 $F6EB POP BC        ; Restore #REGbc from the stack.
 $F6EC JR NZ,$F712   ; Jump to #R$F712 if {} is not zero.
 $F6EE PUSH BC       ; {Stash #REGbc, #REGde and #REGhl on the stack.
 $F6EF PUSH DE       ;
 $F6F0 PUSH HL       ; }
 $F6F1 LD HL,($FFF9) ; #REGhl=*#R$FFF9.
 $F6F4 LD A,(HL)     ; Fetch a byte of music data and store it in #REGa.
; Are we at the end?
 $F6F5 CP $FF        ; {Jump to #R$F71B if the termination character (#N$FF)
 $F6F7 JP Z,$F71B    ; has been reached.}
 $F6FA LD E,A        ; #REGe=the music data byte from #REGa.
 $F6FB INC HL        ; Increment the music data pointer by one.
 $F6FC LD A,(HL)     ; {#REGd=*#REGhl.
 $F6FD LD D,A        ; }
 $F6FE INC HL        ; Increment music data pointer by one.
 $F6FF LD A,(HL)     ; {#REGc=*#REGhl.
 $F700 LD C,A        ; }
 $F701 INC HL        ; Increment music data pointer by one.
 $F702 LD A,(HL)     ; {#REGb=*#REGhl.
 $F703 LD B,A        ; }
 $F704 INC HL        ; {Increment the music data pointer by one and write it to
 $F705 LD ($FFF9),HL ; *#R$FFF9 ready for the next interrupt generation.}
 $F708 LD A,E        ; {Jump to #R$F70F if #REGde is zero.
 $F709 OR D          ;
 $F70A JR Z,$F70F    ; }
 $F70C CALL $F648    ; Call #R$F648.
@label=MusicThemeTune_NoNote
*$F70F POP HL        ; {Restore #REGhl, #REGde and #REGbc from the stack.
 $F710 POP DE        ;
 $F711 POP BC        ; }
@label=MusicThemeTune_Housekeeping
*$F712 POP AF        ; {Restore #REGaf and #REGaf from the stack.
 $F713 POP AF        ; }
 $F714 CALL $0038    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0038.html">MASK_INT</a>.)
 $F717 POP IY        ; Restore #REGiy from the stack.
 $F719 EI            ; Enable interrupts.
 $F71A RET           ; Return.
; Resets the theme tune pointer back to the beginning of the data.
@label=MusicResetThemeTune
*$F71B LD HL,$FA00   ; {Write #R$FA00 to *#R$FFF9.
 $F71E LD ($FFF9),HL ; }
 $F721 JR $F70F      ; Jump to #R$F70F.

; Sound Handler: Collected Key
;
; Used by the routine at #R$F863.
@label=SoundHandler_CollectedKey
c$F723 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $F724 PUSH DE       ; }
 $F725 LD DE,$0019   ; #REGde=#N($0019,$04,$04).
 $F728 LD BC,$0032   ; #REGbc=#N($0032,$04,$04).
 $F72B CALL $F66C    ; Call #R$F66C.
 $F72E POP DE        ; {Restore #REGde, #REGbc and #REGaf from the stack.
 $F72F POP BC        ;
 $F730 POP AF        ; }
; The sound has now been played, so turn off the flag.
 $F731 LD A,$00      ; {Write #N$00 to *#R$FFFE.
 $F733 LD ($FFFE),A  ; }
 $F736 POP AF        ; Restore #REGaf from the stack.
 $F737 POP IY        ; Restore #REGiy from the stack.
 $F739 EI            ; Enable interrupts.
 $F73A RET           ; Return.

; Sound Handler: Unlocked Door
;
; Used by the routine at #R$F863.
@label=SoundHandler_UnlockedDoor
c$F73B PUSH DE       ; {Stash #REGde and #REGbc on the stack.
 $F73C PUSH BC       ; }
 $F73D LD DE,$0032   ; #REGde=#N($0032,$04,$04).
 $F740 LD BC,$0064   ; #REGbc=#N($0064,$04,$04).
 $F743 CALL $F6B5    ; Call #R$F6B5.
 $F746 POP BC        ; {Restore #REGbc, #REGde and #REGaf from the stack.
 $F747 POP DE        ;
 $F748 POP AF        ; }
; The sound has now been played, so turn off the flag.
 $F749 LD A,$00      ; {Write #N$00 to *#R$FFFE.
 $F74B LD ($FFFE),A  ; }
 $F74E POP AF        ; Restore #REGaf from the stack.
 $F74F POP IY        ; Restore #REGiy from the stack.
 $F751 EI            ; Enable interrupts.
 $F752 RET           ; Return.

; Sound Handler: Caught By Pirate
;
; Used by the routine at #R$F863.
@label=SoundHandler_CaughtByPirate
c$F753 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $F754 PUSH DE       ; }
 $F755 LD BC,$0096   ; #REGbc=#N($0096,$04,$04).
 $F758 LD DE,$0064   ; #REGde=#N($0064,$04,$04).
 $F75B CALL $F6B5    ; Call #R$F6B5.
 $F75E LD DE,$0064   ; #REGde=#N($0064,$04,$04).
 $F761 LD BC,$0001   ; #REGbc=#N($0001,$04,$04).
 $F764 CALL $F66C    ; Call #R$F66C.
 $F767 POP DE        ; {Restore #REGde, #REGbc and #REGaf from the stack.
 $F768 POP BC        ;
 $F769 POP AF        ; }
; The sound has now been played, so turn off the flag.
 $F76A LD A,$00      ; {Write #N$00 to *#R$FFFE.
 $F76C LD ($FFFE),A  ; }
 $F76F POP AF        ; Restore #REGaf from the stack.
 $F770 EI            ; Enable interrupts.
 $F771 POP IY        ; Restore #REGiy from the stack.
 $F773 RET           ; Return.

; Sound Handler: Bomb Explosion
;
; Used by the routine at #R$F863.
@label=SoundHandler_BombExplosion
c$F774 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $F775 PUSH DE       ; }
 $F776 LD DE,$00C8   ; #REGde=#N($00C8,$04,$04).
 $F779 LD BC,$0014   ; #REGbc=#N($0014,$04,$04).
 $F77C CALL $F66C    ; Call #R$F66C.
 $F77F POP DE        ; {Restore #REGde, #REGbc and #REGaf from the stack.
 $F780 POP BC        ;
 $F781 POP AF        ; }
; The sound has now been played, so turn off the flag.
 $F782 LD A,$00      ; {Write #N$00 to *#R$FFFE.
 $F784 LD ($FFFE),A  ; }
 $F787 POP AF        ; Restore #REGaf from the stack.
 $F788 EI            ; Enable interrupts.
 $F789 POP IY        ; Restore #REGiy from the stack.
 $F78B RET           ; Return.

; Sound Handler: Collected Item
;
; Used by the routine at #R$F863.
@label=SoundHandler_CollectedItem
c$F78C PUSH DE       ; {Stash #REGde and #REGbc on the stack.
 $F78D PUSH BC       ; }
 $F78E LD BC,$0032   ; #REGbc=#N($0032,$04,$04).
 $F791 LD DE,$0019   ; #REGde=#N($0019,$04,$04).
 $F794 CALL $F6B5    ; Call #R$F6B5.
 $F797 POP BC        ; {Restore #REGbc, #REGde and #REGaf from the stack.
 $F798 POP DE        ;
 $F799 POP AF        ; }
; The sound has now been played, so turn off the flag.
 $F79A LD A,$00      ; {Write #N$00 to *#R$FFFE.
 $F79C LD ($FFFE),A  ; }
 $F79F POP AF        ; Restore #REGaf from the stack.
 $F7A0 POP IY        ; Restore #REGiy from the stack.
 $F7A2 EI            ; Enable interrupts.
 $F7A3 RET           ; Return.

; Sound Handler: Touched Animal
;
; Used by the routine at #R$F863.
@label=SoundHandler_TouchedAnimal
c$F7A4 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $F7A5 PUSH DE       ; }
 $F7A6 LD B,$0A      ; #REGb=#N$0A.
*$F7A8 PUSH BC       ; Stash #REGbc on the stack.
 $F7A9 LD BC,$0064   ; #REGbc=#N($0064,$04,$04).
 $F7AC LD DE,$0032   ; #REGde=#N($0032,$04,$04).
 $F7AF CALL $F66C    ; Call #R$F66C.
 $F7B2 POP BC        ; Restore #REGbc from the stack.
 $F7B3 DJNZ $F7A8    ; Decrease counter by one and loop back to #R$F7A8 until
                     ; counter is zero.
 $F7B5 POP DE        ; {Restore #REGde, #REGbc and #REGaf from the stack.
 $F7B6 POP BC        ;
 $F7B7 POP AF        ; }
; The sound has now been played, so turn off the flag.
 $F7B8 LD A,$00      ; {Write #N$00 to *#R$FFFE.
 $F7BA LD ($FFFE),A  ; }
 $F7BD POP AF        ; Restore #REGaf from the stack.
 $F7BE POP IY        ; Restore #REGiy from the stack.
 $F7C0 EI            ; Enable interrupts.
 $F7C1 RET           ; Return.

; Routine at F7C2
;
; Used by the routine at #R$F7D8.
c$F7C2 LD BC,$0005   ; #REGbc=#N($0005,$04,$04).
 $F7C5 LD DE,$0032   ; #REGde=#N($0032,$04,$04).
 $F7C8 CALL $F648    ; Call #R$F648.
 $F7CB POP DE        ; {Restore #REGde, #REGbc, #REGaf and #REGaf from the
 $F7CC POP BC        ; stack.
 $F7CD POP AF        ;
 $F7CE POP AF        ; }
 $F7CF CALL $0038    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0038.html">MASK_INT</a>.)
 $F7D2 POP IY        ; Restore #REGiy from the stack.
 $F7D4 RET           ; Return.
 $F7D5 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $F7D6 POP BC        ; }
 $F7D7 RET           ; Return.

; Sound Handler: Bomb Fuse
;
; Used by the routine at #R$F855.
@label=SoundHandler_BombFuse
c$F7D8 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $F7D9 PUSH DE       ; }
 $F7DA LD A,($FE88)  ; #REGa=*#R$FE88.
 $F7DD AND %00000111 ; Keep only bits 0-2.
 $F7DF JP Z,$F7C2    ; Jump to #R$F7C2 if the result is zero.
 $F7E2 PUSH HL       ; Stash #REGhl on the stack.
 $F7E3 LD DE,$000A   ; #REGde=#N($000A,$04,$04).
 $F7E6 LD B,$1F      ; #REGb=#N$1F.
 $F7E8 CALL $F618    ; Call #R$F618.
 $F7EB POP HL        ; {Restore #REGhl, #REGde, #REGbc, #REGaf and #REGaf from
 $F7EC POP DE        ; the stack.
 $F7ED POP BC        ;
 $F7EE POP AF        ;
 $F7EF POP AF        ; }
 $F7F0 CALL $0038    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0038.html">MASK_INT</a>.)
 $F7F3 POP IY        ; Restore #REGiy from the stack.
 $F7F5 RET           ; Return.

; Sound Handler: Bomb Sparks
;
; Used by the routine at #R$F855.
@label=SoundHandler_BombSparks
c$F7F6 PUSH BC       ; {Stash #REGbc, #REGde and #REGhl on the stack.
 $F7F7 PUSH DE       ;
 $F7F8 PUSH HL       ; }
 $F7F9 LD B,$FF      ; #REGb=#N$FF.
 $F7FB LD DE,$0014   ; #REGde=#N($0014,$04,$04).
 $F7FE CALL $F618    ; Call #R$F618.
 $F801 POP HL        ; {Restore #REGhl, #REGde, #REGbc, #REGaf and #REGaf from
 $F802 POP DE        ; the stack.
 $F803 POP BC        ;
 $F804 POP AF        ;
 $F805 POP AF        ; }
 $F806 CALL $0038    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0038.html">MASK_INT</a>.)
 $F809 POP IY        ; Restore #REGiy from the stack.
 $F80B EI            ; Enable interrupts.
 $F80C RET           ; Return.

; Controller: Animal Sounds
;
; Used by the routine at #R$FE69.
@label=Controller_AnimalSounds
c$F80D LD A,($FFFF)  ; {Return if *#R$FFFF is "off" (#N$00).
 $F810 CP $00        ;
 $F812 RET Z         ; }
 $F813 CP $02        ; {Jump to #R$F837 if *#R$FFFF is equal to #N$02.
 $F815 JP Z,$F837    ; }
; Else, generate the "rat" sound.
 $F818 LD A,($FE88)  ; #REGa=*#R$FE88.
 $F81B AND %00000111 ; Keep only bits 0-2.
 $F81D JR NZ,$F82E   ; Jump to #R$F82E if the result is not zero.
 $F81F PUSH BC       ; {Stash #REGbc, #REGde and #REGhl on the stack.
 $F820 PUSH DE       ;
 $F821 PUSH HL       ; }
 $F822 LD BC,$0032   ; #REGbc=#N($0032,$04,$04).
 $F825 LD DE,$003C   ; #REGde=#N($003C,$04,$04).
 $F828 CALL $F648    ; Call #R$F648.
 $F82B POP HL        ; {Restore #REGhl, #REGde and #REGbc from the stack.
 $F82C POP DE        ;
 $F82D POP BC        ; }
; This entry point is used by the routine at #R$F837.
@label=AnimalSounds_HouseKeeping
*$F82E POP AF        ; {Restore #REGaf and #REGaf from the stack.
 $F82F POP AF        ; }
 $F830 CALL $0038    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0038.html">MASK_INT</a>.)
 $F833 POP IY        ; Restore #REGiy from the stack.
 $F835 EI            ; Enable interrupts.
 $F836 RET           ; Return.

; Sound Handler: Bird Sound
;
; Used by the routine at #R$F80D.
@label=SoundHandler_BirdSound
c$F837 LD A,($FE88)  ; #REGa=*#R$FE88.
 $F83A AND %00001111 ; Keep only bits 0-3.
 $F83C JP NZ,$F82E   ; Jump to #R$F82E if the result is not zero.
 $F83F PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $F840 PUSH DE       ; }
 $F841 LD DE,$000A   ; #REGde=#N($000A,$04,$04).
 $F844 LD BC,$000A   ; #REGbc=#N($000A,$04,$04).
 $F847 CALL $F648    ; Call #R$F648.
 $F84A POP DE        ; {Restore #REGde, #REGbc, #REGaf and #REGaf from the
 $F84B POP BC        ; stack.
 $F84C POP AF        ;
 $F84D POP AF        ; }
 $F84E CALL $0038    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0038.html">MASK_INT</a>.)
 $F851 POP IY        ; Restore #REGiy from the stack.
 $F853 EI            ; Enable interrupts.
 $F854 RET           ; Return.

; Controller: Bomb Sounds
;
; Used by the routine at #R$FE69.
;
; .
;
; Should we generate any sounds?
@label=Controller_BombSounds
c$F855 LD A,($FFFD)  ; {Return if *#R$FFFD is "Off" (#N$00).
 $F858 CP $00        ;
 $F85A RET Z         ; }
; Generate the bomb fuse burning down sound.
 $F85B CP $01        ; {Jump to #R$F7D8 if *#R$FFFD is set to "Fuse" (#N$01).
 $F85D JP Z,$F7D8    ; }
; Else, generate the "Sparks" sound.
 $F860 JP $F7F6      ; Else, jump to #R$F7F6.

; Controller: General Sounds
;
; Used by the routine at #R$FE69.
;
; .
;
; Should we generate any sounds?
@label=Controller_GeneralSounds
c$F863 LD A,($FFFE)  ; {Return if *#R$FFFE is "Off" (#N$00).
 $F866 CP $00        ;
 $F868 RET Z         ; }
 $F869 CP $01        ; {Jump to #R$F7A4 if *#R$FFFE is set to "Touched By
 $F86B JP Z,$F7A4    ; Animal" (#N$01).}
 $F86E CP $02        ; {Jump to #R$F753 if *#R$FFFE is set to "Caught By
 $F870 JP Z,$F753    ; Pirate" (#N$02).}
 $F873 CP $03        ; {Jump to #R$F774 if *#R$FFFE is set to "Bomb Explosion"
 $F875 JP Z,$F774    ; (#N$03).}
 $F878 CP $04        ; {Jump to #R$F78C if *#R$FFFE is set to "Collected Item"
 $F87A JP Z,$F78C    ; (#N$04).}
 $F87D CP $05        ; {Jump to #R$F73B if *#R$FFFE is set to "Unlocked Door"
 $F87F JP Z,$F73B    ; (#N$05).}
 $F882 CP $06        ; {Jump to #R$F723 if *#R$FFFE is set to "Collected Key"
 $F884 JP Z,$F723    ; (#N$06).}
 $F887 RET           ; Return.

; Routine at F888
;
; Used by the routine at #R$FE69.
c$F888 LD A,($FFFB)  ; {Return if *#R$FFFB is equal to #N$00.
 $F88B CP $00        ;
 $F88D RET Z         ; }
 $F88E LD A,($FFFC)  ; {Return if *#R$FFFC is equal to #N$00.
 $F891 CP $00        ;
 $F893 RET Z         ; }
 $F894 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $F895 PUSH DE       ; }
 $F896 LD DE,$00C8   ; #REGde=#N($00C8,$04,$04).
 $F899 LD BC,$0064   ; #REGbc=#N($0064,$04,$04).
 $F89C CALL $F66C    ; Call #R$F66C.
 $F89F POP DE        ; {Restore #REGde, #REGbc and #REGaf from the stack.
 $F8A0 POP BC        ;
 $F8A1 POP AF        ; }
 $F8A2 LD A,$00      ; {Write #N$00 to: #LIST { *#R$FFFB } { *#R$FFFC } LIST#
 $F8A4 LD ($FFFB),A  ;
 $F8A7 LD ($FFFC),A  ; }
 $F8AA POP AF        ; Restore #REGaf from the stack.
 $F8AB POP IY        ; Restore #REGiy from the stack.
 $F8AD EI            ; Enable interrupts.
 $F8AE RET           ; Return.

; Bomb Timer
;
; Used by the routine at #R$F618.
;
; O:A A random byte value taken from the ZX Spectrum ROM
@label=BombTimer
c$F8AF LD HL,($FE86) ; #REGhl=*#R$FE86.
 $F8B2 INC HL        ; Increment #REGhl by one.
 $F8B3 LD A,H        ; {Jump to #R$F8BB if #REGh is not equal to #N$20.
 $F8B4 CP $20        ;
 $F8B6 JR NZ,$F8BB   ; }
 $F8B8 LD HL,$0000   ; Reset #REGhl back to #N($0000,$04,$04).
@label=BombTimer_Update
*$F8BB LD ($FE86),HL ; Write #REGhl to *#R$FE86.
 $F8BE LD A,(HL)     ; #REGa=*#REGhl.
 $F8BF RET           ; Return.

; Delay Loop
;
; Used by the routines at #R$F648, #R$F66C and #R$F6B5.
;
; BC Length of loop
@label=Delay_Loop
c$F8C0 DEC BC        ; Decrease #REGbc by one.
 $F8C1 LD A,B        ; {Jump to #R$F8C0 until #REGbc is zero.
 $F8C2 OR C          ;
 $F8C3 JR NZ,$F8C0   ; }
 $F8C5 RET           ; Return.

; Unused
u$F8C6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8CE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8D6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8DE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8E6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8EE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8F6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8FE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F906 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F90E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F916 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F91E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F926 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F92E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F936 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F93E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F946 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F94E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F956 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F95E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F966 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F96E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F976 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F97E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F986 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F98E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F996 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F99E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9A6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9AE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9B6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9BE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9C6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9CE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9D6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9DE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9E6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9EE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9F6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9FE DEFB $00,$00

; Melody Data: Theme Tune
@label=MelodyData_ThemeTune
b$FA00 DEFB $26,$00,$2B,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA04 DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA08 DEFB $26,$00,$2B,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA0C DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA10 DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA14 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA18 DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA1C DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA20 DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA24 DEFB $1E,$00,$35,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA28 DEFB $1C,$00,$3A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA2C DEFB $2E,$00,$23,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA30 DEFB $2E,$00,$23,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA34 DEFB $2B,$00,$26,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA38 DEFB $2E,$00,$23,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA3C DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA40 DEFB $35,$00,$1E,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA44 DEFB $2E,$00,$23,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA48 DEFB $35,$00,$1E,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA4C DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA50 DEFB $19,$00,$41,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA54 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA58 DEFB $19,$00,$41,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA5C DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA60 DEFB $19,$00,$41,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA64 DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA68 DEFB $15,$00,$4E,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA6C DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA70 DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA74 DEFB $20,$00,$32,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA78 DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA7C DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA80 DEFB $26,$00,$2B,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA84 DEFB $2B,$00,$26,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA88 DEFB $2E,$00,$23,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA8C DEFB $2B,$00,$26,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA90 DEFB $26,$00,$2B,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA94 DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA98 DEFB $26,$00,$2B,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FA9C DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAA0 DEFB $1E,$00,$35,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAA4 DEFB $1C,$00,$3A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAA8 DEFB $1E,$00,$35,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAAC DEFB $1C,$00,$3A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAB0 DEFB $19,$00,$41,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAB4 DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAB8 DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FABC DEFB $14,$00,$50,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAC0 DEFB $12,$00,$5A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAC4 DEFB $10,$00,$67,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAC8 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FACC DEFB $12,$00,$5A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAD0 DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAD4 DEFB $15,$00,$4E,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAD8 DEFB $19,$00,$41,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FADC DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAE0 DEFB $1C,$00,$3A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAE4 DEFB $19,$00,$41,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAE8 DEFB $1E,$00,$35,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAEC DEFB $1C,$00,$3A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAF0 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAF4 DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAF8 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FAFC DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB00 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB04 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB08 DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB0C DEFB $1E,$00,$35,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB10 DEFB $1C,$00,$3A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB14 DEFB $2E,$00,$23,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB18 DEFB $2E,$00,$23,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB1C DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB20 DEFB $1C,$00,$3A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB24 DEFB $2E,$00,$23,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB28 DEFB $2E,$00,$23,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB2C DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB30 DEFB $26,$00,$2B,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB34 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB38 DEFB $1D,$00,$37,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB3C DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB40 DEFB $1D,$00,$37,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB44 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB48 DEFB $26,$00,$2B,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB4C DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB50 DEFB $1D,$00,$37,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB54 DEFB $35,$00,$1E,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB58 DEFB $35,$00,$1E,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB5C DEFB $26,$00,$2B,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB60 DEFB $1D,$00,$37,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB64 DEFB $35,$00,$1E,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB68 DEFB $35,$00,$1E,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB6C DEFB $26,$00,$2B,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB70 DEFB $2B,$00,$26,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB74 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB78 DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB7C DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB80 DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB84 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB88 DEFB $26,$00,$2B,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB8C DEFB $2B,$00,$26,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB90 DEFB $2E,$00,$23,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB94 DEFB $2B,$00,$26,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB98 DEFB $26,$00,$2B,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FB9C DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBA0 DEFB $26,$00,$2B,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBA4 DEFB $22,$00,$30,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBA8 DEFB $1E,$00,$35,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBAC DEFB $1C,$00,$3A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBB0 DEFB $1E,$00,$35,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBB4 DEFB $1C,$00,$3A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBB8 DEFB $19,$00,$41,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBBC DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBC0 DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBC4 DEFB $14,$00,$50,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBC8 DEFB $12,$00,$5A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBCC DEFB $10,$00,$67,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBD0 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBD4 DEFB $12,$00,$5A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBD8 DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBDC DEFB $15,$00,$4E,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBE0 DEFB $19,$00,$41,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBE4 DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBE8 DEFB $1C,$00,$3A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBEC DEFB $19,$00,$41,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBF0 DEFB $1E,$00,$35,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBF4 DEFB $1C,$00,$3A,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBF8 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FBFC DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FC00 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FC04 DEFB $16,$00,$49,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FC08 DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FC0C DEFB $00,$00,$00,$00 ; Note: #N($01+((#PC-$FA00)/$04)).
 $FC10 DEFB $FF,$FF,$FF,$FF ; Terminator.
 $FC14 DEFB $FF             ; Extra terminator (just in case).

; Data block at FC15
b$FC15 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC1D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC25 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC2D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC35 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC3D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC45 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC4D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC55 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC5D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC65 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC6D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC75 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC7D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC85 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC8D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC95 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC9D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCA5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCAD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCB5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCBD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCC5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCCD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCD5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCDD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCE5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCED DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCF5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCFD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD05 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD0D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD15 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD1D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD25 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD2D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD35 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD3D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD45 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD4D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD55 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD5D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD65 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD6D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD75 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD7D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD85 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD8D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD95 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD9D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDA5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDAD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDB5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDBD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDC5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDCD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDD5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDDD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDE5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDED DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDF5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDFD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE05 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE0D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE15 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE1D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE25 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE2D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE35 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE3D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE45 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE4D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE55 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE5D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE65 DEFB $00,$00,$00,$00

; Handler: Interrupts
;
; Used by the routine at #R$FEFE.
@label=Handler_Interrupts
c$FE69 PUSH IY       ; Stash #REGiy on the stack.
 $FE6B LD IY,$5C3A   ; #HTML(#REGiy=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3A.html">ERR_NR</a>.)
 $FE6F PUSH AF       ; Stash #REGaf on the stack.
 $FE70 LD A,($FE88)  ; {Increment *#R$FE88 by one.
 $FE73 INC A         ;
 $FE74 LD ($FE88),A  ; }
 $FE77 CALL $F888    ; Call #R$F888.
 $FE7A CALL $F80D    ; Call #R$F80D.
 $FE7D CALL $F855    ; Call #R$F855.
 $FE80 CALL $F863    ; Call #R$F863.
 $FE83 CALL $F6DB    ; Call #R$F6DB.

; Bomb Helper
;
; Incremented address which points to ZX Spectrum ROM for the purposes of
; creating the screeching noice you hear when the bomb is counting down.
@label=BombHelper
g$FE86 DEFW $0000

; Interrupt Counter
;
; Increments by one on every generated interrupt.
@label=InterruptCounter
g$FE88 DEFB $00

; Data block at FE89
b$FE89 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE91 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE99 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEA1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEA9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEB1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEB9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEC1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEC9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FED1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FED9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEE1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEE9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEF1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEF9 DEFB $00,$00,$00,$00,$00

; Alias: Interrupt Jump Dispatcher
;
; All generated interrupts jump here and then are redirected to #R$FE69.
@label=AliasInterruptRedirect
c$FEFE JP $FE69      ; Jump to #R$FE69.

; Data block at FF01
b$FF01 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF09 DEFB $00,$00,$00,$DB,$02,$DB,$02,$4D
 $FF11 DEFB $00,$78,$3E,$00,$00,$D1,$50,$F3
 $FF19 DEFB $0D,$CE,$0B,$E4,$50,$CE,$0B,$E5
 $FF21 DEFB $50,$1C,$17,$DC,$0A,$CE,$0B,$EB
 $FF29 DEFB $50,$16,$17,$DC,$0A,$D7,$18,$B1
 $FF31 DEFB $33,$48,$71,$05,$00,$DB,$02,$4D
 $FF39 DEFB $00,$DB,$02,$4D,$00,$00,$16,$21
 $FF41 DEFB $02,$C0,$5C,$94,$16,$C0,$57,$71
 $FF49 DEFB $0E,$F3,$0D,$21,$17,$C6,$1E,$40
 $FF51 DEFB $9C,$76,$1B,$03,$13,$00,$3E,$00
 $FF59 DEFB $3C,$42,$42,$7E,$42,$42,$00,$00
 $FF61 DEFB $7C,$42,$7C,$42,$42,$7C,$00,$00
 $FF69 DEFB $3C,$42,$40,$40,$42,$3C,$00,$00
 $FF71 DEFB $78,$44,$42,$42,$44,$78,$00,$00
 $FF79 DEFB $7E,$40,$7C,$40,$40,$7E,$00,$00
 $FF81 DEFB $7E,$40,$7C,$40,$40,$40,$00,$00
 $FF89 DEFB $3C,$42,$40,$4E,$42,$3C,$00,$00
 $FF91 DEFB $42,$42,$7E,$42,$42,$42,$00,$00
 $FF99 DEFB $3E,$08,$08,$08,$08,$3E,$00,$00
 $FFA1 DEFB $02,$02,$02,$42,$42,$3C,$00,$00
 $FFA9 DEFB $44,$48,$70,$48,$44,$42,$00,$00
 $FFB1 DEFB $40,$40,$40,$40,$40,$7E,$00,$00
 $FFB9 DEFB $42,$66,$5A,$42,$42,$42,$00,$00
 $FFC1 DEFB $42,$62,$52,$4A,$46,$42,$00,$00
 $FFC9 DEFB $3C,$42,$42,$42,$42,$3C,$00,$00
 $FFD1 DEFB $7C,$42,$42,$7C,$40,$40,$00,$00
 $FFD9 DEFB $3C,$42,$42

; Unused
u$FFDC LD BC,$02FF   ; #REGbc=#N$02FF.
 $FFDF LD HL,$5800   ; #REGhl=#N$5800 (attribute buffer location).
*$FFE2 LD (HL),$38   ; Write #COLOUR$38 (#N$38) to *#REGhl.
 $FFE4 INC HL        ; Increment #REGhl by one.
 $FFE5 DEC BC        ; Decrease #REGbc by one.
 $FFE6 LD A,B        ; {Return if #REGbc is zero.
 $FFE7 OR C          ;
 $FFE8 RET Z         ; }
 $FFE9 JR $FFE2      ; Jump to #R$FFE2.

; Data block at FFEB
b$FFEB DEFB $3C,$02,$42,$3C,$00,$00,$FE,$10
 $FFF3 DEFB $10,$10,$10,$10

; Game status buffer entry at FFF7
g$FFF7 DEFB $03

; Music: On/ Off
@label=MusicOnOff
g$FFF8 DEFB $03

; Music: Theme Tune Pointer
;
; Keep track of the current position of the music data. This is important
; as the theme tune uses interrupts to play, so it needs to know where to
; resume playing from.
@label=MusicPointerThemeMusic
g$FFF9 DEFW $FA00

; Sound Flag:
;
; Used by the routines at #R$CD14, #R$E058, #R$E361 and #R$F888.
g$FFFB DEFB $00

; Sound Flag:
;
; Used by the routines at #R$CD14, #R$EBD8 and #R$F888.
g$FFFC DEFB $00

; Sound Flag: Bomb
;
; Used by the routines at #R$E361, #R$E3E0, #R$E47A and #R$F855.
; .
; #TABLE(default,centre,centre)
; { =h Byte | =h Sound }
; { #N$00 | Off }
; { #N$01 | Fuse }
; { #N$02 | Sparks }
; TABLE#
@label=SoundFlag_Bomb
g$FFFD DEFB $00

; Sound Flag: General
;
; Used by the routines at #R$CD14, #R$E22D, #R$E361, #R$E3E0, #R$E5F4,
; #R$EB8D, #R$F001, #R$F107, #R$F723, #R$F73B, #R$F753, #R$F774, #R$F78C,
; #R$F7A4 and #R$F863.
; .
; #TABLE(default,centre,centre)
; { =h Byte | =h Sound }
; { #N$00 | Off }
; { #N$01 | Touched By Animal? }
; { #N$02 | Caught By Pirate }
; { #N$03 | Bomb Explosion? }
; { #N$04 | Collected Item }
; { #N$05 | Unlocked Door }
; { #N$06 | Collected Key }
; { #N$07 | No sound }
; TABLE#
@label=SoundFlag_General
g$FFFE DEFB $00

; Sound Flag: Animal
;
; Used by the routines at #R$E12A, #R$E22D and #R$F80D.
; .
; #TABLE(default,centre,centre)
; { =h Byte | =h Sound }
; { #N$00 | Off }
; { #N$01 | Rat }
; { #N$02 | Bird }
; TABLE#
@label=SoundFlag_Animal
g$FFFF DEFB $00
