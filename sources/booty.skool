@rom
@start
@expand=#DEF(#POKE #LINK:Pokes)
@expand=#DEF(#ANIMATE(delay,count=$50)(name=$a)*$name-1,$delay;#FOR$02,$count||x|$name-x|;||($name-animation))
@set-handle-unsupported-macros=1

; Loading Screen
;
; #UDGTABLE
; { =h Booty Loading Screen. }
; { #SCR$02(loading) }
; UDGTABLE#
@label=Loading
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $4020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$03,$FD,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$80,$70,$00,$00,$00,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4080 DEFB $00,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$F8,$38,$01,$F8,$01,$F8,$07,$C0,$07,$F1,$FE,$00,$00,$00,$07,$FF,$FF,$FF,$FF,$FF,$FF,$00 ;
 $40A0 DEFB $00,$00,$00,$00,$00,$00,$07,$80,$00,$0F,$80,$3E,$F0,$0E,$F0,$0E,$7C,$02,$3C,$0F,$80,$01,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F8,$00,$00,$00,$00,$00,$1F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4100 DEFB $7E,$3E,$7C,$7E,$7C,$3E,$7C,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7E,$3E,$7C,$7E,$7C,$3E,$7C,$78 ;
 $4120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$7E,$00,$00,$FE,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7E,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$80,$F0,$00,$00,$00,$00,$7C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$1C,$07,$9E,$07,$9E,$07,$C0,$03,$C0,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41A0 DEFB $00,$00,$00,$00,$00,$00,$0F,$C0,$00,$0F,$80,$3E,$F0,$1E,$F0,$1E,$7C,$04,$3C,$0F,$80,$03,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$F8,$00,$00,$00,$3F,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4200 DEFB $40,$08,$42,$40,$42,$08,$42,$44,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$42,$40,$42,$08,$42,$44 ;
 $4220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$01,$F8,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$00,$F0,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4280 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$0C,$0F,$0E,$0F,$0E,$0F,$80,$07,$81,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42A0 DEFB $00,$00,$00,$00,$00,$00,$1F,$E0,$00,$1F,$00,$7C,$F0,$3C,$F0,$3C,$F8,$0C,$78,$1F,$00,$07,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$0F,$FF,$FC,$00,$7F,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4300 DEFB $7C,$08,$42,$7C,$7C,$08,$42,$42,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7C,$08,$42,$7C,$7C,$08,$42,$42 ;
 $4320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$01,$F0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$01,$E0,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4380 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$0E,$1E,$07,$1E,$07,$0F,$80,$07,$81,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43A0 DEFB $00,$00,$00,$00,$00,$00,$1F,$E0,$00,$1F,$00,$FC,$E0,$3C,$E0,$3C,$F8,$18,$78,$1F,$00,$07,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$0F,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4400 DEFB $40,$08,$7C,$40,$42,$08,$7C,$42,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$7C,$40,$42,$08,$7C,$42 ;
 $4420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$03,$E0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3E,$03,$C3,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4480 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$E0,$0F,$3C,$07,$3C,$07,$1F,$00,$0F,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44A0 DEFB $00,$00,$00,$00,$00,$00,$1F,$E0,$00,$3E,$01,$F8,$E0,$78,$E0,$78,$F0,$38,$F0,$3E,$00,$07,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$00,$00,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4500 DEFB $40,$08,$44,$40,$42,$08,$44,$44,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$44,$40,$42,$08,$44,$44 ;
 $4520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$03,$E0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4560 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3E,$1F,$C7,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4580 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$E0,$1F,$3C,$07,$3C,$07,$1F,$00,$0F,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45A0 DEFB $00,$00,$00,$00,$00,$00,$1F,$E0,$00,$3F,$87,$F0,$70,$F0,$70,$F0,$78,$70,$F0,$7E,$00,$07,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$80,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4600 DEFB $40,$3E,$42,$7E,$7C,$3E,$42,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$3E,$42,$7E,$7C,$3E,$42,$78 ;
 $4620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$7E,$00,$07,$C0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7E,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4660 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$80,$00,$00,$00,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4680 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$C0,$1F,$78,$0F,$78,$0F,$3E,$00,$1E,$07,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46A0 DEFB $00,$00,$00,$00,$00,$00,$0F,$C0,$00,$7D,$FF,$E0,$79,$E0,$79,$E0,$79,$E0,$78,$FC,$00,$03,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$80,$00,$00,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$07,$C0,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4760 DEFB $00,$7F,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$7C,$7F,$00,$00,$00,$00,$03,$E0,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$FF,$FF,$FF,$FF,$80 ;
 $4780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$C0,$1F,$70,$0F,$70,$0F,$3E,$01,$1E,$07,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47A0 DEFB $00,$00,$00,$00,$00,$00,$07,$80,$00,$FC,$7F,$80,$1F,$80,$1F,$80,$3F,$C0,$1F,$7C,$00,$01,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$00,$00,$00,$00,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4800 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4820 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$06,$8C,$2C,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4840 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$C0,$80,$FF,$C0,$20,$0C,$80,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00 ;
 $4860 DEFB $00,$00,$00,$06,$0C,$01,$FF,$C0,$00,$00,$00,$FF,$C0,$12,$0C,$10,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4880 DEFB $00,$03,$F0,$04,$3F,$F3,$F0,$3F,$00,$00,$00,$6D,$22,$00,$4C,$80,$20,$4C,$81,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00 ;
 $48A0 DEFB $00,$80,$3F,$01,$F9,$E0,$E0,$03,$80,$00,$FF,$FF,$E0,$22,$0C,$30,$01,$FF,$E0,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48C0 DEFB $FC,$3C,$3E,$28,$00,$07,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48E0 DEFB $03,$1F,$E0,$03,$80,$01,$60,$00,$05,$00,$05,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$05,$05,$00,$00,$05,$05,$05,$00,$00,$05,$00,$00 ;
 $4900 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4920 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$19,$FF,$F3,$00,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4940 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$01,$00,$7F,$80,$10,$0C,$80,$00,$00,$00,$00,$00,$00,$03,$FF,$C0,$00,$00,$00,$00 ;
 $4960 DEFB $00,$00,$00,$06,$0E,$03,$FF,$F0,$00,$00,$00,$7F,$80,$64,$1E,$0C,$07,$5C,$10,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4980 DEFB $00,$0F,$C0,$00,$FF,$FF,$80,$03,$E0,$00,$00,$FF,$94,$00,$7F,$80,$40,$4C,$80,$80,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00 ;
 $49A0 DEFB $00,$80,$FF,$81,$E1,$E0,$30,$00,$C0,$00,$FF,$FF,$F0,$12,$0C,$50,$02,$0C,$10,$00,$03,$83,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $49C0 DEFB $FF,$3D,$F8,$08,$00,$07,$80,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $49E0 DEFB $07,$18,$F0,$00,$E0,$01,$60,$00,$00,$05,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$05,$05,$00,$00,$00,$05,$05,$00,$00,$00 ;
 $4A00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$00,$62,$0C,$08,$E0,$CE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$02,$00,$7F,$80,$08,$0C,$40,$00,$00,$00,$00,$00,$00,$0F,$FF,$F0,$00,$00,$00,$00 ;
 $4A60 DEFB $00,$00,$00,$06,$0E,$07,$C0,$18,$00,$00,$FF,$FF,$FF,$C8,$1E,$03,$18,$9E,$08,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4A80 DEFB $00,$1E,$00,$1F,$FF,$FC,$00,$00,$70,$00,$01,$4C,$88,$00,$8C,$40,$80,$7F,$80,$40,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00 ;
 $4AA0 DEFB $00,$83,$F0,$C7,$83,$78,$18,$00,$40,$00,$FF,$FF,$F8,$0B,$FF,$F0,$02,$0C,$10,$00,$00,$7F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4AC0 DEFB $07,$FF,$C0,$08,$00,$07,$80,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4AE0 DEFB $0E,$30,$38,$00,$10,$01,$60,$00,$00,$00,$05,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00 ;
 $4B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$C1,$84,$0C,$04,$1F,$0E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B40 DEFB $00,$00,$00,$00,$F0,$00,$00,$00,$00,$00,$00,$0C,$04,$00,$FF,$80,$04,$FF,$C0,$00,$00,$00,$00,$00,$00,$1F,$FF,$F8,$00,$00,$00,$00 ;
 $4B60 DEFB $00,$00,$00,$06,$0E,$0F,$00,$08,$00,$00,$00,$7F,$C6,$10,$1E,$00,$E1,$1E,$08,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4B80 DEFB $00,$1C,$00,$FF,$FF,$FF,$F8,$00,$10,$00,$02,$4C,$94,$00,$8C,$41,$00,$8C,$40,$20,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00 ;
 $4BA0 DEFB $00,$07,$90,$6C,$03,$3C,$08,$00,$40,$00,$FF,$FF,$FC,$04,$0D,$08,$02,$FF,$F0,$00,$00,$1F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4BC0 DEFB $1F,$FF,$80,$00,$00,$07,$80,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4BE0 DEFB $1C,$70,$1C,$00,$00,$01,$70,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00 ;
 $4C00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$2E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$3E,$08,$0C,$02,$00,$0D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C40 DEFB $00,$00,$00,$03,$F8,$00,$00,$00,$00,$00,$00,$0C,$08,$01,$3F,$00,$02,$7F,$C0,$00,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00 ;
 $4C60 DEFB $00,$00,$03,$FE,$0E,$1E,$00,$04,$00,$00,$00,$3F,$38,$20,$2D,$00,$02,$1E,$04,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4C80 DEFB $00,$78,$03,$F8,$03,$FF,$FF,$80,$10,$00,$04,$7F,$A2,$00,$FF,$C2,$00,$8C,$40,$18,$00,$00,$00,$00,$00,$1F,$FF,$F8,$00,$00,$00,$00 ;
 $4CA0 DEFB $00,$0F,$10,$28,$02,$1C,$08,$00,$00,$00,$FF,$FF,$FE,$06,$0E,$3F,$FF,$0C,$08,$00,$01,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4CC0 DEFB $7F,$FF,$FF,$00,$00,$03,$C0,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4CE0 DEFB $38,$60,$1C,$00,$00,$01,$70,$05,$05,$05,$05,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$05,$05,$05,$00,$05,$05,$05,$00,$05,$05,$00,$00 ;
 $4D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$5D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$10,$0C,$01,$01,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D40 DEFB $00,$00,$00,$03,$B8,$00,$00,$00,$00,$00,$00,$0C,$10,$FF,$FF,$FF,$E1,$7F,$A0,$00,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00 ;
 $4D60 DEFB $00,$00,$3F,$FF,$0E,$3C,$00,$04,$00,$00,$00,$3F,$00,$40,$2D,$00,$04,$2D,$04,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4D80 DEFB $00,$70,$07,$80,$0F,$FF,$0F,$F0,$00,$00,$08,$8C,$41,$01,$0C,$24,$00,$FF,$C0,$06,$00,$00,$00,$00,$00,$0F,$FF,$F0,$00,$00,$00,$00 ;
 $4DA0 DEFB $00,$1E,$10,$3F,$04,$1E,$00,$00,$00,$00,$FF,$FF,$FF,$07,$FF,$FF,$FF,$0C,$08,$00,$1F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4DC0 DEFB $F8,$7F,$FF,$E0,$00,$03,$C0,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4DE0 DEFB $30,$60,$0E,$00,$00,$01,$70,$00,$00,$00,$00,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00,$00 ;
 $4E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$AC,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$20,$0C,$00,$80,$0D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E40 DEFB $00,$00,$00,$03,$1C,$00,$00,$00,$00,$00,$00,$0C,$20,$04,$8C,$40,$00,$FF,$A0,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00 ;
 $4E60 DEFB $00,$00,$FF,$FF,$FE,$F8,$07,$80,$00,$00,$00,$1E,$80,$80,$3F,$00,$08,$2D,$02,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4E80 DEFB $00,$E0,$0C,$00,$7F,$F8,$01,$F8,$00,$00,$10,$8C,$C0,$81,$0C,$28,$01,$0C,$20,$01,$80,$00,$00,$00,$00,$03,$FF,$C0,$00,$00,$00,$00 ;
 $4EA0 DEFB $00,$1C,$01,$F8,$E4,$0E,$00,$00,$00,$00,$FF,$FF,$FF,$88,$8C,$3F,$FF,$FF,$F8,$01,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4EC0 DEFB $E0,$FF,$C1,$F8,$00,$03,$C0,$00,$00,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4EE0 DEFB $60,$E0,$0E,$00,$00,$01,$30,$00,$00,$05,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$00,$00,$00,$05,$00,$00,$00,$00,$05,$05,$00,$01,$00 ;
 $4F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$4C,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$40,$0C,$00,$40,$0C,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F40 DEFB $00,$00,$00,$07,$1C,$00,$7E,$00,$00,$00,$00,$0C,$40,$09,$0C,$20,$00,$7F,$20,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00 ;
 $4F60 DEFB $00,$01,$FE,$07,$FF,$F0,$3F,$F8,$00,$00,$00,$2D,$41,$00,$4C,$80,$10,$3F,$02,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $4F80 DEFB $00,$C0,$10,$00,$FF,$FF,$80,$3E,$00,$00,$21,$FF,$C0,$41,$FF,$F0,$01,$0C,$20,$00,$60,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00 ;
 $4FA0 DEFB $F0,$1C,$0F,$28,$14,$0F,$00,$00,$00,$00,$FF,$FF,$FF,$C8,$5C,$3F,$FF,$0C,$04,$1F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FC0 DEFB $81,$CF,$80,$1F,$00,$03,$E0,$00,$00,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FE0 DEFB $60,$C0,$0F,$00,$00,$01,$38,$05,$05,$00,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$05,$00,$00,$05,$05,$05,$05,$00,$00,$01,$00 ;
 $5000 DEFB $60,$C0,$07,$00,$00,$05,$B8,$05,$05,$00,$05,$05,$00,$00,$05,$00,$05,$00,$00,$05,$05,$00,$00,$05,$00,$00,$00,$00,$00,$05,$05,$00 ;
 $5020 DEFB $01,$00,$05,$E0,$05,$05,$9C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$05,$00 ;
 $5040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5080 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5100 DEFB $C1,$C0,$07,$00,$05,$00,$B8,$00,$00,$00,$00,$00,$00,$05,$00,$05,$00,$00,$05,$00,$00,$00,$05,$00,$00,$05,$05,$05,$00,$00,$00,$00 ;
 $5120 DEFB $01,$05,$00,$E0,$00,$00,$9C,$05,$05,$05,$00,$00,$00,$00,$00,$05,$00,$05,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$00,$05,$00,$00 ;
 $5140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5160 DEFB $7C,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7E,$3E,$7C,$7E,$7E,$40,$82 ;
 $5180 DEFB $7C,$00,$10,$00,$00,$00,$00,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$00,$18,$3C,$3C,$08,$00,$02,$00,$7E,$00,$3C,$00,$10,$00 ;
 $51A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5200 DEFB $C1,$80,$07,$80,$00,$05,$B8,$05,$05,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$05,$00,$05,$05,$00,$00,$00,$00,$00 ;
 $5220 DEFB $01,$00,$05,$E0,$00,$00,$9C,$05,$05,$00,$05,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00 ;
 $5240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5260 DEFB $42,$1C,$38,$3C,$1C,$38,$68,$00,$00,$20,$38,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$42,$40,$40,$40,$44 ;
 $5280 DEFB $42,$44,$38,$38,$38,$00,$00,$20,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$9C,$80,$28,$42,$42,$18,$00,$02,$00,$40,$00,$42,$38,$00,$78 ;
 $52A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5300 DEFB $81,$80,$07,$80,$00,$00,$B8,$05,$05,$00,$00,$05,$05,$00,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$05,$05,$00,$00,$00,$05,$00 ;
 $5320 DEFB $01,$00,$00,$E0,$05,$05,$9C,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$00,$00,$00,$05,$05,$00,$05,$05,$05,$05,$05,$00,$00,$05 ;
 $5340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5360 DEFB $42,$20,$44,$44,$20,$04,$54,$10,$00,$3C,$44,$44,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7C,$08,$42,$7C,$7C,$40,$28 ;
 $5380 DEFB $7C,$44,$10,$44,$40,$10,$00,$3C,$20,$00,$00,$00,$00,$00,$00,$00,$00,$A2,$80,$08,$42,$3C,$28,$00,$02,$00,$7C,$00,$40,$04,$30,$44 ;
 $53A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5400 DEFB $81,$80,$07,$C0,$05,$05,$9C,$05,$05,$05,$05,$00,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$05,$05,$05,$05,$05,$00,$05,$05,$00,$00 ;
 $5420 DEFB $01,$05,$05,$F0,$00,$00,$9C,$05,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$05,$00 ;
 $5440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5460 DEFB $7C,$20,$44,$44,$20,$3C,$54,$00,$00,$22,$44,$44,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$7C,$40,$40,$40,$10 ;
 $5480 DEFB $42,$44,$10,$78,$38,$00,$00,$22,$20,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$80,$08,$3E,$42,$48,$00,$42,$00,$40,$00,$40,$3C,$10,$44 ;
 $54A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5500 DEFB $81,$80,$03,$C0,$00,$00,$9C,$00,$00,$00,$00,$05,$00,$05,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$05,$05,$00,$00,$05,$01 ;
 $5520 DEFB $00,$00,$00,$F0,$05,$05,$9C,$00,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$00,$00,$05,$00,$05,$05,$05,$05,$00,$00,$05,$00,$05 ;
 $5540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5560 DEFB $40,$20,$44,$3C,$20,$44,$54,$00,$00,$22,$44,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$44,$40,$40,$40,$10 ;
 $5580 DEFB $42,$3C,$10,$40,$04,$00,$00,$22,$20,$00,$00,$00,$00,$00,$00,$00,$00,$A2,$80,$08,$02,$42,$7E,$00,$42,$00,$40,$00,$42,$44,$10,$44 ;
 $55A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5600 DEFB $01,$00,$03,$C0,$05,$00,$9C,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$05,$00,$00,$00,$05,$00,$00,$05,$05,$05,$00,$00,$00,$01 ;
 $5620 DEFB $00,$05,$00,$F0,$00,$00,$9C,$05,$05,$05,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00 ;
 $5640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5660 DEFB $40,$20,$38,$04,$20,$3C,$54,$10,$00,$3C,$38,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$3E,$42,$7E,$40,$7E,$10 ;
 $5680 DEFB $7C,$04,$0C,$3C,$78,$10,$00,$3C,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$9C,$80,$3E,$3C,$3C,$08,$00,$3C,$00,$40,$00,$3C,$3C,$38,$44 ;
 $56A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5700 DEFB $01,$00,$01,$E0,$00,$00,$9C,$05,$05,$05,$05,$00,$05,$00,$00,$00,$00,$05,$00,$05,$00,$05,$00,$00,$05,$00,$00,$05,$05,$05,$00,$01 ;
 $5720 DEFB $00,$00,$00,$F0,$05,$05,$9C,$05,$05,$00,$00,$05,$05,$05,$00,$00,$00,$00,$00,$05,$05,$00,$05,$00,$05,$05,$05,$05,$05,$00,$00,$00 ;
 $5740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5760 DEFB $00,$00,$00,$38,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5780 DEFB $00,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $5800 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ; {Attributes.
 $5820 DEFB $28,$28,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$28,$28,$28,$28,$28,$28 ;
 $5840 DEFB $28,$28,$28,$28,$28,$28,$28,$2D,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$28,$28,$28,$28 ;
 $5860 DEFB $2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F ;
 $5880 DEFB $2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F ;
 $58A0 DEFB $28,$28,$28,$28,$28,$28,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$28,$28,$28,$28,$28,$28,$28,$28 ;
 $58C0 DEFB $28,$28,$28,$28,$28,$28,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$28,$28,$28,$28,$28,$28,$28,$28,$28 ;
 $58E0 DEFB $28,$28,$28,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$2F,$28,$28,$28,$28,$28,$28,$28,$28,$28 ;
 $5900 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$2D,$28,$28,$28,$28,$28,$28,$28,$28,$28 ;
 $5920 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28 ;
 $5940 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$2E,$2E,$2E,$28,$28,$28,$28 ;
 $5960 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$2E,$2E,$2E,$28,$28,$28,$28 ;
 $5980 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$2E,$2E,$2E,$28,$28,$28,$28 ;
 $59A0 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28 ;
 $59C0 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28 ;
 $59E0 DEFB $08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08 ;
 $5A00 DEFB $08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08 ;
 $5A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ;
 $5AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ;
 $5AC0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ;
 $5AE0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ; }

; Data block at 5B00
b$5B00 DEFB $00,$21,$FE,$FE,$3E,$C3,$77,$23
 $5B08 DEFB $3E,$69,$77,$23,$3E,$FE,$77,$21
 $5B10 DEFB $00,$F4,$01,$04,$01,$3E,$FE,$77
 $5B18 DEFB $23,$0B,$78,$B1,$20,$F7,$01,$00
 $5B20 DEFB $00,$ED,$43,$FE,$FF,$ED,$43,$FC
 $5B28 DEFB $FF,$ED,$43,$FB,$FF,$F3,$21,$00
 $5B30 DEFB $FA,$22,$F9,$FF,$3E,$F4,$ED,$47
 $5B38 DEFB $ED,$5E,$3E,$03,$32,$F7,$FF

; Game status buffer entry at 5B3F
g$5B3F DEFW $CD14

; Data block at 5B41
b$5B41 DEFB $01,$00,$FF,$FF,$00,$00,$00,$00
 $5B49 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B51 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B59 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B61 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B69 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B71 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B79 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B81 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B89 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B91 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B99 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC9 DEFB $00,$00,$00

; Game status buffer entry at 5BCC
g$5BCC DEFB $00,$00,$00,$00

; Current Room Paper Colour
@label=CurrentRoom_PaperColour
g$5BD0 DEFB $00

; Game status buffer entry at 5BD1
g$5BD1 DEFB $00,$00

; Game status buffer entry at 5BD3
g$5BD3 DEFB $00,$00,$00,$00,$00,$00,$00

; Game status buffer entry at 5BDA
g$5BDA DEFW $0000

; Game status buffer entry at 5BDC
g$5BDC DEFW $0000

; Pirate Reference
@label=PirateReference
g$5BDE DEFW $0000    ; Reference to Pirate data.

; Game status buffer entry at 5BE0
g$5BE0 DEFB $00,$00,$00,$00,$00,$00,$00

; Pirate Attribute
@label=PirateAttribute
g$5BE7 DEFB $00      ; Pirate INK colour.
 $5BE8 DEFB $00,$00

; Control Method
;
; #TABLE(default,centre,centre)
; { =h Byte | =h Control Method }
; { #N$0C | Kempston Joystick }
; { #N$14 | Cursor Joystick }
; { #N$1C | Interface 2 Joystick }
; { #N$24 | Keyboard }
; TABLE#
@label=ControlMethod
g$5BEA DEFB $00

; User-Defined Keys
@label=UserDefinedKeys_Left
g$5BEB DEFB $00
@label=UserDefinedKeys_Right
 $5BEC DEFB $00
@label=UserDefinedKeys_Up
 $5BED DEFB $00
@label=UserDefinedKeys_Down
 $5BEE DEFB $00
@label=UserDefinedKeys_Fire
 $5BEF DEFB $00

; Game status buffer entry at 5BF0
g$5BF0 DEFB $00

; Player Lives
@label=PlayerLives
g$5BF1 DEFB $00

; Player Treasure
@label=PlayerTreasure
g$5BF2 DEFB $00,$00

; Player Booty
@label=PlayerBooty
g$5BF4 DEFB $00,$00
 $5BF6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BFE DEFB $00,$00,$FF,$00,$00,$00,$FF,$00
 $5C06 DEFB $23,$0D,$0D,$23,$05,$00,$00,$00
 $5C0E DEFB $16,$13,$01,$00,$06,$00,$0B,$00
 $5C16 DEFB $01,$00,$01,$00,$06,$00,$10,$00
 $5C1E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C26 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C2E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C36 DEFB $00,$3C,$40,$00,$FF,$CD,$00,$F3
 $5C3E DEFB $68,$00,$00,$00,$01,$00,$FF,$0A
 $5C46 DEFB $00,$08,$07,$00,$00,$40,$5D,$00
 $5C4E DEFB $00,$B6,$5C,$BB,$5C,$CB,$5C,$3C
 $5C56 DEFB $5D,$CA,$5C,$41,$5D,$44,$5D,$2D
 $5C5E DEFB $5D,$9B,$5D,$46,$5D,$46,$5D,$46
 $5C66 DEFB $5D,$2D,$92,$5C,$00,$02,$00,$00
 $5C6E DEFB $00,$00,$00,$00,$00,$00,$B6,$1A
 $5C76 DEFB $02,$00,$07,$00,$00,$58,$FF,$00
 $5C7E DEFB $00,$21,$00,$5B,$21,$17,$A0,$50
 $5C86 DEFB $E0,$50,$21,$03,$21,$17,$03,$00
 $5C8E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C96 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C9E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CAE DEFB $00,$00,$00,$00,$F6,$68,$FF,$FF
 $5CB6 DEFB $F4,$09,$A8,$10,$4B,$F4,$09,$C4
 $5CBE DEFB $15,$53,$81,$0F,$C4,$15,$52,$F4
 $5CC6 DEFB $09,$C4,$15,$50,$80,$00,$0A,$6D
 $5CCE DEFB $00,$E7,$30,$0E,$00,$00,$00,$00
 $5CD6 DEFB $00,$3A,$DA,$30,$0E,$00,$00,$00
 $5CDE DEFB $00,$00,$3A,$D9,$30,$0E,$00,$00
 $5CE6 DEFB $00,$00,$00,$3A,$FD,$32,$36,$38
 $5CEE DEFB $37,$30,$0E,$00,$00,$F6,$68,$00
 $5CF6 DEFB $3A,$EF,$22,$22,$AA,$3A,$F5,$AC
 $5CFE DEFB $31,$39,$0E,$00,$00,$13,$00,$00
 $5D06 DEFB $2C,$30,$0E,$00,$00,$00,$00,$00
 $5D0E DEFB $3B,$3A,$EF,$22,$22,$AF,$32,$36
 $5D16 DEFB $38,$38,$30,$0E,$00,$00,$00,$69
 $5D1E DEFB $00,$3A,$F9,$C0,$32,$36,$38,$38
 $5D26 DEFB $30,$0E,$00,$00,$00,$69,$00,$3A
 $5D2E DEFB $F9,$C0,$35,$32,$35,$30,$30,$0E
 $5D36 DEFB $00,$00,$14,$CD,$00,$0D,$FF,$FF
 $5D3E DEFB $C4,$00,$80,$EF,$22,$22,$0D,$80
 $5D46 DEFB $00,$00,$00,$69,$00,$20,$20,$20
 $5D4E DEFB $20,$20,$20,$00,$00,$00,$69,$00
 $5D56 DEFB $00,$03,$62,$63,$20,$20,$20,$20
 $5D5E DEFB $20,$20,$20,$20,$FF,$96,$18,$65
 $5D66 DEFB $00,$69,$00,$00,$00,$69,$00,$00
 $5D6E DEFB $00,$00,$00,$00,$20,$20,$20,$FC
 $5D76 DEFB $00,$01,$00,$E9,$00,$0D,$00,$00
 $5D7E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D86 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D8E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D96 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D9E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DA6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DAE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DB6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DBE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DC6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DCE DEFB $00,$40,$5D,$00,$00,$FF,$8C,$FF
 $5DD6 DEFB $00,$00,$00,$00,$01,$00,$00,$00
 $5DDE DEFB $00

; Messaging: Booty
@label=Messaging_Booty
t$5DDF DEFM "BOOTY     " ; "#STR(#PC,$04,$0A)".

; Data block at 5DE9
b$5DE9 DEFB $FC,$00,$01,$00,$E9,$00,$0D,$00
 $5DF1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DF9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E01 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E09 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E11 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E19 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E21 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E29 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E31 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E39 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E41 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E49 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E51 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E59 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E61 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E69 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E71 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E79 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E81 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E89 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E91 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E99 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F01 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F09 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F11 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F19 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F21 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F29 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F31 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F39 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F41 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F49 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F51 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F59 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F61 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F69 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F71 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F79 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F81 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F89 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F91 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F99 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FA1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FA9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FB1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FB9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FE1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FE9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FF1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FF9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6001 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6009 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6011 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6019 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6021 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6029 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6031 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6039 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6041 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6049 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6051 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6059 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6061 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6069 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6071 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6079 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6081 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6089 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6091 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6099 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6101 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6109 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6111 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6119 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6121 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6129 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6131 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6139 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6141 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6149 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6151 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6159 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6161 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6169 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6171 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6179 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6181 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6189 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6191 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6199 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6201 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6209 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6211 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6219 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6221 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6229 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6231 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6239 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6241 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6249 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6251 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6259 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6261 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6269 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6271 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6279 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6281 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6289 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6291 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6299 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6301 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6309 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6311 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6319 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6321 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6329 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6331 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6339 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6341 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6349 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6351 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6359 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6361 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6369 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6371 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6379 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6381 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6389 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6391 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6399 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6401 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6409 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6411 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6419 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6421 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6429 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6431 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6439 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6441 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6449 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6451 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6459 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6461 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6469 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6471 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6479 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6481 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6489 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6491 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6499 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6501 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6509 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6511 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6519 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6521 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6529 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6531 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6539 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6541 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6549 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6551 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6559 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6561 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6569 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6571 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6579 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6581 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6589 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6591 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6599 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6601 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6609 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6611 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6619 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6621 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6629 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6631 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6639 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6641 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6649 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6651 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6659 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6661 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6669 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6671 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6679 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6681 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6689 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6691 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6699 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6701 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6709 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6711 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6719 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6721 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6729 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6731 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6739 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6741 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6749 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6751 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6759 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6761 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6769 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6771 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6779 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6781 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6789 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6791 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6799 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6801 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6809 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6811 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6819 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6821 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6829 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6831 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6839 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6841 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6849 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6851 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6859 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6861 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6869 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6871 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6879 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6881 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6889 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6891 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6899 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68C9 DEFB $00,$00,$00,$00,$00,$00,$DB,$02
 $68D1 DEFB $4D,$00,$C8,$3F,$20,$04,$E6,$05
 $68D9 DEFB $CD,$05,$40,$69,$00,$69,$2B,$2D
 $68E1 DEFB $65,$33,$00,$00,$ED,$10,$3A,$00
 $68E9 DEFB $09,$00,$85,$1C,$10,$1C,$52,$1B
 $68F1 DEFB $76,$1B,$0C,$4C,$00,$3E,$00,$00
 $68F9 DEFB $00,$00,$00,$00,$00,$00,$00,$DD
 $6901 DEFB $21,$00,$00,$DD,$39,$DD,$7E,$14
 $6909 DEFB $F3,$DD,$CB,$15,$26,$CB,$27,$DD
 $6911 DEFB $77,$14,$DD,$AE,$15,$C5,$DD,$21
 $6919 DEFB $01,$00,$A7,$37,$08,$0E,$22,$1E
 $6921 DEFB $06,$06,$9C,$CD,$E3,$05,$30,$F7
 $6929 DEFB $3E,$C6,$B8,$30,$F2,$1D,$20,$F1
 $6931 DEFB $1C,$3E,$FF,$37,$08,$11,$47,$00
 $6939 DEFB $DD,$21,$01,$5B,$CD,$8F,$05

@org

; Game Entry Point
c$6940 DI            ; Disable interrupts.
 $6941 LD DE,($5B3F) ; #REGde=*#R$5B3F.
 $6945 JR $6957      ; Jump to #R$6957.

; Data block at 6947
b$6947 DEFB $2A,$53,$5C,$EB,$ED,$4B,$41,$5B
 $694F DEFB $ED,$43,$42,$5C,$FD,$36,$0A,$00

; Routine at 6957
;
; Used by the routine at #R$6940.
c$6957 LD HL,$5B01   ; #REGhl=#N$5B01.
 $695A LD BC,$003E   ; #REGbc=#N($003E,$04,$04).
 $695D LDIR          ; Copy #REGhl to #REGde #N($003E,$04,$04) times.
 $695F EXX           ; Switch to the shadow registers.
 $6960 LD HL,$2758   ; #REGhl'=#N$2758.
 $6963 EXX           ; Switch back to the normal registers.
 $6964 EI            ; Enable interrupts.
 $6965 POP DE        ; Restore #REGde from the stack.
 $6966 RET           ; Return.

; Data block at 6967
b$6967 DEFB $4B,$5C,$C3,$E5,$19,$00,$0D,$3E
 $696F DEFB $0E,$01,$64,$00,$0D,$3E,$0E,$01
 $6977 DEFB $64

; Introduction Screen
;
; #PUSHS #SIM(start=$CD9D,stop=$CDA8)
; #UDGTABLE { =h Booty Introduction Screen. }
; { #SCR$02(introduction-screen) }
; UDGTABLE#
; #POPS
@label=IntroductionScreen
b$6978 DEFB $00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $6998 DEFB $00,$00,$0C,$00,$06,$8C,$2C,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $69B8 DEFB $00,$00,$FF,$C0,$80,$FF,$C0,$20,$0C,$80,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $69D8 DEFB $00,$00,$FF,$C0,$12,$0C,$10,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$06,$0C,$01,$FF,$C0,$00 ;
 $69F8 DEFB $00,$00,$6D,$22,$00,$4C,$80,$20,$4C,$81,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00,$00,$03,$F0,$04,$3F,$F3,$F0,$3F,$00 ;
 $6A18 DEFB $00,$FF,$FF,$E0,$22,$0C,$30,$01,$FF,$E0,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$3F,$01,$F9,$E0,$E0,$03,$80 ;
 $6A38 DEFB $00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FC,$3C,$3E,$28,$00,$07,$00,$00,$00 ;
 $6A58 DEFB $00,$05,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$05,$05,$00,$00,$05,$05,$05,$00,$00,$05,$00,$CF,$03,$1F,$E0,$03,$80,$01,$60,$00,$05 ;
 $6A78 DEFB $00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6A98 DEFB $00,$00,$0C,$00,$19,$FF,$F3,$00,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6AB8 DEFB $00,$00,$0C,$01,$00,$7F,$80,$10,$0C,$80,$00,$00,$00,$00,$00,$00,$03,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6AD8 DEFB $00,$00,$7F,$80,$64,$1E,$0C,$07,$5C,$10,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$06,$0E,$03,$FF,$F0,$00 ;
 $6AF8 DEFB $00,$00,$FF,$94,$00,$7F,$80,$40,$4C,$80,$80,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00,$00,$0F,$C0,$00,$FF,$FF,$80,$03,$E0 ;
 $6B18 DEFB $00,$FF,$FF,$F0,$12,$0C,$50,$02,$0C,$10,$00,$03,$83,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$81,$E1,$E0,$30,$00,$C0 ;
 $6B38 DEFB $00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$3D,$F8,$08,$00,$07,$80,$00,$00 ;
 $6B58 DEFB $05,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$05,$05,$00,$00,$00,$05,$05,$00,$00,$9C,$07,$18,$F0,$00,$E0,$01,$60,$00,$00 ;
 $6B78 DEFB $00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6B98 DEFB $00,$00,$0F,$00,$62,$0C,$08,$E0,$CE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6BB8 DEFB $00,$00,$0C,$02,$00,$7F,$80,$08,$0C,$40,$00,$00,$00,$00,$00,$00,$0F,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6BD8 DEFB $00,$FF,$FF,$FF,$C8,$1E,$03,$18,$9E,$08,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$06,$0E,$07,$C0,$18,$00 ;
 $6BF8 DEFB $00,$01,$4C,$88,$00,$8C,$40,$80,$7F,$80,$40,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00,$00,$1E,$00,$1F,$FF,$FC,$00,$00,$70 ;
 $6C18 DEFB $00,$FF,$FF,$F8,$0B,$FF,$F0,$02,$0C,$10,$00,$00,$7F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$83,$F0,$C7,$83,$78,$18,$00,$40 ;
 $6C38 DEFB $00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38,$07,$FF,$C0,$08,$00,$07,$80,$00,$00 ;
 $6C58 DEFB $00,$05,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$98,$0E,$30,$38,$00,$10,$01,$60,$00,$00 ;
 $6C78 DEFB $00,$00,$00,$00,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6C98 DEFB $00,$00,$0C,$C1,$84,$0C,$04,$1F,$0E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6CB8 DEFB $00,$00,$0C,$04,$00,$FF,$80,$04,$FF,$C0,$00,$00,$00,$00,$00,$00,$1F,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$F0,$00,$00,$00,$00 ;
 $6CD8 DEFB $00,$00,$7F,$C6,$10,$1E,$00,$E1,$1E,$08,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$06,$0E,$0F,$00,$08,$00 ;
 $6CF8 DEFB $00,$02,$4C,$94,$00,$8C,$41,$00,$8C,$40,$20,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00,$00,$1C,$00,$FF,$FF,$FF,$F8,$00,$10 ;
 $6D18 DEFB $00,$FF,$FF,$FC,$04,$0D,$08,$02,$FF,$F0,$00,$00,$1F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$90,$6C,$03,$3C,$08,$00,$40 ;
 $6D38 DEFB $00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$1F,$FF,$80,$00,$00,$07,$80,$00,$00 ;
 $6D58 DEFB $00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$30,$1C,$70,$1C,$00,$00,$01,$70,$00,$00 ;
 $6D78 DEFB $00,$00,$00,$00,$00,$2E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6D98 DEFB $00,$00,$0C,$3E,$08,$0C,$02,$00,$0D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6DB8 DEFB $00,$00,$0C,$08,$01,$3F,$00,$02,$7F,$C0,$00,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$03,$F8,$00,$00,$00,$00 ;
 $6DD8 DEFB $00,$00,$3F,$38,$20,$2D,$00,$02,$1E,$04,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$03,$FE,$0E,$1E,$00,$04,$00 ;
 $6DF8 DEFB $00,$04,$7F,$A2,$00,$FF,$C2,$00,$8C,$40,$18,$00,$00,$00,$00,$00,$1F,$FF,$F8,$00,$00,$00,$00,$00,$78,$03,$F8,$03,$FF,$FF,$80,$10 ;
 $6E18 DEFB $00,$FF,$FF,$FE,$06,$0E,$3F,$FF,$0C,$08,$00,$01,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$10,$28,$02,$1C,$08,$00,$00 ;
 $6E38 DEFB $00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$7F,$FF,$FF,$00,$00,$03,$C0,$00,$00 ;
 $6E58 DEFB $05,$05,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$05,$05,$05,$00,$05,$05,$05,$00,$05,$05,$00,$60,$38,$60,$1C,$00,$00,$01,$70,$05,$05 ;
 $6E78 DEFB $00,$00,$00,$00,$00,$5D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6E98 DEFB $00,$00,$0C,$00,$10,$0C,$01,$01,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6EB8 DEFB $00,$00,$0C,$10,$FF,$FF,$FF,$E1,$7F,$A0,$00,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$03,$B8,$00,$00,$00,$00 ;
 $6ED8 DEFB $00,$00,$3F,$00,$40,$2D,$00,$04,$2D,$04,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$3F,$FF,$0E,$3C,$00,$04,$00 ;
 $6EF8 DEFB $00,$08,$8C,$41,$01,$0C,$24,$00,$FF,$C0,$06,$00,$00,$00,$00,$00,$0F,$FF,$F0,$00,$00,$00,$00,$00,$70,$07,$80,$0F,$FF,$0F,$F0,$00 ;
 $6F18 DEFB $00,$FF,$FF,$FF,$07,$FF,$FF,$FF,$0C,$08,$00,$1F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1E,$10,$3F,$04,$1E,$00,$00,$00 ;
 $6F38 DEFB $00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$F8,$7F,$FF,$E0,$00,$03,$C0,$00,$00 ;
 $6F58 DEFB $00,$00,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00,$C0,$30,$60,$0E,$00,$00,$01,$70,$00,$00 ;
 $6F78 DEFB $00,$00,$00,$00,$00,$AC,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6F98 DEFB $00,$00,$0C,$00,$20,$0C,$00,$80,$0D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6FB8 DEFB $00,$00,$0C,$20,$04,$8C,$40,$00,$FF,$A0,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$03,$1C,$00,$00,$00,$00 ;
 $6FD8 DEFB $00,$00,$1E,$80,$80,$3F,$00,$08,$2D,$02,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$FF,$FF,$FE,$F8,$07,$80,$00 ;
 $6FF8 DEFB $00,$10,$8C,$C0,$81,$0C,$28,$01,$0C,$20,$01,$80,$00,$00,$00,$00,$03,$FF,$C0,$00,$00,$00,$00,$00,$E0,$0C,$00,$7F,$F8,$01,$F8,$00 ;
 $7018 DEFB $00,$FF,$FF,$FF,$88,$8C,$3F,$FF,$FF,$F8,$01,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$01,$F8,$E4,$0E,$00,$00,$00 ;
 $7038 DEFB $00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$E0,$FF,$C1,$F8,$00,$03,$C0,$00,$00 ;
 $7058 DEFB $05,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$00,$00,$00,$05,$00,$00,$00,$00,$05,$05,$00,$01,$80,$60,$E0,$0E,$00,$00,$01,$30,$00,$00 ;
 $7078 DEFB $00,$00,$00,$00,$01,$4C,$70,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7098 DEFB $00,$00,$0C,$00,$40,$0C,$00,$40,$0C,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $70B8 DEFB $00,$00,$0C,$40,$09,$0C,$20,$00,$7F,$20,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$07,$1C,$00,$7E,$00,$00 ;
 $70D8 DEFB $00,$00,$2D,$41,$00,$4C,$80,$10,$3F,$02,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$01,$FE,$07,$FF,$F0,$3F,$F8,$00 ;
 $70F8 DEFB $00,$21,$FF,$C0,$41,$FF,$F0,$01,$0C,$20,$00,$60,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$C0,$10,$00,$FF,$FF,$80,$3E,$00 ;
 $7118 DEFB $00,$FF,$FF,$FF,$C8,$5C,$3F,$FF,$0C,$04,$1F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F0,$1C,$0F,$28,$14,$0F,$00,$00,$00 ;
 $7138 DEFB $00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$43,$81,$CF,$80,$1F,$00,$03,$E0,$00,$00 ;
 $7158 DEFB $00,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$05,$00,$00,$05,$05,$05,$05,$00,$00,$01,$00,$60,$C0,$0F,$00,$00,$01,$38,$05,$05 ;
 $7178 DEFB $00,$05,$05,$00,$00,$05,$00,$05,$00,$00,$05,$05,$00,$00,$05,$00,$00,$00,$00,$00,$05,$05,$00,$60,$C0,$07,$00,$00,$05,$B8,$05,$05 ;
 $7198 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$05,$00,$01,$00,$05,$E0,$05,$05,$9C,$00,$00 ;
 $71B8 DEFB $00,$00,$05,$05,$00,$00,$05,$00,$00,$00,$05,$05,$05,$00,$05,$05,$05,$05,$05,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $71D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$00,$05,$00,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $71F8 DEFB $05,$05,$00,$00,$05,$00,$00,$05,$00,$05,$05,$00,$05,$05,$00,$05,$05,$05,$05,$00,$05,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7218 DEFB $00,$05,$00,$00,$00,$05,$00,$00,$00,$05,$05,$00,$00,$00,$00,$00,$00,$05,$05,$00,$05,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7238 DEFB $00,$00,$00,$00,$05,$00,$05,$05,$00,$00,$05,$00,$05,$00,$05,$05,$05,$05,$05,$05,$05,$0F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7258 DEFB $00,$05,$00,$00,$05,$00,$05,$00,$05,$05,$00,$05,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$3F,$00,$00,$3C,$00,$00,$00,$00,$00,$00 ;
 $7278 DEFB $00,$00,$00,$00,$05,$00,$05,$00,$00,$05,$00,$00,$00,$05,$00,$00,$05,$05,$05,$00,$00,$00,$00,$C1,$C0,$07,$00,$05,$00,$B8,$00,$00 ;
 $7298 DEFB $05,$00,$00,$00,$00,$00,$05,$00,$05,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$00,$05,$00,$00,$01,$05,$00,$E0,$00,$00,$9C,$05,$05 ;
 $72B8 DEFB $05,$00,$00,$00,$00,$05,$00,$00,$05,$00,$00,$00,$00,$05,$00,$05,$05,$05,$05,$05,$00,$00,$00,$00,$00,$7F,$00,$00,$00,$00,$00,$00 ;
 $72D8 DEFB $05,$00,$00,$05,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$00,$05,$05,$05,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $72F8 DEFB $00,$00,$00,$05,$00,$00,$05,$00,$00,$00,$00,$05,$00,$00,$00,$05,$05,$05,$05,$00,$00,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7318 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$05,$05,$05,$00,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7338 DEFB $00,$05,$05,$05,$00,$00,$00,$00,$00,$05,$00,$00,$00,$05,$00,$05,$05,$00,$05,$05,$00,$0F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7358 DEFB $00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$00,$00,$05,$05,$05,$05,$05,$00,$05,$00,$05,$1F,$00,$01,$FF,$C0,$00,$00,$00,$00,$00 ;
 $7378 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$05,$00,$05,$05,$00,$00,$00,$00,$00,$C1,$80,$07,$80,$00,$05,$B8,$05,$05 ;
 $7398 DEFB $00,$05,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00,$01,$00,$05,$E0,$00,$00,$9C,$05,$05 ;
 $73B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$05,$00,$00,$00,$07,$FF,$00,$00,$00,$00,$00,$00 ;
 $73D8 DEFB $00,$05,$00,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$05,$00,$00,$03,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $73F8 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$05,$00,$00,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7418 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7438 DEFB $00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$00,$00,$00,$05,$05,$05,$05,$05,$00,$00,$07,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7458 DEFB $05,$00,$05,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$00,$00,$00,$1F,$00,$1F,$FF,$FC,$00,$00,$00,$00,$00 ;
 $7478 DEFB $00,$00,$05,$05,$00,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$05,$05,$00,$00,$00,$05,$00,$81,$80,$07,$80,$00,$00,$B8,$05,$05 ;
 $7498 DEFB $00,$00,$00,$00,$05,$05,$00,$00,$00,$00,$00,$00,$05,$05,$00,$05,$05,$05,$05,$05,$00,$00,$05,$01,$00,$00,$E0,$05,$05,$9C,$00,$00 ;
 $74B8 DEFB $00,$00,$00,$05,$05,$00,$00,$05,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00 ;
 $74D8 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$05,$05,$00,$05,$00,$05,$05,$00,$00,$07,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $74F8 DEFB $00,$05,$05,$00,$00,$05,$00,$00,$00,$00,$05,$00,$00,$00,$05,$05,$05,$05,$05,$00,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7518 DEFB $00,$00,$05,$05,$00,$00,$05,$00,$00,$00,$00,$00,$00,$05,$00,$00,$05,$00,$00,$05,$00,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7538 DEFB $05,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$05,$00,$00,$05,$05,$05,$05,$05,$05,$05,$03,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7558 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$00,$05,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$05,$00,$0F,$00,$11,$FF,$FF,$C0,$00,$00,$00,$00 ;
 $7578 DEFB $05,$05,$00,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$05,$05,$05,$05,$05,$00,$05,$05,$00,$00,$81,$80,$07,$C0,$05,$05,$9C,$05,$05 ;
 $7598 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$05,$00,$01,$05,$05,$F0,$00,$00,$9C,$05,$05 ;
 $75B8 DEFB $05,$05,$05,$00,$00,$00,$05,$00,$05,$05,$05,$00,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$00,$3F,$FF,$FF,$00,$00,$00,$00,$00,$00 ;
 $75D8 DEFB $05,$05,$05,$05,$05,$05,$05,$00,$00,$05,$05,$05,$00,$00,$05,$05,$05,$05,$05,$00,$05,$07,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $75F8 DEFB $05,$00,$00,$00,$05,$00,$05,$05,$05,$05,$00,$05,$05,$05,$00,$05,$05,$05,$05,$05,$05,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7618 DEFB $00,$05,$00,$00,$00,$05,$00,$05,$05,$05,$05,$05,$05,$00,$00,$05,$05,$05,$05,$05,$05,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7638 DEFB $00,$05,$00,$05,$05,$05,$05,$00,$00,$05,$05,$00,$05,$00,$05,$05,$05,$05,$00,$05,$00,$01,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7658 DEFB $00,$00,$00,$05,$05,$05,$05,$00,$05,$00,$00,$05,$05,$05,$05,$05,$05,$05,$05,$05,$00,$05,$07,$00,$08,$3F,$FF,$FC,$00,$00,$00,$00 ;
 $7678 DEFB $00,$00,$05,$00,$05,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$05,$05,$00,$00,$05,$01,$81,$80,$03,$C0,$00,$00,$9C,$00,$00 ;
 $7698 DEFB $00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$00,$00,$05,$00,$05,$05,$05,$05,$00,$00,$05,$00,$05,$00,$00,$00,$F0,$05,$05,$9C,$00,$00 ;
 $76B8 DEFB $00,$00,$00,$05,$00,$05,$00,$05,$00,$00,$00,$05,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$01,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00 ;
 $76D8 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$00,$00,$05,$00,$05,$05,$05,$00,$0F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $76F8 DEFB $00,$05,$00,$05,$00,$05,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7718 DEFB $05,$00,$05,$00,$05,$00,$05,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$05,$05,$05,$00,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7738 DEFB $05,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$05,$05,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7758 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$05,$00,$07,$00,$08,$07,$FF,$FF,$C0,$00,$00,$00 ;
 $7778 DEFB $00,$00,$00,$00,$00,$00,$05,$00,$00,$05,$00,$00,$00,$05,$00,$00,$05,$05,$05,$00,$00,$00,$01,$01,$00,$03,$C0,$05,$00,$9C,$00,$00 ;
 $7798 DEFB $05,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00,$00,$05,$00,$F0,$00,$00,$9C,$05,$05 ;
 $77B8 DEFB $05,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$00,$05,$05,$05,$05,$05,$00,$00,$07,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00 ;
 $77D8 DEFB $05,$00,$00,$05,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$00,$05,$05,$00,$00,$0F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $77F8 DEFB $00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$00,$00,$00,$05,$05,$05,$05,$00,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7818 DEFB $00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$00,$00,$05,$05,$05,$05,$05,$00,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7838 DEFB $00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7858 DEFB $00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$05,$05,$05,$00,$05,$03,$00,$04,$00,$FF,$FF,$FC,$00,$00,$00 ;
 $7878 DEFB $05,$05,$00,$05,$00,$00,$00,$00,$05,$00,$05,$00,$05,$00,$00,$05,$00,$00,$05,$05,$05,$00,$01,$01,$00,$01,$E0,$00,$00,$9C,$05,$05 ;
 $7898 DEFB $00,$00,$05,$05,$05,$00,$00,$00,$00,$00,$05,$05,$00,$05,$00,$05,$05,$05,$05,$05,$00,$00,$00,$00,$00,$00,$F0,$05,$05,$9C,$05,$05 ;
 $78B8 DEFB $00,$05,$05,$00,$05,$00,$00,$00,$00,$05,$00,$00,$05,$00,$00,$05,$05,$05,$05,$00,$00,$05,$07,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00 ;
 $78D8 DEFB $00,$00,$05,$00,$00,$05,$05,$00,$05,$00,$05,$05,$00,$05,$00,$05,$05,$00,$05,$00,$00,$1F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $78F8 DEFB $05,$00,$05,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$05,$05,$05,$05,$05,$05,$05,$05,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7918 DEFB $00,$00,$00,$05,$00,$00,$00,$00,$05,$00,$05,$05,$00,$05,$00,$00,$05,$05,$05,$05,$00,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7938 DEFB $00,$00,$05,$00,$00,$05,$05,$00,$05,$00,$00,$05,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7958 DEFB $00,$05,$00,$05,$00,$00,$05,$05,$05,$00,$00,$05,$05,$00,$05,$05,$05,$05,$05,$05,$00,$00,$01,$00,$04,$00,$9F,$FF,$FF,$00,$00,$00 ;
 $7978 DEFB $00,$00,$00,$00,$00,$05,$00,$05,$00,$05,$05,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$05,$00,$FF,$02,$00,$83,$FF,$FF,$C0,$00,$00 ;
 $7998 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$24,$00,$00,$10,$01,$00,$00 ;
 $79B8 DEFB $00,$03,$FD,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E0,$01,$F4,$00,$C0,$01,$00,$80,$00 ;
 $79D8 DEFB $00,$0F,$80,$70,$00,$00,$00,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$8B,$0F,$B7,$BF,$ED,$00,$38,$00,$00 ;
 $79F8 DEFB $00,$F8,$38,$01,$F8,$01,$F8,$07,$C0,$07,$F1,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$85,$24,$B0,$FD,$F0,$0C,$88,$00,$00 ;
 $7A18 DEFB $0F,$80,$3E,$F0,$0E,$F0,$0E,$7C,$02,$3C,$0F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$61,$92,$44,$49,$24,$C8,$00,$00 ;
 $7A38 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$24,$C0,$18,$00,$00,$00 ;
 $7A58 DEFB $00,$01,$F8,$00,$00,$00,$00,$00,$1F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7A78 DEFB $05,$00,$00,$00,$05,$00,$05,$00,$00,$00,$00,$00,$05,$00,$05,$05,$05,$05,$05,$05,$00,$00,$00,$7F,$02,$00,$80,$7F,$FC,$30,$00,$00 ;
 $7A98 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$28,$00,$00,$08,$01,$00,$00 ;
 $7AB8 DEFB $00,$00,$FE,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$B0,$0F,$FF,$80,$30,$00,$81,$00,$00 ;
 $7AD8 DEFB $00,$0F,$80,$F0,$00,$00,$00,$00,$7C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$89,$83,$FF,$FF,$7F,$C0,$C8,$00,$00 ;
 $7AF8 DEFB $00,$F8,$1C,$07,$9E,$07,$9E,$07,$C0,$03,$C0,$F8,$00,$00,$00,$00,$00,$20,$00,$00,$00,$00,$00,$83,$24,$98,$3F,$C0,$34,$88,$00,$00 ;
 $7B18 DEFB $0F,$80,$3E,$F0,$1E,$F0,$1E,$7C,$04,$3C,$0F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$52,$44,$49,$27,$08,$00,$00 ;
 $7B38 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$02,$00,$40,$00,$00,$7E,$00,$00,$3C,$00,$10,$00,$00,$06,$1F,$00,$60,$00,$00,$00 ;
 $7B58 DEFB $00,$03,$FF,$F8,$00,$00,$00,$3F,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7B78 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$00,$7F,$01,$01,$00,$0F,$F0,$08,$00,$00 ;
 $7B98 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$00,$00,$08,$01,$00,$00 ;
 $7BB8 DEFB $00,$01,$F8,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$98,$7D,$ED,$E0,$0E,$00,$81,$00,$00 ;
 $7BD8 DEFB $00,$1F,$00,$F0,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$89,$61,$FB,$EE,$B6,$F3,$08,$00,$00 ;
 $7BF8 DEFB $01,$F0,$0C,$0F,$0E,$0F,$0E,$0F,$80,$07,$81,$F0,$00,$00,$00,$00,$00,$20,$44,$00,$00,$00,$00,$61,$A4,$96,$1F,$00,$E4,$88,$00,$00 ;
 $7C18 DEFB $1F,$00,$7C,$F0,$3C,$F0,$3C,$F8,$0C,$78,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$32,$44,$49,$2C,$08,$00,$00 ;
 $7C38 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$00,$02,$38,$40,$78,$00,$40,$00,$00,$42,$38,$00,$78,$00,$01,$04,$01,$80,$00,$00,$00 ;
 $7C58 DEFB $00,$07,$0F,$FF,$FC,$00,$7F,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7C78 DEFB $00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$05,$05,$05,$05,$05,$05,$05,$00,$3F,$01,$01,$00,$01,$C0,$08,$00,$00 ;
 $7C98 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$EC,$00,$00,$04,$00,$80,$00 ;
 $7CB8 DEFB $00,$01,$F0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$86,$F7,$FF,$FC,$01,$80,$41,$00,$00 ;
 $7CD8 DEFB $00,$1F,$01,$E0,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$89,$30,$7F,$BB,$DD,$7C,$08,$00,$00 ;
 $7CF8 DEFB $01,$F0,$0E,$1E,$07,$1E,$07,$0F,$80,$07,$81,$F0,$00,$00,$00,$00,$00,$3C,$44,$00,$00,$00,$00,$10,$64,$93,$06,$03,$24,$88,$00,$00 ;
 $7D18 DEFB $1F,$00,$FC,$E0,$3C,$E0,$3C,$F8,$18,$78,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$1A,$44,$49,$30,$08,$00,$00 ;
 $7D38 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$00,$02,$44,$78,$44,$00,$7C,$00,$00,$40,$04,$30,$44,$00,$00,$84,$06,$00,$00,$00,$00 ;
 $7D58 DEFB $00,$06,$00,$0F,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7D78 DEFB $05,$05,$00,$00,$00,$05,$05,$05,$05,$05,$00,$00,$00,$05,$00,$00,$05,$05,$05,$05,$00,$00,$00,$3F,$00,$81,$00,$00,$40,$04,$00,$00 ;
 $7D98 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$23,$80,$00,$04,$00,$80,$00 ;
 $7DB8 DEFB $00,$03,$E0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C3,$FF,$F7,$DF,$00,$60,$42,$00,$00 ;
 $7DD8 DEFB $00,$3E,$03,$C3,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$89,$2C,$3E,$F5,$7B,$F0,$08,$00,$00 ;
 $7DF8 DEFB $03,$E0,$0F,$3C,$07,$3C,$07,$1F,$00,$0F,$03,$E0,$00,$00,$00,$00,$00,$22,$44,$00,$00,$00,$00,$08,$24,$92,$C4,$0D,$24,$88,$00,$00 ;
 $7E18 DEFB $3E,$01,$F8,$E0,$78,$E0,$78,$F0,$38,$F0,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$06,$44,$49,$C0,$18,$00,$00 ;
 $7E38 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$E0,$00,$42,$44,$44,$44,$00,$40,$00,$00,$40,$3C,$10,$44,$00,$00,$64,$18,$00,$00,$00,$00 ;
 $7E58 DEFB $00,$07,$00,$00,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7E78 DEFB $00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$05,$00,$05,$00,$05,$05,$05,$05,$05,$05,$00,$05,$00,$FF,$00,$82,$00,$00,$20,$04,$00,$00 ;
 $7E98 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$70,$20,$60,$00,$02,$00,$80,$00 ;
 $7EB8 DEFB $00,$03,$E0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$DF,$7E,$FF,$E0,$1C,$22,$00,$00 ;
 $7ED8 DEFB $00,$3E,$1F,$C7,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$26,$0F,$AF,$AF,$C0,$38,$00,$00 ;
 $7EF8 DEFB $03,$E0,$1F,$3C,$07,$3C,$07,$1F,$00,$0F,$03,$E0,$00,$00,$00,$00,$00,$22,$3C,$00,$00,$00,$00,$06,$1C,$92,$64,$39,$24,$88,$00,$00 ;
 $7F18 DEFB $3F,$87,$F0,$70,$F0,$70,$F0,$78,$70,$F0,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$82,$44,$4B,$00,$60,$00,$00 ;
 $7F38 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$E0,$00,$42,$44,$44,$44,$00,$40,$18,$00,$42,$44,$10,$44,$18,$00,$14,$60,$00,$00,$00,$00 ;
 $7F58 DEFB $00,$03,$80,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7F78 DEFB $00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$03,$FF,$00,$42,$00,$00,$20,$02,$00,$00 ;
 $7F98 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$80,$20,$18,$00,$02,$00,$80,$00 ;
 $7FB8 DEFB $00,$07,$C0,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$98,$7B,$DF,$F7,$F8,$03,$24,$00,$00 ;
 $7FD8 DEFB $00,$7F,$FF,$80,$00,$00,$00,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A9,$25,$87,$FA,$FF,$00,$C8,$00,$00 ;
 $7FF8 DEFB $07,$C0,$1F,$78,$0F,$78,$0F,$3E,$00,$1E,$07,$C0,$00,$00,$00,$00,$00,$3C,$04,$00,$00,$00,$00,$01,$04,$92,$5C,$C9,$24,$88,$00,$00 ;
 $8018 DEFB $7D,$FF,$E0,$79,$E0,$79,$E0,$79,$E0,$78,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$61,$C4,$4C,$01,$80,$00,$00 ;
 $8038 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$C0,$00,$3C,$38,$44,$44,$00,$40,$18,$00,$3C,$3C,$38,$44,$18,$00,$0D,$80,$00,$00,$00,$00 ;
 $8058 DEFB $00,$01,$FF,$FF,$80,$00,$00,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $8078 DEFB $00,$05,$05,$05,$00,$00,$00,$00,$05,$05,$00,$05,$00,$00,$05,$05,$05,$05,$05,$05,$05,$00,$0F,$FF,$00,$44,$00,$00,$10,$02,$00,$00 ;
 $8098 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$20,$07,$00,$01,$00,$80,$00 ;
 $80B8 DEFB $00,$07,$C0,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$8C,$1F,$FD,$FF,$7E,$00,$DC,$00,$00 ;
 $80D8 DEFB $00,$7C,$7F,$00,$00,$00,$00,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$99,$24,$C1,$EF,$7C,$03,$88,$00,$00 ;
 $80F8 DEFB $07,$C0,$1F,$70,$0F,$70,$0F,$3E,$01,$1E,$07,$C0,$00,$00,$00,$00,$00,$00,$38,$00,$00,$00,$00,$00,$82,$92,$47,$49,$24,$B8,$00,$00 ;
 $8118 DEFB $FC,$7F,$80,$1F,$80,$1F,$80,$3F,$C0,$1F,$7C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$44,$70,$06,$00,$00,$00 ;
 $8138 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$00,$00,$00,$00 ;
 $8158 DEFB $00,$00,$FF,$80,$00,$00,$00,$00,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $8178 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ; {Attributes.
 $8198 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ;
 $81B8 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$37,$37,$37,$37,$37,$37,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ;
 $81D8 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$37,$30,$37,$37,$37,$37,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ;
 $81F8 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$37,$30,$37,$37,$37,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ;
 $8218 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$37,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ;
 $8238 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$37,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ;
 $8258 DEFB $0F,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$08,$08,$08,$08,$08,$08,$08,$08,$0F,$0F ;
 $8278 DEFB $0F,$08,$08,$08,$08,$08,$08,$08,$08,$08,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$08,$08,$08,$08,$08,$0F,$0F,$08,$0F,$0F ;
 $8298 DEFB $0F,$08,$08,$08,$0F,$0F,$0F,$08,$08,$08,$08,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$0F,$0F,$08,$0F,$0F,$08,$0F,$0F ;
 $82B8 DEFB $0F,$0F,$08,$08,$08,$08,$08,$08,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$08,$08,$08,$07,$02,$02,$07,$07,$07 ;
 $82D8 DEFB $0F,$08,$0F,$08,$08,$0F,$08,$08,$08,$08,$08,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$08,$02,$02,$02,$07,$02,$02,$07,$02,$02 ;
 $82F8 DEFB $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$02,$02,$02,$02,$07,$02,$02,$07,$02,$02 ;
 $8318 DEFB $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$02,$02,$02,$02,$07,$07,$07,$07,$02,$02 ;
 $8338 DEFB $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$08,$02,$02,$02,$02,$02,$02,$07,$02,$02 ;
 $8358 DEFB $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$02,$06,$06,$06,$06,$06,$06,$06,$02 ;
 $8378 DEFB $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$08,$06,$06,$06,$06,$06,$06,$06,$02 ;
 $8398 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$06,$06,$06,$06,$04,$06,$06,$06,$06 ;
 $83B8 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$06,$06,$06,$06,$06,$06,$06,$06,$04 ;
 $83D8 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$06,$06,$06,$06,$06,$06,$06,$06,$04 ;
 $83F8 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$05,$05,$05,$05,$04,$04,$04,$06,$06,$06,$06,$06,$06,$06,$06,$04 ;
 $8418 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$05,$04,$04,$04,$04,$04,$04,$06,$06,$06,$06,$06,$06,$06,$06,$04 ;
 $8438 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$06,$06,$06,$06,$06,$06,$04 ;
 $8458 DEFB $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04 ; }

; Data block at 8478
b$8478 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8480 DEFB $FF,$FF,$FF,$00,$00,$00,$00,$00
 $8488 DEFB $FF,$FF,$FF,$3C,$3C,$3C,$00,$00
 $8490 DEFB $00,$00,$00,$01,$01,$03,$03,$03
 $8498 DEFB $0F,$3F,$FF,$F0,$C7,$D7,$B7,$B7
 $84A0 DEFB $80,$E0,$F8,$7C,$1C,$5E,$6E,$6E
 $84A8 DEFB $07,$07,$07,$07,$07,$07,$07,$06
 $84B0 DEFB $77,$77,$77,$76,$77,$77,$77,$37
 $84B8 DEFB $77,$76,$40,$12,$40,$76,$77,$77
 $84C0 DEFB $04,$05,$04,$06,$07,$07,$07,$07
 $84C8 DEFB $97,$D7,$97,$37,$77,$77,$77,$76
 $84D0 DEFB $77,$77,$77,$77,$77,$76,$40,$12
 $84D8 DEFB $07,$07,$07,$00,$07,$07,$07,$00
 $84E0 DEFB $77,$77,$77,$00,$FF,$FF,$FF,$00
 $84E8 DEFB $40,$76,$77,$00,$FF,$FF,$FF,$00
 $84F0 DEFB $FF,$F8,$F8,$F8,$38,$3F,$3F,$38
 $84F8 DEFB $FF,$1F,$1F,$1F,$1C,$FC,$FC,$1C
 $8500 DEFB $38,$38,$38,$3F,$3F,$38,$38,$38
 $8508 DEFB $1C,$1C,$1C,$FC,$FC,$1C,$1C,$1C
 $8510 DEFB $38,$3F,$3F,$38,$38,$38,$38,$3F
 $8518 DEFB $1C,$FC,$FC,$1C,$1C,$1C,$1C,$FC
 $8520 DEFB $3F,$38,$38,$38,$38,$3F,$3F,$38
 $8528 DEFB $FC,$1C,$1C,$1C,$1C,$FC,$FC,$1C
 $8530 DEFB $38,$38,$38,$3F,$3F,$38,$38,$38
 $8538 DEFB $1C,$1C,$1C,$FC,$FC,$1C,$1C,$1C
 $8540 DEFB $FF,$FF,$F7,$66,$76,$76,$76,$7E
 $8548 DEFB $FF,$FF,$C3,$7A,$42,$5E,$42,$7E
 $8550 DEFB $FF,$FF,$C3,$7A,$62,$7A,$42,$7E
 $8558 DEFB $FF,$FF,$DF,$5E,$56,$42,$76,$7E
 $8560 DEFB $FF,$FF,$C3,$5E,$42,$7A,$42,$7E
 $8568 DEFB $FF,$FF,$C3,$5E,$42,$5A,$42,$7E
 $8570 DEFB $FF,$FF,$C3,$7A,$7A,$76,$76,$7E
 $8578 DEFB $FF,$FF,$C3,$5A,$42,$5A,$42,$7E
 $8580 DEFB $FF,$FF,$C3,$5A,$42,$7A,$42,$7E
 $8588 DEFB $7E,$76,$66,$76,$76,$76,$7E,$18
 $8590 DEFB $7E,$42,$7A,$42,$5E,$42,$7E,$18
 $8598 DEFB $7E,$42,$7A,$62,$7A,$42,$7E,$18
 $85A0 DEFB $7E,$5E,$5E,$56,$42,$76,$7E,$18
 $85A8 DEFB $7E,$42,$5E,$42,$7A,$42,$7E,$18
 $85B0 DEFB $7E,$42,$5E,$42,$5A,$42,$7E,$18
 $85B8 DEFB $7E,$42,$7A,$7A,$76,$76,$7E,$18
 $85C0 DEFB $7E,$42,$5A,$42,$5A,$42,$7E,$18
 $85C8 DEFB $7E,$42,$5A,$42,$7A,$42,$7E,$18
 $85D0 DEFB $18,$18,$18,$18,$18,$1E,$1C,$1E
 $85D8 DEFB $24,$24,$24,$24,$24,$24,$24,$24
 $85E0 DEFB $24,$24,$24,$24,$24,$A5,$E7,$A5
 $85E8 DEFB $24,$24,$24,$24,$24,$24,$24,$24
 $85F0 DEFB $24,$24,$24,$24,$24,$24,$24,$3C
 $85F8 DEFB $03,$01,$F1,$61,$61,$61,$61,$31
 $8600 DEFB $C0,$80,$8F,$86,$86,$86,$86,$8C
 $8608 DEFB $39,$1F,$0F,$01,$01,$03,$06,$1F
 $8610 DEFB $9C,$F8,$F0,$80,$00,$C0,$20,$F8
 $8618 DEFB $C0,$E0,$71,$BA,$9C,$8A,$77,$27
 $8620 DEFB $00,$00,$00,$00,$00,$00,$00,$80
 $8628 DEFB $03,$03,$01,$01,$00,$00,$00,$00
 $8630 DEFB $C0,$E0,$F0,$F8,$FC,$7E,$1F,$07
 $8638 DEFB $0F,$05,$03,$00,$0F,$1D,$30,$60
 $8640 DEFB $F0,$A0,$40,$00,$F0,$B8,$0C,$0E
 $8648 DEFB $65,$E0,$F0,$7D,$70,$30,$1D,$0F
 $8650 DEFB $BE,$0F,$07,$A6,$06,$0C,$B8,$F0
 $8658 DEFB $1F,$6F,$97,$AB,$A9,$93,$87,$8F
 $8660 DEFB $F8,$F6,$E9,$D5,$95,$C9,$A1,$D1
 $8668 DEFB $9F,$9F,$9F,$BF,$5F,$0F,$07,$0F
 $8670 DEFB $C9,$C9,$C9,$CD,$DA,$B0,$E0,$F0
 $8678 DEFB $0A,$04,$1B,$38,$69,$DF,$B5,$D1
 $8680 DEFB $80,$80,$7F,$3F,$FF,$F0,$00,$00
 $8688 DEFB $AE,$D0,$A8,$D8,$70,$00,$00,$00
 $8690 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8698 DEFB $07,$1C,$30,$7F,$00,$7F,$00,$6A
 $86A0 DEFB $F0,$1C,$06,$FF,$00,$FF,$00,$AB
 $86A8 DEFB $6A,$6A,$6A,$6A,$6A,$6A,$00,$7F
 $86B0 DEFB $AB,$AB,$AB,$AB,$AB,$AB,$00,$FF
 $86B8 DEFB $00,$00,$00,$01,$03,$07,$0E,$1D
 $86C0 DEFB $3E,$63,$F1,$D9,$A1,$73,$BE,$5C
 $86C8 DEFB $3B,$74,$ED,$D6,$22,$6D,$F6,$78
 $86D0 DEFB $B8,$50,$20,$C0,$80,$00,$00,$00
 $86D8 DEFB $40,$E0,$70,$38,$16,$0F,$0F,$07
 $86E0 DEFB $00,$00,$00,$00,$00,$00,$80,$C0
 $86E8 DEFB $03,$01,$00,$00,$00,$00,$00,$00
 $86F0 DEFB $90,$78,$7C,$FE,$79,$30,$11,$0A
 $86F8 DEFB $AF,$DF,$D0,$DF,$57,$D7,$57,$D1
 $8700 DEFB $FF,$FF,$01,$FF,$11,$57,$55,$11
 $8708 DEFB $DF,$D0,$DF,$5E,$DF,$DF,$D0,$AF
 $8710 DEFB $FF,$01,$FF,$07,$FF,$FF,$01,$FF
 $8718 DEFB $00,$00,$00,$03,$BA,$BB,$23,$71
 $8720 DEFB $78,$28,$00,$FD,$00,$FD,$7D,$80
 $8728 DEFB $79,$29,$3F,$1B,$0F,$03,$00,$00
 $8730 DEFB $9C,$94,$7C,$58,$70,$C0,$00,$00
 $8738 DEFB $01,$02,$02,$01,$03,$07,$07,$07
 $8740 DEFB $80,$40,$40,$80,$C0,$60,$20,$20
 $8748 DEFB $0F,$0F,$1F,$1F,$38,$3F,$03,$01
 $8750 DEFB $90,$90,$C8,$C8,$04,$FC,$40,$80
 $8758 DEFB $00,$00,$01,$02,$04,$08,$1F,$05
 $8760 DEFB $40,$E0,$30,$38,$3C,$1E,$FF,$B4
 $8768 DEFB $05,$00,$05,$05,$00,$05,$05,$00
 $8770 DEFB $B4,$00,$B4,$B4,$00,$B4,$B4,$00
 $8778 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8780 DEFB $1F,$3F,$3F,$7F,$00,$FF,$FF,$FF
 $8788 DEFB $60,$70,$B0,$B8,$00,$BC,$BC,$BC
 $8790 DEFB $1F,$3F,$3F,$7F,$00,$FF,$FF,$FF
 $8798 DEFB $60,$70,$B0,$B8,$00,$BC,$BC,$BC
 $87A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $87A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $87B0 DEFB $FF,$FF,$00,$7F,$3F,$3F,$1F,$1F
 $87B8 DEFB $BC,$BC,$00,$B8,$B0,$70,$60,$60
 $87C0 DEFB $FF,$FF,$00,$7F,$3F,$3F,$1F,$1F
 $87C8 DEFB $BC,$BC,$00,$B8,$B0,$70,$60,$60
 $87D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $87D8 DEFB $1F,$3F,$3F,$7F,$00,$FF,$FF,$FF
 $87E0 DEFB $60,$70,$B0,$B8,$00,$BC,$BC,$BC
 $87E8 DEFB $1F,$3F,$3F,$7F,$00,$FF,$FF,$FF
 $87F0 DEFB $60,$70,$B0,$B8,$00,$BC,$BC,$BC
 $87F8 DEFB $1F,$3F,$3F,$7F,$00,$FF,$FF,$FF
 $8800 DEFB $60,$70,$B0,$B8,$00,$BC,$BC,$BC
 $8808 DEFB $FF,$FF,$00,$7F,$3F,$3F,$1F,$1F
 $8810 DEFB $BC,$BC,$00,$B8,$B0,$70,$60,$60
 $8818 DEFB $FF,$FF,$00,$7F,$3F,$3F,$1F,$1F
 $8820 DEFB $BC,$BC,$00,$B8,$B0,$70,$60,$60
 $8828 DEFB $FF,$FF,$00,$7F,$3F,$3F,$1F,$1F
 $8830 DEFB $BC,$BC,$00,$B8,$B0,$70,$60,$60
 $8838 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8840 DEFB $00,$00,$00,$00,$00,$00,$7F,$7F
 $8848 DEFB $07,$07,$07,$07,$07,$07,$07,$07
 $8850 DEFB $FF,$FF,$FF,$00,$77,$7B,$7D,$3E
 $8858 DEFB $FF,$FF,$FF,$00,$FF,$FF,$FF,$FF
 $8860 DEFB $F8,$F8,$F8,$38,$B8,$B8,$B8,$B8
 $8868 DEFB $00,$00,$00,$00,$01,$01,$00,$1F
 $8870 DEFB $7F,$7F,$7F,$00,$FF,$FF,$0F,$60
 $8878 DEFB $07,$07,$07,$00,$FF,$FF,$FF,$00
 $8880 DEFB $5F,$6F,$77,$00,$FF,$FF,$FF,$00
 $8888 DEFB $7F,$BF,$DF,$00,$FF,$FF,$FF,$00
 $8890 DEFB $B8,$B8,$B8,$00,$FF,$FF,$FF,$07
 $8898 DEFB $1F,$3F,$3F,$7F,$00,$FF,$FF,$FF
 $88A0 DEFB $6F,$77,$B7,$BB,$03,$BD,$BD,$BD
 $88A8 DEFB $6F,$6F,$6F,$6F,$6F,$68,$69,$6A
 $88B0 DEFB $76,$76,$76,$76,$76,$00,$55,$AA
 $88B8 DEFB $EF,$EF,$EF,$EF,$EF,$01,$55,$A9
 $88C0 DEFB $77,$77,$77,$77,$77,$77,$77,$77
 $88C8 DEFB $FF,$FF,$00,$7F,$3F,$3F,$1F,$1F
 $88D0 DEFB $BD,$BD,$03,$BB,$B0,$77,$6F,$6F
 $88D8 DEFB $69,$6A,$69,$6A,$01,$FA,$F9,$FA
 $88E0 DEFB $55,$AA,$55,$AA,$55,$AA,$55,$AA
 $88E8 DEFB $55,$A9,$55,$A9,$54,$A9,$55,$A9
 $88F0 DEFB $77,$77,$77,$77,$07,$FF,$FF,$FF
 $88F8 DEFB $3F,$3F,$3F,$38,$3B,$3B,$3B,$3B
 $8900 DEFB $FF,$FF,$FF,$01,$FD,$FD,$FD,$FD
 $8908 DEFB $C0,$C0,$C0,$DF,$DF,$C0,$DF,$DF
 $8910 DEFB $00,$00,$00,$FF,$FF,$00,$FF,$FF
 $8918 DEFB $00,$00,$00,$FF,$FF,$00,$FF,$FF
 $8920 DEFB $00,$00,$00,$FF,$FF,$03,$FB,$FB
 $8928 DEFB $3B,$3B,$3B,$38,$3F,$3F,$3F,$00
 $8930 DEFB $FD,$FD,$FD,$01,$FF,$FF,$FF,$00
 $8938 DEFB $C0,$DF,$DF,$C0,$DF,$DF,$C0,$1F
 $8940 DEFB $00,$FF,$FF,$00,$FF,$FF,$00,$80
 $8948 DEFB $00,$FF,$FF,$00,$FF,$FF,$00,$00
 $8950 DEFB $03,$FB,$FB,$03,$FB,$FB,$03,$1B
 $8958 DEFB $FF,$FF,$FF,$E0,$EF,$EF,$EF,$EF
 $8960 DEFB $FF,$FF,$FF,$07,$F7,$F7,$F7,$F7
 $8968 DEFB $7F,$00,$7F,$7F,$00,$7F,$7F,$00
 $8970 DEFB $BF,$3F,$BF,$B8,$3B,$BB,$BB,$3B
 $8978 DEFB $FF,$FF,$FF,$01,$FD,$FD,$FD,$FD
 $8980 DEFB $DB,$C3,$DB,$DB,$C3,$DB,$DB,$C3
 $8988 DEFB $EF,$EF,$EF,$EF,$E0,$FF,$FF,$FF
 $8990 DEFB $F7,$F7,$F7,$F7,$07,$FF,$FF,$FF
 $8998 DEFB $7F,$7F,$00,$7F,$7F,$00,$7F,$7F
 $89A0 DEFB $BB,$BB,$3B,$BB,$B8,$3F,$BF,$BF
 $89A8 DEFB $FD,$FD,$FD,$FD,$01,$FF,$FF,$FF
 $89B0 DEFB $DB,$DB,$C3,$DB,$DB,$C3,$DF,$DF
 $89B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $89C0 DEFB $3F,$38,$3F,$38,$3F,$38,$3F,$38
 $89C8 DEFB $FF,$00,$FF,$00,$FF,$00,$FF,$00
 $89D0 DEFB $FF,$00,$FF,$00,$FF,$00,$FF,$00
 $89D8 DEFB $FF,$07,$FF,$07,$FF,$07,$FF,$07
 $89E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $89E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $89F0 DEFB $3F,$38,$3F,$38,$3F,$38,$3F,$00
 $89F8 DEFB $FF,$00,$FF,$00,$FF,$00,$FF,$00
 $8A00 DEFB $FF,$00,$FF,$00,$FF,$00,$FF,$00
 $8A08 DEFB $FF,$07,$FF,$07,$FF,$07,$FF,$00
 $8A10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8A18 DEFB $FF,$80,$BF,$BF,$BF,$BF,$BE,$BD
 $8A20 DEFB $FF,$01,$ED,$DD,$B9,$75,$ED,$DD
 $8A28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8A30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8A38 DEFB $FF,$80,$BF,$BF,$BF,$BF,$BE,$BD
 $8A40 DEFB $FF,$01,$ED,$DD,$B9,$75,$ED,$DD
 $8A48 DEFB $BB,$B7,$AE,$9D,$BB,$B7,$80,$FF
 $8A50 DEFB $BD,$7D,$FD,$FD,$FD,$FD,$01,$FF
 $8A58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8A60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8A68 DEFB $BB,$B7,$AE,$9D,$BB,$B7,$80,$FF
 $8A70 DEFB $BD,$7D,$FD,$FD,$FD,$FD,$01,$FF
 $8A78 DEFB $01,$02,$04,$04,$04,$02,$01,$01
 $8A80 DEFB $E0,$10,$70,$B8,$F0,$F0,$E0,$C0
 $8A88 DEFB $02,$07,$09,$0F,$09,$0F,$09,$07
 $8A90 DEFB $20,$F0,$48,$78,$48,$78,$48,$70
 $8A98 DEFB $04,$02,$02,$02,$02,$02,$02,$03
 $8AA0 DEFB $90,$20,$40,$40,$40,$30,$08,$F8
 $8AA8 DEFB $01,$02,$04,$04,$04,$02,$01,$01
 $8AB0 DEFB $E0,$10,$70,$B8,$F0,$F0,$E0,$C0
 $8AB8 DEFB $02,$07,$09,$0F,$09,$0F,$08,$07
 $8AC0 DEFB $20,$F0,$48,$78,$48,$78,$A8,$F8
 $8AC8 DEFB $04,$02,$02,$02,$04,$04,$04,$07
 $8AD0 DEFB $10,$20,$40,$60,$60,$F8,$1C,$FC
 $8AD8 DEFB $00,$01,$02,$04,$04,$04,$02,$01
 $8AE0 DEFB $00,$E0,$10,$70,$B8,$F0,$F0,$E0
 $8AE8 DEFB $01,$02,$07,$09,$0F,$08,$0F,$18
 $8AF0 DEFB $C0,$20,$F0,$68,$B8,$D8,$EC,$34
 $8AF8 DEFB $1F,$06,$03,$06,$0C,$18,$0C,$07
 $8B00 DEFB $F8,$10,$20,$70,$70,$F8,$3C,$FC
 $8B08 DEFB $00,$01,$02,$04,$04,$04,$02,$01
 $8B10 DEFB $00,$E0,$10,$70,$B8,$F0,$F0,$E0
 $8B18 DEFB $01,$02,$07,$09,$0F,$09,$0F,$08
 $8B20 DEFB $C0,$20,$F0,$48,$78,$48,$B8,$A8
 $8B28 DEFB $0F,$04,$02,$02,$04,$04,$04,$07
 $8B30 DEFB $F0,$20,$40,$60,$60,$F8,$1C,$FC
 $8B38 DEFB $01,$02,$04,$04,$04,$02,$01,$01
 $8B40 DEFB $E0,$10,$70,$B8,$F0,$F0,$E0,$C0
 $8B48 DEFB $02,$07,$09,$0F,$09,$0F,$09,$07
 $8B50 DEFB $20,$F0,$48,$78,$48,$78,$48,$70
 $8B58 DEFB $04,$02,$02,$02,$02,$02,$02,$03
 $8B60 DEFB $90,$20,$40,$40,$40,$30,$08,$F8
 $8B68 DEFB $01,$02,$04,$04,$04,$02,$01,$01
 $8B70 DEFB $E0,$10,$70,$B8,$F0,$F0,$E0,$C0
 $8B78 DEFB $02,$07,$0D,$0E,$0A,$0D,$0D,$0B
 $8B80 DEFB $20,$F0,$48,$F8,$88,$F8,$0C,$FC
 $8B88 DEFB $06,$02,$01,$01,$03,$03,$03,$03
 $8B90 DEFB $18,$10,$20,$10,$90,$88,$84,$FC
 $8B98 DEFB $00,$01,$02,$04,$04,$04,$02,$01
 $8BA0 DEFB $00,$E0,$10,$70,$B8,$F0,$F0,$E0
 $8BA8 DEFB $01,$02,$07,$0A,$0D,$0D,$0D,$0D
 $8BB0 DEFB $C0,$20,$F0,$88,$F8,$08,$F8,$08
 $8BB8 DEFB $07,$02,$01,$03,$07,$0F,$07,$03
 $8BC0 DEFB $F8,$10,$10,$10,$88,$84,$C2,$FE
 $8BC8 DEFB $00,$01,$02,$04,$04,$04,$02,$01
 $8BD0 DEFB $00,$E0,$10,$70,$B8,$F0,$F0,$E0
 $8BD8 DEFB $01,$02,$07,$09,$0E,$0A,$0E,$0A
 $8BE0 DEFB $C0,$20,$F0,$48,$F8,$88,$F8,$88
 $8BE8 DEFB $07,$02,$01,$01,$03,$03,$03,$03
 $8BF0 DEFB $F0,$10,$10,$20,$90,$88,$84,$FC
 $8BF8 DEFB $00,$07,$08,$0E,$1D,$0F,$0F,$07
 $8C00 DEFB $00,$80,$40,$20,$20,$20,$40,$80
 $8C08 DEFB $03,$04,$0F,$12,$1E,$11,$1F,$11
 $8C10 DEFB $80,$40,$E0,$90,$F0,$50,$70,$50
 $8C18 DEFB $0F,$08,$08,$04,$09,$11,$21,$3F
 $8C20 DEFB $E0,$40,$80,$80,$C0,$C0,$C0,$C0
 $8C28 DEFB $00,$07,$08,$0E,$1D,$0F,$0F,$07
 $8C30 DEFB $00,$80,$40,$20,$20,$20,$40,$80
 $8C38 DEFB $03,$04,$0F,$11,$1F,$10,$1F,$10
 $8C40 DEFB $80,$40,$E0,$50,$B0,$B0,$B0,$B0
 $8C48 DEFB $1F,$08,$08,$08,$11,$21,$43,$7F
 $8C50 DEFB $E0,$40,$80,$C0,$E0,$F0,$E0,$C0
 $8C58 DEFB $07,$08,$0E,$1D,$0F,$0F,$07,$03
 $8C60 DEFB $80,$40,$20,$20,$20,$40,$80,$80
 $8C68 DEFB $04,$0F,$12,$1F,$11,$1F,$30,$3F
 $8C70 DEFB $40,$E0,$B0,$70,$50,$B0,$B0,$D0
 $8C78 DEFB $18,$08,$04,$08,$09,$11,$21,$3F
 $8C80 DEFB $60,$40,$80,$80,$C0,$C0,$C0,$C0
 $8C88 DEFB $07,$08,$0E,$1D,$0F,$0F,$07,$03
 $8C90 DEFB $80,$40,$20,$20,$20,$40,$80,$80
 $8C98 DEFB $04,$0F,$12,$1E,$12,$1E,$12,$0E
 $8CA0 DEFB $40,$E0,$90,$F0,$90,$F0,$90,$E0
 $8CA8 DEFB $09,$04,$02,$02,$02,$0C,$10,$1F
 $8CB0 DEFB $20,$40,$40,$40,$40,$40,$40,$C0
 $8CB8 DEFB $00,$07,$08,$0E,$1D,$0F,$0F,$07
 $8CC0 DEFB $00,$80,$40,$20,$20,$20,$40,$80
 $8CC8 DEFB $03,$04,$0F,$12,$1E,$12,$1E,$15
 $8CD0 DEFB $80,$40,$E0,$90,$F0,$90,$F0,$10
 $8CD8 DEFB $0F,$04,$02,$06,$06,$1F,$38,$3F
 $8CE0 DEFB $F0,$20,$40,$40,$20,$20,$20,$E0
 $8CE8 DEFB $00,$07,$08,$0E,$1D,$0F,$0F,$07
 $8CF0 DEFB $00,$80,$40,$20,$20,$20,$40,$80
 $8CF8 DEFB $03,$04,$0F,$16,$1D,$1B,$37,$2C
 $8D00 DEFB $80,$40,$E0,$90,$F0,$10,$F0,$18
 $8D08 DEFB $1F,$08,$04,$0E,$0E,$1F,$3C,$3F
 $8D10 DEFB $F8,$60,$C0,$60,$30,$18,$30,$E0
 $8D18 DEFB $07,$08,$0E,$1D,$0F,$0F,$07,$03
 $8D20 DEFB $80,$40,$20,$20,$20,$40,$80,$80
 $8D28 DEFB $04,$0F,$12,$1E,$12,$1E,$15,$1F
 $8D30 DEFB $40,$E0,$90,$F0,$90,$F0,$10,$E0
 $8D38 DEFB $08,$04,$02,$06,$06,$1F,$38,$3F
 $8D40 DEFB $20,$40,$40,$40,$20,$20,$20,$E0
 $8D48 DEFB $07,$08,$0E,$1D,$0F,$0F,$07,$03
 $8D50 DEFB $80,$40,$20,$20,$20,$40,$80,$80
 $8D58 DEFB $04,$0F,$12,$1E,$12,$1E,$12,$0E
 $8D60 DEFB $40,$E0,$90,$F0,$90,$F0,$90,$E0
 $8D68 DEFB $09,$04,$02,$02,$02,$0C,$10,$1F
 $8D70 DEFB $20,$40,$40,$40,$40,$40,$40,$C0
 $8D78 DEFB $01,$02,$04,$04,$04,$02,$31,$7B
 $8D80 DEFB $C2,$27,$17,$17,$17,$27,$C7,$EF
 $8D88 DEFB $3C,$1F,$08,$0F,$08,$0F,$04,$04
 $8D90 DEFB $1E,$FC,$08,$F8,$08,$F8,$10,$08
 $8D98 DEFB $05,$05,$05,$05,$05,$05,$09,$0F
 $8DA0 DEFB $C8,$50,$48,$78,$00,$00,$00,$00
 $8DA8 DEFB $01,$02,$24,$74,$74,$72,$71,$7B
 $8DB0 DEFB $C0,$20,$12,$17,$17,$27,$C7,$EF
 $8DB8 DEFB $3C,$1F,$08,$0F,$08,$0F,$04,$04
 $8DC0 DEFB $1E,$FC,$08,$F8,$08,$F8,$10,$10
 $8DC8 DEFB $05,$05,$05,$05,$09,$0F,$00,$00
 $8DD0 DEFB $D0,$50,$50,$50,$48,$78,$00,$00
 $8DD8 DEFB $21,$72,$74,$74,$74,$72,$71,$7B
 $8DE0 DEFB $C0,$20,$10,$10,$10,$20,$C6,$EF
 $8DE8 DEFB $3C,$1F,$08,$0F,$08,$0F,$04,$08
 $8DF0 DEFB $1E,$FC,$08,$F8,$08,$F8,$10,$10
 $8DF8 DEFB $09,$05,$09,$0F,$00,$00,$00,$00
 $8E00 DEFB $D0,$50,$50,$50,$50,$50,$48,$78
 $8E08 DEFB $01,$02,$24,$74,$74,$72,$71,$7B
 $8E10 DEFB $C0,$20,$12,$17,$17,$27,$C7,$EF
 $8E18 DEFB $3C,$1F,$08,$0F,$08,$0F,$04,$04
 $8E20 DEFB $1E,$FC,$08,$F8,$08,$F8,$10,$10
 $8E28 DEFB $05,$05,$05,$05,$09,$0F,$00,$00
 $8E30 DEFB $D0,$50,$50,$50,$48,$78,$00,$00
 $8E38 DEFB $01,$02,$05,$06,$07,$03,$01,$1F
 $8E40 DEFB $C0,$20,$D0,$B0,$70,$E0,$C0,$FC
 $8E48 DEFB $3C,$7F,$68,$6F,$68,$6F,$74,$74
 $8E50 DEFB $1E,$FF,$0B,$FB,$0A,$F8,$10,$10
 $8E58 DEFB $25,$05,$05,$05,$05,$09,$11,$3F
 $8E60 DEFB $D0,$50,$50,$50,$50,$48,$44,$7E
 $8E68 DEFB $00,$01,$02,$03,$63,$F1,$78,$3D
 $8E70 DEFB $E2,$13,$EB,$5B,$BB,$F3,$E7,$FF
 $8E78 DEFB $1E,$0F,$04,$07,$04,$07,$02,$02
 $8E80 DEFB $0E,$FC,$04,$FC,$04,$FC,$08,$08
 $8E88 DEFB $02,$04,$69,$92,$44,$28,$10,$00
 $8E90 DEFB $68,$A8,$28,$28,$28,$24,$22,$3F
 $8E98 DEFB $01,$02,$05,$06,$07,$03,$31,$7B
 $8EA0 DEFB $C0,$20,$D0,$B0,$70,$E0,$C6,$EF
 $8EA8 DEFB $7C,$3F,$18,$0F,$08,$0F,$04,$04
 $8EB0 DEFB $1F,$FE,$0C,$F8,$08,$F8,$10,$10
 $8EB8 DEFB $05,$05,$05,$09,$0A,$12,$22,$7C
 $8EC0 DEFB $D0,$50,$50,$48,$28,$24,$22,$1F
 $8EC8 DEFB $47,$C8,$D7,$DA,$DD,$CF,$E7,$FF
 $8ED0 DEFB $00,$80,$40,$C0,$C6,$8F,$1E,$BC
 $8ED8 DEFB $70,$3F,$20,$3F,$20,$3F,$10,$10
 $8EE0 DEFB $78,$F0,$20,$E0,$20,$E0,$40,$40
 $8EE8 DEFB $16,$15,$14,$14,$14,$24,$44,$FC
 $8EF0 DEFB $40,$20,$96,$49,$22,$14,$08,$00
 $8EF8 DEFB $01,$02,$05,$06,$07,$03,$31,$7B
 $8F00 DEFB $C0,$20,$D0,$B0,$70,$E0,$C6,$EF
 $8F08 DEFB $7C,$3F,$18,$0F,$08,$0F,$04,$04
 $8F10 DEFB $1F,$FE,$0C,$F8,$08,$F8,$10,$10
 $8F18 DEFB $05,$05,$05,$09,$0A,$12,$22,$7C
 $8F20 DEFB $D0,$50,$50,$48,$28,$24,$22,$1F

; UDG Data: Pirates
@label=UDG_Pirates
b$8F28 DEFB $3F,$40,$81,$85,$8D,$9E,$EF,$8E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8F30 DEFB $F8,$20,$C0,$60,$C0,$21,$93,$77 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8F38 DEFB $1F,$24,$6E,$4E,$4E,$4E,$7F,$2F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8F40 DEFB $0F,$8F,$DF,$5E,$7E,$7C,$FC,$F8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8F48 DEFB $3F,$1F,$0A,$1B,$0A,$09,$08,$0F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8F50 DEFB $F0,$C0,$00,$00,$00,$80,$40,$C0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8F58 DEFB $3F,$40,$81,$85,$8D,$9E,$EF,$8E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8F60 DEFB $F8,$20,$C0,$60,$C0,$21,$93,$77 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8F68 DEFB $1F,$24,$6E,$4E,$4E,$4F,$7F,$27 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8F70 DEFB $0F,$8F,$5E,$7E,$FC,$F8,$F0,$C0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8F78 DEFB $3B,$1F,$0A,$1B,$08,$17,$10,$1F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8F80 DEFB $80,$00,$00,$00,$C0,$20,$A0,$E0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8F88 DEFB $00,$3F,$40,$81,$85,$8D,$9E,$EF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8F90 DEFB $00,$FA,$22,$C3,$67,$C7,$27,$97 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8F98 DEFB $1F,$24,$6E,$4F,$47,$43,$FF,$A1 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8FA0 DEFB $7F,$8F,$DE,$5E,$BC,$F8,$F0,$E0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $8FA8 DEFB $7E,$1B,$29,$12,$22,$44,$22,$1F
 $8FB0 DEFB $C0,$00,$00,$80,$80,$40,$20,$E0
 $8FB8 DEFB $3F,$40,$81,$85,$8D,$9E,$EF,$8E
 $8FC0 DEFB $F8,$20,$C0,$60,$C0,$21,$93,$77
 $8FC8 DEFB $1F,$24,$6E,$4E,$4E,$4E,$7F,$27
 $8FD0 DEFB $0F,$8F,$5E,$7E,$7C,$F8,$E0,$C0
 $8FD8 DEFB $3B,$1F,$0A,$1B,$08,$17,$10,$1F
 $8FE0 DEFB $80,$00,$00,$00,$C0,$20,$A0,$E0
 $8FE8 DEFB $3F,$40,$81,$85,$8D,$9E,$EF,$8E
 $8FF0 DEFB $F8,$20,$C0,$60,$C0,$21,$93,$77
 $8FF8 DEFB $1F,$24,$6E,$4E,$4E,$4E,$7E,$2F
 $9000 DEFB $0F,$8F,$5F,$5E,$7E,$7C,$7C,$F8
 $9008 DEFB $3F,$1F,$0A,$1B,$0A,$09,$08,$0F
 $9010 DEFB $F0,$C0,$00,$00,$00,$80,$40,$C0
 $9018 DEFB $3F,$40,$81,$85,$8D,$9E,$EF,$8E
 $9020 DEFB $F8,$20,$C0,$60,$C0,$20,$90,$70
 $9028 DEFB $1F,$24,$6E,$4E,$5E,$5C,$7F,$3F
 $9030 DEFB $01,$83,$47,$4F,$5E,$7E,$FC,$F8
 $9038 DEFB $7F,$1F,$0A,$09,$19,$14,$14,$1F
 $9040 DEFB $E0,$00,$00,$80,$00,$C0,$20,$E0
 $9048 DEFB $00,$3F,$40,$81,$85,$8D,$9E,$EF
 $9050 DEFB $00,$F8,$20,$C0,$60,$C0,$20,$90
 $9058 DEFB $1F,$3C,$7E,$7E,$7C,$70,$7E,$3F
 $9060 DEFB $70,$80,$80,$41,$43,$4F,$5E,$FC
 $9068 DEFB $3F,$1F,$09,$1D,$24,$44,$22,$1F
 $9070 DEFB $F8,$E0,$00,$C0,$80,$40,$20,$E0
 $9078 DEFB $3F,$40,$81,$85,$8D,$9E,$EF,$8E
 $9080 DEFB $F8,$20,$C0,$60,$C0,$20,$90,$70
 $9088 DEFB $1F,$24,$6E,$4E,$5E,$5C,$7F,$3F
 $9090 DEFB $01,$83,$47,$4F,$5E,$7E,$FC,$F8
 $9098 DEFB $7F,$1F,$0A,$09,$19,$14,$14,$1F
 $90A0 DEFB $E0,$00,$00,$80,$00,$C0,$20,$E0
 $90A8 DEFB $1F,$04,$03,$06,$03,$04,$09,$0E
 $90B0 DEFB $FC,$02,$81,$A1,$B1,$79,$F7,$71
 $90B8 DEFB $80,$C1,$E2,$F2,$7A,$7E,$3F,$1F
 $90C0 DEFB $F8,$24,$76,$72,$7A,$3A,$FE,$FC
 $90C8 DEFB $07,$00,$00,$01,$00,$03,$04,$07
 $90D0 DEFB $FE,$F8,$50,$90,$98,$28,$28,$F8
 $90D8 DEFB $00,$1F,$04,$03,$06,$03,$04,$09
 $90E0 DEFB $00,$FC,$02,$81,$A1,$B1,$79,$F7
 $90E8 DEFB $0E,$01,$01,$82,$C2,$F2,$7A,$3F
 $90F0 DEFB $F8,$3C,$7E,$7E,$3E,$0E,$7E,$FC
 $90F8 DEFB $1F,$07,$00,$03,$01,$02,$04,$07
 $9100 DEFB $FC,$F8,$90,$B8,$24,$22,$44,$F8
 $9108 DEFB $1F,$04,$03,$06,$03,$04,$09,$0E
 $9110 DEFB $FC,$02,$81,$A1,$B1,$79,$F7,$71
 $9118 DEFB $80,$C1,$E2,$F2,$7A,$7E,$3F,$1F
 $9120 DEFB $F8,$24,$76,$72,$7A,$3A,$FE,$FC
 $9128 DEFB $07,$00,$00,$01,$00,$03,$04,$07
 $9130 DEFB $FE,$F8,$50,$90,$98,$28,$28,$F8
 $9138 DEFB $1F,$04,$03,$06,$03,$84,$C9,$EE
 $9140 DEFB $FC,$02,$81,$A1,$B1,$79,$F7,$71
 $9148 DEFB $F0,$F1,$FA,$7A,$7E,$3E,$3E,$1F
 $9150 DEFB $F8,$24,$76,$72,$72,$72,$7E,$F4
 $9158 DEFB $0F,$03,$00,$00,$00,$01,$02,$03
 $9160 DEFB $FC,$F8,$50,$D8,$50,$90,$10,$F0
 $9168 DEFB $1F,$04,$03,$06,$03,$84,$C9,$EE
 $9170 DEFB $FC,$02,$81,$A1,$B1,$79,$F7,$71
 $9178 DEFB $F0,$F1,$7A,$7E,$3E,$1F,$07,$03
 $9180 DEFB $F8,$24,$76,$72,$72,$72,$FE,$E4
 $9188 DEFB $01,$00,$00,$00,$03,$04,$05,$07
 $9190 DEFB $DC,$F8,$50,$D8,$10,$E8,$08,$F8
 $9198 DEFB $00,$5F,$44,$C3,$E6,$E3,$E4,$E9
 $91A0 DEFB $00,$FC,$02,$81,$A1,$B1,$79,$F7
 $91A8 DEFB $FE,$F1,$7B,$7A,$3D,$1F,$0F,$07
 $91B0 DEFB $F8,$24,$76,$F2,$E2,$C2,$FF,$85
 $91B8 DEFB $03,$00,$00,$01,$01,$02,$04,$07
 $91C0 DEFB $7E,$D8,$94,$48,$44,$22,$44,$F8
 $91C8 DEFB $1F,$04,$03,$06,$03,$84,$C9,$EE
 $91D0 DEFB $FC,$02,$81,$A1,$B1,$79,$F7,$71
 $91D8 DEFB $F0,$F1,$7A,$7E,$3F,$1F,$0F,$03
 $91E0 DEFB $F8,$24,$76,$72,$72,$F2,$FE,$E4
 $91E8 DEFB $01,$00,$00,$00,$03,$04,$05,$07
 $91F0 DEFB $DC,$F8,$50,$D8,$10,$E8,$08,$F8
 $91F8 DEFB $1F,$04,$03,$06,$03,$84,$C9,$EE
 $9200 DEFB $FC,$02,$81,$A1,$B1,$79,$F7,$71
 $9208 DEFB $F0,$F1,$FB,$7A,$7E,$3E,$3F,$1F
 $9210 DEFB $F8,$24,$76,$72,$72,$72,$FE,$F4
 $9218 DEFB $0F,$03,$00,$00,$00,$01,$02,$03
 $9220 DEFB $FC,$F8,$50,$D8,$50,$90,$10,$F0
 $9228 DEFB $03,$0C,$11,$27,$2F,$4F,$5F,$5F
 $9230 DEFB $C0,$30,$88,$E4,$F4,$F2,$FA,$FA
 $9238 DEFB $4F,$2F,$26,$11,$0C,$03,$00,$00
 $9240 DEFB $F2,$F4,$64,$88,$30,$C0,$00,$00
 $9248 DEFB $03,$0C,$11,$27

; Data block at 924C
b$924C DEFB $03,$0C,$11,$27,$2F,$4F,$5F,$5F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9254 DEFB $C0,$30,$88,$E4,$F4,$F2,$FA,$FA ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $925C DEFB $4F,$2F,$26,$11,$0C,$03,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9264 DEFB $F2,$F4,$64,$88,$30,$C0,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $926C DEFB $03,$0C,$11,$27,$2F,$4F,$5F,$5F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9274 DEFB $C0,$30,$88,$E4,$F4,$F2,$FA,$FA ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $927C DEFB $4F,$28,$26,$11,$0C,$03,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9284 DEFB $12,$14,$64,$88,$30,$C0,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $928C DEFB $03,$0C,$11,$27,$2F,$4F,$5F,$5E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9294 DEFB $C0,$30,$88,$E4,$F4,$F2,$FA,$0A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $929C DEFB $48,$28,$26,$11,$0C,$03,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $92A4 DEFB $12,$14,$64,$88,$30,$C0,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $92AC DEFB $03,$0C,$11,$27,$2F,$4E,$50,$50 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $92B4 DEFB $C0,$30,$88,$E4,$F4,$12,$0A,$0A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $92BC DEFB $48,$28,$26,$11,$0C,$03,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $92C4 DEFB $12,$14,$64,$88,$30,$C0,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $92CC DEFB $03,$0C,$11,$27,$2F,$48,$50,$50 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $92D4 DEFB $C0,$30,$88,$E4,$F4,$12,$0A,$0A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $92DC DEFB $48,$28,$26,$11,$0C,$03,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $92E4 DEFB $12,$14,$64,$88,$30,$C0,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $92EC DEFB $03,$0C,$11,$27,$28,$48,$50,$50 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $92F4 DEFB $C0,$30,$88,$E4,$F4,$12,$0A,$0A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $92FC DEFB $48,$28,$26,$11,$0C,$03,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9304 DEFB $12,$14,$64,$88,$30,$C0,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $930C DEFB $03,$0C,$11,$27,$2F,$48,$50,$50 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9314 DEFB $C0,$30,$88,$E4,$F4,$F2,$0A,$0A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $931C DEFB $48,$28,$26,$11,$0C,$03,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9324 DEFB $12,$14,$64,$88,$30,$C0,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $932C DEFB $03,$0C,$11,$27,$2F,$4F,$5F,$50 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9334 DEFB $C0,$30,$88,$E4,$F4,$F2,$FA,$FA ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $933C DEFB $48,$28,$26,$11,$0C,$03,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9344 DEFB $12,$14,$64,$88,$30,$C0,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $934C DEFB $00,$00,$01,$01,$02,$04,$08,$18 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9354 DEFB $00,$F0,$08,$08,$08,$08,$08,$08 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $935C DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9364 DEFB $10,$10,$10,$10,$10,$08,$04,$03 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $936C DEFB $00,$00,$01,$01,$02,$04,$08,$18 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9374 DEFB $00,$F0,$08,$08,$08,$08,$08,$08 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $937C DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9384 DEFB $10,$10,$10,$10,$20,$08,$20,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $938C DEFB $00,$00,$01,$01,$02,$04,$08,$18 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9394 DEFB $00,$F0,$08,$08,$08,$0A,$28,$08 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $939C DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $93A4 DEFB $00,$24,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $93AC DEFB $00,$00,$01,$01,$02,$04,$08,$18 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $93B4 DEFB $00,$F0,$08,$08,$28,$02,$10,$04 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $93BC DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $93C4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $93CC DEFB $00,$00,$01,$01,$02,$04,$08,$18 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $93D4 DEFB $00,$F0,$09,$00,$14,$01,$08,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $93DC DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $93E4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $93EC DEFB $00,$01,$00,$01,$02,$04,$08,$18 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $93F4 DEFB $00,$20,$00,$20,$00,$80,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $93FC DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9404 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $940C DEFB $00,$00,$02,$00,$00,$04,$09,$18 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9414 DEFB $00,$00,$00,$00,$80,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $941C DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9424 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $942C DEFB $00,$04,$00,$12,$20,$00,$08,$18 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9434 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $943C DEFB $3C,$4E,$87,$87,$87,$87,$4E,$3C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9444 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#

; Data block at 944C
b$944C DEFB $00,$00,$08,$0C,$1F,$77,$FF,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9454 DEFB $00,$3C,$7E,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $945C DEFB $00,$00,$00,$00,$80,$C0,$F8,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9464 DEFB $00,$00,$00,$00,$00,$00,$00,$F8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $946C DEFB $00,$00,$00,$00,$00,$00,$00,$1F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9474 DEFB $00,$00,$00,$00,$01,$03,$1F,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $947C DEFB $00,$3C,$7E,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9484 DEFB $00,$00,$10,$30,$F8,$EE,$FF,$FE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $948C DEFB $00,$00,$00,$00,$80,$F0,$7E,$3F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9494 DEFB $00,$00,$00,$18,$3C,$7E,$77,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $949C DEFB $30,$1F,$0F,$03,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $94A4 DEFB $3C,$F8,$F0,$C0,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $94AC DEFB $00,$18,$3C,$7E,$EE,$FF,$3B,$1B ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $94B4 DEFB $00,$00,$01,$0F,$7E,$FC,$DC,$D8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $94BC DEFB $0F,$03,$03,$01,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $94C4 DEFB $F0,$C0,$E0,$E0,$E0,$70,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $94CC DEFB $0C,$0E,$0F,$07,$87,$F7,$7F,$37 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $94D4 DEFB $00,$00,$00,$98,$BC,$FE,$B7,$BF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $94DC DEFB $34,$1F,$0F,$03,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $94E4 DEFB $BC,$F8,$F0,$C0,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $94EC DEFB $00,$00,$00,$18,$3C,$7E,$EE,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $94F4 DEFB $00,$00,$00,$00,$01,$0F,$7E,$FC ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $94FC DEFB $3C,$1F,$0F,$03,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9504 DEFB $0C,$F8,$F0,$C0,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $950C DEFB $00,$00,$00,$00,$80,$F0,$7E,$3F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9514 DEFB $00,$00,$00,$18,$3C,$7E,$77,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $951C DEFB $30,$1F,$0F,$03,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9524 DEFB $3C,$F8,$F0,$C0,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $952C DEFB $00,$00,$00,$19,$3D,$7F,$ED,$FD ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9534 DEFB $30,$70,$F0,$E0,$E1,$EF,$FE,$EC ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $953C DEFB $3D,$1F,$0F,$03,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9544 DEFB $2C,$F8,$F0,$C0,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $954C DEFB $00,$00,$80,$F0,$7E,$3F,$3B,$1B ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9554 DEFB $00,$18,$3C,$7E,$77,$FF,$DC,$D8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $955C DEFB $0F,$03,$07,$07,$07,$0E,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9564 DEFB $F0,$C0,$C0,$80,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $956C DEFB $00,$00,$00,$18,$3C,$7E,$EE,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9574 DEFB $00,$00,$00,$00,$01,$0F,$7E,$FC ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $957C DEFB $3C,$1F,$0F,$03,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9584 DEFB $0C,$F8,$F0,$C0,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $958C DEFB $0C,$12,$09,$04,$02,$39,$44,$83 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9594 DEFB $00,$00,$00,$80,$7F,$6B,$FA,$4E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $959C DEFB $00,$00,$00,$00,$00,$83,$CF,$BF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $95A4 DEFB $00,$00,$00,$3E,$78,$E0,$C0,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $95AC DEFB $9F,$AF,$BE,$7C,$10,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $95B4 DEFB $42,$61,$F9,$69,$3D,$07,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $95BC DEFB $8F,$82,$81,$F8,$84,$03,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $95C4 DEFB $00,$00,$80,$60,$10,$08,$FE,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#

; Data block at 95CC
b$95CC DEFB $00,$00,$00,$00,$00,$1C,$22,$C1 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $95D4 DEFB $00,$00,$00,$0E,$11,$20,$60,$AE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $95DC DEFB $00,$00,$01,$03,$87,$CF,$FE,$3C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $95E4 DEFB $00,$7E,$F8,$C0,$80,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $95EC DEFB $CF,$57,$5F,$3E,$08,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $95F4 DEFB $BB,$AA,$6A,$2A,$1F,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $95FC DEFB $CC,$82,$81,$F1,$88,$04,$02,$01 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9604 DEFB $00,$00,$00,$00,$80,$80,$40,$F8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $960C DEFB $03,$01,$00,$00,$00,$38,$44,$83 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9614 DEFB $E0,$10,$88,$48,$27,$26,$66,$AA ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $961C DEFB $00,$00,$00,$00,$00,$83,$CF,$BF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9624 DEFB $00,$00,$00,$3E,$78,$E0,$C0,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $962C DEFB $9F,$AF,$BE,$7C,$19,$12,$24,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9634 DEFB $BA,$AA,$6A,$AA,$1F,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $963C DEFB $8F,$82,$81,$F8,$84,$03,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9644 DEFB $00,$00,$80,$60,$10,$08,$FE,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#

; Graphics: Sand (Goldfish Game)
;
; See #R$CEE6.
; #UDGTABLE { #UDGS$20,$01,$04(sand)(#UDG($964C+($08*($x%$10)),attr=$0E)(*sand)sand) } UDGTABLE#
; It's actually chosen randomly in the game (the image here is simply sequential for an example).
@label=Graphics_GoldfishGameSand
b$964C DEFB $10,$38,$5C,$F7,$FF,$FD,$DF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $9654 DEFB $18,$3C,$7A,$EF,$FB,$FF,$F7,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $965C DEFB $00,$00,$00,$C0,$F1,$7B,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $9664 DEFB $00,$00,$00,$C1,$F3,$FF,$BF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $966C DEFB $20,$30,$78,$EF,$FF,$BB,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $9674 DEFB $00,$00,$00,$87,$8F,$DF,$FE,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $967C DEFB $10,$38,$FC,$FF,$F7,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $9684 DEFB $0C,$1C,$3E,$FF,$FF,$BB,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $968C DEFB $10,$38,$5C,$F7,$FF,$FD,$DF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $9694 DEFB $18,$3C,$7A,$EF,$FB,$FF,$F7,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $969C DEFB $00,$00,$00,$C0,$F1,$7B,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $96A4 DEFB $00,$00,$00,$C1,$F3,$FF,$BF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $96AC DEFB $20,$30,$78,$EF,$FF,$BB,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $96B4 DEFB $00,$00,$00,$87,$8F,$DF,$FE,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $96BC DEFB $10,$38,$FC,$FF,$F7,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#
 $96C4 DEFB $0C,$1C,$3E,$FF,$FF,$BB,$FF,$FF ; #UDGTABLE { #UDG(#PC,attr=$0E) }
                                            ; UDGTABLE#

; Graphics: Dolphin (Goldfish Game)
@label=Graphics_GoldfishGameDolphin
b$96CC DEFB $00,$00,$00,$00,$80,$C1,$FF,$7F ; {#LET(filename=#EVAL(#PC-$96CC)/$40)
 $96D4 DEFB $00,$00,$00,$00,$01,$FF,$FF,$FF ; #UDGTABLE {
 $96DC DEFB $20,$30,$38,$1C,$FF,$FF,$FF,$FF ; #UDGS$04,$02,$04(#FORMAT(dolphin-{filename}*))(#UDG(#PC+$08*($04*$y+$x),attr=$0D)(*dolphin)dolphin)
 $96E4 DEFB $00,$00,$00,$00,$FC,$FE,$EF,$FF ; } UDGTABLE#
 $96EC DEFB $7F,$FF,$C3,$80,$00,$00,$00,$00 ;
 $96F4 DEFB $FF,$FF,$FF,$1F,$03,$00,$00,$00 ;
 $96FC DEFB $FF,$FF,$FF,$FF,$FF,$03,$06,$00 ;
 $9704 DEFB $FE,$FC,$F0,$E0,$80,$00,$00,$00 ; }
 $970C DEFB $08,$18,$18,$3F,$7F,$EF,$87,$03 ; {#LET(filename=#EVAL(#PC-$96CC)/$40)
 $9714 DEFB $00,$00,$00,$00,$C0,$F0,$FF,$FF ; #UDGTABLE {
 $971C DEFB $00,$20,$30,$38,$1C,$3F,$FF,$FF ; #UDGS$04,$02,$04(#FORMAT(dolphin-{filename}*))(#UDG(#PC+$08*($04*$y+$x),attr=$0D)(*dolphin)dolphin)
 $9724 DEFB $00,$00,$00,$00,$00,$FC,$FE,$EF ; } UDGTABLE#
 $972C DEFB $01,$00,$00,$00,$00,$00,$00,$00 ;
 $9734 DEFB $FF,$FF,$7F,$3F,$1F,$03,$00,$00 ;
 $973C DEFB $FF,$FF,$FF,$FF,$FF,$FF,$03,$06 ;
 $9744 DEFB $FF,$FE,$FC,$F0,$E0,$80,$00,$00 ; }
 $974C DEFB $00,$00,$00,$00,$80,$C1,$FF,$7F ; {#LET(filename=#EVAL(#PC-$96CC)/$40)
 $9754 DEFB $00,$00,$00,$00,$01,$FF,$FF,$FF ; #UDGTABLE {
 $975C DEFB $20,$30,$38,$1C,$FF,$FF,$FF,$FF ; #UDGS$04,$02,$04(#FORMAT(dolphin-{filename}*))(#UDG(#PC+$08*($04*$y+$x),attr=$0D)(*dolphin)dolphin)
 $9764 DEFB $00,$00,$00,$00,$FC,$FE,$EF,$FF ; } UDGTABLE#
 $976C DEFB $7F,$7F,$C0,$80,$00,$00,$00,$00 ;
 $9774 DEFB $FF,$FF,$FF,$1F,$03,$00,$00,$00 ;
 $977C DEFB $FF,$FE,$FF,$FF,$FF,$03,$06,$00 ;
 $9784 DEFB $FE,$00,$F0,$E0,$80,$00,$00,$00 ; }
 $978C DEFB $00,$00,$00,$00,$00,$07,$0F,$1F ; {#LET(filename=#EVAL(#PC-$96CC)/$40)
 $9794 DEFB $00,$00,$00,$1F,$FF,$FF,$FF,$FF ; #UDGTABLE {
 $979C DEFB $30,$38,$1C,$FF,$FF,$FF,$FF,$FF ; #UDGS$04,$02,$04(#FORMAT(dolphin-{filename}*))(#UDG(#PC+$08*($04*$y+$x),attr=$0D)(*dolphin)dolphin)
 $97A4 DEFB $00,$00,$00,$FC,$FE,$EF,$FF,$FE ; } UDGTABLE#
 $97AC DEFB $3F,$FF,$FC,$38,$18,$18,$10,$00 ;
 $97B4 DEFB $FF,$FF,$1F,$03,$00,$00,$00,$00 ;
 $97BC DEFB $FF,$FF,$FF,$FF,$03,$06,$00,$00 ;
 $97C4 DEFB $00,$F0,$E0,$80,$00,$00,$00,$00 ; }
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$03(dolphin)) }
; UDGTABLE#

; Graphics: Sea Snake (Goldfish Game)
@label=Graphics_GoldfishGameSeaSnake
b$97CC DEFB $00,$00,$00,$00,$00,$3E,$FF,$E3 ; {#LET(filename=#EVAL(#PC-$97CC)/$30)
 $97D4 DEFB $00,$00,$00,$00,$00,$00,$C1,$E3 ; #UDGTABLE {
 $97DC DEFB $00,$00,$1C,$3E,$77,$E3,$C1,$80 ; #UDGS$03,$02,$04(#FORMAT(sea-snake-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0A)(*sea-snake)sea-snake)
 $97E4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; } UDGTABLE#
 $97EC DEFB $77,$3E,$1C,$00,$00,$00,$00,$00 ;
 $97F4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $97FC DEFB $00,$00,$70,$F8,$9C,$0E,$07,$03 ; {#LET(filename=#EVAL(#PC-$97CC)/$30)
 $9804 DEFB $00,$00,$00,$00,$00,$7C,$FF,$C7 ; #UDGTABLE {
 $980C DEFB $00,$00,$00,$00,$01,$03,$07,$8E ; #UDGS$03,$02,$04(#FORMAT(sea-snake-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0A)(*sea-snake)sea-snake)
 $9814 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; } UDGTABLE#
 $981C DEFB $01,$00,$00,$00,$00,$00,$00,$00 ;
 $9824 DEFB $DC,$F8,$70,$00,$00,$00,$00,$00 ; }
 $982C DEFB $00,$00,$01,$03,$07,$0E,$1C,$38 ; {#LET(filename=#EVAL(#PC-$97CC)/$30)
 $9834 DEFB $00,$00,$C0,$E0,$70,$39,$1F,$0F ; #UDGTABLE {
 $983C DEFB $00,$00,$00,$00,$00,$F0,$FC,$1E ; #UDGS$03,$02,$04(#FORMAT(sea-snake-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0A)(*sea-snake)sea-snake)
 $9844 DEFB $70,$E0,$C0,$00,$00,$00,$00,$00 ; } UDGTABLE#
 $984C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $9854 DEFB $07,$03,$01,$00,$00,$00,$00,$00 ; }
 $985C DEFB $00,$00,$00,$00,$00,$E0,$F0,$78 ; {#LET(filename=#EVAL(#PC-$97CC)/$30)
 $9864 DEFB $00,$00,$07,$0F,$1D,$38,$70,$E0 ; #UDGTABLE {
 $986C DEFB $00,$00,$00,$80,$C0,$E7,$7F,$3C ; #UDGS$03,$02,$04(#FORMAT(sea-snake-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0A)(*sea-snake)sea-snake)
 $9874 DEFB $1D,$0F,$07,$00,$00,$00,$00,$00 ; } UDGTABLE#
 $987C DEFB $C0,$80,$00,$00,$00,$00,$00,$00 ;
 $9884 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$03(sea-snake)) }
; UDGTABLE#

; Graphics: Marlin (Goldfish Game)
@label=Graphics_GoldfishGameMarlin
b$988C DEFB $00,$00,$00,$40,$60,$73,$7F,$3F ; {#LET(filename=#EVAL(#PC-$988C)/$30)
 $9894 DEFB $78,$24,$12,$1F,$FF,$FF,$FF,$FF ; #UDGTABLE {
 $989C DEFB $00,$00,$00,$00,$C0,$F0,$FC,$BE ; #UDGS$03,$02,$04(#FORMAT(marlin-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0B)(*marlin)marlin)
 $98A4 DEFB $7F,$71,$60,$40,$00,$00,$00,$00 ; } UDGTABLE#
 $98AC DEFB $FF,$FF,$7F,$1F,$25,$4A,$FC,$00 ;
 $98B4 DEFB $FC,$F0,$E0,$80,$00,$00,$00,$00 ; }
 $98BC DEFB $00,$00,$00,$40,$60,$73,$7F,$3F ; {#LET(filename=#EVAL(#PC-$988C)/$30)
 $98C4 DEFB $78,$24,$12,$1F,$FF,$FF,$FF,$FF ; #UDGTABLE {
 $98CC DEFB $00,$00,$00,$00,$C0,$F0,$FC,$BE ; #UDGS$03,$02,$04(#FORMAT(marlin-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0B)(*marlin)marlin)
 $98D4 DEFB $7F,$71,$60,$40,$00,$00,$00,$00 ; } UDGTABLE#
 $98DC DEFB $FF,$FF,$7F,$1F,$25,$4A,$FC,$00 ;
 $98E4 DEFB $FC,$F0,$E0,$80,$00,$00,$00,$00 ; }
 $98EC DEFB $00,$00,$00,$40,$60,$73,$7F,$3F ; {#LET(filename=#EVAL(#PC-$988C)/$30)
 $98F4 DEFB $78,$24,$12,$1F,$FF,$FF,$FF,$FF ; #UDGTABLE {
 $98FC DEFB $00,$00,$00,$00,$C0,$F0,$FC,$BE ; #UDGS$03,$02,$04(#FORMAT(marlin-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0B)(*marlin)marlin)
 $9904 DEFB $7F,$71,$60,$40,$00,$00,$00,$00 ; } UDGTABLE#
 $990C DEFB $FF,$FF,$7F,$1F,$25,$4A,$FC,$00 ;
 $9914 DEFB $FC,$F0,$E0,$80,$00,$00,$00,$00 ; }
 $991C DEFB $00,$00,$00,$40,$60,$73,$7F,$3F ; {#LET(filename=#EVAL(#PC-$988C)/$30)
 $9924 DEFB $78,$24,$12,$1F,$FF,$FF,$FF,$FF ; #UDGTABLE {
 $992C DEFB $00,$00,$00,$00,$C0,$F0,$FC,$BE ; #UDGS$03,$02,$04(#FORMAT(marlin-{filename}*))(#UDG(#PC+$08*($03*$y+$x),attr=$0B)(*marlin)marlin)
 $9934 DEFB $7F,$71,$60,$40,$00,$00,$00,$00 ; } UDGTABLE#
 $993C DEFB $FF,$FF,$7F,$1F,$25,$4A,$FC,$00 ;
 $9944 DEFB $FC,$F0,$E0,$80,$00,$00,$00,$00 ; }
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$03(marlin)) }
; UDGTABLE#

; Graphics: Squid (Goldfish Game)
@label=Graphics_GoldfishGameSquid
b$994C DEFB $03,$07,$05,$07,$03,$03,$05,$09 ; {#LET(filename=#EVAL(#PC-$994C)/$20)
 $9954 DEFB $C0,$E0,$60,$E0,$C0,$C0,$C0,$A0 ; #UDGTABLE {
 $995C DEFB $11,$21,$42,$42,$44,$88,$88,$10 ; #UDGS$02,$02,$04(#FORMAT(squid-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0C)(*squid)squid)
 $9964 DEFB $A0,$A0,$A0,$90,$48,$44,$24,$20 ; } UDGTABLE#}
 $996C DEFB $03,$07,$06,$07,$03,$03,$03,$07 ; {#LET(filename=#EVAL(#PC-$994C)/$20)
 $9974 DEFB $C0,$E0,$A0,$E0,$C0,$C0,$A0,$90 ; #UDGTABLE {
 $997C DEFB $0A,$14,$24,$24,$E4,$08,$08,$08 ; #UDGS$02,$02,$04(#FORMAT(squid-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0C)(*squid)squid)
 $9984 DEFB $88,$84,$42,$22,$22,$12,$0A,$09 ; } UDGTABLE#}
 $998C DEFB $03,$07,$05,$07,$03,$03,$03,$07 ; {#LET(filename=#EVAL(#PC-$994C)/$20)
 $9994 DEFB $C0,$E0,$60,$E0,$C0,$C0,$C0,$C0 ; #UDGTABLE {
 $999C DEFB $06,$06,$0A,$12,$22,$22,$22,$42 ; #UDGS$02,$02,$04(#FORMAT(squid-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0C)(*squid)squid)
 $99A4 DEFB $A0,$A0,$A0,$A0,$50,$28,$18,$18 ; } UDGTABLE#}
 $99AC DEFB $03,$07,$06,$07,$03,$03,$03,$03 ; {#LET(filename=#EVAL(#PC-$994C)/$20)
 $99B4 DEFB $C0,$E0,$A0,$E0,$C0,$C0,$C0,$C0 ; #UDGTABLE {
 $99BC DEFB $05,$05,$05,$05,$09,$09,$09,$09 ; #UDGS$02,$02,$04(#FORMAT(squid-{filename}*))(#UDG(#PC+$08*($02*$y+$x),attr=$0C)(*squid)squid)
 $99C4 DEFB $40,$60,$50,$50,$50,$48,$20,$20 ; } UDGTABLE#}
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$03(squid)) }
; UDGTABLE#

; Graphics: Goldfish (Goldfish Game)
@label=Graphics_GoldfishGameFish
b$99CC DEFB $00,$00,$00,$5C,$3E,$5C,$00,$00 ; #LET(filename=#EVAL(#PC-$99CC)/$08)
                                            ; #UDGTABLE {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(goldfish-{filename}*))
                                            ; } UDGTABLE#
 $99D4 DEFB $00,$2E,$1F,$2E,$00,$00,$00,$00 ; #LET(filename=#EVAL(#PC-$99CC)/$08)
                                            ; #UDGTABLE {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(goldfish-{filename}*))
                                            ; } UDGTABLE#
 $99DC DEFB $5C,$3E,$5C,$00,$00,$00,$00,$00 ; #LET(filename=#EVAL(#PC-$99CC)/$08)
                                            ; #UDGTABLE {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(goldfish-{filename}*))
                                            ; } UDGTABLE#
 $99E4 DEFB $00,$2E,$1F,$2E,$00,$00,$00,$00 ; #LET(filename=#EVAL(#PC-$99CC)/$08)
                                            ; #UDGTABLE {
                                            ; #UDG(#PC,attr=$0E)(#FORMAT(goldfish-{filename}*))
                                            ; } UDGTABLE#
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$03(goldfish)) }
; UDGTABLE#

; Graphics: Boat 1 (Goldfish Game)
;
; See #R$D870.
; #UDGTABLE { #UDGS$0C,$08,$04(boat-01)(#UDG($99EC+$08*($0C*$y+$x))(*boat)boat) } UDGTABLE#
@label=Graphics_GoldfishGameBoat1
b$99EC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $99F4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $99FC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A04 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A0C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A14 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A1C DEFB $00,$00,$00,$00,$00,$00,$03,$0E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A24 DEFB $30,$30,$30,$38,$74,$BA,$35,$32 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A2C DEFB $00,$00,$00,$00,$00,$00,$00,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A34 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A3C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A44 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A4C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A54 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A5C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A64 DEFB $00,$00,$00,$00,$00,$03,$00,$01 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A6C DEFB $30,$7C,$73,$70,$B0,$FF,$B0,$30 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A74 DEFB $00,$00,$07,$F8,$00,$80,$01,$02 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A7C DEFB $34,$CF,$10,$20,$40,$80,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A84 DEFB $31,$FF,$30,$30,$30,$30,$30,$30 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A8C DEFB $60,$98,$46,$21,$10,$08,$04,$02 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A94 DEFB $00,$00,$00,$83,$7C,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9A9C DEFB $30,$30,$F0,$30,$30,$30,$30,$30 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AA4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AAC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AB4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9ABC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AC4 DEFB $01,$01,$02,$03,$03,$05,$05,$04 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9ACC DEFB $30,$30,$30,$FF,$FA,$FA,$F7,$F6 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AD4 DEFB $04,$08,$10,$20,$40,$87,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9ADC DEFB $03,$01,$01,$01,$00,$FF,$02,$04 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AE4 DEFB $FF,$FA,$FA,$F7,$F4,$FF,$31,$30 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AEC DEFB $01,$00,$00,$00,$80,$FF,$20,$90 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AF4 DEFB $03,$80,$40,$20,$10,$08,$04,$02 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9AFC DEFB $FF,$30,$30,$30,$30,$30,$30,$30 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B04 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B0C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B14 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B1C DEFB $03,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B24 DEFB $FF,$08,$10,$10,$20,$20,$40,$40 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B2C DEFB $FF,$3A,$79,$78,$78,$B4,$B4,$FC ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B34 DEFB $FF,$E0,$18,$87,$40,$20,$10,$08 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B3C DEFB $08,$30,$C0,$00,$00,$00,$00,$01 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B44 DEFB $30,$78,$78,$78,$B4,$B4,$FC,$32 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B4C DEFB $48,$26,$13,$08,$04,$02,$01,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B54 DEFB $03,$01,$FF,$63,$1C,$00,$01,$82 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B5C DEFB $FF,$FA,$FB,$F6,$F4,$EC,$78,$B4 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B64 DEFB $00,$00,$FF,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B6C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B74 DEFB $00,$00,$00,$00,$00,$00,$01,$06 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B7C DEFB $00,$01,$02,$04,$18,$60,$80,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B84 DEFB $81,$01,$01,$02,$02,$03,$04,$04 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B8C DEFB $32,$32,$FE,$31,$31,$FF,$30,$30 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B94 DEFB $04,$02,$01,$00,$00,$00,$80,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9B9C DEFB $01,$01,$02,$82,$43,$24,$14,$0F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BA4 DEFB $32,$FE,$31,$31,$FF,$30,$30,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BAC DEFB $00,$00,$00,$00,$00,$80,$81,$82 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BB4 DEFB $44,$29,$11,$29,$45,$82,$03,$03 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BBC DEFB $B6,$FF,$32,$32,$FE,$31,$31,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BC4 DEFB $00,$00,$80,$40,$20,$10,$08,$84 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BCC DEFB $00,$01,$FE,$78,$1F,$07,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BD4 DEFB $38,$C0,$00,$00,$80,$F8,$7F,$07 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BDC DEFB $00,$00,$00,$00,$00,$00,$80,$F8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BE4 DEFB $07,$08,$08,$0F,$10,$10,$1F,$20 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BEC DEFB $FF,$30,$30,$FF,$31,$31,$FF,$31 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BF4 DEFB $80,$40,$40,$40,$FF,$CF,$B6,$B6 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9BFC DEFB $0C,$0A,$0F,$10,$F8,$3F,$D8,$D8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C04 DEFB $30,$30,$FF,$B0,$70,$FF,$31,$3A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C0C DEFB $44,$48,$D0,$20,$60,$E0,$11,$13 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C14 DEFB $07,$0F,$1F,$3F,$7F,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C1C DEFB $FF,$FF,$C4,$C4,$C4,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C24 DEFB $FF,$FF,$47,$47,$47,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C2C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C34 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C3C DEFB $FF,$7F,$3F,$3F,$1F,$1F,$0F,$07 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C44 DEFB $FF,$FF,$FF,$FF,$CF,$CF,$F7,$FB ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C4C DEFB $FF,$FF,$FF,$C3,$DB,$DB,$C3,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C54 DEFB $CF,$FF,$FF,$0C,$6D,$6D,$0C,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C5C DEFB $3F,$FF,$FF,$30,$B6,$B6,$30,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C64 DEFB $FF,$FF,$FF,$C3,$DB,$DB,$C3,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C6C DEFB $FF,$FF,$FF,$0C,$6D,$6D,$0C,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C74 DEFB $FF,$FF,$FF,$3F,$BF,$BF,$3F,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C7C DEFB $C0,$FF,$C0,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C84 DEFB $06,$FE,$06,$FE,$FE,$FE,$80,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C8C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C94 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9C9C DEFB $03,$01,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CA4 DEFB $FD,$FE,$F8,$3F,$1F,$07,$03,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CAC DEFB $7F,$7F,$7F,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CB4 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CBC DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CC4 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CCC DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CD4 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CDC DEFB $FF,$FF,$FE,$FE,$FC,$FC,$F8,$F8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CE4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#

; Graphics: Boat 2 (Goldfish Game)
;
; See #R$D870.
; #UDGTABLE { #UDGS$0C,$08,$04(boat-02)(#UDG($9CEC+$08*($0C*$y+$x))(*boat)boat) } UDGTABLE#
@label=Graphics_GoldfishGameBoat2
b$9CEC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CF4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9CFC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D04 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D0C DEFB $00,$00,$00,$00,$00,$40,$40,$78 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D14 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D1C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D24 DEFB $00,$00,$00,$20,$38,$3F,$7E,$A8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D2C DEFB $00,$00,$00,$00,$00,$80,$F8,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D34 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D3C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D44 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D4C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D54 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D5C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D64 DEFB $00,$00,$00,$00,$00,$00,$00,$01 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D6C DEFB $7F,$7C,$40,$40,$F8,$C6,$C1,$40 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D74 DEFB $80,$FC,$00,$00,$01,$0E,$F0,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D7C DEFB $01,$02,$14,$68,$93,$21,$40,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D84 DEFB $34,$2A,$25,$22,$FF,$74,$20,$20 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D8C DEFB $00,$00,$00,$C0,$30,$8C,$43,$20 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D94 DEFB $00,$00,$00,$00,$00,$01,$06,$F8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9D9C DEFB $00,$00,$00,$40,$70,$FE,$77,$40 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DA4 DEFB $00,$00,$00,$00,$00,$00,$C0,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DAC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DB4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DBC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DC4 DEFB $1F,$06,$02,$02,$02,$04,$07,$07 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DCC DEFB $FF,$EC,$48,$44,$42,$41,$FE,$F4 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DD4 DEFB $01,$02,$04,$08,$10,$20,$C0,$C0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DDC DEFB $00,$00,$00,$07,$03,$03,$03,$01 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DE4 DEFB $20,$20,$20,$FE,$F4,$F4,$EE,$E9 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DEC DEFB $10,$08,$04,$02,$01,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DF4 DEFB $00,$00,$00,$07,$02,$81,$42,$24 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9DFC DEFB $40,$40,$40,$FC,$E8,$40,$40,$40 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E04 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E0C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E14 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E1C DEFB $00,$00,$00,$01,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E24 DEFB $0B,$0B,$09,$FF,$1F,$2C,$20,$40 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E2C DEFB $F5,$EE,$EC,$FF,$FF,$F3,$F1,$F0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E34 DEFB $2F,$11,$08,$FE,$C2,$31,$0E,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E3C DEFB $FF,$AB,$7C,$10,$60,$80,$80,$41 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E44 DEFB $FF,$FA,$67,$60,$F0,$F0,$F0,$68 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E4C DEFB $FE,$A8,$F0,$90,$4C,$27,$12,$0C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E54 DEFB $18,$18,$24,$47,$83,$FF,$D7,$3D ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E5C DEFB $40,$40,$40,$FE,$F4,$F7,$FE,$E9 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E64 DEFB $00,$00,$00,$00,$00,$FE,$A8,$F0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E6C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E74 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E7C DEFB $00,$00,$00,$01,$02,$3F,$08,$30 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E84 DEFB $41,$81,$82,$04,$08,$FF,$D5,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E8C DEFB $E0,$60,$60,$60,$60,$FF,$FE,$F1 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E94 DEFB $40,$20,$10,$08,$04,$FF,$AD,$F0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E9C DEFB $21,$11,$0A,$06,$03,$85,$05,$87 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EA4 DEFB $68,$F8,$F4,$F4,$FC,$6B,$EA,$FE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EAC DEFB $0C,$12,$21,$40,$80,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EB4 DEFB $01,$02,$05,$89,$52,$22,$52,$8A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EBC DEFB $D8,$F0,$68,$68,$64,$64,$64,$64 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EC4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9ECC DEFB $00,$00,$00,$00,$03,$FC,$70,$1F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9ED4 DEFB $00,$01,$0E,$70,$80,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EDC DEFB $C0,$01,$02,$04,$08,$10,$20,$40 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EE4 DEFB $81,$02,$04,$08,$10,$21,$41,$81 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EEC DEFB $68,$64,$F2,$F1,$F0,$68,$68,$68 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EF4 DEFB $00,$00,$00,$00,$80,$40,$20,$10 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EFC DEFB $4A,$2A,$1F,$1D,$15,$1F,$2B,$2E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F04 DEFB $FD,$F5,$FF,$6E,$EA,$FF,$65,$E5 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F0C DEFB $01,$02,$04,$88,$90,$A0,$C0,$C0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F14 DEFB $04,$06,$09,$08,$08,$10,$10,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F1C DEFB $62,$62,$61,$E1,$61,$60,$70,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F24 DEFB $00,$00,$07,$0B,$0B,$90,$90,$FE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F2C DEFB $07,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F34 DEFB $F0,$7F,$07,$01,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F3C DEFB $81,$02,$F4,$FF,$FF,$70,$7F,$3F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F44 DEFB $02,$02,$02,$FF,$FF,$00,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F4C DEFB $64,$64,$64,$FA,$FE,$07,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F54 DEFB $08,$04,$02,$01,$00,$81,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F5C DEFB $3F,$55,$75,$7F,$AA,$EA,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F64 DEFB $FF,$62,$76,$FF,$63,$7F,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F6C DEFB $E1,$B3,$AC,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F74 DEFB $0A,$FA,$0F,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F7C DEFB $AA,$AA,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F84 DEFB $AA,$AA,$FE,$FC,$FC,$FC,$FC,$F0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F8C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F94 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F9C DEFB $3F,$1F,$0F,$07,$03,$01,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FA4 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$7F,$3F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FAC DEFB $FF,$FF,$F9,$F9,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FB4 DEFB $FF,$FF,$E7,$E7,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FBC DEFB $FF,$FF,$9E,$9E,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FC4 DEFB $FF,$FF,$79,$79,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FCC DEFB $FF,$FF,$E7,$E7,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FD4 DEFB $FF,$F5,$FF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FDC DEFB $FF,$55,$FF,$FE,$FE,$FC,$FC,$FC ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FE4 DEFB $C0,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#

; Graphics: Player Sprite (Goldfish Game)
;
; See #R$D4CC.
@label=Graphics_GoldfishGamePlayer
b$9FEC DEFB $30,$28,$77,$9E,$BC,$77,$04,$04 ; {#LET(filename=#EVAL(#PC-$9FEC)/$10)
 $9FF4 DEFB $00,$00,$E0,$7C,$7E,$E1,$00,$00 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
 $9FFC DEFB $20,$20,$77,$FE,$BC,$77,$01,$00 ; {#LET(filename=#EVAL(#PC-$9FEC)/$10)
 $A004 DEFB $00,$02,$E7,$7D,$78,$EC,$06,$83 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
 $A00C DEFB $20,$20,$77,$9E,$BC,$7F,$10,$20 ; {#LET(filename=#EVAL(#PC-$9FEC)/$10)
 $A014 DEFB $00,$00,$E0,$7C,$7E,$E1,$00,$00 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
 $A01C DEFB $20,$21,$77,$9E,$BE,$77,$02,$02 ; {#LET(filename=#EVAL(#PC-$9FEC)/$10)
 $A024 DEFB $00,$82,$E7,$7D,$78,$EC,$06,$03 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
 $A02C DEFB $20,$21,$77,$9E,$BD,$77,$00,$00 ; {#LET(filename=#EVAL(#PC-$9FEC)/$10)
 $A034 DEFB $00,$00,$E0,$7C,$7E,$E1,$80,$40 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
 $A03C DEFB $30,$28,$77,$9E,$BD,$77,$01,$00 ; {#LET(filename=#EVAL(#PC-$9FEC)/$10)
 $A044 DEFB $00,$02,$E7,$7D,$78,$EC,$06,$03 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
 $A04C DEFB $20,$20,$77,$9F,$BC,$77,$00,$00 ; {#LET(filename=#EVAL(#PC-$9FEC)/$10)
 $A054 DEFB $00,$00,$E0,$FC,$7E,$E1,$00,$00 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
 $A05C DEFB $3C,$24,$77,$9C,$BC,$7F,$10,$20 ; {#LET(filename=#EVAL(#PC-$9FEC)/$10)
 $A064 DEFB $00,$02,$E7,$7D,$78,$EC,$06,$03 ; #UDGTABLE {
                                            ; #UDGS$02,$01,$04(#FORMAT(swimmer-{filename}*))(#UDG(#PC+$08*$x,attr=$0F)(*swimmer)swimmer)
                                            ; } UDGTABLE#}
; #UDGTABLE
; { #UDGARRAY#(#ANIMATE$0F,$07(swimmer)) }
; UDGTABLE#

; Data block at A06C
b$A06C DEFB $3A,$0D,$4C,$44,$20,$41,$2C,$45 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A074 DEFB $0D,$43,$50,$20,$28,$49,$58,$2B ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A07C DEFB $31,$31,$29,$0D,$4A,$52,$20,$5A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A084 DEFB $2C,$43,$53,$0D,$43,$50,$20,$33 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A08C DEFB $0D,$43,$41,$4C,$4C,$20,$5A,$2C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A094 DEFB $4D,$4C,$45,$0D,$43,$53,$3A,$0D ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A09C DEFB $3B,$54,$45,$53,$54,$20,$42,$20 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0A4 DEFB $50,$4F,$53,$4E,$0D,$4C,$44,$20 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0AC DEFB $41,$2C,$42,$0D,$53,$55,$42,$20 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0B4 DEFB $28,$49,$58,$2B,$31,$34,$29,$0D ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0BC DEFB $4A,$52,$20,$5A,$2C,$42,$31,$0D ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0C4 DEFB $43,$50,$20,$32,$35,$35,$0D,$50 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0CC DEFB $55,$53,$48,$20,$41,$46,$0D,$43 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0D4 DEFB $41,$4C,$4C,$20,$5A,$2C,$4D,$44 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0DC DEFB $4F,$0D,$50,$4F,$50,$20,$41,$46 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0E4 DEFB $20,$0D,$43,$41,$4C,$4C,$20,$4E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0EC DEFB $5A,$2C,$4D,$55,$50,$0D,$4A,$52
 $A0F4 DEFB $20,$42,$53,$0D,$42,$31,$3A,$0D
 $A0FC DEFB $4C,$44,$20,$41,$2C,$44,$0D,$43
 $A104 DEFB $50,$20,$28,$49,$58,$2B,$31

; Data block at A10B
b$A10B DEFB $35,$29,$0D,$4A,$52,$20,$5A,$2C
 $A113 DEFB $42,$53,$0D,$43,$50,$20,$33,$0D
 $A11B DEFB $43,$41,$4C,$4C,$20,$5A,$2C,$4D
 $A123 DEFB $55,$50,$0D,$42,$53,$3A,$0D,$52
 $A12B DEFB $45,$54,$0D,$4D,$52,$49,$3A,$0D
 $A133 DEFB $50,$55,$53,$48,$20,$42,$43,$0D
 $A13B DEFB $50,$55,$53,$48,$20,$44,$45,$0D
 $A143 DEFB $4C,$44,$20,$43,$2C,$28,$49,$58
 $A14B DEFB $2B,$31,$33,$29,$0D,$4C,$44,$20
 $A153 DEFB $42,$2C,$28,$49,$58,$2B,$31,$34
 $A15B DEFB $29,$0D,$4C,$44,$20,$44,$2C,$28
 $A163 DEFB $49,$58,$2B,$38,$29,$0D,$4C,$44
 $A16B DEFB $20

; Source Code Remnants
u$A16C DEFM "E,1"          ; #STR(#PC,$04,$03)
 $A16F DEFB $0D
 $A170 DEFM "LD A,(IX+15)" ; #STR(#PC,$04,$0C)
 $A17C DEFB $0D
 $A17D DEFM "CP 3"         ; #STR(#PC,$04,$04)
 $A181 DEFB $0D
 $A182 DEFM "JR Z,NID1"    ; #STR(#PC,$04,$09)
 $A18B DEFB $0D
 $A18C DEFM "INC D"        ; #STR(#PC,$04,$05)
 $A191 DEFB $0D
 $A192 DEFM "NID1:"        ; #STR(#PC,$04,$05)
 $A197 DEFB $0D
 $A198 DEFM "CALL PUTSQ"   ; #STR(#PC,$04,$0A)
 $A1A2 DEFB $0D
 $A1A3 DEFM "POP DE"       ; #STR(#PC,$04,$06)
 $A1A9 DEFB $0D
 $A1AA DEFM "POP BC"       ; #STR(#PC,$04,$06)
 $A1B0 DEFB $0D
 $A1B1 DEFM "RET"          ; #STR(#PC,$04,$03)
 $A1B4 DEFB $0D
 $A1B5 DEFM "MLE:"         ; #STR(#PC,$04,$04)
 $A1B9 DEFB $0D
 $A1BA DEFM "PUSH BC"      ; #STR(#PC,$04,$07)
 $A1C1 DEFB $0D
 $A1C2 DEFM "PU"           ; #STR(#PC,$04,$02)

; Data block at A1C4
b$A1C4 DEFB $D9,$E5,$D9,$AF,$32,$6B,$5C,$3E
 $A1CC DEFB $02,$CD,$01,$16,$3E,$15,$32,$D3
 $A1D4 DEFB $5B,$3A,$D3,$5B,$FE,$15,$F5,$CC
 $A1DC DEFB $97,$AA,$F1,$C4,$F4,$AA,$CD,$44
 $A1E4 DEFB $AB,$CD,$00,$A9,$CD,$1E,$D7,$21
 $A1EC DEFB $00,$3C,$22,$36,$5C,$06,$01,$0E
 $A1F4 DEFB $20,$CD,$D9,$0D,$3E,$10,$D7,$3E
 $A1FC DEFB $07,$D7,$3A,$D3,$5B,$4F,$06,$00
 $A204 DEFB $CD,$1B,$1A,$18,$DF,$00,$3A,$1D
 $A20C DEFB $D7,$3C,$32,$1D,$D7,$32,$00,$58
 $A214 DEFB $CD,$8E,$02,$7B,$FE,$FF,$C8,$FE
 $A21C DEFB $20,$28,$0A,$FE,$16,$D0,$32,$D3
 $A224 DEFB $5B,$C1,$C3,$E9,$D6,$3E,$02,$32
 $A22C DEFB $6B,$5C,$C1,$D9,$E1,$D9,$21,$00
 $A234 DEFB $3C,$22,$36,$5C,$C9,$30,$0D,$44
 $A23C DEFB $42,$20,$31,$38,$2C,$31,$30,$2C
 $A244 DEFB $32,$2C,$32,$2C,$37,$2C,$31,$2C
 $A24C DEFB $38,$30,$0D,$44,$42,$20,$39,$2C
 $A254 DEFB $31,$30,$2C,$32,$2C,$32,$2C,$36
 $A25C DEFB $2C,$31,$2C,$38,$30,$0D,$44,$42
 $A264 DEFB $20,$32,$35,$2C,$35,$2C,$32,$2C
 $A26C DEFB $32,$2C,$35,$2C,$31,$2C,$38,$30
 $A274 DEFB $0D,$44,$42,$20,$31,$30,$2C,$35
 $A27C DEFB $2C,$32,$2C,$32,$2C,$37,$2C,$31
 $A284 DEFB $2C,$38,$30,$0D,$44,$42,$20,$32
 $A28C DEFB $35,$35,$0D,$3B,$42,$44,$41,$54
 $A294 DEFB $38,$0D,$44,$42,$20,$32,$30,$2C
 $A29C DEFB $37,$2C,$31,$30,$34,$2C,$32,$0D
 $A2A4 DEFB $44,$42,$20,$32,$35,$35,$0D,$3B
 $A2AC DEFB $4C,$49,$44,$41,$54,$38,$0D,$44
 $A2B4 DEFB $42,$20,$32,$35,$35,$0D,$3B,$54
 $A2BC DEFB $44,$44,$41,$54,$38,$0D,$44,$42
 $A2C4 DEFB $20,$32,$35,$35,$0D,$3B,$43,$4F
 $A2CC DEFB $4C,$44,$41,$54,$37,$0D,$44,$42
 $A2D4 DEFB $20,$36,$2C,$36,$2C,$30,$2C,$36
 $A2DC DEFB $2C,$31,$2C,$30,$2C,$35,$2C,$32
 $A2E4 DEFB $35,$35,$0D,$3B,$44,$4B,$44,$41
 $A2EC DEFB $54,$37,$0D,$44,$42,$20,$33,$33
 $A2F4 DEFB $2C,$32,$33,$2C,$31,$36,$2C,$33
 $A2FC DEFB $33,$2C,$31,$38,$2C,$31,$36,$0D
 $A304 DEFB $44,$42,$20,$33,$33,$2C,$31,$33
 $A30C DEFB $2C,$31,$36,$2C,$33,$33,$2C,$38
 $A314 DEFB $2C,$31,$36,$0D,$44,$42,$20,$33
 $A31C DEFB $33,$2C,$33,$2C,$31,$36,$2C,$32
 $A324 DEFB $35,$35,$0D,$3B,$45,$4F,$44,$41
 $A32C DEFB $54,$37,$0D,$44,$42,$20,$34,$2C
 $A334 DEFB $32,$32,$2C,$34,$2C,$31,$37,$0D
 $A33C DEFB $44,$42,$20,$32,$34,$2C,$31,$37
 $A344 DEFB $2C,$34,$2C,$32,$30,$0D,$44,$42
 $A34C DEFB $20,$33,$30,$2C,$31,$32,$2C,$36
 $A354 DEFB $2C,$31,$0D,$44,$42,$20,$32,$35
 $A35C DEFB $35,$0D,$3B,$4C,$44,$41,$54,$37
 $A364 DEFB $0D,$44,$42,$20,$31,$33,$2C,$31
 $A36C DEFB $38,$2C,$32,$31,$2C,$31,$33,$2C
 $A374 DEFB $33,$32,$2C,$38,$2C,$32,$35,$35
 $A37C DEFB $0D,$3B,$53,$44,$44,$41,$54,$37
 $A384 DEFB $0D,$44,$42,$20,$32,$36,$2C,$32
 $A38C DEFB $33,$2C,$33,$32,$2C,$31,$36,$2C
 $A394 DEFB $31,$2C,$33,$0D,$44,$42,$20,$32
 $A39C DEFB $36,$2C,$31,$38,$2C,$33,$2C,$36
 $A3A4 DEFB $2C,$32,$2C,$33,$0D,$44,$42,$20
 $A3AC DEFB $38,$2C,$31,$38,$2C,$32,$34,$2C
 $A3B4 DEFB $32,$31,$2C,$33,$2C,$33,$0D,$44
 $A3BC DEFB $42,$20,$31,$36,$2C,$31,$33,$2C
 $A3C4 DEFB $31,$30,$2C,$36,$2C,$34,$2C,$33
 $A3CC DEFB $0D,$44,$42,$20,$31,$36,$2C,$38
 $A3D4 DEFB $2C,$31,$38,$2C,$31,$31,$2C,$35
 $A3DC DEFB $2C,$33,$0D,$44,$42,$20,$38,$2C
 $A3E4 DEFB $38,$2C,$33,$2C,$31,$31,$2C,$36
 $A3EC DEFB $2C,$33,$0D,$44,$42,$20,$32,$35
 $A3F4 DEFB $35,$0D,$3B,$50,$48,$44,$41,$54
 $A3FC DEFB $0D,$44,$42,$20,$32,$35,$35,$0D
 $A404 DEFB $3B,$4F,$50,$53,$54,$37,$0D,$44
 $A40C DEFB $42,$20,$31,$32,$2C,$31,$36,$2C
 $A414 DEFB $33,$2C,$33,$2C,$32,$35,$35,$2C
 $A41C DEFB $30,$2C,$33,$32,$2C,$32,$2C,$33
 $A424 DEFB $2C,$36,$2C,$31,$0D,$44,$42,$20
 $A42C DEFB $33,$2C,$30,$2C,$31,$32,$2C,$31
 $A434 DEFB $36,$2C,$33,$0D,$44,$42,$20,$32
 $A43C DEFB $35,$35,$0D,$3B,$54,$44,$41,$54
 $A444 DEFB $37,$0D,$44,$42,$20,$33,$31,$2C
 $A44C DEFB $32,$30,$2C,$32,$2C,$32,$2C,$37
 $A454 DEFB $2C,$31,$2C,$31,$30,$34,$0D,$44
 $A45C DEFB $42,$20,$33,$30,$2C,$31,$35,$2C
 $A464 DEFB $32,$2C,$32,$2C,$35,$2C,$31,$2C
 $A46C DEFB $38,$38,$0D,$44,$42,$20,$36,$2C
 $A474 DEFB $31,$35,$2C,$32,$2C,$32,$2C,$35
 $A47C DEFB $2C,$31,$2C,$38,$38,$0D,$44,$42
 $A484 DEFB $20,$31,$32,$2C,$31,$30,$2C,$32
 $A48C DEFB $2C,$32,$2C,$35,$2C,$31,$2C,$38
 $A494 DEFB $38,$0D,$44,$42,$20,$37,$2C,$31
 $A49C DEFB $30,$2C,$32,$2C,$32,$2C,$36,$2C
 $A4A4 DEFB $31,$2C,$39,$32,$0D,$44,$42,$20
 $A4AC DEFB $31,$33,$2C,$35,$2C,$32,$2C,$32
 $A4B4 DEFB $2C,$36,$2C,$31,$2C,$38,$30,$0D
 $A4BC DEFB $44,$42,$20,$36,$2C,$35,$2C,$32
 $A4C4 DEFB $2C,$32,$2C,$37,$2C,$31,$2C,$38
 $A4CC DEFB $34,$0D,$44,$42,$20,$32,$35,$35
 $A4D4 DEFB $0D,$3B,$42,$44,$41,$54,$37,$0D
 $A4DC DEFB $44,$42,$20,$32,$33,$2C,$37,$2C
 $A4E4 DEFB $35,$36,$2C,$32,$0D,$44,$42,$20
 $A4EC DEFB $32,$39,$2C,$37,$2C,$38,$30,$2C
 $A4F4 DEFB $32,$0D,$44,$42,$20,$32,$33,$2C
 $A4FC DEFB $32,$32,$2C,$38,$30,$2C,$34,$0D
 $A504 DEFB $44,$42,$20,$31,$37,$2C,$32,$32
 $A50C DEFB $2C,$31,$30,$34,$2C,$34,$0D,$44
 $A514 DEFB $42,$20,$31,$31,$2C,$32,$32,$2C
 $A51C DEFB $38,$30,$2C,$34,$0D,$44,$42,$20
 $A524 DEFB $32,$35,$35,$0D,$3B,$4C,$49,$44
 $A52C DEFB $41,$54,$37,$0D,$44,$42,$20,$32
 $A534 DEFB $35,$35,$0D,$3B,$54,$44,$44,$41
 $A53C DEFB $54,$37,$0D,$44,$42,$20,$32,$35
 $A544 DEFB $35,$0D,$3B,$43,$4F,$4C,$44,$41
 $A54C DEFB $54,$36,$0D,$44,$42,$20,$37,$2C
 $A554 DEFB $37,$2C,$30,$2C,$35,$2C,$30,$2C
 $A55C DEFB $31,$2C,$34,$2C,$32,$35,$35,$0D
 $A564 DEFB $3B,$44,$4B,$44,$41,$54,$36,$0D
 $A56C DEFB $44,$42,$20,$33,$33,$2C,$32,$33
 $A574 DEFB $2C,$32,$2C,$31,$39,$2C,$32,$33
 $A57C DEFB $2C,$39,$0D,$44,$42,$20,$31,$35
 $A584 DEFB $2C,$31,$38,$2C,$37,$2C,$31,$35
 $A58C DEFB $2C,$31,$33,$2C,$37,$0D,$44,$42
 $A594 DEFB $20,$31,$35,$2C,$38,$2C,$37,$2C
 $A59C DEFB $33,$33,$2C,$33,$2C,$31,$36,$0D
 $A5A4 DEFB $44,$42,$20,$32,$39,$2C,$31,$33
 $A5AC DEFB $2C,$35,$2C,$32,$35,$35,$0D,$3B
 $A5B4 DEFB $45,$4F,$44,$41,$54,$36,$3A,$0D
 $A5BC DEFB $44,$42,$20,$32,$36,$2C,$31,$37
 $A5C4 DEFB $2C,$34,$2C,$31,$32,$0D,$44,$42
 $A5CC DEFB $20,$31,$35,$2C,$31,$37,$2C,$34
 $A5D4 DEFB $2C,$34,$0D,$44,$42,$20,$31,$35
 $A5DC DEFB $2C,$37,$2C,$34,$2C,$31,$36,$0D
 $A5E4 DEFB $44,$42,$20,$32,$35,$35,$0D,$3B
 $A5EC DEFB $4C,$44,$41,$54,$36,$0D,$44,$42
 $A5F4 DEFB $20,$34,$2C,$31,$38,$2C,$36,$2C
 $A5FC DEFB $31,$33,$2C,$31,$31,$2C,$38,$2C
 $A604 DEFB $32,$35,$35,$0D,$3B,$53,$44,$44
 $A60C DEFB $41,$54,$36,$0D,$44,$42,$20,$31
 $A614 DEFB $30,$2C,$32,$33,$2C,$31,$31,$2C
 $A61C DEFB $31,$36,$2C,$31,$2C,$33,$0D,$44
 $A624 DEFB $42,$20,$38,$2C,$31,$33,$2C,$33
 $A62C DEFB $2C,$36,$2C,$32,$2C,$33,$0D,$44
 $A634 DEFB $42,$20,$38,$2C,$38,$2C,$31,$34
 $A63C DEFB $2C,$31,$31,$2C,$33,$2C,$33,$2C
 $A644 DEFB $32,$35,$35,$0D,$3B,$50,$48,$44
 $A64C DEFB $41,$54,$36,$0D,$44,$42,$20,$32
 $A654 DEFB $35,$35,$0D,$3B,$4F,$50,$53,$54
 $A65C DEFB $36,$0D,$44,$42,$20,$31,$39,$2C
 $A664 DEFB $36,$2C,$33,$2C,$33,$2C,$32,$35
 $A66C DEFB $35,$2C,$30,$2C,$33,$32,$2C,$32
 $A674 DEFB $2C,$33,$2C,$37,$2C,$31,$0D,$44
 $A67C DEFB $42,$20,$33,$2C,$30,$2C,$31,$39
 $A684 DEFB $2C,$36,$2C,$33,$0D,$44,$42,$20
 $A68C DEFB $32,$35,$35,$0D,$3B,$54,$44,$41
 $A694 DEFB $54,$36,$0D,$44,$42,$20,$31,$34
 $A69C DEFB $2C,$32,$30,$2C,$32,$2C,$32,$2C
 $A6A4 DEFB $32,$2C,$31,$2C,$31,$30,$30,$0D
 $A6AC DEFB $44,$42,$20,$34,$2C,$32,$30,$2C
 $A6B4 DEFB $32,$2C,$32,$2C,$32,$2C,$31,$2C
 $A6BC DEFB $31,$30,$30,$0D,$44,$42,$20,$32
 $A6C4 DEFB $33,$2C,$31,$35,$2C,$32,$2C,$32
 $A6CC DEFB $2C,$36,$2C,$31,$2C,$31,$31,$36
 $A6D4 DEFB $0D,$44,$42,$20,$34,$2C,$31,$30
 $A6DC DEFB $2C,$32,$2C,$32,$2C,$35,$2C,$31
 $A6E4 DEFB $2C,$31,$30,$38,$0D,$44,$42,$20
 $A6EC DEFB $36,$2C,$35,$2C,$32,$2C,$32,$2C
 $A6F4 DEFB $37,$2C,$31,$2C,$31,$30,$34,$0D
 $A6FC DEFB $44,$42,$20,$32,$35,$35,$0D,$3B
 $A704 DEFB $42,$44,$41,$54,$36,$0D,$44,$42
 $A70C DEFB $20,$33,$33,$2C,$37,$2C,$33,$32
 $A714 DEFB $2C,$32,$0D,$44,$42,$20,$32,$37
 $A71C DEFB $2C,$37,$2C,$33,$32,$2C,$32,$0D
 $A724 DEFB $44,$42,$20,$32,$31,$2C,$37,$2C
 $A72C DEFB $33,$32,$2C,$32,$0D,$44,$42,$20
 $A734 DEFB $32,$35,$35,$0D,$3B,$4C,$49,$44
 $A73C DEFB $41,$54,$36,$0D,$44,$42,$20,$32
 $A744 DEFB $35,$35,$0D,$3B,$54,$44,$44,$41
 $A74C DEFB $54,$36,$0D,$44,$42,$20,$32,$35
 $A754 DEFB $35,$0D,$3B,$43,$4F,$4C,$44,$41
 $A75C DEFB $54,$35,$0D,$44,$42,$20,$36,$2C
 $A764 DEFB $36,$2C,$30,$2C,$36,$2C,$30,$2C
 $A76C DEFB $31,$2C,$34,$2C,$32,$35,$35,$0D
 $A774 DEFB $3B,$44,$4B,$44,$41,$54,$35,$0D
 $A77C DEFB $44,$42,$20,$33,$33,$2C,$32,$33
 $A784 DEFB $2C,$31,$36,$2C,$33,$33,$2C,$31
 $A78C DEFB $38,$2C,$31,$36,$0D,$44,$42,$20
 $A794 DEFB $33,$33,$2C,$31,$33,$2C,$31,$36
 $A79C DEFB $2C,$33,$33,$2C,$38,$2C,$31,$36
 $A7A4 DEFB $2C,$33,$33,$2C,$33,$2C,$31,$36
 $A7AC DEFB $2C,$32,$35,$35,$0D,$3B,$45,$4F
 $A7B4 DEFB $44,$41,$54,$35,$0D,$44,$42,$20
 $A7BC DEFB $31,$36,$2C,$32,$32,$2C,$33,$2C
 $A7C4 DEFB $31,$31,$0D,$44,$42,$20,$35,$2C
 $A7CC DEFB $31,$37,$2C,$33,$2C,$31,$38,$0D
 $A7D4 DEFB $44,$42,$20,$32,$38,$2C,$37,$2C
 $A7DC DEFB $35,$2C,$31,$33,$2C,$32,$35,$35
 $A7E4 DEFB $0D,$3B,$4C,$44,$41,$54,$35,$0D
 $A7EC DEFB $44,$42,$20,$39,$2C,$31,$38,$2C
 $A7F4 DEFB $32,$37,$2C,$31,$33,$2C,$32,$35
 $A7FC DEFB $2C,$38,$2C,$32,$35,$35,$0D,$3B

; Routine at A804
;
; Used by the routine at #R$E0A9.
c$A804 LD A,($5BD3)    ;
 $A807 CP $00          ;
 $A809 PUSH AF         ;
 $A80A CALL Z,$AA97    ;
 $A80D POP AF          ;
 $A80E CALL NZ,$AAF4   ;
 $A811 CALL $AB44      ;
 $A814 JP $A900        ;
*$A817 EXX             ;
 $A818 LD E,A          ;
 $A819 LD D,$00        ;
 $A81B SLA E           ;
 $A81D RL D            ;
 $A81F SLA E           ;
 $A821 RL D            ;
 $A823 SLA E           ;
 $A825 RL D            ;
 $A827 LD HL,($5C36)   ;
 $A82A ADD HL,DE       ;
 $A82B LD DE,($5C84)   ;
 $A82F INC DE          ;
 $A830 LD ($5C84),DE   ;
 $A834 DEC DE          ;
 $A835 LD B,$08        ;
*$A837 LD A,(HL)       ;
 $A838 LD (DE),A       ;
 $A839 INC HL          ;
 $A83A INC D           ;
 $A83B DJNZ $A837      ;
 $A83D EXX             ;
 $A83E RET             ;
*$A83F PUSH AF         ;
 $A840 PUSH BC         ;
 $A841 PUSH DE         ;
 $A842 PUSH HL         ;
 $A843 DEC A           ;
 $A844 LD ($BAA2),A    ;
 $A847 LD A,E          ;
 $A848 LD ($BAA3),A    ;
*$A84B LD A,($BAA3)    ;
 $A84E LD E,A          ;
 $A84F PUSH BC         ;
 $A850 PUSH DE         ;
 $A851 CALL $A86E      ;
 $A854 POP DE          ;
 $A855 POP BC          ;
*$A856 LD A,($BAA2)    ;
 $A859 INC A           ;
 $A85A LD ($BAA2),A    ;
 $A85D CALL $A893      ;
 $A860 DEC E           ;
 $A861 JR NZ,$A856     ;
 $A863 DEC D           ;
 $A864 JR Z,$A869      ;
 $A866 DEC B           ;
 $A867 JR $A84B        ;
*$A869 POP HL          ;
 $A86A POP DE          ;
 $A86B POP BC          ;
 $A86C POP AF          ;
 $A86D RET             ;
*$A86E LD A,$18        ;
 $A870 SUB B           ;
 $A871 LD E,A          ;
 $A872 LD D,$00        ;
 $A874 SLA E           ;
 $A876 RL D            ;
 $A878 SLA E           ;
 $A87A RL D            ;
 $A87C SLA E           ;
 $A87E RL D            ;
 $A880 SLA E           ;
 $A882 RL D            ;
 $A884 SLA E           ;
 $A886 RL D            ;
 $A888 LD A,$21        ;
 $A88A SUB C           ;
 $A88B LD L,A          ;
 $A88C LD H,$00        ;
 $A88E ADD HL,DE       ;
 $A88F LD ($BAD5),HL   ;
 $A892 RET             ;
*$A893 PUSH AF         ;
 $A894 PUSH DE         ;
 $A895 PUSH HL         ;
 $A896 LD HL,($BAD5)   ;
 $A899 INC HL          ;
 $A89A LD ($BAD5),HL   ;
 $A89D DEC HL          ;
 $A89E LD DE,$A1C4     ;
 $A8A1 ADD HL,DE       ;
 $A8A2 LD (HL),A       ;
 $A8A3 LD DE,$0320     ;
 $A8A6 ADD HL,DE       ;
 $A8A7 LD A,($5C8F)    ;
 $A8AA LD (HL),A       ;
 $A8AB POP HL          ;
 $A8AC POP DE          ;
 $A8AD POP AF          ;
 $A8AE RET             ;
*$A8AF PUSH HL         ;
 $A8B0 DEC A           ;
 $A8B1 LD ($BAA2),A    ;
 $A8B4 LD A,E          ;
 $A8B5 LD ($BAA3),A    ;
*$A8B8 LD A,($BAA3)    ;
 $A8BB LD E,A          ;
 $A8BC PUSH BC         ;
 $A8BD PUSH DE         ;
 $A8BE CALL $0DD9      ;
 $A8C1 POP DE          ;
 $A8C2 POP BC          ;
*$A8C3 LD A,($BAA2)    ;
 $A8C6 INC A           ;
 $A8C7 LD ($BAA2),A    ;
 $A8CA CALL $A817      ;
 $A8CD DEC E           ;
 $A8CE JR NZ,$A8C3     ;
 $A8D0 DEC D           ;
 $A8D1 JR Z,$A8D6      ;
 $A8D3 DEC B           ;
 $A8D4 JR $A8B8        ;
*$A8D6 POP HL          ;
 $A8D7 RET             ;
*$A8D8 LD B,$18        ;
 $A8DA CALL $0E44      ;
 $A8DD LD BC,$0320     ;
 $A8E0 LD HL,$A1C4     ;
*$A8E3 LD A,$00        ;
 $A8E5 LD (HL),A       ;
 $A8E6 INC HL          ;
 $A8E7 DEC BC          ;
 $A8E8 LD A,B          ;
 $A8E9 OR C            ;
 $A8EA JR NZ,$A8E3     ;
 $A8EC LD BC,$0320     ;
*$A8EF LD A,($5BD1)    ;
 $A8F2 SLA A           ;
 $A8F4 SLA A           ;
 $A8F6 SLA A           ;
 $A8F8 LD (HL),A       ;
 $A8F9 INC HL          ;
 $A8FA DEC BC          ;
 $A8FB LD A,B          ;
 $A8FC OR C            ;
 $A8FD JR NZ,$A8EF     ;
 $A8FF RET             ;
*$A900 LD A,$00        ;
 $A902 LD ($5C8D),A    ;
 $A905 CALL $A8D8      ;
 $A908 LD A,($5BD1)    ;
 $A90B SLA A           ;
 $A90D SLA A           ;
 $A90F SLA A           ;
 $A911 LD ($5C8D),A    ;
 $A914 LD A,$11        ;
 $A916 RST $10         ;
 $A917 LD A,($5BD1)    ;
 $A91A RST $10         ;
 $A91B LD HL,$8378     ;
 $A91E LD ($5C36),HL   ;
 $A921 LD A,$10        ;
 $A923 RST $10         ;
 $A924 LD A,($5BCF)    ;
 $A927 RST $10         ;
 $A928 LD HL,($5BE8)   ;
*$A92B LD C,(HL)       ;
 $A92C INC HL          ;
 $A92D LD B,(HL)       ;
 $A92E INC HL          ;
 $A92F LD A,$FF        ;
 $A931 CP C            ;
 $A932 JR Z,$A952      ;
 $A934 PUSH HL         ;
 $A935 CALL $A86E      ;
 $A938 CALL $0DD9      ;
 $A93B POP HL          ;
 $A93C LD B,(HL)       ;
 $A93D INC HL          ;
*$A93E LD A,$21        ;
 $A940 CALL $A893      ;
 $A943 CALL $A817      ;
 $A946 LD A,$22        ;
 $A948 CALL $A893      ;
 $A94B CALL $A817      ;
 $A94E DJNZ $A93E      ;
 $A950 JR $A92B        ;
*$A952 LD A,$10        ;
 $A954 RST $10         ;
 $A955 LD A,($5BD2)    ;
 $A958 RST $10         ;
 $A959 LD HL,($5BD8)   ;
*$A95C LD A,(HL)       ;
 $A95D CP $FF          ;
 $A95F JR Z,$A973      ;
 $A961 LD C,A          ;
 $A962 INC HL          ;
 $A963 LD B,(HL)       ;
 $A964 INC HL          ;
 $A965 LD A,$2F        ;
 $A967 LD E,$02        ;
 $A969 LD D,$05        ;
 $A96B CALL $A83F      ;
 $A96E CALL $A8AF      ;
 $A971 JR $A95C        ;
*$A973 LD HL,($5BD6)   ;
*$A976 LD C,(HL)       ;
 $A977 INC HL          ;
 $A978 LD B,(HL)       ;
 $A979 INC HL          ;
 $A97A LD A,(HL)       ;
 $A97B INC HL          ;
 $A97C INC HL          ;
 $A97D PUSH AF         ;
 $A97E LD A,$FF        ;
 $A980 CP C            ;
 $A981 JR Z,$A996      ;
 $A983 LD A,$10        ;
 $A985 RST $10         ;
 $A986 POP AF          ;
 $A987 RST $10         ;
 $A988 LD A,$23        ;
 $A98A LD E,$03        ;
 $A98C LD D,$04        ;
 $A98E CALL $A83F      ;
 $A991 CALL $A8AF      ;
 $A994 JR $A976        ;
*$A996 POP AF          ;
 $A997 LD A,$10        ;
 $A999 RST $10         ;
 $A99A LD A,($5BCF)    ;
 $A99D RST $10         ;
 $A99E LD IX,($5BDA)   ;
*$A9A2 LD C,(IX+$00)   ;
 $A9A5 LD A,$FF        ;
 $A9A7 CP C            ;
 $A9A8 JR Z,$AA1C      ;
 $A9AA LD A,(IX+$05)   ;
 $A9AD CP $00          ;
 $A9AF JR Z,$AA15      ;
 $A9B1 LD (IX+$05),$03 ;
 $A9B5 LD B,(IX+$01)   ;
 $A9B8 PUSH BC         ;
 $A9B9 CALL $A86E      ;
 $A9BC CALL $0DD9      ;
 $A9BF LD A,$10        ;
 $A9C1 RST $10         ;
 $A9C2 LD A,($5BCF)    ;
 $A9C5 RST $10         ;
 $A9C6 LD A,(IX+$04)   ;
 $A9C9 ADD A,$38       ;
 $A9CB CALL $A893      ;
 $A9CE CALL $A817      ;
 $A9D1 LD A,$10        ;
 $A9D3 RST $10         ;
 $A9D4 LD A,($5BCD)    ;
 $A9D7 RST $10         ;
 $A9D8 POP BC          ;
 $A9D9 DEC B           ;
 $A9DA LD A,$4C        ;
 $A9DC LD E,$01        ;
 $A9DE LD D,$04        ;
 $A9E0 CALL $A83F      ;
 $A9E3 CALL $A8AF      ;
 $A9E6 LD C,(IX+$02)   ;
 $A9E9 LD B,(IX+$03)   ;
 $A9EC PUSH BC         ;
 $A9ED CALL $A86E      ;
 $A9F0 CALL $0DD9      ;
 $A9F3 LD A,$10        ;
 $A9F5 RST $10         ;
 $A9F6 LD A,($5BCC)    ;
 $A9F9 RST $10         ;
 $A9FA LD A,(IX+$04)   ;
 $A9FD ADD A,$41       ;
 $A9FF CALL $A893      ;
 $AA02 CALL $A817      ;
 $AA05 POP BC          ;
 $AA06 DEC B           ;
 $AA07 CALL $A86E      ;
 $AA0A CALL $0DD9      ;
 $AA0D LD A,$4B        ;
 $AA0F CALL $A893      ;
 $AA12 CALL $A817      ;
*$AA15 LD DE,$0006     ;
 $AA18 ADD IX,DE       ;
 $AA1A JR $A9A2        ;
*$AA1C LD IX,($5BE0)   ;
*$AA20 LD A,(IX+$00)   ;
 $AA23 CP $FF          ;
 $AA25 JR Z,$AA4F      ;
 $AA27 LD A,(IX+$05)   ;
 $AA2A CP $00          ;
 $AA2C JR Z,$AA48      ;
 $AA2E LD A,$10        ;
 $AA30 RST $10         ;
 $AA31 LD A,(IX+$04)   ;
 $AA34 RST $10         ;
 $AA35 LD C,(IX+$00)   ;
 $AA38 LD B,(IX+$01)   ;
 $AA3B LD D,$02        ;
 $AA3D LD E,$02        ;
 $AA3F LD A,(IX+$06)   ;
 $AA42 CALL $A83F      ;
 $AA45 CALL $A8AF      ;
*$AA48 LD DE,$0007     ;
 $AA4B ADD IX,DE       ;
 $AA4D JR $AA20        ;
*$AA4F LD HL,$8678     ;
 $AA52 LD ($5C36),HL   ;
 $AA55 LD IX,($5BE2)   ;
*$AA59 LD A,(IX+$00)   ;
 $AA5C CP $FF          ;
 $AA5E JR Z,$AA85      ;
 $AA60 LD A,$10        ;
 $AA62 RST $10         ;
 $AA63 LD A,(IX+$03)   ;
 $AA66 RST $10         ;
 $AA67 LD C,(IX+$00)   ;
 $AA6A LD B,(IX+$01)   ;
 $AA6D LD D,$04        ;
 $AA6F LD E,$06        ;
 $AA71 LD A,(IX+$02)   ;
 $AA74 OR $80          ;
 $AA76 CALL $A83F      ;
 $AA79 AND $7F         ;
 $AA7B CALL $A8AF      ;
 $AA7E LD DE,$0004     ;
 $AA81 ADD IX,DE       ;
 $AA83 JR $AA59        ;
*$AA85 LD DE,$5800     ;
 $AA88 LD HL,$A4E4     ;
 $AA8B LD BC,$0300     ;
 $AA8E LDIR            ;
 $AA90 LD A,($5BD0)    ;
 $AA93 CALL $229B      ;
 $AA96 RET             ;
*$AA97 LD HL,$BAAB     ;
 $AA9A LD ($BAA5),HL   ;
 $AA9D LD DE,$BCCB     ;
 $AAA0 LD HL,$ABD6     ;
*$AAA3 PUSH HL         ;
 $AAA4 LD HL,($BAA5)   ;
 $AAA7 LD (HL),E       ;
 $AAA8 INC HL          ;
 $AAA9 LD (HL),D       ;
 $AAAA INC HL          ;
 $AAAB LD ($BAA5),HL   ;
 $AAAE POP HL          ;
 $AAAF LD A,(HL)       ;
 $AAB0 CP $FF          ;
 $AAB2 JP Z,$AAEE      ;
 $AAB5 LD B,$01        ;
 $AAB7 CALL $ABC2      ;
 $AABA LD B,$03        ;
 $AABC CALL $ABC2      ;
 $AABF LD B,$04        ;
 $AAC1 CALL $ABC2      ;
 $AAC4 LD B,$02        ;
 $AAC6 CALL $ABC2      ;
 $AAC9 LD B,$06        ;
 $AACB CALL $ABC2      ;
 $AACE LD B,$03        ;
 $AAD0 CALL $ABC2      ;
 $AAD3 LD B,$10        ;
 $AAD5 CALL $ABC2      ;
 $AAD8 LD B,$07        ;
 $AADA CALL $ABC2      ;
 $AADD LD B,$04        ;
 $AADF CALL $ABC2      ;
 $AAE2 LD B,$10        ;
 $AAE4 CALL $ABC2      ;
 $AAE7 LD B,$06        ;
 $AAE9 CALL $ABC2      ;
 $AAEC JR $AAA3        ;
*$AAEE LD A,$01        ;
 $AAF0 LD ($5BD3),A    ;
 $AAF3 RET             ;
*$AAF4 LD A,($5BD4)    ;
 $AAF7 LD E,A          ;
 $AAF8 LD A,$16        ;
 $AAFA SUB E           ;
 $AAFB LD E,A          ;
 $AAFC SLA E           ;
 $AAFE LD D,$00        ;
 $AB00 LD HL,$BAA9     ;
 $AB03 ADD HL,DE       ;
 $AB04 LD E,(HL)       ;
 $AB05 INC HL          ;
 $AB06 LD D,(HL)       ;
 $AB07 INC HL          ;
 $AB08 LD HL,$0008     ;
 $AB0B ADD HL,DE       ;
 $AB0C PUSH HL         ;
 $AB0D POP DE          ;
 $AB0E LD HL,$BAD7     ;
 $AB11 LD B,$03        ;
 $AB13 CALL $ABC2      ;
 $AB16 LD B,$04        ;
 $AB18 CALL $ABC2      ;
 $AB1B LD B,$02        ;
 $AB1D CALL $ABC2      ;
 $AB20 LD B,$06        ;
 $AB22 CALL $ABC2      ;
 $AB25 LD B,$03        ;
 $AB27 CALL $ABC2      ;
 $AB2A LD B,$10        ;
 $AB2C CALL $ABC2      ;
 $AB2F LD B,$07        ;
 $AB31 CALL $ABC2      ;
 $AB34 LD B,$04        ;
 $AB36 CALL $ABC2      ;
 $AB39 LD B,$10        ;
 $AB3B CALL $ABC2      ;
 $AB3E LD B,$06        ;
 $AB40 CALL $ABC2      ;
 $AB43 RET             ;
*$AB44 LD A,($5BD3)    ;
 $AB47 LD ($5BD4),A    ;
 $AB4A LD E,A          ;
 $AB4B LD A,$16        ;
 $AB4D SUB E           ;
 $AB4E LD E,A          ;
 $AB4F SLA E           ;
 $AB51 LD D,$00        ;
 $AB53 LD HL,$BAA9     ;
 $AB56 ADD HL,DE       ;
 $AB57 LD E,(HL)       ;
 $AB58 INC HL          ;
 $AB59 LD D,(HL)       ;
 $AB5A EX DE,HL        ;
 $AB5B LD DE,$5BCC     ;
 $AB5E LD BC,$0007     ;
 $AB61 LDIR            ;
 $AB63 INC HL          ;
 $AB64 LD DE,$BAD7     ;
 $AB67 LD ($5BE8),DE   ;
 $AB6B LD B,$03        ;
 $AB6D CALL $ABC2      ;
 $AB70 LD B,$04        ;
 $AB72 LD ($5BD6),DE   ;
 $AB76 CALL $ABC2      ;
 $AB79 LD B,$02        ;
 $AB7B LD ($5BD8),DE   ;
 $AB7F CALL $ABC2      ;
 $AB82 LD B,$06        ;
 $AB84 LD ($5BDA),DE   ;
 $AB88 CALL $ABC2      ;
 $AB8B LD B,$03        ;
 $AB8D LD ($5BDC),DE   ;
 $AB91 CALL $ABC2      ;
 $AB94 LD B,$10        ;
 $AB96 LD ($5BDE),DE   ;
 $AB9A CALL $ABC2      ;
 $AB9D LD B,$07        ;
 $AB9F LD ($5BE0),DE   ;
 $ABA3 CALL $ABC2      ;
 $ABA6 LD B,$04        ;
 $ABA8 LD ($5BE2),DE   ;
 $ABAC CALL $ABC2      ;
 $ABAF LD B,$10        ;
 $ABB1 LD ($5BE4),DE   ;
 $ABB5 CALL $ABC2      ;
 $ABB8 LD B,$06        ;
 $ABBA LD ($5BE6),DE   ;
 $ABBE CALL $ABC2      ;
 $ABC1 RET             ;
*$ABC2 PUSH BC         ;
 $ABC3 LD A,(HL)       ;
 $ABC4 CP $FF          ;
 $ABC6 JR Z,$ABD1      ;
*$ABC8 LD (DE),A       ;
 $ABC9 INC HL          ;
 $ABCA INC DE          ;
 $ABCB LD A,(HL)       ;
 $ABCC DJNZ $ABC8      ;
 $ABCE POP BC          ;
 $ABCF JR $ABC2        ;
*$ABD1 LD (DE),A       ;
 $ABD2 INC DE          ;
 $ABD3 INC HL          ;
 $ABD4 POP BC          ;
 $ABD5 RET             ;
 $ABD6 RLCA            ;
 $ABD7 RLCA            ;
 $ABD8 NOP             ;
 $ABD9 NOP             ;
 $ABDA LD BC,$0201     ;
 $ABDD RST $38         ;
 $ABDE ADD HL,DE       ;
 $ABDF LD (DE),A       ;
 $ABE0 EX AF,AF'       ;
 $ABE1 ADD HL,DE       ;
 $ABE2 DEC C           ;
 $ABE3 INC B           ;
 $ABE4 LD HL,$0312     ;
 $ABE7 RST $38         ;
 $ABE8 INC DE          ;
 $ABE9 LD D,$04        ;
 $ABEB LD BC,$17FF     ;
 $ABEE LD (DE),A       ;
 $ABEF INC D           ;
 $ABF0 DEC C           ;
 $ABF1 RST $38         ;
 $ABF2 RST $38         ;
 $ABF3 RST $38         ;
 $ABF4 LD HL,$0315     ;
 $ABF7 INC BC          ;
 $ABF8 RST $38         ;
 $ABF9 NOP             ;
 $ABFA JR NZ,$ABFE     ;
 $ABFC LD (BC),A       ;
 $ABFD DEC B           ;
*$ABFE LD BC,$0003     ;
 $AC01 LD HL,$0315     ;
 $AC04 RST $38         ;
 $AC05 RST $38         ;
 $AC06 RST $38         ;
 $AC07 RST $38         ;
 $AC08 RST $38         ;
 $AC09 LD B,$06        ;
 $AC0B NOP             ;
 $AC0C LD B,$00        ;
 $AC0E NOP             ;
 $AC0F INC B           ;
 $AC10 RST $38         ;
 $AC11 LD HL,$1017     ;
 $AC14 LD HL,$0212     ;
 $AC17 LD HL,$0208     ;
 $AC1A ADD HL,DE       ;
 $AC1B DEC C           ;
 $AC1C LD (BC),A       ;
 $AC1D LD DE,$0312     ;
 $AC20 LD DE,$0308     ;
 $AC23 RLCA            ;
 $AC24 LD (DE),A       ;
 $AC25 INC BC          ;
 $AC26 RLCA            ;
 $AC27 EX AF,AF'       ;
 $AC28 INC BC          ;
 $AC29 LD HL,$0203     ;
 $AC2C ADD HL,DE       ;
 $AC2D INC BC          ;
 $AC2E LD (BC),A       ;
 $AC2F LD DE,$0303     ;
 $AC32 RLCA            ;
 $AC33 INC BC          ;
 $AC34 INC BC          ;
 $AC35 RST $38         ;
 $AC36 JR NZ,$AC4E     ;
 $AC38 INC B           ;
 $AC39 INC DE          ;
 $AC3A JR $AC4D        ;
 $AC3C INC B           ;
 $AC3D RLCA            ;
 $AC3E DEC B           ;
 $AC3F RLCA            ;
 $AC40 INC B           ;
 $AC41 EX AF,AF'       ;
 $AC42 RST $38         ;
 $AC43 RST $38         ;
 $AC44 DJNZ $AC5D      ;
 $AC46 LD B,$06        ;
 $AC48 LD BC,$0C03     ;
 $AC4B RLA             ;
 $AC4C LD B,$0B        ;
*$AC4E LD (BC),A       ;
 $AC4F INC BC          ;
 $AC50 LD B,$17        ;
 $AC52 JR NZ,$AC5F     ;
 $AC54 INC BC          ;
 $AC55 INC BC          ;
 $AC56 DJNZ $AC60      ;
 $AC58 LD (BC),A       ;
 $AC59 DEC D           ;
 $AC5A INC B           ;
 $AC5B INC BC          ;
 $AC5C INC C           ;
*$AC5D EX AF,AF'       ;
 $AC5E LD HL,$0515     ;
 $AC61 INC BC          ;
 $AC62 RST $38         ;
 $AC63 RST $38         ;
 $AC64 RRCA            ;
 $AC65 LD B,$03        ;
 $AC67 INC BC          ;
 $AC68 RST $38         ;
 $AC69 NOP             ;
 $AC6A JR NZ,$AC6E     ;
 $AC6C INC BC          ;
 $AC6D RLCA            ;
*$AC6E LD BC,$0003     ;
 $AC71 RRCA            ;
 $AC72 LD B,$03        ;
 $AC74 RST $38         ;
 $AC75 RRCA            ;
 $AC76 INC D           ;
 $AC77 LD (BC),A       ;
 $AC78 LD (BC),A       ;
 $AC79 LD B,$01        ;
 $AC7B LD D,B          ;
 $AC7C INC B           ;
 $AC7D INC D           ;
 $AC7E LD (BC),A       ;
 $AC7F LD (BC),A       ;
 $AC80 DEC B           ;
 $AC81 LD BC,$2054     ;
 $AC84 DEC B           ;
 $AC85 LD (BC),A       ;
 $AC86 LD (BC),A       ;
 $AC87 DEC B           ;
 $AC88 LD BC,$0458     ;
 $AC8B LD A,(BC)       ;
 $AC8C LD (BC),A       ;
 $AC8D LD (BC),A       ;
 $AC8E LD B,$01        ;
 $AC90 LD E,H          ;
 $AC91 RST $38         ;
 $AC92 LD DE,$380C     ;
 $AC95 INC B           ;
 $AC96 RST $38         ;
 $AC97 DEC E           ;
 $AC98 LD (DE),A       ;
 $AC99 INC BC          ;
 $AC9A INC BC          ;
 $AC9B NOP             ;
 $AC9C RST $38         ;
 $AC9D INC H           ;
 $AC9E INC B           ;
 $AC9F LD BC,$1305     ;
 $ACA2 INC BC          ;
 $ACA3 INC BC          ;
 $ACA4 INC BC          ;
 $ACA5 NOP             ;
 $ACA6 NOP             ;
 $ACA7 DEC D           ;
 $ACA8 LD (DE),A       ;
 $ACA9 INC BC          ;
 $ACAA INC BC          ;
 $ACAB NOP             ;
 $ACAC RST $38         ;
 $ACAD INC H           ;
 $ACAE INC B           ;
 $ACAF LD BC,$1305     ;
 $ACB2 INC BC          ;
 $ACB3 INC BC          ;
 $ACB4 INC BC          ;
 $ACB5 NOP             ;
 $ACB6 NOP             ;
 $ACB7 DEC BC          ;
 $ACB8 LD (DE),A       ;
 $ACB9 INC BC          ;
 $ACBA INC BC          ;
 $ACBB NOP             ;
 $ACBC RST $38         ;
 $ACBD INC H           ;
 $ACBE INC B           ;
 $ACBF LD BC,$1305     ;
 $ACC2 INC BC          ;
 $ACC3 INC BC          ;
 $ACC4 INC BC          ;
 $ACC5 NOP             ;
 $ACC6 NOP             ;
 $ACC7 RST $38         ;
 $ACC8 RST $38         ;
 $ACC9 DEC B           ;
 $ACCA RLCA            ;
 $ACCB NOP             ;
 $ACCC RLCA            ;
 $ACCD LD B,$00        ;
 $ACCF INC B           ;
 $ACD0 RST $38         ;
 $ACD1 LD HL,$1017     ;
 $ACD4 LD HL,$0812     ;
 $ACD7 LD HL,$080D     ;
 $ACDA LD HL,$0808     ;
 $ACDD DEC B           ;
 $ACDE LD (DE),A       ;
 $ACDF LD (BC),A       ;
 $ACE0 DEC B           ;
 $ACE1 DEC C           ;
 $ACE2 LD (BC),A       ;
 $ACE3 DEC B           ;
 $ACE4 EX AF,AF'       ;
 $ACE5 LD (BC),A       ;
 $ACE6 LD HL,$0803     ;
 $ACE9 DEC B           ;
 $ACEA INC BC          ;
 $ACEB LD (BC),A       ;
 $ACEC RST $38         ;
 $ACED JR NZ,$AD05     ;
 $ACEF RLCA            ;
 $ACF0 INC D           ;
 $ACF1 INC D           ;
 $ACF2 RLCA            ;
 $ACF3 INC B           ;
 $ACF4 INC BC          ;
 $ACF5 INC B           ;
 $ACF6 RLCA            ;
 $ACF7 INC B           ;
 $ACF8 LD A,(BC)       ;
 $ACF9 RST $38         ;
 $ACFA RST $38         ;
 $ACFB INC B           ;
 $ACFC RLA             ;
 $ACFD LD D,$0B        ;
 $ACFF LD BC,$1A03     ;
 $AD02 LD (DE),A       ;
 $AD03 JR NZ,$AD0B     ;
*$AD05 LD (BC),A       ;
 $AD06 INC BC          ;
 $AD07 LD D,$12        ;
 $AD09 LD A,(DE)       ;
 $AD0A LD B,$03        ;
 $AD0C INC BC          ;
 $AD0D INC B           ;
 $AD0E LD (DE),A       ;
 $AD0F DEC DE          ;
 $AD10 DEC BC          ;
 $AD11 INC B           ;
 $AD12 INC BC          ;
 $AD13 JR $AD22        ;
 $AD15 JR $AD27        ;
 $AD17 DEC B           ;
 $AD18 INC BC          ;
 $AD19 INC D           ;
 $AD1A DEC C           ;
 $AD1B LD (BC),A       ;
 $AD1C DEC BC          ;
 $AD1D LD B,$03        ;
 $AD1F INC B           ;
 $AD20 DEC C           ;
 $AD21 INC E           ;
*$AD22 DEC D           ;
 $AD23 RLCA            ;
 $AD24 INC BC          ;
 $AD25 INC E           ;
 $AD26 EX AF,AF'       ;
*$AD27 LD (BC),A       ;
 $AD28 DJNZ $AD32      ;
 $AD2A INC BC          ;
 $AD2B LD D,$08        ;
 $AD2D LD (BC),A       ;
 $AD2E DEC D           ;
 $AD2F ADD HL,BC       ;
 $AD30 INC BC          ;
 $AD31 RST $38         ;
*$AD32 RST $38         ;
 $AD33 JR NZ,$AD40     ;
 $AD35 INC BC          ;
 $AD36 INC BC          ;
 $AD37 RST $38         ;
 $AD38 NOP             ;
 $AD39 JR NZ,$AD3D     ;
 $AD3B INC BC          ;
 $AD3C INC B           ;
*$AD3D LD BC,$0003     ;
*$AD40 JR NZ,$AD4D     ;
 $AD42 INC BC          ;
 $AD43 RST $38         ;
 $AD44 LD E,$0F        ;
 $AD46 LD (BC),A       ;
 $AD47 LD (BC),A       ;
 $AD48 DEC B           ;
 $AD49 LD BC,$1A60     ;
 $AD4C LD A,(BC)       ;
*$AD4D LD (BC),A       ;
 $AD4E LD (BC),A       ;
 $AD4F RLCA            ;
 $AD50 LD BC,$1E54     ;
 $AD53 DEC B           ;
 $AD54 LD (BC),A       ;
 $AD55 LD (BC),A       ;
 $AD56 RLCA            ;
 $AD57 LD BC,$FF68     ;
 $AD5A RST $38         ;
 $AD5B LD DE,$0312     ;
 $AD5E INC BC          ;
 $AD5F NOP             ;
 $AD60 RST $38         ;
 $AD61 INC H           ;
 $AD62 INC BC          ;
 $AD63 LD BC,$1305     ;
 $AD66 INC BC          ;
 $AD67 INC BC          ;
 $AD68 INC BC          ;
 $AD69 NOP             ;
 $AD6A NOP             ;
 $AD6B DEC BC          ;
 $AD6C EX AF,AF'       ;
 $AD6D INC BC          ;
 $AD6E INC BC          ;
 $AD6F NOP             ;
 $AD70 RST $38         ;
 $AD71 INC H           ;
 $AD72 INC BC          ;
 $AD73 LD BC,$1305     ;
 $AD76 INC BC          ;
 $AD77 INC BC          ;
 $AD78 INC BC          ;
 $AD79 NOP             ;
 $AD7A NOP             ;
 $AD7B LD C,$0D        ;
 $AD7D INC BC          ;
 $AD7E INC BC          ;
 $AD7F NOP             ;
 $AD80 RST $38         ;
 $AD81 INC H           ;
 $AD82 INC BC          ;
 $AD83 LD BC,$1305     ;
 $AD86 INC BC          ;
 $AD87 INC BC          ;
 $AD88 INC BC          ;
 $AD89 NOP             ;
 $AD8A NOP             ;
 $AD8B EX AF,AF'       ;
 $AD8C INC BC          ;
 $AD8D INC BC          ;
 $AD8E INC BC          ;
 $AD8F NOP             ;
 $AD90 LD BC,$0324     ;
 $AD93 LD BC,$1305     ;
 $AD96 INC BC          ;
 $AD97 INC BC          ;
 $AD98 INC BC          ;
 $AD99 NOP             ;
 $AD9A NOP             ;
 $AD9B RST $38         ;
 $AD9C RST $38         ;
 $AD9D RLCA            ;
 $AD9E DEC B           ;
 $AD9F NOP             ;
 $ADA0 DEC B           ;
 $ADA1 LD BC,$0300     ;
 $ADA4 RST $38         ;
 $ADA5 LD HL,$1017     ;
 $ADA8 LD HL,$0312     ;
 $ADAB LD HL,$030D     ;
 $ADAE LD HL,$0308     ;
 $ADB1 RRCA            ;
 $ADB2 LD (DE),A       ;
 $ADB3 RLCA            ;
 $ADB4 RRCA            ;
 $ADB5 DEC C           ;
 $ADB6 RLCA            ;
 $ADB7 RRCA            ;
 $ADB8 EX AF,AF'       ;
 $ADB9 RLCA            ;
 $ADBA LD HL,$0303     ;
 $ADBD RRCA            ;
 $ADBE INC BC          ;
 $ADBF RLCA            ;
 $ADC0 RST $38         ;
 $ADC1 DEC B           ;
 $ADC2 LD DE,$0505     ;
 $ADC5 LD C,$07        ;
 $ADC7 RLCA            ;
 $ADC8 LD (BC),A       ;
 $ADC9 RST $38         ;
 $ADCA RST $38         ;
 $ADCB LD C,$17        ;
 $ADCD RRA             ;
 $ADCE LD B,$01        ;
 $ADD0 INC BC          ;
 $ADD1 LD A,(BC)       ;
 $ADD2 RLA             ;
 $ADD3 ADD HL,BC       ;
 $ADD4 LD B,$02        ;
 $ADD6 INC BC          ;
 $ADD7 LD B,$17        ;
 $ADD9 DEC E           ;
 $ADDA DEC D           ;
 $ADDB INC BC          ;
 $ADDC INC BC          ;
 $ADDD INC C           ;
 $ADDE DEC C           ;
 $ADDF LD (BC),A       ;
 $ADE0 DEC D           ;
 $ADE1 INC B           ;
 $ADE2 INC BC          ;
 $ADE3 EX AF,AF'       ;
 $ADE4 DEC C           ;
 $ADE5 INC E           ;
 $ADE6 DEC D           ;
 $ADE7 DEC B           ;
 $ADE8 INC BC          ;
 $ADE9 LD A,(BC)       ;
 $ADEA EX AF,AF'       ;
 $ADEB DEC C           ;
 $ADEC DEC D           ;
 $ADED LD B,$03        ;
 $ADEF LD B,$08        ;
 $ADF1 LD A,(BC)       ;
 $ADF2 DEC BC          ;
 $ADF3 RLCA            ;
 $ADF4 INC BC          ;
 $ADF5 RST $38         ;
 $ADF6 RST $38         ;
 $ADF7 RST $38         ;
 $ADF8 INC C           ;
 $ADF9 INC D           ;
 $ADFA LD (BC),A       ;
 $ADFB LD (BC),A       ;
 $ADFC LD (BC),A       ;
 $ADFD LD BC,$0864     ;
 $AE00 INC D           ;
 $AE01 LD (BC),A       ;
 $AE02 LD (BC),A       ;
 $AE03 LD (BC),A       ;
 $AE04 LD BC,$0564     ;
 $AE07 INC D           ;
 $AE08 LD (BC),A       ;
 $AE09 LD (BC),A       ;
 $AE0A LD (BC),A       ;
 $AE0B LD BC,$0964     ;
 $AE0E RRCA            ;
 $AE0F LD (BC),A       ;
 $AE10 LD (BC),A       ;
 $AE11 LD (BC),A       ;
 $AE12 LD BC,$0564     ;
 $AE15 LD A,(BC)       ;
 $AE16 LD (BC),A       ;
 $AE17 LD (BC),A       ;
 $AE18 LD (BC),A       ;
 $AE19 LD BC,$0864     ;
 $AE1C DEC B           ;
 $AE1D LD (BC),A       ;
 $AE1E LD (BC),A       ;
 $AE1F LD (BC),A       ;
 $AE20 LD BC,$0564     ;
 $AE23 DEC B           ;
 $AE24 LD (BC),A       ;
 $AE25 LD (BC),A       ;
 $AE26 LD (BC),A       ;
 $AE27 LD BC,$FF64     ;
 $AE2A RRCA            ;
 $AE2B LD DE,$0438     ;
 $AE2E RST $38         ;
 $AE2F DEC DE          ;
 $AE30 LD (DE),A       ;
 $AE31 INC BC          ;
 $AE32 INC BC          ;
 $AE33 NOP             ;
 $AE34 RST $38         ;
 $AE35 INC H           ;
 $AE36 INC BC          ;
 $AE37 LD BC,$1305     ;
 $AE3A INC BC          ;
 $AE3B INC BC          ;
 $AE3C INC BC          ;
 $AE3D NOP             ;
 $AE3E NOP             ;
 $AE3F JR $AE4E        ;
 $AE41 INC BC          ;
 $AE42 INC BC          ;
 $AE43 NOP             ;
 $AE44 RST $38         ;
 $AE45 INC H           ;
 $AE46 INC BC          ;
 $AE47 LD BC,$1305     ;
 $AE4A INC BC          ;
 $AE4B INC BC          ;
 $AE4C INC BC          ;
 $AE4D NOP             ;
*$AE4E NOP             ;
 $AE4F DEC D           ;
 $AE50 EX AF,AF'       ;
 $AE51 INC BC          ;
 $AE52 INC BC          ;
 $AE53 NOP             ;
 $AE54 RST $38         ;
 $AE55 INC H           ;
 $AE56 INC BC          ;
 $AE57 LD BC,$1305     ;
 $AE5A INC BC          ;
 $AE5B INC BC          ;
 $AE5C INC BC          ;
 $AE5D NOP             ;
 $AE5E NOP             ;
 $AE5F LD (DE),A       ;
 $AE60 INC BC          ;
 $AE61 INC BC          ;
 $AE62 INC BC          ;
 $AE63 NOP             ;
 $AE64 LD BC,$0324     ;
 $AE67 LD BC,$1305     ;
 $AE6A INC BC          ;
 $AE6B INC BC          ;
 $AE6C INC BC          ;
 $AE6D NOP             ;
 $AE6E NOP             ;
 $AE6F RST $38         ;
 $AE70 RST $38         ;
 $AE71 LD B,$06        ;
 $AE73 NOP             ;
 $AE74 LD (BC),A       ;
 $AE75 NOP             ;
 $AE76 NOP             ;
 $AE77 INC B           ;
 $AE78 RST $38         ;
 $AE79 LD HL,$1017     ;
 $AE7C LD HL,$0212     ;
 $AE7F LD HL,$020D     ;
 $AE82 LD HL,$0208     ;
 $AE85 LD HL,$0203     ;
 $AE88 LD A,(DE)       ;
 $AE89 LD (DE),A       ;
 $AE8A LD BC,$0D1A     ;
 $AE8D LD BC,$081A     ;
 $AE90 LD BC,$031A     ;
 $AE93 INC C           ;
 $AE94 RRCA            ;
 $AE95 LD (DE),A       ;
 $AE96 RLCA            ;
 $AE97 RRCA            ;
 $AE98 DEC C           ;
 $AE99 RLCA            ;
 $AE9A RRCA            ;
 $AE9B EX AF,AF'       ;
 $AE9C RLCA            ;
 $AE9D INC BC          ;
 $AE9E INC BC          ;
 $AE9F LD BC,$04FF     ;
 $AEA2 LD D,$04        ;
 $AEA4 RLCA            ;
 $AEA5 LD A,(BC)       ;
 $AEA6 RLCA            ;
 $AEA7 INC B           ;
 $AEA8 INC C           ;
 $AEA9 RST $38         ;
 $AEAA RST $38         ;
 $AEAB LD C,$12        ;
 $AEAD DEC C           ;
 $AEAE DEC BC          ;
 $AEAF LD BC,$0A03     ;
 $AEB2 LD (DE),A       ;
 $AEB3 LD B,$15        ;
 $AEB5 LD (BC),A       ;
 $AEB6 INC BC          ;
 $AEB7 LD B,$12        ;
 $AEB9 INC BC          ;
 $AEBA DEC BC          ;
 $AEBB INC BC          ;
 $AEBC INC BC          ;
 $AEBD LD C,$0D        ;
 $AEBF JR NZ,$AECC     ;
 $AEC1 INC B           ;
 $AEC2 INC BC          ;
 $AEC3 LD A,(BC)       ;
 $AEC4 DEC C           ;
 $AEC5 DJNZ $AECD      ;
 $AEC7 DEC B           ;
 $AEC8 INC BC          ;
 $AEC9 RST $38         ;
 $AECA RST $38         ;
 $AECB JR $AED3        ;
*$AECD INC BC          ;
 $AECE INC BC          ;
 $AECF RST $38         ;
 $AED0 NOP             ;
 $AED1 JR NZ,$AED5     ;
*$AED3 INC BC          ;
 $AED4 DEC B           ;
*$AED5 LD BC,$0003     ;
 $AED8 JR $AEE0        ;
 $AEDA INC BC          ;
 $AEDB RST $38         ;
 $AEDC ADD HL,BC       ;
 $AEDD INC D           ;
 $AEDE LD (BC),A       ;
 $AEDF LD (BC),A       ;
*$AEE0 LD (BC),A       ;
 $AEE1 LD BC,$0C70     ;
 $AEE4 RRCA            ;
 $AEE5 LD (BC),A       ;
 $AEE6 LD (BC),A       ;
 $AEE7 RLCA            ;
 $AEE8 LD BC,$0468     ;
 $AEEB RRCA            ;
 $AEEC LD (BC),A       ;
 $AEED LD (BC),A       ;
 $AEEE LD B,$01        ;
 $AEF0 LD (HL),H       ;
 $AEF1 INC C           ;
 $AEF2 LD A,(BC)       ;
 $AEF3 LD (BC),A       ;
 $AEF4 LD (BC),A       ;
 $AEF5 INC B           ;
 $AEF6 LD BC,$2064     ;
 $AEF9 DEC B           ;
 $AEFA LD (BC),A       ;
 $AEFB LD (BC),A       ;
 $AEFC INC B           ;
 $AEFD LD BC,$0E64     ;
 $AF00 DEC B           ;
 $AF01 LD (BC),A       ;
 $AF02 LD (BC),A       ;
 $AF03 LD (BC),A       ;
 $AF04 LD BC,$FF64     ;
 $AF07 JR $AF10        ;
 $AF09 JR NZ,$AF0D     ;
 $AF0B RRCA            ;
 $AF0C LD D,$20        ;
 $AF0E LD (BC),A       ;
 $AF0F ADD HL,BC       ;
*$AF10 INC C           ;
 $AF11 JR NZ,$AF15     ;
 $AF13 RST $38         ;
 $AF14 DEC E           ;
*$AF15 LD (DE),A       ;
 $AF16 INC BC          ;
 $AF17 INC BC          ;
 $AF18 NOP             ;
 $AF19 RST $38         ;
 $AF1A INC H           ;
 $AF1B INC BC          ;
 $AF1C LD BC,$1305     ;
 $AF1F INC BC          ;
 $AF20 INC BC          ;
 $AF21 LD BC,$0000     ;
 $AF24 JR $AF38        ;
 $AF26 INC BC          ;
 $AF27 INC BC          ;
 $AF28 RST $38         ;
 $AF29 NOP             ;
 $AF2A LD HL,$0103     ;
 $AF2D LD B,$18        ;
 $AF2F INC BC          ;
 $AF30 LD (DE),A       ;
 $AF31 INC BC          ;
 $AF32 NOP             ;
 $AF33 NOP             ;
 $AF34 LD (DE),A       ;
 $AF35 EX AF,AF'       ;
 $AF36 INC BC          ;
 $AF37 INC BC          ;
*$AF38 LD BC,$2100     ;
 $AF3B INC BC          ;
 $AF3C LD BC,$1807     ;
 $AF3F INC BC          ;
 $AF40 LD (DE),A       ;
 $AF41 INC BC          ;
 $AF42 NOP             ;
 $AF43 NOP             ;
 $AF44 LD D,$0D        ;
 $AF46 INC BC          ;
 $AF47 INC BC          ;
 $AF48 LD BC,$2100     ;
 $AF4B INC BC          ;
 $AF4C LD BC,$1804     ;
 $AF4F INC BC          ;
 $AF50 LD (DE),A       ;
 $AF51 INC BC          ;
 $AF52 NOP             ;
 $AF53 NOP             ;
 $AF54 RST $38         ;
 $AF55 LD A,(DE)       ;
 $AF56 LD (DE),A       ;
 $AF57 ADD A,D         ;
 $AF58 ADC A,H         ;
 $AF59 LD B,(HL)       ;
 $AF5A NOP             ;
 $AF5B LD A,(DE)       ;
 $AF5C DEC C           ;
 $AF5D LD (BC),A       ;
 $AF5E ADC A,H         ;
 $AF5F LD B,(HL)       ;
 $AF60 LD B,(HL)       ;
 $AF61 LD A,(DE)       ;
 $AF62 EX AF,AF'       ;
 $AF63 LD (BC),A       ;
 $AF64 ADC A,H         ;
 $AF65 LD B,(HL)       ;
 $AF66 NOP             ;
 $AF67 RST $38         ;
 $AF68 RLCA            ;
 $AF69 LD B,$00        ;
 $AF6B LD B,$00        ;
 $AF6D NOP             ;
 $AF6E LD (BC),A       ;
 $AF6F RST $38         ;
 $AF70 LD HL,$1017     ;
 $AF73 LD HL,$0B12     ;
 $AF76 LD HL,$0B0D     ;
 $AF79 LD HL,$0B08     ;
 $AF7C DEC B           ;
 $AF7D DEC C           ;
 $AF7E LD (BC),A       ;
 $AF7F LD HL,$0B03     ;
 $AF82 DEC B           ;
 $AF83 INC BC          ;
 $AF84 LD (BC),A       ;
 $AF85 RST $38         ;
 $AF86 DEC E           ;
 $AF87 LD DE,$0B05     ;
 $AF8A INC B           ;
 $AF8B LD DE,$0404     ;
 $AF8E RRCA            ;
 $AF8F RLCA            ;
 $AF90 INC B           ;
 $AF91 LD B,$FF        ;
 $AF93 RST $38         ;
 $AF94 LD A,(DE)       ;
 $AF95 RLA             ;
 $AF96 RLA             ;
 $AF97 DEC BC          ;
 $AF98 LD BC,$1203     ;
 $AF9B RLA             ;
 $AF9C DEC B           ;
 $AF9D DJNZ $AFA1      ;
 $AF9F INC BC          ;
 $AFA0 INC E           ;
*$AFA1 DEC C           ;
 $AFA2 JR NZ,$AFAA     ;
 $AFA4 INC BC          ;
 $AFA5 INC BC          ;
 $AFA6 INC D           ;
 $AFA7 DEC C           ;
 $AFA8 JR $AFB0        ;
*$AFAA INC B           ;
 $AFAB INC BC          ;
 $AFAC LD A,(DE)       ;
 $AFAD EX AF,AF'       ;
 $AFAE JR NZ,$AFC5     ;
*$AFB0 DEC B           ;
 $AFB1 INC BC          ;
 $AFB2 LD (DE),A       ;
 $AFB3 EX AF,AF'       ;
 $AFB4 DEC D           ;
 $AFB5 DEC D           ;
 $AFB6 LD B,$03        ;
 $AFB8 RST $38         ;
 $AFB9 RST $38         ;
 $AFBA LD HL,$0310     ;
 $AFBD INC BC          ;
 $AFBE RST $38         ;
 $AFBF NOP             ;
 $AFC0 JR NZ,$AFC4     ;
 $AFC2 INC BC          ;
 $AFC3 DEC B           ;
*$AFC4 LD BC,$0003     ;
 $AFC7 LD HL,$0310     ;
 $AFCA RLCA            ;
 $AFCB LD B,$03        ;
 $AFCD INC BC          ;
 $AFCE RST $38         ;
 $AFCF NOP             ;
 $AFD0 JR NZ,$AFD4     ;
 $AFD2 INC BC          ;
 $AFD3 DEC B           ;
*$AFD4 LD BC,$0003     ;
 $AFD7 RLCA            ;
 $AFD8 LD B,$03        ;
 $AFDA RST $38         ;
 $AFDB LD E,$14        ;
 $AFDD LD (BC),A       ;
 $AFDE LD (BC),A       ;
 $AFDF INC B           ;
 $AFE0 LD BC,$1864     ;
 $AFE3 INC D           ;
 $AFE4 LD (BC),A       ;
 $AFE5 LD (BC),A       ;
 $AFE6 RLCA            ;
 $AFE7 LD BC,$1268     ;
 $AFEA RRCA            ;
 $AFEB LD (BC),A       ;
 $AFEC LD (BC),A       ;
 $AFED DEC B           ;
 $AFEE LD BC,$1A64     ;
 $AFF1 LD A,(BC)       ;
 $AFF2 LD (BC),A       ;
 $AFF3 LD (BC),A       ;
 $AFF4 INC BC          ;
 $AFF5 LD BC,$1F60     ;
 $AFF8 LD A,(BC)       ;
 $AFF9 LD (BC),A       ;
 $AFFA LD (BC),A       ;
 $AFFB RLCA            ;
 $AFFC LD BC,$1E50     ;
 $AFFF DEC B           ;
 $B000 LD (BC),A       ;
 $B001 LD (BC),A       ;
 $B002 INC B           ;
 $B003 LD BC,$166C     ;
 $B006 DEC B           ;
 $B007 LD (BC),A       ;
 $B008 LD (BC),A       ;
 $B009 DEC B           ;
 $B00A LD BC,$FF58     ;
 $B00D ADD HL,DE       ;
 $B00E LD DE,$0468     ;
 $B011 INC DE          ;
 $B012 INC C           ;
 $B013 JR C,$B018      ;
 $B015 RST $38         ;
 $B016 DEC BC          ;
 $B017 DEC C           ;
*$B018 INC BC          ;
 $B019 INC BC          ;
 $B01A NOP             ;
 $B01B LD BC,$0324     ;
 $B01E LD BC,$1305     ;
 $B021 INC BC          ;
 $B022 INC BC          ;
 $B023 LD BC,$0000     ;
 $B026 EX AF,AF'       ;
 $B027 DEC C           ;
 $B028 INC BC          ;
 $B029 INC BC          ;
 $B02A NOP             ;
 $B02B RST $38         ;
 $B02C INC H           ;
 $B02D INC BC          ;
 $B02E LD BC,$1305     ;
 $B031 INC BC          ;
 $B032 INC BC          ;
 $B033 LD BC,$0000     ;
 $B036 RST $38         ;
 $B037 RST $38         ;
 $B038 RLCA            ;
 $B039 RLCA            ;
 $B03A NOP             ;
 $B03B DEC B           ;
 $B03C INC BC          ;
 $B03D NOP             ;
 $B03E LD B,$FF        ;
 $B040 LD HL,$1017     ;
 $B043 LD HL,$0412     ;
 $B046 LD HL,$040D     ;
 $B049 LD HL,$0408     ;
 $B04C DEC D           ;
 $B04D LD (DE),A       ;
 $B04E INC B           ;
 $B04F DEC D           ;
 $B050 DEC C           ;
 $B051 INC B           ;
 $B052 DEC D           ;
 $B053 EX AF,AF'       ;
 $B054 INC B           ;
 $B055 ADD HL,BC       ;
 $B056 LD (DE),A       ;
 $B057 INC B           ;
 $B058 ADD HL,BC       ;
 $B059 DEC C           ;
 $B05A INC B           ;
 $B05B ADD HL,BC       ;
 $B05C EX AF,AF'       ;
 $B05D INC B           ;
 $B05E LD HL,$0403     ;
 $B061 DEC D           ;
 $B062 INC BC          ;
 $B063 INC B           ;
 $B064 ADD HL,BC       ;
 $B065 INC BC          ;
 $B066 INC B           ;
 $B067 RST $38         ;
 $B068 LD (DE),A       ;
 $B069 LD D,$07        ;
 $B06B EX AF,AF'       ;
 $B06C DEC B           ;
 $B06D INC C           ;
 $B06E LD B,$03        ;
 $B070 DEC E           ;
 $B071 RLCA            ;
 $B072 LD (BC),A       ;
 $B073 LD C,$FF        ;
 $B075 RST $38         ;
 $B076 INC E           ;
 $B077 RLA             ;
 $B078 INC BC          ;
 $B079 DEC D           ;
 $B07A LD BC,$0803     ;
 $B07D RLA             ;
 $B07E LD HL,$020B     ;
 $B081 INC BC          ;
 $B082 INC E           ;
 $B083 LD (DE),A       ;
 $B084 LD (BC),A       ;
 $B085 DJNZ $B08A      ;
 $B087 INC BC          ;
 $B088 LD B,$12        ;
*$B08A LD HL,$0415     ;
 $B08D INC BC          ;
 $B08E INC E           ;
 $B08F DEC C           ;
 $B090 INC BC          ;
 $B091 LD B,$05        ;
 $B093 INC BC          ;
 $B094 EX AF,AF'       ;
 $B095 EX AF,AF'       ;
 $B096 LD C,$0B        ;
 $B098 LD B,$03        ;
 $B09A RST $38         ;
 $B09B RST $38         ;
 $B09C RST $38         ;
 $B09D RRA             ;
 $B09E INC D           ;
 $B09F LD (BC),A       ;
 $B0A0 LD (BC),A       ;
 $B0A1 INC B           ;
 $B0A2 LD BC,$1564     ;
 $B0A5 INC D           ;
 $B0A6 LD (BC),A       ;
 $B0A7 LD (BC),A       ;
 $B0A8 DEC B           ;
 $B0A9 LD BC,$0670     ;
 $B0AC INC D           ;
 $B0AD LD (BC),A       ;
 $B0AE LD (BC),A       ;
 $B0AF INC B           ;
 $B0B0 LD BC,$2060     ;
 $B0B3 RRCA            ;
 $B0B4 LD (BC),A       ;
 $B0B5 LD (BC),A       ;
 $B0B6 RLCA            ;
 $B0B7 LD BC,$0F68     ;
 $B0BA RRCA            ;
 $B0BB LD (BC),A       ;
 $B0BC LD (BC),A       ;
 $B0BD INC BC          ;
 $B0BE LD BC,$0464     ;
 $B0C1 RRCA            ;
 $B0C2 LD (BC),A       ;
 $B0C3 LD (BC),A       ;
 $B0C4 DEC B           ;
 $B0C5 LD BC,$1F58     ;
 $B0C8 LD A,(BC)       ;
 $B0C9 LD (BC),A       ;
 $B0CA LD (BC),A       ;
 $B0CB RLCA            ;
 $B0CC LD BC,$1550     ;
 $B0CF LD A,(BC)       ;
 $B0D0 LD (BC),A       ;
 $B0D1 LD (BC),A       ;
 $B0D2 DEC B           ;
 $B0D3 LD BC,$156C     ;
 $B0D6 DEC B           ;
 $B0D7 LD (BC),A       ;
 $B0D8 LD (BC),A       ;
 $B0D9 INC B           ;
 $B0DA LD BC,$0664     ;
 $B0DD DEC B           ;
 $B0DE LD (BC),A       ;
 $B0DF LD (BC),A       ;
 $B0E0 RLCA            ;
 $B0E1 LD BC,$FF54     ;
 $B0E4 DEC D           ;
 $B0E5 LD DE,$0420     ;
 $B0E8 INC DE          ;
 $B0E9 RLCA            ;
 $B0EA JR NZ,$B0F1     ;
 $B0EC RST $38         ;
 $B0ED ADD HL,DE       ;
 $B0EE INC DE          ;
 $B0EF INC BC          ;
 $B0F0 LD BC,$FF00     ;
 $B0F3 INC H           ;
 $B0F4 INC B           ;
 $B0F5 LD BC,$1305     ;
 $B0F8 INC BC          ;
 $B0F9 INC BC          ;
 $B0FA LD BC,$0000     ;
 $B0FD DEC C           ;
 $B0FE INC B           ;
 $B0FF INC BC          ;
 $B100 LD BC,$0100     ;
 $B103 INC H           ;
 $B104 INC B           ;
 $B105 LD BC,$1305     ;
 $B108 INC BC          ;
 $B109 INC BC          ;
 $B10A LD BC,$0000     ;
 $B10D RST $38         ;
 $B10E RST $38         ;
 $B10F RLCA            ;
 $B110 LD B,$00        ;
 $B112 LD (BC),A       ;
 $B113 LD BC,$0400     ;
 $B116 RST $38         ;
 $B117 LD HL,$1017     ;
 $B11A LD HL,$1003     ;
 $B11D LD HL,$0412     ;
 $B120 LD HL,$040D     ;
 $B123 LD HL,$0408     ;
 $B126 ADD HL,BC       ;
 $B127 LD (DE),A       ;
 $B128 INC B           ;
 $B129 ADD HL,BC       ;
 $B12A DEC C           ;
 $B12B INC B           ;
 $B12C ADD HL,BC       ;
 $B12D EX AF,AF'       ;
 $B12E INC B           ;
 $B12F RST $38         ;
 $B130 DJNZ $B143      ;
 $B132 DEC B           ;
 $B133 ADD HL,BC       ;
 $B134 EX AF,AF'       ;
 $B135 LD DE,$0204     ;
 $B138 DEC E           ;
 $B139 RLCA            ;
 $B13A LD (BC),A       ;
 $B13B RRCA            ;
 $B13C RST $38         ;
 $B13D INC B           ;
 $B13E LD (DE),A       ;
 $B13F JR NZ,$B14E     ;
 $B141 INC B           ;
 $B142 EX AF,AF'       ;
*$B143 RST $38         ;
 $B144 RST $38         ;
 $B145 RST $38         ;
 $B146 LD HL,$0306     ;
 $B149 INC BC          ;
 $B14A RST $38         ;
 $B14B NOP             ;
 $B14C JR NZ,$B150     ;
*$B14E INC BC          ;
 $B14F LD B,$01        ;
 $B151 INC BC          ;
 $B152 NOP             ;
 $B153 LD HL,$0306     ;
 $B156 RST $38         ;
 $B157 LD HL,$0214     ;
 $B15A LD (BC),A       ;
 $B15B INC B           ;
 $B15C LD BC,$0764     ;
 $B15F INC D           ;
 $B160 LD (BC),A       ;
 $B161 LD (BC),A       ;
 $B162 LD B,$01        ;
 $B164 LD E,H          ;
 $B165 LD E,$0F        ;
 $B167 LD (BC),A       ;
 $B168 LD (BC),A       ;
 $B169 RLCA            ;
 $B16A LD BC,$1D6C     ;
 $B16D LD A,(BC)       ;
 $B16E LD (BC),A       ;
 $B16F LD (BC),A       ;
 $B170 INC BC          ;
 $B171 LD BC,$0670     ;
 $B174 LD A,(BC)       ;
 $B175 LD (BC),A       ;
 $B176 LD (BC),A       ;
 $B177 DEC B           ;
 $B178 LD BC,$1358     ;
 $B17B DEC B           ;
 $B17C LD (BC),A       ;
 $B17D LD (BC),A       ;
 $B17E INC B           ;
 $B17F LD BC,$0964     ;
 $B182 DEC B           ;
 $B183 LD (BC),A       ;
 $B184 LD (BC),A       ;
 $B185 INC B           ;
 $B186 LD BC,$FF64     ;
 $B189 ADD HL,DE       ;
 $B18A RLCA            ;
 $B18B LD L,B          ;
 $B18C INC B           ;
 $B18D LD DE,$3807     ;
 $B190 INC B           ;
 $B191 RRA             ;
 $B192 LD D,$50        ;
 $B194 DEC B           ;
 $B195 RST $38         ;
 $B196 ADD HL,DE       ;
 $B197 LD (DE),A       ;
 $B198 INC BC          ;
 $B199 INC BC          ;
 $B19A RST $38         ;
 $B19B NOP             ;
 $B19C LD HL,$0103     ;
 $B19F LD B,$19        ;
 $B1A1 INC BC          ;
 $B1A2 INC C           ;
 $B1A3 INC BC          ;
 $B1A4 NOP             ;
 $B1A5 NOP             ;
 $B1A6 INC C           ;
 $B1A7 DEC C           ;
 $B1A8 INC BC          ;
 $B1A9 INC BC          ;
 $B1AA LD BC,$2100     ;
 $B1AD INC BC          ;
 $B1AE LD BC,$1906     ;
 $B1B1 INC BC          ;
 $B1B2 INC C           ;
 $B1B3 INC BC          ;
 $B1B4 NOP             ;
 $B1B5 NOP             ;
 $B1B6 ADD HL,DE       ;
 $B1B7 EX AF,AF'       ;
 $B1B8 INC BC          ;
 $B1B9 INC BC          ;
 $B1BA RST $38         ;
 $B1BB NOP             ;
 $B1BC LD HL,$0103     ;
 $B1BF LD B,$19        ;
 $B1C1 INC BC          ;
 $B1C2 INC C           ;
 $B1C3 INC BC          ;
 $B1C4 NOP             ;
 $B1C5 NOP             ;
 $B1C6 RST $38         ;
 $B1C7 RST $38         ;
 $B1C8 RLCA            ;
 $B1C9 LD B,$00        ;
 $B1CB LD B,$00        ;
 $B1CD NOP             ;
 $B1CE RLCA            ;
 $B1CF RST $38         ;
 $B1D0 LD HL,$1017     ;
 $B1D3 LD HL,$0512     ;
 $B1D6 LD HL,$050D     ;
 $B1D9 LD HL,$0508     ;
 $B1DC INC DE          ;
 $B1DD LD (DE),A       ;
 $B1DE ADD HL,BC       ;
 $B1DF INC DE          ;
 $B1E0 DEC C           ;
 $B1E1 ADD HL,BC       ;
 $B1E2 INC DE          ;
 $B1E3 EX AF,AF'       ;
 $B1E4 ADD HL,BC       ;
 $B1E5 LD HL,$0503     ;
 $B1E8 INC DE          ;
 $B1E9 INC BC          ;
 $B1EA ADD HL,BC       ;
 $B1EB RST $38         ;
 $B1EC DEC B           ;
 $B1ED LD D,$05        ;
 $B1EF ADD HL,BC       ;
 $B1F0 JR NZ,$B203     ;
 $B1F2 LD (BC),A       ;
 $B1F3 LD A,(BC)       ;
 $B1F4 INC E           ;
 $B1F5 RLCA            ;
 $B1F6 DEC B           ;
 $B1F7 DEC B           ;
 $B1F8 RST $38         ;
 $B1F9 RST $38         ;
 $B1FA DJNZ $B20E      ;
 $B1FC JR NZ,$B209     ;
 $B1FE LD BC,$0803     ;
 $B201 LD (DE),A       ;
 $B202 INC BC          ;
*$B203 LD B,$02        ;
 $B205 INC BC          ;
 $B206 LD A,(DE)       ;
 $B207 DEC C           ;
 $B208 LD (DE),A       ;
*$B209 DJNZ $B20E      ;
 $B20B INC BC          ;
 $B20C DJNZ $B21B      ;
*$B20E JR NZ,$B225     ;
 $B210 INC B           ;
 $B211 INC BC          ;
 $B212 LD A,(BC)       ;
 $B213 EX AF,AF'       ;
 $B214 RRCA            ;
 $B215 DEC BC          ;
 $B216 DEC B           ;
 $B217 INC BC          ;
 $B218 RST $38         ;
 $B219 INC E           ;
 $B21A LD DE,$0D20     ;
 $B21D LD DE,$FF30     ;
 $B220 LD HL,$0306     ;
 $B223 INC BC          ;
 $B224 RST $38         ;
*$B225 NOP             ;
 $B226 JR NZ,$B22A     ;
 $B228 INC BC          ;
 $B229 RLCA            ;
*$B22A LD BC,$0003     ;
 $B22D LD HL,$0306     ;
 $B230 RST $38         ;
 $B231 DEC E           ;
 $B232 INC D           ;
 $B233 LD (BC),A       ;
 $B234 LD (BC),A       ;
 $B235 LD B,$01        ;
 $B237 LD D,B          ;
 $B238 RLCA            ;
 $B239 INC D           ;
 $B23A LD (BC),A       ;
 $B23B LD (BC),A       ;
 $B23C INC B           ;
 $B23D LD BC,$0664     ;
 $B240 RRCA            ;
 $B241 LD (BC),A       ;
 $B242 LD (BC),A       ;
 $B243 DEC B           ;
 $B244 LD BC,$1E6C     ;
 $B247 LD A,(BC)       ;
 $B248 LD (BC),A       ;
 $B249 LD (BC),A       ;
 $B24A INC B           ;
 $B24B LD BC,$0570     ;
 $B24E LD A,(BC)       ;
 $B24F LD (BC),A       ;
 $B250 LD (BC),A       ;
 $B251 LD (BC),A       ;
 $B252 LD BC,$1264     ;
 $B255 DEC B           ;
 $B256 LD (BC),A       ;
 $B257 LD (BC),A       ;
 $B258 RLCA            ;
 $B259 LD BC,$0768     ;
 $B25C DEC B           ;
 $B25D LD (BC),A       ;
 $B25E LD (BC),A       ;
 $B25F INC BC          ;
 $B260 LD BC,$FF60     ;
 $B263 INC DE          ;
 $B264 LD D,$20        ;
 $B266 INC B           ;
 $B267 DEC C           ;
 $B268 LD D,$38        ;
 $B26A INC B           ;
 $B26B DEC BC          ;
 $B26C INC C           ;
 $B26D JR C,$B274      ;
 $B26F RST $38         ;
 $B270 RLA             ;
 $B271 LD (DE),A       ;
 $B272 INC BC          ;
 $B273 INC BC          ;
*$B274 NOP             ;
 $B275 RST $38         ;
 $B276 INC H           ;
 $B277 INC B           ;
 $B278 LD BC,$1305     ;
 $B27B INC BC          ;
 $B27C INC BC          ;
 $B27D LD BC,$0000     ;
 $B280 RST $38         ;
 $B281 RST $38         ;
 $B282 LD B,$06        ;
 $B284 NOP             ;
 $B285 DEC B           ;
 $B286 NOP             ;
 $B287 LD BC,$FF02     ;
 $B28A LD HL,$1017     ;
 $B28D LD HL,$0812     ;
 $B290 DEC C           ;
 $B291 LD (DE),A       ;
 $B292 LD B,$21        ;
 $B294 DEC C           ;
 $B295 EX AF,AF'       ;
 $B296 DEC C           ;
 $B297 DEC C           ;
 $B298 LD (BC),A       ;
 $B299 DEC B           ;
 $B29A DEC C           ;
 $B29B LD (BC),A       ;
 $B29C LD HL,$0608     ;
 $B29F RRCA            ;
 $B2A0 EX AF,AF'       ;
 $B2A1 INC BC          ;
 $B2A2 DEC B           ;
 $B2A3 EX AF,AF'       ;
 $B2A4 LD (BC),A       ;
 $B2A5 LD HL,$1003     ;
 $B2A8 RST $38         ;
 $B2A9 LD A,(DE)       ;
 $B2AA LD DE,$0604     ;
 $B2AD LD A,(DE)       ;
 $B2AE INC C           ;
 $B2AF INC B           ;
 $B2B0 EX AF,AF'       ;
 $B2B1 LD A,(BC)       ;
 $B2B2 RLCA            ;
 $B2B3 INC BC          ;
 $B2B4 LD DE,$0DFF     ;
 $B2B7 EX AF,AF'       ;
 $B2B8 RST $38         ;
 $B2B9 RLCA            ;
 $B2BA RLA             ;
 $B2BB DEC E           ;
 $B2BC DEC BC          ;
 $B2BD LD BC,$1403     ;
 $B2C0 LD (DE),A       ;
 $B2C1 INC BC          ;
 $B2C2 DJNZ $B2C6      ;
 $B2C4 INC BC          ;
 $B2C5 JR $B2CF        ;
 $B2C7 DEC E           ;
 $B2C8 DJNZ $B2CD      ;
 $B2CA INC BC          ;
 $B2CB RST $38         ;
 $B2CC RST $38         ;
*$B2CD LD HL,$0315     ;
 $B2D0 INC BC          ;
 $B2D1 RST $38         ;
 $B2D2 NOP             ;
 $B2D3 JR NZ,$B2D7     ;
 $B2D5 INC BC          ;
 $B2D6 RLCA            ;
*$B2D7 LD BC,$0003     ;
 $B2DA LD HL,$0315     ;
 $B2DD LD HL,$0306     ;
 $B2E0 INC BC          ;
 $B2E1 RST $38         ;
 $B2E2 NOP             ;
 $B2E3 JR NZ,$B2E7     ;
 $B2E5 INC BC          ;
 $B2E6 DEC B           ;
*$B2E7 LD BC,$0003     ;
 $B2EA LD HL,$0306     ;
 $B2ED LD HL,$030B     ;
 $B2F0 INC BC          ;
 $B2F1 RST $38         ;
 $B2F2 NOP             ;
 $B2F3 JR NZ,$B2F7     ;
 $B2F5 INC BC          ;
 $B2F6 LD B,$01        ;
 $B2F8 INC BC          ;
 $B2F9 NOP             ;
 $B2FA LD HL,$030B     ;
 $B2FD RST $38         ;
 $B2FE DEC E           ;
 $B2FF INC D           ;
 $B300 LD (BC),A       ;
 $B301 LD (BC),A       ;
 $B302 INC BC          ;
 $B303 LD BC,$0564     ;
 $B306 INC D           ;
 $B307 LD (BC),A       ;
 $B308 LD (BC),A       ;
 $B309 LD B,$01        ;
 $B30B LD (HL),H       ;
 $B30C INC B           ;
 $B30D LD A,(BC)       ;
 $B30E LD (BC),A       ;
 $B30F LD (BC),A       ;
 $B310 DEC B           ;
 $B311 LD BC,$1D58     ;
 $B314 DEC B           ;
 $B315 LD (BC),A       ;
 $B316 LD (BC),A       ;
 $B317 RLCA            ;
 $B318 LD BC,$FF68     ;
 $B31B RST $38         ;
 $B31C LD DE,$0312     ;
 $B31F INC BC          ;
 $B320 NOP             ;
 $B321 RST $38         ;
 $B322 INC H           ;
 $B323 INC B           ;
 $B324 LD BC,$1305     ;
 $B327 INC BC          ;
 $B328 DEC C           ;
 $B329 INC BC          ;
 $B32A NOP             ;
 $B32B NOP             ;
 $B32C ADD HL,BC       ;
 $B32D EX AF,AF'       ;
 $B32E INC BC          ;
 $B32F INC BC          ;
 $B330 NOP             ;
 $B331 LD BC,$0424     ;
 $B334 LD BC,$0E05     ;
 $B337 INC BC          ;
 $B338 EX AF,AF'       ;
 $B339 INC BC          ;
 $B33A NOP             ;
 $B33B NOP             ;
 $B33C DEC D           ;
 $B33D EX AF,AF'       ;
 $B33E INC BC          ;
 $B33F INC BC          ;
 $B340 RST $38         ;
 $B341 NOP             ;
 $B342 LD HL,$0103     ;
 $B345 INC B           ;
 $B346 DEC D           ;
 $B347 INC BC          ;
 $B348 LD (DE),A       ;
 $B349 INC BC          ;
 $B34A NOP             ;
 $B34B NOP             ;
 $B34C RST $38         ;
 $B34D DEC BC          ;
 $B34E LD (DE),A       ;
 $B34F INC B           ;
 $B350 LD ($004B),A    ;
 $B353 RST $38         ;
 $B354 LD B,$04        ;
 $B356 NOP             ;
 $B357 INC B           ;
 $B358 NOP             ;
 $B359 LD BC,$FF04     ;
 $B35C LD HL,$1017     ;
 $B35F LD HL,$1012     ;
 $B362 LD HL,$100D     ;
 $B365 LD HL,$1008     ;
 $B368 LD HL,$1003     ;
 $B36B RST $38         ;
 $B36C DJNZ $B384      ;
 $B36E INC B           ;
 $B36F DEC B           ;
 $B370 DEC E           ;
 $B371 LD DE,$1003     ;
 $B374 LD B,$07        ;
 $B376 INC B           ;
 $B377 LD BC,$08FF     ;
 $B37A LD (DE),A       ;
 $B37B JR NZ,$B38A     ;
 $B37D LD A,(BC)       ;
 $B37E EX AF,AF'       ;
 $B37F RST $38         ;
 $B380 LD D,$17        ;
 $B382 INC BC          ;
 $B383 DJNZ $B386      ;
 $B385 INC BC          ;
*$B386 LD A,(BC)       ;
 $B387 RLA             ;
 $B388 INC D           ;
 $B389 DEC D           ;
*$B38A LD (BC),A       ;
 $B38B INC BC          ;
 $B38C LD D,$12        ;
 $B38E RLCA            ;
 $B38F LD B,$03        ;
 $B391 INC BC          ;
 $B392 LD C,$12        ;
 $B394 JR NZ,$B39C     ;
 $B396 INC B           ;
 $B397 INC BC          ;
 $B398 JR $B3A2        ;
 $B39A INC D           ;
 $B39B DJNZ $B3A2      ;
 $B39D INC BC          ;
 $B39E LD (DE),A       ;
 $B39F EX AF,AF'       ;
 $B3A0 JR $B3B2        ;
*$B3A2 LD B,$03        ;
 $B3A4 RST $38         ;
 $B3A5 RST $38         ;
 $B3A6 EX AF,AF'       ;
 $B3A7 DJNZ $B3AC      ;
 $B3A9 INC BC          ;
 $B3AA RST $38         ;
 $B3AB NOP             ;
*$B3AC JR NZ,$B3B0     ;
 $B3AE INC BC          ;
 $B3AF RLCA            ;
*$B3B0 LD BC,$0003     ;
 $B3B3 EX AF,AF'       ;
 $B3B4 DJNZ $B3B9      ;
 $B3B6 RST $38         ;
 $B3B7 ADD HL,DE       ;
 $B3B8 INC D           ;
*$B3B9 LD (BC),A       ;
 $B3BA LD (BC),A       ;
 $B3BB RLCA            ;
 $B3BC LD BC,$056C     ;
 $B3BF INC D           ;
 $B3C0 LD (BC),A       ;
 $B3C1 LD (BC),A       ;
 $B3C2 LD B,$01        ;
 $B3C4 LD A,B          ;
 $B3C5 LD (DE),A       ;
 $B3C6 RRCA            ;
 $B3C7 LD (BC),A       ;
 $B3C8 LD (BC),A       ;
 $B3C9 LD B,$01        ;
 $B3CB LD (HL),H       ;
 $B3CC DEC BC          ;
 $B3CD RRCA            ;
 $B3CE LD (BC),A       ;
 $B3CF LD (BC),A       ;
 $B3D0 INC B           ;
 $B3D1 LD BC,$1D64     ;
 $B3D4 DEC B           ;
 $B3D5 LD (BC),A       ;
 $B3D6 LD (BC),A       ;
 $B3D7 RLCA            ;
 $B3D8 LD BC,$155C     ;
 $B3DB DEC B           ;
 $B3DC LD (BC),A       ;
 $B3DD LD (BC),A       ;
 $B3DE LD B,$01        ;
 $B3E0 LD D,H          ;
 $B3E1 RST $38         ;
 $B3E2 JR NZ,$B3FA     ;
 $B3E4 LD L,B          ;
 $B3E5 DEC B           ;
 $B3E6 RLCA            ;
 $B3E7 INC C           ;
 $B3E8 LD D,B          ;
 $B3E9 INC BC          ;
 $B3EA RST $38         ;
 $B3EB RST $38         ;
 $B3EC DEC E           ;
 $B3ED EX AF,AF'       ;
 $B3EE INC B           ;
 $B3EF LD ($0032),A    ;
 $B3F2 RLA             ;
 $B3F3 EX AF,AF'       ;
 $B3F4 DEC B           ;
 $B3F5 DEC L           ;
 $B3F6 SCF             ;
 $B3F7 NOP             ;
 $B3F8 DJNZ $B402      ;
*$B3FA INC B           ;
 $B3FB JR Z,$B439      ;
 $B3FD NOP             ;
 $B3FE RST $38         ;
 $B3FF RLCA            ;
 $B400 LD B,$00        ;
*$B402 LD B,$00        ;
 $B404 LD BC,$FF06     ;
 $B407 LD HL,$1017     ;
 $B40A LD HL,$0512     ;
 $B40D LD HL,$050D     ;
 $B410 LD HL,$0508     ;
 $B413 DEC BC          ;
 $B414 LD (DE),A       ;
 $B415 DEC B           ;
 $B416 DEC BC          ;
 $B417 DEC C           ;
 $B418 DEC B           ;
 $B419 DEC BC          ;
 $B41A EX AF,AF'       ;
 $B41B DEC B           ;
 $B41C LD HL,$0503     ;
 $B41F DEC BC          ;
 $B420 INC BC          ;
 $B421 DEC B           ;
 $B422 INC D           ;
 $B423 INC BC          ;
 $B424 INC BC          ;
 $B425 RST $38         ;
 $B426 JR NZ,$B439     ;
 $B428 LD (BC),A       ;
 $B429 DEC C           ;
 $B42A DEC E           ;
 $B42B INC C           ;
 $B42C INC B           ;
 $B42D INC B           ;
 $B42E LD DE,$0507     ;
 $B431 DEC D           ;
 $B432 INC B           ;
 $B433 RLCA            ;
 $B434 INC B           ;
 $B435 INC DE          ;
 $B436 RST $38         ;
 $B437 RST $38         ;
 $B438 LD A,(DE)       ;
*$B439 RLA             ;
 $B43A INC BC          ;
 $B43B DEC D           ;
 $B43C LD BC,$0803     ;
 $B43F RLA             ;
 $B440 JR NZ,$B44D     ;
 $B442 LD (BC),A       ;
 $B443 INC BC          ;
 $B444 EX AF,AF'       ;
 $B445 LD (DE),A       ;
 $B446 DEC E           ;
 $B447 DJNZ $B44C      ;
 $B449 INC BC          ;
 $B44A EX AF,AF'       ;
 $B44B DEC C           ;
*$B44C JR NZ,$B454     ;
 $B44E INC B           ;
 $B44F INC BC          ;
 $B450 LD E,$08        ;
 $B452 DEC B           ;
 $B453 DJNZ $B45A      ;
 $B455 INC BC          ;
 $B456 EX AF,AF'       ;
 $B457 EX AF,AF'       ;
 $B458 JR NZ,$B46F     ;
*$B45A LD B,$03        ;
 $B45C RST $38         ;
 $B45D RST $38         ;
 $B45E RST $38         ;
 $B45F LD E,$14        ;
 $B461 LD (BC),A       ;
 $B462 LD (BC),A       ;
 $B463 LD (BC),A       ;
 $B464 LD BC,$0664     ;
 $B467 INC D           ;
 $B468 LD (BC),A       ;
 $B469 LD (BC),A       ;
 $B46A INC B           ;
 $B46B LD BC,$1A64     ;
 $B46E RRCA            ;
*$B46F LD (BC),A       ;
 $B470 LD (BC),A       ;
 $B471 LD B,$01        ;
 $B473 LD D,H          ;
 $B474 ADD HL,DE       ;
 $B475 LD A,(BC)       ;
 $B476 LD (BC),A       ;
 $B477 LD (BC),A       ;
 $B478 LD B,$01        ;
 $B47A LD (HL),H       ;
 $B47B INC DE          ;
 $B47C DEC B           ;
 $B47D LD (BC),A       ;
 $B47E LD (BC),A       ;
 $B47F RLCA            ;
 $B480 LD BC,$0758     ;
 $B483 DEC B           ;
 $B484 LD (BC),A       ;
 $B485 LD (BC),A       ;
 $B486 LD B,$01        ;
 $B488 LD E,H          ;
 $B489 RST $38         ;
 $B48A RST $38         ;
 $B48B RLA             ;
 $B48C LD (DE),A       ;
 $B48D INC BC          ;
 $B48E INC BC          ;
 $B48F NOP             ;
 $B490 RST $38         ;
 $B491 INC H           ;
 $B492 INC BC          ;
 $B493 LD BC,$1305     ;
 $B496 INC BC          ;
 $B497 INC BC          ;
 $B498 LD BC,$0000     ;
 $B49B LD C,$12        ;
 $B49D INC BC          ;
 $B49E INC BC          ;
 $B49F NOP             ;
 $B4A0 RST $38         ;
 $B4A1 INC H           ;
 $B4A2 INC BC          ;
 $B4A3 LD BC,$1305     ;
 $B4A6 INC BC          ;
 $B4A7 INC BC          ;
 $B4A8 LD BC,$0000     ;
 $B4AB RST $38         ;
 $B4AC RST $38         ;
 $B4AD DEC B           ;
 $B4AE LD (BC),A       ;
 $B4AF NOP             ;
 $B4B0 RLCA            ;
 $B4B1 NOP             ;
 $B4B2 LD BC,$FF02     ;
 $B4B5 LD HL,$1017     ;
 $B4B8 LD HL,$1012     ;
 $B4BB LD HL,$040D     ;
 $B4BE LD HL,$0408     ;
 $B4C1 LD DE,$080D     ;
 $B4C4 LD DE,$0808     ;
 $B4C7 LD HL,$1003     ;
 $B4CA RST $38         ;
 $B4CB JR NZ,$B4E3     ;
 $B4CD INC B           ;
 $B4CE LD (DE),A       ;
 $B4CF DEC B           ;
 $B4D0 LD D,$05        ;
 $B4D2 DEC C           ;
 $B4D3 DJNZ $B4E6      ;
 $B4D5 DEC B           ;
 $B4D6 LD C,$FF        ;
 $B4D8 INC E           ;
 $B4D9 LD (DE),A       ;
 $B4DA JR NZ,$B4E9     ;
 $B4DC INC E           ;
 $B4DD EX AF,AF'       ;
 $B4DE INC B           ;
 $B4DF DEC C           ;
 $B4E0 EX AF,AF'       ;
 $B4E1 EX AF,AF'       ;
 $B4E2 RST $38         ;
*$B4E3 RST $38         ;
 $B4E4 RST $38         ;
 $B4E5 ADD HL,BC       ;
*$B4E6 DEC D           ;
 $B4E7 INC BC          ;
 $B4E8 INC BC          ;
*$B4E9 RST $38         ;
 $B4EA NOP             ;
 $B4EB JR NZ,$B4EF     ;
 $B4ED INC BC          ;
 $B4EE RLCA            ;
*$B4EF LD BC,$0003     ;
 $B4F2 ADD HL,BC       ;
 $B4F3 DEC D           ;
 $B4F4 INC BC          ;
 $B4F5 LD HL,$0306     ;
 $B4F8 INC BC          ;
 $B4F9 RST $38         ;
 $B4FA NOP             ;
 $B4FB JR NZ,$B4FF     ;
 $B4FD INC BC          ;
 $B4FE RLCA            ;
*$B4FF LD BC,$0003     ;
 $B502 LD HL,$0306     ;
 $B505 DJNZ $B512      ;
 $B507 INC BC          ;
 $B508 INC BC          ;
 $B509 RST $38         ;
 $B50A NOP             ;
 $B50B JR NZ,$B50F     ;
 $B50D INC BC          ;
 $B50E RLCA            ;
*$B50F LD BC,$0003     ;
*$B512 DJNZ $B51F      ;
 $B514 INC BC          ;
 $B515 RST $38         ;
 $B516 INC C           ;
 $B517 LD A,(BC)       ;
 $B518 LD (BC),A       ;
 $B519 LD (BC),A       ;
 $B51A LD (BC),A       ;
 $B51B LD BC,$1164     ;
 $B51E DEC B           ;
*$B51F LD (BC),A       ;
 $B520 LD (BC),A       ;
 $B521 INC B           ;
 $B522 LD BC,$FF64     ;
 $B525 RLA             ;
 $B526 RLCA            ;
 $B527 JR C,$B52D      ;
 $B529 DEC E           ;
 $B52A LD D,$20        ;
 $B52C LD (BC),A       ;
*$B52D RLA             ;
 $B52E LD D,$20        ;
 $B530 LD (BC),A       ;
 $B531 LD DE,$2016     ;
 $B534 LD (BC),A       ;
 $B535 DEC BC          ;
 $B536 LD D,$20        ;
 $B538 LD (BC),A       ;
 $B539 RST $38         ;
 $B53A RST $38         ;
 $B53B RST $38         ;
 $B53C RLCA            ;
 $B53D LD B,$00        ;
 $B53F LD B,$02        ;
 $B541 LD BC,$FF06     ;
 $B544 LD HL,$1017     ;
 $B547 LD HL,$1012     ;
 $B54A LD HL,$100D     ;
 $B54D LD HL,$1008     ;
 $B550 LD HL,$1003     ;
 $B553 RST $38         ;
 $B554 LD (DE),A       ;
 $B555 LD D,$04        ;
 $B557 RRCA            ;
 $B558 LD A,(DE)       ;
 $B559 INC C           ;
 $B55A INC B           ;
 $B55B INC C           ;
 $B55C DEC B           ;
 $B55D RLCA            ;
 $B55E INC B           ;
 $B55F INC D           ;
 $B560 RST $38         ;
 $B561 JR NZ,$B575     ;
 $B563 INC B           ;
 $B564 DEC C           ;
 $B565 JR NZ,$B56F     ;
 $B567 RST $38         ;
 $B568 LD D,$17        ;
 $B56A INC D           ;
 $B56B DEC D           ;
 $B56C LD BC,$0C03     ;
*$B56F RLA             ;
 $B570 ADD HL,DE       ;
 $B571 DEC D           ;
 $B572 LD (BC),A       ;
 $B573 INC BC          ;
 $B574 LD D,$12        ;
 $B576 DEC B           ;
 $B577 DEC D           ;
 $B578 INC BC          ;
 $B579 INC BC          ;
 $B57A INC D           ;
 $B57B DEC C           ;
 $B57C EX AF,AF'       ;
 $B57D LD B,$04        ;
 $B57F INC BC          ;
 $B580 INC C           ;
 $B581 DEC C           ;
 $B582 RRCA            ;
 $B583 DEC BC          ;
 $B584 DEC B           ;
 $B585 INC BC          ;
 $B586 INC C           ;
 $B587 EX AF,AF'       ;
 $B588 LD D,$0B        ;
 $B58A LD B,$03        ;
 $B58C RST $38         ;
 $B58D LD E,$11        ;
 $B58F JR NZ,$B5AA     ;
 $B591 LD DE,$1424     ;
 $B594 LD DE,$0F28     ;
 $B597 LD DE,$0A2C     ;
 $B59A LD DE,$0530     ;
 $B59D LD DE,$FF34     ;
 $B5A0 RST $38         ;
 $B5A1 DEC E           ;
 $B5A2 INC D           ;
 $B5A3 LD (BC),A       ;
 $B5A4 LD (BC),A       ;
 $B5A5 LD B,$01        ;
 $B5A7 LD D,B          ;
 $B5A8 INC B           ;
 $B5A9 INC D           ;
*$B5AA LD (BC),A       ;
 $B5AB LD (BC),A       ;
 $B5AC LD B,$01        ;
 $B5AE LD D,B          ;
 $B5AF DEC DE          ;
 $B5B0 RRCA            ;
 $B5B1 LD (BC),A       ;
 $B5B2 LD (BC),A       ;
 $B5B3 LD B,$01        ;
 $B5B5 LD D,B          ;
 $B5B6 LD B,$0F        ;
 $B5B8 LD (BC),A       ;
 $B5B9 LD (BC),A       ;
 $B5BA RLCA            ;
 $B5BB LD BC,$1250     ;
 $B5BE LD A,(BC)       ;
 $B5BF LD (BC),A       ;
 $B5C0 LD (BC),A       ;
 $B5C1 RLCA            ;
 $B5C2 LD BC,$0950     ;
 $B5C5 LD A,(BC)       ;
 $B5C6 LD (BC),A       ;
 $B5C7 LD (BC),A       ;
 $B5C8 LD B,$01        ;
 $B5CA LD D,B          ;
 $B5CB ADD HL,DE       ;
 $B5CC DEC B           ;
 $B5CD LD (BC),A       ;
 $B5CE LD (BC),A       ;
 $B5CF DEC B           ;
 $B5D0 LD BC,$0A50     ;
 $B5D3 DEC B           ;
 $B5D4 LD (BC),A       ;
 $B5D5 LD (BC),A       ;
 $B5D6 RLCA            ;
 $B5D7 LD BC,$FF50     ;
 $B5DA INC D           ;
 $B5DB RLCA            ;
 $B5DC LD L,B          ;
 $B5DD LD (BC),A       ;
 $B5DE RST $38         ;
 $B5DF RST $38         ;
 $B5E0 RST $38         ;
 $B5E1 LD B,$06        ;
 $B5E3 NOP             ;
 $B5E4 LD B,$01        ;
 $B5E6 NOP             ;
 $B5E7 DEC B           ;
 $B5E8 RST $38         ;
 $B5E9 LD HL,$1017     ;
 $B5EC LD HL,$1012     ;
 $B5EF LD HL,$100D     ;
 $B5F2 LD HL,$1008     ;
 $B5F5 LD HL,$1003     ;
 $B5F8 RST $38         ;
 $B5F9 INC B           ;
 $B5FA LD D,$04        ;
 $B5FC LD DE,$1118     ;
 $B5FF INC B           ;
 $B600 INC D           ;
 $B601 LD E,$0C        ;
 $B603 LD B,$01        ;
 $B605 RST $38         ;
 $B606 DEC C           ;
 $B607 LD (DE),A       ;
 $B608 DEC D           ;
 $B609 DEC C           ;
 $B60A JR NZ,$B614     ;
 $B60C RST $38         ;
 $B60D LD A,(DE)       ;
 $B60E RLA             ;
 $B60F JR NZ,$B621     ;
 $B611 LD BC,$1A03     ;
*$B614 LD (DE),A       ;
 $B615 INC BC          ;
 $B616 LD B,$02        ;
 $B618 INC BC          ;
 $B619 EX AF,AF'       ;
 $B61A LD (DE),A       ;
 $B61B JR $B632        ;
 $B61D INC BC          ;
 $B61E INC BC          ;
 $B61F DJNZ $B62E      ;
*$B621 LD A,(BC)       ;
 $B622 LD B,$04        ;
 $B624 INC BC          ;
 $B625 DJNZ $B62F      ;
 $B627 LD (DE),A       ;
 $B628 DEC BC          ;
 $B629 DEC B           ;
 $B62A INC BC          ;
 $B62B EX AF,AF'       ;
 $B62C EX AF,AF'       ;
 $B62D INC BC          ;
*$B62E DEC BC          ;
*$B62F LD B,$03        ;
 $B631 RST $38         ;
*$B632 RST $38         ;
 $B633 INC C           ;
 $B634 DJNZ $B639      ;
 $B636 INC BC          ;
 $B637 RST $38         ;
 $B638 NOP             ;
*$B639 JR NZ,$B63D     ;
 $B63B INC BC          ;
 $B63C LD B,$01        ;
 $B63E INC BC          ;
 $B63F NOP             ;
 $B640 INC C           ;
 $B641 DJNZ $B646      ;
 $B643 RST $38         ;
 $B644 RRA             ;
 $B645 INC D           ;
*$B646 LD (BC),A       ;
 $B647 LD (BC),A       ;
 $B648 RLCA            ;
 $B649 LD BC,$1E68     ;
 $B64C RRCA            ;
 $B64D LD (BC),A       ;
 $B64E LD (BC),A       ;
 $B64F DEC B           ;
 $B650 LD BC,$0658     ;
 $B653 RRCA            ;
 $B654 LD (BC),A       ;
 $B655 LD (BC),A       ;
 $B656 DEC B           ;
 $B657 LD BC,$0C58     ;
 $B65A LD A,(BC)       ;
 $B65B LD (BC),A       ;
 $B65C LD (BC),A       ;
 $B65D DEC B           ;
 $B65E LD BC,$0758     ;
 $B661 LD A,(BC)       ;
 $B662 LD (BC),A       ;
 $B663 LD (BC),A       ;
 $B664 LD B,$01        ;
 $B666 LD E,H          ;
 $B667 DEC C           ;
 $B668 DEC B           ;
 $B669 LD (BC),A       ;
 $B66A LD (BC),A       ;
 $B66B LD B,$01        ;
 $B66D LD D,B          ;
 $B66E LD B,$05        ;
 $B670 LD (BC),A       ;
 $B671 LD (BC),A       ;
 $B672 RLCA            ;
 $B673 LD BC,$FF54     ;
 $B676 RLA             ;
 $B677 RLCA            ;
 $B678 JR C,$B67C      ;
 $B67A DEC E           ;
 $B67B RLCA            ;
*$B67C LD D,B          ;
 $B67D LD (BC),A       ;
 $B67E RLA             ;
 $B67F LD D,$50        ;
 $B681 INC B           ;
 $B682 LD DE,$6816     ;
 $B685 INC B           ;
 $B686 DEC BC          ;
 $B687 LD D,$50        ;
 $B689 INC B           ;
 $B68A RST $38         ;
 $B68B RST $38         ;
 $B68C RST $38         ;
 $B68D RLCA            ;
 $B68E RLCA            ;
 $B68F NOP             ;
 $B690 DEC B           ;
 $B691 NOP             ;
 $B692 LD BC,$FF04     ;
 $B695 LD HL,$0217     ;
 $B698 INC DE          ;
 $B699 RLA             ;
 $B69A ADD HL,BC       ;
 $B69B RRCA            ;
 $B69C LD (DE),A       ;
 $B69D RLCA            ;
 $B69E RRCA            ;
 $B69F DEC C           ;
 $B6A0 RLCA            ;
 $B6A1 RRCA            ;
 $B6A2 EX AF,AF'       ;
 $B6A3 RLCA            ;
 $B6A4 LD HL,$1003     ;
 $B6A7 DEC E           ;
 $B6A8 DEC C           ;
 $B6A9 DEC B           ;
 $B6AA RST $38         ;
 $B6AB LD A,(DE)       ;
 $B6AC LD DE,$0C04     ;
 $B6AF RRCA            ;
 $B6B0 LD DE,$0404     ;
 $B6B3 RRCA            ;
 $B6B4 RLCA            ;
 $B6B5 INC B           ;
 $B6B6 DJNZ $B6B7      ;
 $B6B8 INC B           ;
 $B6B9 LD (DE),A       ;
 $B6BA LD B,$0D        ;
 $B6BC DEC BC          ;
 $B6BD EX AF,AF'       ;
 $B6BE RST $38         ;
 $B6BF LD A,(BC)       ;
 $B6C0 RLA             ;
 $B6C1 DEC BC          ;
 $B6C2 DJNZ $B6C5      ;
 $B6C4 INC BC          ;
*$B6C5 EX AF,AF'       ;
 $B6C6 DEC C           ;
 $B6C7 INC BC          ;
 $B6C8 LD B,$02        ;
 $B6CA INC BC          ;
 $B6CB EX AF,AF'       ;
 $B6CC EX AF,AF'       ;
 $B6CD LD C,$0B        ;
 $B6CF INC BC          ;
 $B6D0 INC BC          ;
 $B6D1 RST $38         ;
 $B6D2 RST $38         ;
 $B6D3 INC DE          ;
 $B6D4 LD B,$03        ;
 $B6D6 INC BC          ;
 $B6D7 RST $38         ;
 $B6D8 NOP             ;
 $B6D9 JR NZ,$B6DD     ;
 $B6DB INC BC          ;
 $B6DC RLCA            ;
*$B6DD LD BC,$0003     ;
 $B6E0 INC DE          ;
 $B6E1 LD B,$03        ;
 $B6E3 RST $38         ;
 $B6E4 LD C,$14        ;
 $B6E6 LD (BC),A       ;
 $B6E7 LD (BC),A       ;
 $B6E8 LD (BC),A       ;
 $B6E9 LD BC,$0464     ;
 $B6EC INC D           ;
 $B6ED LD (BC),A       ;
 $B6EE LD (BC),A       ;
 $B6EF LD (BC),A       ;
 $B6F0 LD BC,$1764     ;
 $B6F3 RRCA            ;
 $B6F4 LD (BC),A       ;
 $B6F5 LD (BC),A       ;
 $B6F6 LD B,$01        ;
 $B6F8 LD (HL),H       ;
 $B6F9 INC B           ;
 $B6FA LD A,(BC)       ;
 $B6FB LD (BC),A       ;
 $B6FC LD (BC),A       ;
 $B6FD DEC B           ;
 $B6FE LD BC,$066C     ;
 $B701 DEC B           ;
 $B702 LD (BC),A       ;
 $B703 LD (BC),A       ;
 $B704 RLCA            ;
 $B705 LD BC,$FF68     ;
 $B708 LD HL,$2007     ;
 $B70B LD (BC),A       ;
 $B70C DEC DE          ;
 $B70D RLCA            ;
 $B70E JR NZ,$B712     ;
 $B710 DEC D           ;
 $B711 RLCA            ;
*$B712 JR NZ,$B716     ;
 $B714 RST $38         ;
 $B715 RST $38         ;
*$B716 RST $38         ;
 $B717 LD B,$06        ;
 $B719 NOP             ;
 $B71A LD B,$00        ;
 $B71C LD BC,$FF04     ;
 $B71F LD HL,$1017     ;
 $B722 LD HL,$1012     ;
 $B725 LD HL,$100D     ;
 $B728 LD HL,$1008     ;
 $B72B LD HL,$1003     ;
 $B72E RST $38         ;
 $B72F DJNZ $B747      ;
 $B731 INC BC          ;
 $B732 DEC BC          ;
 $B733 DEC B           ;
 $B734 LD DE,$1203     ;
 $B737 INC E           ;
 $B738 RLCA            ;
 $B739 DEC B           ;
 $B73A DEC C           ;
 $B73B RST $38         ;
 $B73C ADD HL,BC       ;
 $B73D LD (DE),A       ;
 $B73E DEC DE          ;
 $B73F DEC C           ;
 $B740 ADD HL,DE       ;
 $B741 EX AF,AF'       ;
 $B742 RST $38         ;
 $B743 JR $B75C        ;
 $B745 INC D           ;
 $B746 DJNZ $B749      ;
 $B748 INC BC          ;
*$B749 LD B,$17        ;
 $B74B LD B,$0B        ;
 $B74D LD (BC),A       ;
 $B74E INC BC          ;
 $B74F INC E           ;
 $B750 LD (DE),A       ;
 $B751 DEC E           ;
 $B752 LD B,$03        ;
 $B754 INC BC          ;
 $B755 LD D,$12        ;
 $B757 JR NZ,$B76E     ;
 $B759 INC B           ;
 $B75A INC BC          ;
 $B75B INC C           ;
*$B75C DEC C           ;
 $B75D LD (BC),A       ;
 $B75E DJNZ $B765      ;
 $B760 INC BC          ;
 $B761 INC C           ;
 $B762 EX AF,AF'       ;
 $B763 LD (BC),A       ;
 $B764 DEC D           ;
*$B765 LD B,$03        ;
 $B767 RST $38         ;
 $B768 RST $38         ;
 $B769 RST $38         ;
 $B76A LD D,$14        ;
 $B76C LD (BC),A       ;
 $B76D LD (BC),A       ;
*$B76E LD B,$01        ;
 $B770 LD A,B          ;
 $B771 DEC B           ;
 $B772 INC D           ;
 $B773 LD (BC),A       ;
 $B774 LD (BC),A       ;
 $B775 LD B,$01        ;
 $B777 LD (HL),H       ;
 $B778 JR NZ,$B784     ;
 $B77A LD (BC),A       ;
 $B77B LD (BC),A       ;
 $B77C DEC B           ;
 $B77D LD BC,$0A60     ;
 $B780 DEC B           ;
 $B781 LD (BC),A       ;
 $B782 LD (BC),A       ;
 $B783 RLCA            ;
*$B784 LD BC,$2068     ;
 $B787 RRCA            ;
 $B788 LD (BC),A       ;
 $B789 LD (BC),A       ;
 $B78A LD B,$01        ;
 $B78C LD E,H          ;
 $B78D ADD HL,DE       ;
 $B78E RRCA            ;
 $B78F LD (BC),A       ;
 $B790 LD (BC),A       ;
 $B791 LD B,$01        ;
 $B793 LD E,H          ;
 $B794 INC DE          ;
 $B795 RRCA            ;
 $B796 LD (BC),A       ;
 $B797 LD (BC),A       ;
 $B798 LD B,$01        ;
 $B79A LD E,H          ;
 $B79B RST $38         ;
 $B79C LD E,$16        ;
 $B79E JR C,$B7A4      ;
 $B7A0 RRCA            ;
 $B7A1 LD DE,$0438     ;
*$B7A4 RLA             ;
 $B7A5 INC C           ;
 $B7A6 JR C,$B7AB      ;
 $B7A8 RLCA            ;
 $B7A9 RLCA            ;
 $B7AA JR C,$B7B1      ;
 $B7AC RST $38         ;
 $B7AD RST $38         ;
 $B7AE LD DE,$0508     ;
*$B7B1 JR Z,$B817      ;
 $B7B3 NOP             ;
 $B7B4 RST $38         ;
 $B7B5 LD B,$05        ;
 $B7B7 NOP             ;
 $B7B8 DEC B           ;
 $B7B9 NOP             ;
 $B7BA LD BC,$FF07     ;
 $B7BD LD HL,$1017     ;
 $B7C0 LD HL,$1012     ;
 $B7C3 LD HL,$100D     ;
 $B7C6 LD HL,$1008     ;
 $B7C9 LD HL,$1003     ;
 $B7CC RST $38         ;
 $B7CD RRCA            ;
 $B7CE LD DE,$0604     ;
 $B7D1 INC B           ;
 $B7D2 LD DE,$1004     ;
 $B7D5 DEC E           ;
 $B7D6 INC C           ;
 $B7D7 INC B           ;
 $B7D8 LD A,(BC)       ;
 $B7D9 RST $38         ;
 $B7DA JR $B7EE        ;
 $B7DC LD A,(DE)       ;
 $B7DD DEC C           ;
 $B7DE ADD HL,BC       ;
 $B7DF DEC C           ;
 $B7E0 LD DE,$FF08     ;
 $B7E3 INC D           ;
 $B7E4 RLA             ;
 $B7E5 JR NZ,$B7F2     ;
 $B7E7 LD BC,$0C03     ;
 $B7EA RLA             ;
 $B7EB DEC B           ;
 $B7EC DJNZ $B7F0      ;
*$B7EE INC BC          ;
 $B7EF LD A,(BC)       ;
*$B7F0 LD (DE),A       ;
 $B7F1 JR NZ,$B7F9     ;
 $B7F3 INC BC          ;
 $B7F4 INC BC          ;
 $B7F5 LD D,$0D        ;
 $B7F7 LD (DE),A       ;
 $B7F8 DEC D           ;
*$B7F9 INC B           ;
 $B7FA INC BC          ;
 $B7FB LD D,$08        ;
 $B7FD INC BC          ;
 $B7FE DEC BC          ;
 $B7FF DEC B           ;
 $B800 INC BC          ;
 $B801 LD B,$08        ;
 $B803 INC BC          ;
 $B804 DEC D           ;
 $B805 LD B,$03        ;
 $B807 RST $38         ;
 $B808 RST $38         ;
 $B809 RRCA            ;
 $B80A DEC BC          ;
 $B80B INC BC          ;
 $B80C INC BC          ;
 $B80D RST $38         ;
 $B80E NOP             ;
 $B80F JR NZ,$B813     ;
 $B811 INC BC          ;
 $B812 RLCA            ;
*$B813 LD BC,$0003     ;
 $B816 RRCA            ;
*$B817 DEC BC          ;
 $B818 INC BC          ;
 $B819 RRCA            ;
 $B81A DEC D           ;
 $B81B INC BC          ;
 $B81C INC BC          ;
 $B81D RST $38         ;
 $B81E NOP             ;
 $B81F JR NZ,$B823     ;
 $B821 INC BC          ;
 $B822 RLCA            ;
*$B823 LD BC,$0003     ;
 $B826 RRCA            ;
 $B827 DEC D           ;
 $B828 INC BC          ;
 $B829 RST $38         ;
 $B82A JR $B840        ;
 $B82C LD (BC),A       ;
 $B82D LD (BC),A       ;
 $B82E RLCA            ;
 $B82F LD BC,$0854     ;
 $B832 INC D           ;
 $B833 LD (BC),A       ;
 $B834 LD (BC),A       ;
 $B835 LD B,$01        ;
 $B837 LD D,H          ;
 $B838 DEC E           ;
 $B839 RRCA            ;
 $B83A LD (BC),A       ;
 $B83B LD (BC),A       ;
 $B83C RLCA            ;
 $B83D LD BC,$1354     ;
*$B840 RRCA            ;
 $B841 LD (BC),A       ;
 $B842 LD (BC),A       ;
 $B843 LD B,$01        ;
 $B845 LD D,H          ;
 $B846 EX AF,AF'       ;
 $B847 RRCA            ;
 $B848 LD (BC),A       ;
 $B849 LD (BC),A       ;
 $B84A DEC B           ;
 $B84B LD BC,$1F54     ;
 $B84E LD A,(BC)       ;
 $B84F LD (BC),A       ;
 $B850 LD (BC),A       ;
 $B851 RLCA            ;
 $B852 LD BC,$1454     ;
 $B855 LD A,(BC)       ;
 $B856 LD (BC),A       ;
 $B857 LD (BC),A       ;
 $B858 LD B,$01        ;
 $B85A LD D,H          ;
 $B85B ADD HL,DE       ;
 $B85C DEC B           ;
 $B85D LD (BC),A       ;
 $B85E LD (BC),A       ;
 $B85F DEC B           ;
 $B860 LD BC,$0D54     ;
 $B863 DEC B           ;
 $B864 LD (BC),A       ;
 $B865 LD (BC),A       ;
 $B866 LD B,$01        ;
 $B868 LD D,H          ;
 $B869 INC B           ;
 $B86A DEC B           ;
 $B86B LD (BC),A       ;
 $B86C LD (BC),A       ;
 $B86D LD (BC),A       ;
 $B86E LD BC,$FF54     ;
 $B871 LD HL,$5016     ;
 $B874 INC B           ;
 $B875 RRCA            ;
 $B876 INC C           ;
 $B877 LD D,B          ;
 $B878 INC B           ;
 $B879 RST $38         ;
 $B87A RST $38         ;
 $B87B RST $38         ;
 $B87C DEC B           ;
 $B87D INC B           ;
 $B87E NOP             ;
 $B87F INC B           ;
 $B880 NOP             ;
 $B881 NOP             ;
 $B882 INC B           ;
 $B883 RST $38         ;
 $B884 LD HL,$1017     ;
 $B887 LD HL,$1012     ;
 $B88A LD HL,$100D     ;
 $B88D LD HL,$1008     ;
 $B890 LD HL,$1003     ;
 $B893 RST $38         ;
 $B894 JR NZ,$B8A7     ;
 $B896 RLCA            ;
 $B897 LD DE,$0C05     ;
 $B89A LD B,$0F        ;
 $B89C INC D           ;
 $B89D RLCA            ;
 $B89E INC BC          ;
 $B89F INC DE          ;
 $B8A0 RST $38         ;
 $B8A1 JR $B8B5        ;
 $B8A3 LD C,$0D        ;
 $B8A5 INC C           ;
 $B8A6 EX AF,AF'       ;
*$B8A7 RST $38         ;
 $B8A8 LD A,(DE)       ;
 $B8A9 RLA             ;
 $B8AA JR NZ,$B8B2     ;
 $B8AC LD BC,$0A03     ;
 $B8AF RLA             ;
 $B8B0 RLCA            ;
 $B8B1 DEC BC          ;
*$B8B2 LD (BC),A       ;
 $B8B3 INC BC          ;
 $B8B4 LD A,(DE)       ;
*$B8B5 LD (DE),A       ;
 $B8B6 INC C           ;
 $B8B7 DEC D           ;
 $B8B8 INC BC          ;
 $B8B9 INC BC          ;
 $B8BA EX AF,AF'       ;
 $B8BB LD (DE),A       ;
 $B8BC INC BC          ;
 $B8BD DEC D           ;
 $B8BE INC B           ;
 $B8BF INC BC          ;
 $B8C0 LD (DE),A       ;
 $B8C1 DEC C           ;
 $B8C2 JR NZ,$B8D9     ;
 $B8C4 DEC B           ;
 $B8C5 INC BC          ;
 $B8C6 RLA             ;
 $B8C7 EX AF,AF'       ;
 $B8C8 INC B           ;
 $B8C9 DJNZ $B8D1      ;
 $B8CB INC BC          ;
 $B8CC DJNZ $B8D6      ;
 $B8CE DEC E           ;
 $B8CF DJNZ $B8D8      ;
*$B8D1 INC BC          ;
 $B8D2 RST $38         ;
 $B8D3 RST $38         ;
 $B8D4 LD HL,$0310     ;
 $B8D7 INC BC          ;
*$B8D8 RST $38         ;
*$B8D9 NOP             ;
 $B8DA JR NZ,$B8DE     ;
 $B8DC INC BC          ;
 $B8DD LD B,$01        ;
 $B8DF INC BC          ;
 $B8E0 NOP             ;
 $B8E1 LD HL,$0310     ;
 $B8E4 RST $38         ;
 $B8E5 DEC E           ;
 $B8E6 INC D           ;
 $B8E7 LD (BC),A       ;
 $B8E8 LD (BC),A       ;
 $B8E9 DEC B           ;
 $B8EA LD BC,$0F64     ;
 $B8ED INC D           ;
 $B8EE LD (BC),A       ;
 $B8EF LD (BC),A       ;
 $B8F0 DEC B           ;
 $B8F1 LD BC,$0764     ;
 $B8F4 RRCA            ;
 $B8F5 LD (BC),A       ;
 $B8F6 LD (BC),A       ;
 $B8F7 INC B           ;
 $B8F8 LD BC,$1964     ;
 $B8FB LD A,(BC)       ;
 $B8FC LD (BC),A       ;
 $B8FD LD (BC),A       ;
 $B8FE INC B           ;
 $B8FF LD BC,$0A64     ;
 $B902 LD A,(BC)       ;
 $B903 LD (BC),A       ;
 $B904 LD (BC),A       ;
 $B905 LD B,$01        ;
 $B907 LD H,H          ;
 $B908 LD E,$05        ;
 $B90A LD (BC),A       ;
 $B90B LD (BC),A       ;
 $B90C RLCA            ;
 $B90D LD BC,$0E64     ;
 $B910 DEC B           ;
 $B911 LD (BC),A       ;
 $B912 LD (BC),A       ;
 $B913 LD (BC),A       ;
 $B914 LD BC,$FF64     ;
 $B917 LD D,$16        ;
 $B919 JR C,$B91E      ;
 $B91B RST $38         ;
 $B91C RST $38         ;
 $B91D RST $38         ;
*$B91E INC B           ;
 $B91F LD B,$00        ;
 $B921 LD B,$00        ;
 $B923 LD BC,$FF05     ;
 $B926 LD HL,$1017     ;
 $B929 LD HL,$1012     ;
 $B92C LD HL,$1008     ;
 $B92F LD HL,$1003     ;
 $B932 LD HL,$100D     ;
 $B935 RST $38         ;
 $B936 RLCA            ;
 $B937 LD D,$04        ;
 $B939 LD BC,$1108     ;
 $B93C INC B           ;
 $B93D LD C,$0E        ;
 $B93F RLCA            ;
 $B940 LD (BC),A       ;
 $B941 LD (DE),A       ;
 $B942 RST $38         ;
 $B943 DEC C           ;
 $B944 LD (DE),A       ;
 $B945 JR NZ,$B959     ;
 $B947 JR $B956        ;
 $B949 INC B           ;
 $B94A EX AF,AF'       ;
 $B94B RST $38         ;
 $B94C LD A,(DE)       ;
 $B94D RLA             ;
 $B94E JR NZ,$B956     ;
 $B950 LD BC,$0A03     ;
 $B953 RLA             ;
 $B954 LD (BC),A       ;
 $B955 DEC D           ;
*$B956 LD (BC),A       ;
 $B957 INC BC          ;
 $B958 LD A,(DE)       ;
*$B959 LD (DE),A       ;
 $B95A LD B,$06        ;
 $B95C INC BC          ;
 $B95D INC BC          ;
 $B95E DJNZ $B972      ;
 $B960 LD D,$15        ;
 $B962 INC B           ;
 $B963 INC BC          ;
 $B964 LD (DE),A       ;
 $B965 DEC C           ;
 $B966 LD (BC),A       ;
 $B967 DJNZ $B96E      ;
 $B969 INC BC          ;
 $B96A LD A,(DE)       ;
 $B96B EX AF,AF'       ;
 $B96C JR $B983        ;
*$B96E LD B,$03        ;
 $B970 LD A,(BC)       ;
 $B971 EX AF,AF'       ;
*$B972 JR $B97A        ;
 $B974 RLCA            ;
 $B975 INC BC          ;
 $B976 RST $38         ;
 $B977 RST $38         ;
 $B978 DEC D           ;
 $B979 DJNZ $B97E      ;
 $B97B INC BC          ;
 $B97C RST $38         ;
 $B97D NOP             ;
*$B97E JR NZ,$B982     ;
 $B980 INC BC          ;
 $B981 RLCA            ;
*$B982 LD BC,$0003     ;
 $B985 DEC D           ;
 $B986 DJNZ $B98B      ;
 $B988 LD HL,$030B     ;
*$B98B INC BC          ;
 $B98C RST $38         ;
 $B98D NOP             ;
 $B98E JR NZ,$B992     ;
 $B990 INC BC          ;
 $B991 RLCA            ;
*$B992 LD BC,$0003     ;
 $B995 LD HL,$030B     ;
 $B998 RST $38         ;
 $B999 DEC E           ;
 $B99A INC D           ;
 $B99B LD (BC),A       ;
 $B99C LD (BC),A       ;
 $B99D DEC B           ;
 $B99E LD BC,$0E58     ;
 $B9A1 INC D           ;
 $B9A2 LD (BC),A       ;
 $B9A3 LD (BC),A       ;
 $B9A4 DEC B           ;
 $B9A5 LD BC,$0458     ;
 $B9A8 INC D           ;
 $B9A9 LD (BC),A       ;
 $B9AA LD (BC),A       ;
 $B9AB LD B,$01        ;
 $B9AD LD E,H          ;
 $B9AE INC DE          ;
 $B9AF RRCA            ;
 $B9B0 LD (BC),A       ;
 $B9B1 LD (BC),A       ;
 $B9B2 LD B,$01        ;
 $B9B4 LD (HL),H       ;
 $B9B5 DEC B           ;
 $B9B6 RRCA            ;
 $B9B7 LD (BC),A       ;
 $B9B8 LD (BC),A       ;
 $B9B9 DEC B           ;
 $B9BA LD BC,$1F58     ;
 $B9BD LD A,(BC)       ;
 $B9BE LD (BC),A       ;
 $B9BF LD (BC),A       ;
 $B9C0 DEC B           ;
 $B9C1 LD BC,$0E58     ;
 $B9C4 LD A,(BC)       ;
 $B9C5 LD (BC),A       ;
 $B9C6 LD (BC),A       ;
 $B9C7 DEC B           ;
 $B9C8 LD BC,$1D58     ;
 $B9CB DEC B           ;
 $B9CC LD (BC),A       ;
 $B9CD LD (BC),A       ;
 $B9CE DEC B           ;
 $B9CF LD BC,$1658     ;
 $B9D2 DEC B           ;
 $B9D3 LD (BC),A       ;
 $B9D4 LD (BC),A       ;
 $B9D5 DEC B           ;
 $B9D6 LD BC,$FF58     ;
 $B9D9 INC D           ;
 $B9DA LD D,$68        ;
 $B9DC INC B           ;
 $B9DD ADD HL,BC       ;
 $B9DE INC C           ;
 $B9DF LD D,B          ;
 $B9E0 DEC B           ;
 $B9E1 RST $38         ;
 $B9E2 RST $38         ;
 $B9E3 RST $38         ;
 $B9E4 RLCA            ;
 $B9E5 INC B           ;
 $B9E6 NOP             ;
 $B9E7 RLCA            ;
 $B9E8 NOP             ;
 $B9E9 LD BC,$FF06     ;
 $B9EC LD HL,$1017     ;
 $B9EF LD HL,$1012     ;
 $B9F2 LD HL,$100D     ;
 $B9F5 LD HL,$1008     ;
 $B9F8 LD HL,$1003     ;
 $B9FB RST $38         ;
 $B9FC RLCA            ;
 $B9FD LD D,$04        ;
 $B9FF LD (BC),A       ;
 $BA00 LD B,$07        ;
 $BA02 INC B           ;
 $BA03 DEC BC          ;
 $BA04 LD E,$0C        ;
 $BA06 DEC B           ;
 $BA07 RLCA            ;
 $BA08 RST $38         ;
 $BA09 DJNZ $BA1D      ;
 $BA0B INC D           ;
 $BA0C DEC C           ;
 $BA0D DJNZ $BA17      ;
 $BA0F RST $38         ;
 $BA10 INC C           ;
 $BA11 RLA             ;
 $BA12 LD C,$06        ;
 $BA14 LD (BC),A       ;
 $BA15 INC BC          ;
 $BA16 LD D,$17        ;
 $BA18 EX AF,AF'       ;
 $BA19 DEC BC          ;
 $BA1A LD BC,$1603     ;
*$BA1D LD (DE),A       ;
 $BA1E JR NZ,$BA2B     ;
 $BA20 INC BC          ;
 $BA21 INC BC          ;
 $BA22 INC C           ;
 $BA23 LD (DE),A       ;
 $BA24 INC DE          ;
 $BA25 DEC D           ;
 $BA26 INC B           ;
 $BA27 INC BC          ;
 $BA28 JR $BA37        ;
 $BA2A JR NZ,$BA32     ;
 $BA2C DEC B           ;
 $BA2D INC BC          ;
 $BA2E INC C           ;
 $BA2F DEC C           ;
 $BA30 LD D,$0B        ;
*$BA32 LD B,$03        ;
 $BA34 LD D,$08        ;
 $BA36 INC DE          ;
*$BA37 DJNZ $BA40      ;
 $BA39 INC BC          ;
 $BA3A INC C           ;
 $BA3B EX AF,AF'       ;
 $BA3C DEC DE          ;
 $BA3D DEC D           ;
 $BA3E EX AF,AF'       ;
 $BA3F INC BC          ;
*$BA40 RST $38         ;
 $BA41 RST $38         ;
 $BA42 LD HL,$0306     ;
 $BA45 INC BC          ;
 $BA46 RST $38         ;
 $BA47 NOP             ;
 $BA48 JR NZ,$BA4C     ;
 $BA4A INC BC          ;
 $BA4B RLCA            ;
*$BA4C LD BC,$0003     ;
 $BA4F LD HL,$0306     ;
 $BA52 LD A,(BC)       ;
 $BA53 DEC BC          ;
 $BA54 INC BC          ;
 $BA55 INC BC          ;
 $BA56 RST $38         ;
 $BA57 NOP             ;
 $BA58 JR NZ,$BA5C     ;
 $BA5A INC BC          ;
 $BA5B LD B,$01        ;
 $BA5D INC BC          ;
 $BA5E NOP             ;
 $BA5F LD A,(BC)       ;
 $BA60 DEC BC          ;
 $BA61 INC BC          ;
 $BA62 RST $38         ;
 $BA63 LD B,$0F        ;
 $BA65 LD (BC),A       ;
 $BA66 LD (BC),A       ;
 $BA67 DEC B           ;
 $BA68 LD BC,$1F58     ;
 $BA6B INC D           ;
 $BA6C LD (BC),A       ;
 $BA6D LD (BC),A       ;
 $BA6E LD B,$01        ;
 $BA70 LD A,B          ;
 $BA71 JR NZ,$BA82     ;
 $BA73 LD (BC),A       ;
 $BA74 LD (BC),A       ;
 $BA75 RLCA            ;
 $BA76 LD BC,$1B54     ;
 $BA79 LD A,(BC)       ;
 $BA7A LD (BC),A       ;
 $BA7B LD (BC),A       ;
 $BA7C DEC B           ;
 $BA7D LD BC,$1458     ;
 $BA80 DEC B           ;
 $BA81 LD (BC),A       ;
*$BA82 LD (BC),A       ;
 $BA83 LD B,$01        ;
 $BA85 LD E,H          ;
 $BA86 ADD HL,DE       ;
 $BA87 DEC B           ;
 $BA88 LD (BC),A       ;
 $BA89 LD (BC),A       ;
 $BA8A INC BC          ;
 $BA8B LD BC,$0860     ;
 $BA8E DEC B           ;
 $BA8F LD (BC),A       ;
 $BA90 LD (BC),A       ;
 $BA91 LD (BC),A       ;
 $BA92 LD BC,$FF64     ;
 $BA95 LD (DE),A       ;
 $BA96 INC C           ;
 $BA97 LD L,B          ;
 $BA98 INC B           ;
 $BA99 DEC E           ;
 $BA9A LD DE,$0638     ;
 $BA9D RST $38         ;
 $BA9E RST $38         ;
 $BA9F RST $38         ;
 $BAA0 RST $38         ;
 $BAA1 RST $38         ;
 $BAA2 NOP             ;
 $BAA3 NOP             ;
 $BAA4 NOP             ;
 $BAA5 NOP             ;
 $BAA6 NOP             ;
 $BAA7 NOP             ;
 $BAA8 NOP             ;
 $BAA9 NOP             ;
 $BAAA NOP             ;
 $BAAB NOP             ;
 $BAAC NOP             ;
 $BAAD NOP             ;
 $BAAE NOP             ;
 $BAAF NOP             ;
 $BAB0 NOP             ;
 $BAB1 NOP             ;
 $BAB2 NOP             ;
 $BAB3 NOP             ;
 $BAB4 NOP             ;
 $BAB5 NOP             ;
 $BAB6 NOP             ;
 $BAB7 NOP             ;
 $BAB8 NOP             ;
 $BAB9 NOP             ;
 $BABA NOP             ;
 $BABB NOP             ;
 $BABC NOP             ;
 $BABD NOP             ;
 $BABE NOP             ;
 $BABF NOP             ;
 $BAC0 NOP             ;
 $BAC1 NOP             ;
 $BAC2 NOP             ;
 $BAC3 NOP             ;
 $BAC4 NOP             ;
 $BAC5 NOP             ;
 $BAC6 NOP             ;
 $BAC7 NOP             ;
 $BAC8 NOP             ;
 $BAC9 NOP             ;
 $BACA NOP             ;
 $BACB NOP             ;
 $BACC NOP             ;
 $BACD NOP             ;
 $BACE NOP             ;
 $BACF NOP             ;
 $BAD0 NOP             ;
 $BAD1 NOP             ;
 $BAD2 NOP             ;
 $BAD3 NOP             ;
 $BAD4 NOP             ;
 $BAD5 NOP             ;
 $BAD6 NOP             ;
 $BAD7 NOP             ;
 $BAD8 NOP             ;
 $BAD9 NOP             ;
 $BADA NOP             ;
 $BADB NOP             ;
 $BADC NOP             ;
 $BADD NOP             ;
 $BADE NOP             ;
 $BADF NOP             ;
 $BAE0 NOP             ;
 $BAE1 NOP             ;
 $BAE2 NOP             ;
 $BAE3 NOP             ;
 $BAE4 NOP             ;
 $BAE5 NOP             ;
 $BAE6 NOP             ;
 $BAE7 NOP             ;
 $BAE8 NOP             ;
 $BAE9 NOP             ;
 $BAEA NOP             ;
 $BAEB NOP             ;
 $BAEC NOP             ;
 $BAED NOP             ;
 $BAEE NOP             ;
 $BAEF NOP             ;
 $BAF0 NOP             ;
 $BAF1 NOP             ;
 $BAF2 NOP             ;
 $BAF3 NOP             ;
 $BAF4 NOP             ;
 $BAF5 NOP             ;
 $BAF6 NOP             ;
 $BAF7 NOP             ;
 $BAF8 NOP             ;
 $BAF9 NOP             ;
 $BAFA NOP             ;
 $BAFB NOP             ;
 $BAFC NOP             ;
 $BAFD NOP             ;
 $BAFE NOP             ;
 $BAFF NOP             ;
 $BB00 NOP             ;
 $BB01 NOP             ;
 $BB02 NOP             ;
 $BB03 NOP             ;
 $BB04 NOP             ;
 $BB05 NOP             ;
 $BB06 NOP             ;
 $BB07 NOP             ;
 $BB08 NOP             ;
 $BB09 NOP             ;
 $BB0A NOP             ;
 $BB0B NOP             ;
 $BB0C NOP             ;
 $BB0D NOP             ;
 $BB0E NOP             ;
 $BB0F NOP             ;
 $BB10 NOP             ;
 $BB11 NOP             ;
 $BB12 NOP             ;
 $BB13 NOP             ;
 $BB14 NOP             ;
 $BB15 NOP             ;
 $BB16 NOP             ;
 $BB17 NOP             ;
 $BB18 NOP             ;
 $BB19 NOP             ;
 $BB1A NOP             ;
 $BB1B NOP             ;
 $BB1C NOP             ;
 $BB1D NOP             ;
 $BB1E NOP             ;
 $BB1F NOP             ;
 $BB20 NOP             ;
 $BB21 NOP             ;
 $BB22 NOP             ;
 $BB23 NOP             ;
 $BB24 NOP             ;
 $BB25 NOP             ;
 $BB26 NOP             ;
 $BB27 NOP             ;
 $BB28 NOP             ;
 $BB29 NOP             ;
 $BB2A NOP             ;
 $BB2B NOP             ;
 $BB2C NOP             ;

; Pirate 1 Data
@label=Data_Pirate1
g$BB2D DEFB $00                             ; State?
 $BB2E DEFB $00                             ; Y co-ordinate.
 $BB2F DEFB $00                             ; Y co-ordinate.
 $BB30 DEFB $00
 $BB31 DEFB $00                             ; Moving in direction #TABLE
                                            ; (default,centre,centre) { =h Byte
                                            ; | =h Direction } { #N$01 | Left }
                                            ; { #N$FF | Right } TABLE#
 $BB32 DEFB $00
 $BB33 DEFB $00
 $BB34 DEFB $00                             ; Width.
 $BB35 DEFB $00                             ; Height.
 $BB36 DEFB $00                             ; Colour.
 $BB37 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB3F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB47 DEFB $00,$00,$00,$00,$00,$00,$00

; Pirate 2 Data
@label=Data_Pirate2
g$BB4E DEFB $00                             ; State?
 $BB4F DEFB $00                             ; Y co-ordinate.
 $BB50 DEFB $00                             ; Y co-ordinate.
 $BB51 DEFB $00
 $BB52 DEFB $00                             ; Moving in direction #TABLE
                                            ; (default,centre,centre) { =h Byte
                                            ; | =h Direction } { #N$01 | Left }
                                            ; { #N$FF | Right } TABLE#
 $BB53 DEFB $00
 $BB54 DEFB $00
 $BB55 DEFB $00                             ; Width.
 $BB56 DEFB $00                             ; Height.
 $BB57 DEFB $00                             ; Colour.
 $BB58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB78 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Pirate 3 Data
@label=Data_Pirate3
g$BB80 DEFB $00                             ; State?
 $BB81 DEFB $00                             ; Y co-ordinate.
 $BB82 DEFB $00                             ; Y co-ordinate.
 $BB83 DEFB $00
 $BB84 DEFB $00                             ; Moving in direction #TABLE
                                            ; (default,centre,centre) { =h Byte
                                            ; | =h Direction } { #N$01 | Left }
                                            ; { #N$FF | Right } TABLE#
 $BB85 DEFB $00
 $BB86 DEFB $00
 $BB87 DEFB $00                             ; Width.
 $BB88 DEFB $00                             ; Height.
 $BB89 DEFB $00                             ; Colour.
 $BB8A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB92 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BB9A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBA2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBAA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBB2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBBA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBC2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBCA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBD2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBDA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBE2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBEA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBF2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BBFA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC02 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC0A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC12 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC1A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC22 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC2A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC32 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC3A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC42 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC4A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC52 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC5A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC62 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC6A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC72 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC7A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC82 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC8A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC92 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BC9A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCA2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCAA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCB2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCBA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCC2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCCA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCD2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCDA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCE2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCEA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCF2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BCFA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD02 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD0A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD12 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD1A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD22 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD2A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD32 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD3A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD42 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD4A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD52 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD5A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD62 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD6A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD72 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD7A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD82 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD8A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD92 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BD9A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDA2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDAA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDB2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDBA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDC2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDCA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDD2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDDA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDE2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDEA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDF2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BDFA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE02 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE0A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE12 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE1A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE22 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE2A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE32 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE3A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE42 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE4A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE52 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE5A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE62 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE6A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE72 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE7A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE82 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE8A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE92 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BE9A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BEA2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BEAA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BEB2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BEBA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BEC2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BECA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BED2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BEDA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BEE2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BEEA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BEF2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BEFA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BF02 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $BF0A DEFB $00,$00,$00,$00,$00,$00

; Data block at BF10
b$BF10 DEFB $43,$20,$48,$4C,$0D,$43,$50,$20
 $BF18 DEFB $43,$0D,$4A,$52,$20,$5A,$2C,$50
 $BF20 DEFB $4F,$53,$53,$32,$0D,$49,$4E,$43
 $BF28 DEFB $20,$48,$4C,$0D,$4A,$52,$20,$4C
 $BF30 DEFB $36,$0D,$50,$4F,$53,$53,$32,$3A
 $BF38 DEFB $0D,$4C,$44,$20,$41,$2C,$28,$48
 $BF40 DEFB $4C,$29,$0D,$49,$4E,$43,$20,$48
 $BF48 DEFB $4C,$0D,$44,$45,$43,$20,$41,$0D
 $BF50 DEFB $44,$45,$43,$20,$41,$0D,$43,$50
 $BF58 DEFB $20,$42,$0D,$4A,$52,$20,$4E,$5A
 $BF60 DEFB $2C,$4C,$36,$0D,$4C,$44,$20,$28
 $BF68 DEFB $49,$58,$2B,$31,$39,$29,$2C,$41
 $BF70 DEFB $0D,$41,$44,$44,$20,$41,$2C,$35
 $BF78 DEFB $0D,$4C,$44,$20,$28,$49,$58,$2B
 $BF80 DEFB $31,$38,$29,$2C,$41,$0D,$49,$4E
 $BF88 DEFB $43,$20,$48,$4C,$0D,$4F,$4B,$31
 $BF90 DEFB $32,$3A,$0D,$4C,$44,$20,$41,$2C
 $BF98 DEFB $28,$49,$58,$2B,$31,$37,$29,$0D
 $BFA0 DEFB $43,$50,$20,$33,$0D,$4A,$52,$20
 $BFA8 DEFB $5A,$2C,$4F,$4B,$39,$0D,$44,$42
 $BFB0 DEFB $20,$32,$32,$31,$2C,$35,$34,$2C
 $BFB8 DEFB $36,$2C,$31,$35,$32,$0D,$44,$42
 $BFC0 DEFB $20,$32,$32,$31,$2C,$35,$34,$2C
 $BFC8 DEFB $31,$37,$2C,$33,$0D,$4F,$4B,$39
 $BFD0 DEFB $3A,$0D,$4C,$44,$20,$41,$2C,$28
 $BFD8 DEFB $49,$58,$2B,$36,$29,$0D,$53,$55
 $BFE0 DEFB $42,$20,$36,$0D,$4C,$44,$20,$28
 $BFE8 DEFB $49,$58,$2B,$36,$29,$2C,$41,$0D
 $BFF0 DEFB $43,$50,$20,$31,$32,$38,$2D,$36
 $BFF8 DEFB $0D,$4A,$52,$20,$4E,$5A,$2C,$4F
 $C000 DEFB $4B,$38,$0D,$44,$42,$20,$32,$32
 $C008 DEFB $31,$2C,$35,$34,$2C,$36,$2C,$31
 $C010 DEFB $34,$36,$0D,$4F,$4B,$38,$3A,$0D
 $C018 DEFB $44,$42,$20,$32,$32,$31,$2C,$35
 $C020 DEFB $34,$2C,$35,$2C,$31,$3B,$4D,$4F
 $C028 DEFB $56,$45,$55,$50,$0D,$44,$42,$20
 $C030 DEFB $32,$32,$31,$2C,$35,$34,$2C,$32
 $C038 DEFB $2C,$33,$3B,$43,$45,$4E,$54,$0D
 $C040 DEFB $52,$45,$54,$0D,$46,$49,$52,$45
 $C048 DEFB $3A,$0D,$3B,$54,$45,$53,$54,$20
 $C050 DEFB $46,$4F,$52,$20,$45,$4F,$44,$4F
 $C058 DEFB $4F,$52,$0D,$4C,$44,$20,$49,$58
 $C060 DEFB $2C,$28,$32,$33,$35,$31,$30,$29
 $C068 DEFB $3B,$45,$4F,$44,$41,$54,$0D,$4C
 $C070 DEFB $44,$20,$42,$43,$2C,$28,$4D,$41
 $C078 DEFB $4E,$53,$54,$29,$0D,$48,$32,$3A
 $C080 DEFB $0D,$4C,$44,$20,$41,$2C,$28,$49
 $C088 DEFB $58,$2B,$30,$29,$0D,$43,$50,$20
 $C090 DEFB $32,$35,$35,$0D,$52,$45,$54,$20
 $C098 DEFB $5A,$3B,$45,$4E,$44,$20,$4F,$46
 $C0A0 DEFB $20,$44,$4F,$4F,$52,$53,$0D,$53
 $C0A8 DEFB $55,$42,$20,$43,$0D,$43,$50,$20
 $C0B0 DEFB $32,$0D,$4A,$52,$20,$4E,$43,$2C
 $C0B8 DEFB $4E,$38,$0D,$4C,$44,$20,$41,$2C
 $C0C0 DEFB $28,$49,$58,$2B,$31,$29,$0D,$44
 $C0C8 DEFB $45,$43,$20,$41,$0D,$43,$50,$20
 $C0D0 DEFB $42,$0D,$4A,$52,$20,$5A,$2C,$44
 $C0D8 DEFB $52,$0D,$4E,$38,$3A,$0D,$4C,$44
 $C0E0 DEFB $20,$44,$45,$2C,$34,$0D,$41,$44
 $C0E8 DEFB $44,$20,$49,$58,$2C,$44,$45,$0D
 $C0F0 DEFB $4A,$52,$20,$48,$32,$0D,$44,$52
 $C0F8 DEFB $3A,$0D,$4C,$44,$20,$41,$2C,$28
 $C100 DEFB $49,$58,$2B,$33,$29,$0D,$43,$50
 $C108 DEFB $20,$32,$31,$0D,$43,$41,$4C,$4C
 $C110 DEFB $20,$5A,$2C,$53,$45,$41,$3B,$4A
 $C118 DEFB $4F,$48,$4E,$0D,$43,$48,$3A,$3B
 $C120 DEFB $43,$48,$41,$4E,$47,$45,$20,$53
 $C128 DEFB $43,$52,$45,$45,$4E,$0D,$44,$42
 $C130 DEFB $20,$35,$30,$0D,$44,$57,$20,$32
 $C138 DEFB $33,$35,$30,$37,$3B,$53,$43,$4E
 $C140 DEFB $4F,$0D,$4C,$44,$20,$41,$2C,$30
 $C148 DEFB $0D,$44,$42,$20,$35,$30,$0D,$44
 $C150 DEFB $57,$20,$4D,$41,$4E,$53,$54,$2B
 $C158 DEFB $31,$36,$3B,$4B,$45,$59,$20,$43
 $C160 DEFB $41,$52,$52,$49,$45,$44,$0D,$44
 $C168 DEFB $42,$20,$35,$30,$0D,$44,$57,$20
 $C170 DEFB $45,$53,$54,$3B,$5A,$45,$52,$4F
 $C178 DEFB $20,$45,$58,$50,$0D,$44,$42,$20
 $C180 DEFB $35,$30,$0D,$44,$57,$20,$42,$4D
 $C188 DEFB $53,$54,$2B,$31,$30,$3B,$5A,$45
 $C190 DEFB $52,$4F,$20,$42,$4D,$42,$0D,$44
 $C198 DEFB $42,$20,$35,$30,$0D,$44,$57,$20
 $C1A0 DEFB $52,$53,$3B,$5A,$45,$52,$4F,$20
 $C1A8 DEFB $52,$41,$54,$0D,$4C,$44,$20,$41
 $C1B0 DEFB $2C,$31,$0D,$44,$42,$20,$35,$30
 $C1B8 DEFB $0D,$44,$57,$20,$4D,$41,$4E,$53
 $C1C0 DEFB $54,$2B,$31,$37,$0D,$4C,$44,$20
 $C1C8 DEFB $41,$2C,$31,$35,$32,$0D,$44,$42
 $C1D0 DEFB $20,$35,$30,$0D,$44,$57,$20,$4D
 $C1D8 DEFB $41,$4E,$53,$54,$2B,$36,$0D,$43
 $C1E0 DEFB $41,$4C,$4C,$20,$53,$43,$0D,$43
 $C1E8 DEFB $41,$4C,$4C,$20,$49,$46,$0D,$52
 $C1F0 DEFB $45,$54,$0D,$4D,$49,$58,$3A,$0D
 $C1F8 DEFB $3B,$43,$41,$4C,$43,$53,$20,$4D
 $C200 DEFB $4F,$56,$45,$20,$41,$4E,$44,$20
 $C208 DEFB $52,$45,$54,$53,$20,$57,$49,$54
 $C210 DEFB $48,$0D,$3B,$42,$43,$20,$4C,$4F
 $C218 DEFB $41,$44,$45,$44,$20,$0D,$3B,$44
 $C220 DEFB $45,$20,$48,$41,$56,$45,$20,$42
 $C228 DEFB $50,$49,$58,$20,$41,$4E,$44,$20
 $C230 DEFB $43,$50,$49,$58,$0D,$4C,$44,$20
 $C238 DEFB $43,$2C,$28,$49,$58,$2B,$30,$29
 $C240 DEFB $0D,$4C,$44,$20,$42,$2C,$28,$49
 $C248 DEFB $58,$2B,$31,$29,$0D,$4C,$44,$20
 $C250 DEFB $45,$2C,$28,$49,$58,$2B,$32,$29
 $C258 DEFB $0D,$4C,$44,$20,$44,$2C,$28,$49
 $C260 DEFB $58,$2B,$33,$29,$0D,$4C,$44,$20
 $C268 DEFB $41,$2C,$28,$49,$58,$2B,$34,$29
 $C270 DEFB $0D,$41,$44,$44,$20,$41,$2C,$45
 $C278 DEFB $0D,$43,$50,$20,$31,$32,$38,$0D
 $C280 DEFB $4A,$52,$20,$4E,$43,$2C,$44,$43
 $C288 DEFB $0D,$43,$50,$20,$20,$34,$0D,$4A
 $C290 DEFB $52,$20,$43,$2C,$4E,$4F,$43,$0D
 $C298 DEFB $49,$4E,$43,$20,$43,$0D,$49,$4E
 $C2A0 DEFB $43,$20,$43,$0D,$44,$43,$3A,$0D
 $C2A8 DEFB $44,$45,$43,$20,$43,$0D,$41,$4E
 $C2B0 DEFB $44,$20,$33,$0D,$4E,$4F,$43,$3A
 $C2B8 DEFB $0D,$4C,$44,$20,$45,$2C,$41,$0D
 $C2C0 DEFB $3B,$0D,$4C,$44,$20,$41,$2C,$28
 $C2C8 DEFB $49,$58,$2B,$35,$29,$0D,$41,$44
 $C2D0 DEFB $44,$20,$41,$2C,$44,$0D,$43,$50
 $C2D8 DEFB $20,$31,$32,$38,$0D,$4A,$52,$20
 $C2E0 DEFB $4E,$43,$2C,$44,$45,$42,$0D,$43
 $C2E8 DEFB $50,$20,$34,$0D,$4A,$52,$20,$43
 $C2F0 DEFB $2C,$4E,$4F,$42,$0D,$49,$4E,$43
 $C2F8 DEFB $20,$42,$0D,$49,$4E,$43,$20,$42
 $C300 DEFB $0D,$44,$45,$42,$3A,$0D,$44,$45
 $C308 DEFB $43,$20,$42,$0D,$41,$4E,$44,$20
 $C310 DEFB $33,$0D,$4E,$4F,$42,$3A,$0D,$4C
 $C318 DEFB $44,$20,$44,$2C,$41,$0D,$52,$45
 $C320 DEFB $54,$0D,$4F,$50,$53,$51,$3A,$0D
 $C328 DEFB $3B,$44,$49,$20,$4A,$4F,$48,$4E
 $C330 DEFB $0D,$3B,$0D,$3B,$43,$52,$45,$41
 $C338 DEFB $54,$45,$20,$41,$43,$53,$0D,$4C
 $C340 DEFB $44,$20,$44,$45,$2C,$41,$43,$53
 $C348 DEFB $0D,$4C,$44,$20,$48,$4C,$2C,$4F
 $C350 DEFB $31,$32,$38,$0D,$4C,$44,$20,$42
 $C358 DEFB $43,$2C,$31,$32,$38,$0D,$4C,$44
 $C360 DEFB $49,$52,$0D,$3B,$0D,$4C,$44,$20
 $C368 DEFB $41,$2C,$31,$36,$0D,$52,$53,$54
 $C370 DEFB $20,$31,$36,$0D,$4C,$44,$20,$41
 $C378 DEFB $2C,$28,$49,$58,$2B,$39,$29,$0D
 $C380 DEFB $52,$53,$54,$20,$31,$36,$0D,$3B
 $C388 DEFB $0D,$3B,$0D,$3B,$0D,$3B,$4E,$4F
 $C390 DEFB $57,$20,$44,$4F,$20,$44,$55,$4D
 $C398 DEFB $50,$0D,$4C,$44,$20,$48,$4C,$2C
 $C3A0 DEFB $28,$32,$33,$36,$30,$36,$29,$0D
 $C3A8 DEFB $50,$55,$53,$48,$20,$48,$4C,$0D
 $C3B0 DEFB $50,$55,$53,$48,$20,$49,$59,$0D
 $C3B8 DEFB $50,$55,$53,$48,$20,$49,$58,$0D
 $C3C0 DEFB $3B,$41,$44,$44,$20,$48,$4C,$20
 $C3C8 DEFB $28,$38,$2A,$43,$48,$41,$52,$29
 $C3D0 DEFB $0D,$4C,$44,$20,$45,$2C,$28,$49
 $C3D8 DEFB $58,$2B,$36,$29,$0D,$4C,$44,$20
 $C3E0 DEFB $44,$2C,$30,$0D,$53,$4C,$41,$20
 $C3E8 DEFB $45,$0D,$52,$4C,$20,$44,$0D,$53
 $C3F0 DEFB $4C,$41,$20,$45,$0D,$52,$4C,$20
 $C3F8 DEFB $44,$0D,$53,$4C,$41,$20,$45,$0D
 $C400 DEFB $52,$4C,$20,$44,$0D,$41,$44,$44
 $C408 DEFB $20,$48,$4C,$2C,$44,$45,$0D,$3B
 $C410 DEFB $48,$4C,$20,$50,$4F,$49,$4E,$54
 $C418 DEFB $53,$20,$54,$4F,$20,$46,$49,$52
 $C420 DEFB $53,$54,$20,$43,$48,$41,$52,$0D
 $C428 DEFB $3B,$0D,$4C,$44,$20,$42,$2C,$28
 $C430 DEFB $49,$58,$2B,$32,$29,$0D,$49,$4E
 $C438 DEFB $43,$20,$42,$0D,$4C,$44,$20,$43
 $C440 DEFB $2C,$30,$0D,$4C,$44,$20,$28,$51
 $C448 DEFB $29,$2C,$42,$43,$0D,$3B,$0D,$4C
 $C450 DEFB $44,$20,$45,$2C,$28,$49,$58,$2B
 $C458 DEFB $37,$29,$0D,$4C,$44,$20,$44,$2C
 $C460 DEFB $28,$49,$58,$2B,$38,$29,$0D,$3B
 $C468 DEFB $43,$41,$4C,$43,$20,$38,$2A,$44
 $C470 DEFB $0D,$4C,$44,$20,$41,$2C,$44,$0D
 $C478 DEFB $49,$4E,$43,$20,$41,$3B,$4A,$4F
 $C480 DEFB $48,$4E,$0D,$53,$4C,$41,$20,$41
 $C488 DEFB $0D,$53,$4C,$41,$20,$41,$0D,$53
 $C490 DEFB $4C,$41,$20,$41,$0D,$4C,$44,$20
 $C498 DEFB $43,$2C,$41,$0D,$4C,$44,$20,$42
 $C4A0 DEFB $2C,$30,$0D,$3B,$44,$49,$20,$4A
 $C4A8 DEFB $4F,$48,$4E,$0D,$4C,$44,$20,$49
 $C4B0 DEFB $59,$2C,$41,$43,$53,$2B,$38,$0D
 $C4B8 DEFB $41,$44,$44,$20,$49,$59,$2C,$42
 $C4C0 DEFB $43,$0D,$3B,$0D,$3B,$0D,$3B,$43
 $C4C8 DEFB $41,$4C,$43,$20,$45,$2A,$38,$0D
 $C4D0 DEFB $4C,$44,$20,$43,$2C,$45,$0D,$53
 $C4D8 DEFB $4C,$41,$20,$43,$0D,$53,$4C,$41
 $C4E0 DEFB $20,$43,$0D,$53,$4C,$41,$20,$43
 $C4E8 DEFB $0D,$4C,$44,$20,$42,$2C,$30,$0D
 $C4F0 DEFB $4C,$44,$20,$28,$51,$2B,$31,$30
 $C4F8 DEFB $29,$2C,$42,$43,$0D,$3B,$0D,$4C
 $C500 DEFB $44,$20,$49,$58,$2C,$41,$43,$53
 $C508 DEFB $2B,$38,$0D,$4F,$4C,$3A,$0D,$50
 $C510 DEFB $55,$53,$48,$20,$48,$4C,$0D,$50
 $C518 DEFB $55,$53,$48,$20,$44,$45,$0D,$49
 $C520 DEFB $4C,$3A,$0D,$50,$55,$53,$48,$20
 $C528 DEFB $48,$4C,$0D,$4C,$44,$20,$42,$2C
 $C530 DEFB $38,$0D,$52,$4F,$54,$3A,$0D,$50
 $C538 DEFB $55,$53,$48,$20,$42,$43,$0D,$4C
 $C540 DEFB $44,$20,$41,$2C,$28,$48,$4C,$29
 $C548 DEFB $0D,$4C,$44,$20,$42,$43,$2C,$28
 $C550 DEFB $51,$29,$0D,$49,$41,$43,$53,$3A
 $C558 DEFB $0D,$53,$4C,$41,$20,$41,$0D,$52
 $C560 DEFB $4C,$20,$43,$0D,$53,$4C,$41,$20
 $C568 DEFB $41,$0D,$52,$4C,$20,$43,$0D,$44
 $C570 DEFB $4A,$4E,$5A,$20,$49,$41,$43,$53
 $C578 DEFB $0D,$4C,$44,$20,$28,$49,$59,$2B
 $C580 DEFB $30,$29,$2C,$41,$0D,$4C,$44,$20
 $C588 DEFB $41,$2C,$43,$0D,$4F,$52,$20,$28
 $C590 DEFB $49,$58,$2B,$30,$29,$0D,$4C,$44
 $C598 DEFB $20,$28,$49,$58,$2B,$30,$29,$2C
 $C5A0 DEFB $41,$0D,$49,$4E,$43,$20,$48,$4C
 $C5A8 DEFB $0D,$49,$4E,$43,$20,$49,$58,$0D
 $C5B0 DEFB $49,$4E,$43,$20,$49,$59,$0D,$50
 $C5B8 DEFB $4F,$50,$20,$42,$43,$0D,$44,$4A
 $C5C0 DEFB $4E,$5A,$20,$52,$4F,$54,$0D,$50
 $C5C8 DEFB $4F,$50,$20,$48,$4C,$0D,$4C,$44
 $C5D0 DEFB $20,$42,$43,$2C,$28,$51,$2B,$31
 $C5D8 DEFB $30,$29,$0D,$41,$44,$44,$20,$48
 $C5E0 DEFB $4C,$2C,$42,$43,$0D,$44,$45,$43
 $C5E8 DEFB $20,$44,$0D,$4A,$52,$20,$4E,$5A
 $C5F0 DEFB $2C,$49,$4C,$0D,$50,$4F,$50,$20
 $C5F8 DEFB $44,$45,$0D,$4C,$44,$20,$42,$43
 $C600 DEFB $2C,$38,$0D,$41,$44,$44,$20,$49
 $C608 DEFB $58,$2C,$42,$43,$0D,$41,$44,$44
 $C610 DEFB $20,$49,$59,$2C,$42,$43,$0D,$50
 $C618 DEFB $4F,$50,$20,$48,$4C,$0D,$41,$44
 $C620 DEFB $44,$20,$48,$4C,$2C,$42,$43,$0D
 $C628 DEFB $44,$45,$43,$20,$45,$0D,$4A,$52
 $C630 DEFB $20,$4E,$5A,$2C,$4F,$4C,$0D,$3B
 $C638 DEFB $0D,$3B,$43,$41,$4C,$43,$20,$43
 $C640 DEFB $48,$41,$52,$20,$53,$45,$54,$0D
 $C648 DEFB $4C,$44,$20,$48,$4C,$2C,$41,$43
 $C650 DEFB $53,$2D,$32,$35,$36,$0D,$50,$4F
 $C658 DEFB $50,$20,$49,$58,$0D,$4C,$44,$20
 $C660 DEFB $41,$2C,$28,$49,$58,$2B,$33,$29
 $C668 DEFB $0D,$49,$4E,$43,$20,$41,$0D,$53
 $C670 DEFB $4C,$41,$20,$41,$0D,$4C,$44,$20
 $C678 DEFB $45,$2C,$41,$0D,$4C,$44,$20,$44
 $C680 DEFB $2C,$30,$0D,$41,$44,$44,$20,$48
 $C688 DEFB $4C,$2C,$44,$45,$0D,$4C,$44,$20
 $C690 DEFB $28,$32,$33,$36,$30,$36,$29,$2C
 $C698 DEFB $48,$4C,$0D,$4C,$44,$20,$44,$2C
 $C6A0 DEFB $28,$49,$58,$2B,$38,$29,$0D,$4C
 $C6A8 DEFB $44,$20,$45,$2C,$28,$49,$58,$2B
 $C6B0 DEFB $37,$29,$0D,$4C,$44,$20,$41,$2C
 $C6B8 DEFB $28,$49,$58,$2B,$32,$29,$0D,$43
 $C6C0 DEFB $50,$20,$33,$0D,$4A,$52,$20,$5A
 $C6C8 DEFB $2C,$4E,$49,$45,$0D,$49,$4E,$43
 $C6D0 DEFB $20,$45,$0D,$4E,$49,$45,$3A,$0D
 $C6D8 DEFB $49,$4E,$43,$20,$44,$0D,$4C,$44
 $C6E0 DEFB $20,$41,$2C,$44,$0D,$44,$42,$20
 $C6E8 DEFB $35,$30,$0D,$44,$57,$20,$51,$2B
 $C6F0 DEFB $31,$32,$0D,$4C,$44,$20,$41,$2C
 $C6F8 DEFB $33,$0D,$43,$50,$20,$28,$49,$58
 $C700 DEFB $2B,$33,$29,$0D,$4A,$52,$20,$4E
 $C708 DEFB $5A,$2C,$4C,$33,$0D,$44,$45,$43
 $C710 DEFB $20,$44,$0D,$4C,$33,$3A,$0D,$4C
 $C718 DEFB $44,$20,$42,$2C,$28,$49,$58,$2B
 $C720 DEFB $31,$29,$0D,$4C,$44,$20,$43,$2C
 $C728 DEFB $28,$49,$58,$2B,$30,$29,$0D,$4C
 $C730 DEFB $44,$20,$41,$2C,$44,$0D,$4C,$44
 $C738 DEFB $20,$41,$2C,$33,$32,$0D,$50,$4F
 $C740 DEFB $50,$20,$49,$59,$0D,$3B,$45,$49
 $C748 DEFB $20,$4A,$4F,$48,$4E,$0D,$3B,$50
 $C750 DEFB $52,$49,$4E,$54,$20,$52,$4F,$55
 $C758 DEFB $54,$49,$4E,$45,$0D,$4C,$44,$20
 $C760 DEFB $41,$2C,$33,$32,$0D,$50,$31,$3A
 $C768 DEFB $0D,$50,$55,$53,$48,$20,$41,$46
 $C770 DEFB $0D,$50,$55,$53,$48,$20,$44,$45
 $C778 DEFB $0D,$50,$55,$53,$48,$20,$42,$43
 $C780 DEFB $0D,$4C,$44,$20,$44,$2C,$41,$0D
 $C788 DEFB $4C,$44,$20,$41,$2C,$43,$0D,$43
 $C790 DEFB $50,$20,$33,$34,$0D,$4A,$52,$20
 $C798 DEFB $4E,$43,$2C,$4E,$46,$47,$0D,$4E
 $C7A0 DEFB $47,$33,$3A,$0D,$50,$55,$53,$48
 $C7A8 DEFB $20,$44,$45,$0D,$43,$41,$4C,$4C
 $C7B0 DEFB $20,$30,$44,$44,$39,$48,$0D,$50
 $C7B8 DEFB $4F,$50,$20,$44,$45,$0D,$50,$4F
 $C7C0 DEFB $50,$20,$42,$43,$0D,$50,$55,$53
 $C7C8 DEFB $48,$20,$42,$43,$0D,$4C,$44,$20
 $C7D0 DEFB $41,$2C,$44,$0D,$49,$50,$4C,$3A
 $C7D8 DEFB $0D,$43,$41,$4C,$4C,$20,$52,$53
 $C7E0 DEFB $54,$0D,$4C,$44,$20,$41,$2C,$43
 $C7E8 DEFB $0D,$43,$50,$20,$32,$0D,$43,$41
 $C7F0 DEFB $4C,$4C,$20,$5A,$2C,$52,$4E,$47
 $C7F8 DEFB $0D,$44,$45,$43,$20,$43,$0D,$4C
 $C800 DEFB $44,$20,$41,$2C,$28,$51,$2B,$31
 $C808 DEFB $32,$29,$0D,$41,$44,$44,$20,$41
 $C810 DEFB $2C,$44,$0D,$4C,$44,$20,$44,$2C
 $C818 DEFB $41,$0D,$44,$45,$43,$20,$45,$0D
 $C820 DEFB $4A,$52,$20,$4E,$5A,$2C,$49,$50
 $C828 DEFB $4C,$0D,$50,$4F,$50,$20,$42,$43
 $C830 DEFB $0D,$50,$4F,$50,$20,$44,$45,$0D
 $C838 DEFB $50,$4F,$50,$20,$41,$46,$0D,$44
 $C840 DEFB $45,$43,$20,$42,$0D,$49,$4E,$43
 $C848 DEFB $20,$41,$0D,$44,$45,$43,$20,$44
 $C850 DEFB $0D,$4A,$52,$20,$4E,$5A,$2C,$50
 $C858 DEFB $31,$0D,$4E,$47,$32,$3A,$0D,$50
 $C860 DEFB $4F,$50,$20,$48,$4C,$0D,$4C,$44
 $C868 DEFB $20,$28,$32,$33,$36,$30,$36,$29
 $C870 DEFB $2C,$48,$4C,$0D,$3B,$45,$49,$20
 $C878 DEFB $4A,$4F,$48,$4E,$0D,$52,$45,$54
 $C880 DEFB $0D,$52,$4E,$47,$3A,$0D,$44,$45
 $C888 DEFB $43,$20,$45,$0D,$50,$55,$53,$48
 $C890 DEFB $20,$41,$46,$0D,$49,$4E,$43,$20
 $C898 DEFB $45,$0D,$50,$4F,$50,$20,$41,$46
 $C8A0 DEFB $0D,$52,$45,$54,$20,$5A,$0D,$44
 $C8A8 DEFB $45,$43,$20,$45,$0D,$4C,$44,$20
 $C8B0 DEFB $41,$2C,$28,$51,$2B,$31,$32,$29
 $C8B8 DEFB $0D,$41,$44,$44,$20,$41,$2C,$44
 $C8C0 DEFB $0D,$4C,$44,$20,$44,$2C,$41,$0D
 $C8C8 DEFB $4A,$52,$20,$52,$4E,$47,$0D,$4E
 $C8D0 DEFB $46,$47,$3A,$0D,$4C,$44,$20,$41
 $C8D8 DEFB $2C,$28,$51,$2B,$31,$32,$29,$0D
 $C8E0 DEFB $41,$44,$44,$20,$41,$2C,$44,$0D
 $C8E8 DEFB $4C,$44,$20,$44,$2C,$41,$0D,$44
 $C8F0 DEFB $45,$43,$20,$45,$0D,$4A,$50,$20
 $C8F8 DEFB $5A,$2C,$4E,$47,$34,$0D,$44,$45
 $C900 DEFB $43,$20,$43,$0D,$4C,$44,$20,$41
 $C908 DEFB $2C,$43,$0D,$43,$50,$20,$33,$34
 $C910 DEFB $0D,$4A,$52,$20,$4E,$43,$2C,$4E
 $C918 DEFB $46,$47,$0D,$4A,$50,$20,$4E,$47
 $C920 DEFB $33,$0D,$4E,$47,$34,$3A,$0D,$50
 $C928 DEFB $4F,$50,$20,$42,$43,$0D,$50,$4F
 $C930 DEFB $50,$20,$42,$43,$0D,$50,$4F,$50
 $C938 DEFB $20,$42,$43,$0D,$4A,$50,$20,$4E
 $C940 DEFB $47,$32,$0D,$4D,$4F,$50,$3A,$0D
 $C948 DEFB $4C,$44,$20,$41,$2C,$28,$51,$2B
 $C950 DEFB $32,$29,$0D,$43,$50,$20,$30,$0D
 $C958 DEFB $52,$45,$54,$20,$5A,$0D,$4C,$44
 $C960 DEFB $20,$48,$4C,$2C,$4E,$53,$47,$2B
 $C968 DEFB $32,$37,$33,$36,$2D,$32,$35,$36
 $C970 DEFB $3B,$4F,$50,$47,$52,$41,$0D,$4C
 $C978 DEFB $44,$20,$28,$32,$33,$36,$30,$36
 $C980 DEFB $29,$2C,$48,$4C,$0D,$4C,$44,$20
 $C988 DEFB $49,$58,$2C,$28,$32,$33,$35,$31
 $C990 DEFB $38,$29,$3B,$4F,$50,$53,$54,$0D
 $C998 DEFB $4F,$50,$4C,$3A,$0D,$4C,$44,$20
 $C9A0 DEFB $41,$2C,$28,$49,$58,$2B,$30,$29
 $C9A8 DEFB $0D,$43,$50,$20,$32,$35,$35,$0D
 $C9B0 DEFB $52,$45,$54,$20,$5A,$0D,$4C,$44
 $C9B8 DEFB $20,$41,$2C,$31,$36,$0D,$52,$53
 $C9C0 DEFB $54,$20,$31,$36,$0D,$4C,$44,$20
 $C9C8 DEFB $41,$2C,$28,$49,$58,$2B,$39,$29
 $C9D0 DEFB $0D,$52,$53,$54,$20,$31,$36,$0D
 $C9D8 DEFB $3B,$4D,$4F,$56,$45,$20,$4F,$50
 $C9E0 DEFB $50,$4F,$4E,$45,$4E,$54,$0D,$4C
 $C9E8 DEFB $44,$20,$41,$2C,$28,$49,$58,$2B
 $C9F0 DEFB $36,$29,$0D,$41,$44,$44,$20,$41
 $C9F8 DEFB $2C,$36,$0D,$4C,$44,$20,$28,$49
 $CA00 DEFB $58,$2B,$36,$29,$2C,$41,$0D,$43
 $CA08 DEFB $50,$20,$37,$34,$0D,$4A,$52,$20
 $CA10 DEFB $4E,$5A,$2C,$4E,$31,$0D,$44,$42
 $CA18 DEFB $20,$32,$32,$31,$2C,$35,$34,$2C
 $CA20 DEFB $36,$2C,$33,$32,$0D,$4E,$31,$3A
 $CA28 DEFB $0D,$43,$50,$20,$31,$32,$38,$0D
 $CA30 DEFB $4A,$52,$20,$4E,$5A,$2C,$4E,$32
 $CA38 DEFB $0D,$44,$42,$20,$32,$32,$31,$2C
 $CA40 DEFB $35,$34,$2C,$36,$2C,$38,$30,$0D
 $CA48 DEFB $4E,$32,$3A,$0D,$43,$41,$4C,$4C
 $CA50 DEFB $20,$4D,$49,$58,$0D,$4C,$44,$20
 $CA58 DEFB $41,$2C,$43,$0D,$43,$50,$20,$33
 $CA60 DEFB $34,$0D,$4A,$50,$20,$5A,$2C,$43
 $CA68 DEFB $54,$52,$0D,$43,$50,$20,$33,$0D
 $CA70 DEFB $4A,$50,$20,$5A,$2C,$43,$54,$4C
 $CA78 DEFB $0D,$50,$55,$53,$48,$20,$44,$45
 $CA80 DEFB $0D,$50,$55,$53,$48,$20,$42,$43
 $CA88 DEFB $0D,$4C,$44,$20,$41,$2C,$28,$49
 $CA90 DEFB $58,$2B,$34,$29,$0D,$43,$50,$20
 $CA98 DEFB $32,$35,$35,$0D,$4A,$52,$20,$4E
 $CAA0 DEFB $5A,$2C,$4E,$44,$42,$35,$0D,$44
 $CAA8 DEFB $45,$43,$20,$43,$0D,$44,$45,$43
 $CAB0 DEFB $20,$43,$0D,$4E,$44,$42,$35,$3A
 $CAB8 DEFB $0D,$43,$41,$4C,$4C,$20,$48,$49
 $CAC0 DEFB $54,$44,$3B,$4F,$4F,$52,$0D,$50
 $CAC8 DEFB $4F,$50,$20,$42,$43,$0D,$50,$4F
 $CAD0 DEFB $50,$20,$44,$45,$0D,$3B,$41,$3D
 $CAD8 DEFB $32,$35,$35,$20,$49,$46,$20,$4E
 $CAE0 DEFB $4F,$20,$48,$49,$54,$0D,$43,$50
 $CAE8 DEFB $20,$32,$35,$35,$0D,$4A,$50,$20
 $CAF0 DEFB $4E,$5A,$2C,$43,$44,$0D,$3B,$43
 $CAF8 DEFB $48,$45,$43,$4B,$20,$46,$4F,$52
 $CB00 DEFB $20,$46,$4C,$4F,$4F,$52,$0D,$50
 $CB08 DEFB $55,$53,$48,$20,$42,$43,$0D,$50
 $CB10 DEFB $55,$53,$48,$20,$44,$45,$0D,$44
 $CB18 DEFB $45,$43,$20,$42,$0D,$44,$45,$43
 $CB20 DEFB $20,$42,$0D,$44,$45,$43,$20,$42
 $CB28 DEFB $0D,$4C,$44,$20,$41,$2C,$28,$49
 $CB30 DEFB $58,$2B,$34,$29,$0D,$43,$50,$20
 $CB38 DEFB $32,$35,$35,$0D,$4A,$52,$20,$4E
 $CB40 DEFB $5A,$2C,$4A,$46,$48,$0D,$44,$45
 $CB48 DEFB $43,$20,$43,$0D,$44,$45,$43,$20
 $CB50 DEFB $43,$0D,$4A,$46,$48,$3A,$0D,$43
 $CB58 DEFB $41,$4C,$4C,$20,$43,$41,$0D,$4C
 $CB60 DEFB $44,$20,$48,$4C,$2C,$34,$31,$34
 $CB68 DEFB $31,$32,$3B,$41,$52,$54,$53,$43
 $CB70 DEFB $0D,$4C,$44,$20,$44,$45,$2C,$28
 $CB78 DEFB $41,$44,$52,$29,$0D,$41,$44,$44
 $CB80 DEFB $20,$48,$4C,$2C,$44,$45,$0D,$50
 $CB88 DEFB $4F,$50,$20,$44,$45,$0D,$50,$4F
 $CB90 DEFB $50,$20,$42,$43,$0D

; Source Code Remnants
u$CB95 DEFM "LD A,(HL)"         ; #STR(#PC,$04,$09)
 $CB9E DEFB $0D
 $CB9F DEFM "CP 33"             ; #STR(#PC,$04,$05)
 $CBA4 DEFB $0D
 $CBA5 DEFM "JP C,CD"           ; #STR(#PC,$04,$07)
 $CBAC DEFB $0D
 $CBAD DEFM "FOK:"              ; #STR(#PC,$04,$04)
 $CBB1 DEFB $0D
 $CBB2 DEFM ";THIS DIR OK"      ; #STR(#PC,$04,$0C)
 $CBBE DEFB $0D
 $CBBF DEFM "LD (IX+0),C"       ; #STR(#PC,$04,$0B)
 $CBCA DEFB $0D
 $CBCB DEFM "LD (IX+1),B"       ; #STR(#PC,$04,$0B)
 $CBD6 DEFB $0D
 $CBD7 DEFM "LD (IX+2),E"       ; #STR(#PC,$04,$0B)
 $CBE2 DEFB $0D
 $CBE3 DEFM "LD (IX+3),D"       ; #STR(#PC,$04,$0B)
 $CBEE DEFB $0D
 $CBEF DEFM "CALL DIX"          ; #STR(#PC,$04,$08)
 $CBF7 DEFB $0D
 $CBF8 DEFM "POPP:"             ; #STR(#PC,$04,$05)
 $CBFD DEFB $0D
 $CBFE DEFM "CALL OPSQ"         ; #STR(#PC,$04,$09)
 $CC07 DEFB $0D
 $CC08 DEFM "LD A,(IX+0)"       ; #STR(#PC,$04,$0B)
 $CC13 DEFB $0D
 $CC14 DEFM "LD (IX+13),A"      ; #STR(#PC,$04,$0C)
 $CC20 DEFB $0D
 $CC21 DEFM "LD A,(IX+1)"       ; #STR(#PC,$04,$0B)
 $CC2C DEFB $0D
 $CC2D DEFM "LD (IX+14),A"      ; #STR(#PC,$04,$0C)
 $CC39 DEFB $0D
 $CC3A DEFM "LD A,(IX+2)"       ; #STR(#PC,$04,$0B)
 $CC45 DEFB $0D
 $CC46 DEFM "LD (IX+11),A"      ; #STR(#PC,$04,$0C)
 $CC52 DEFB $0D
 $CC53 DEFM "LD A,(IX+3)"       ; #STR(#PC,$04,$0B)
 $CC5E DEFB $0D
 $CC5F DEFM "LD (IX+15),A"      ; #STR(#PC,$04,$0C)
 $CC6B DEFB $0D
 $CC6C DEFM ";TEST FOR HIT ROG" ; #STR(#PC,$04,$11)
 $CC7D DEFB $0D
 $CC7E DEFM "LD C,(IX+0)"       ; #STR(#PC,$04,$0B)
 $CC89 DEFB $0D
 $CC8A DEFM "DEC C"             ; #STR(#PC,$04,$05)
 $CC8F DEFB $0D
 $CC90 DEFM "SLA C"             ; #STR(#PC,$04,$05)
 $CC95 DEFB $0D
 $CC96 DEFM "SLA C"             ; #STR(#PC,$04,$05)
 $CC9B DEFB $0D
 $CC9C DEFM "LD A,(IX+2)"       ; #STR(#PC,$04,$0B)
 $CCA7 DEFB $0D
 $CCA8 DEFM "ADD A,C"           ; #STR(#PC,$04,$07)
 $CCAF DEFB $0D
 $CCB0 DEFM "LD C,A"            ; #STR(#PC,$04,$06)
 $CCB6 DEFB $0D
 $CCB7 DEFM "LD A,(MANST+2)"    ; #STR(#PC,$04,$0E)
 $CCC5 DEFB $0D
 $CCC6 DEFM "LD B,A"            ; #STR(#PC,$04,$06)
 $CCCC DEFB $0D
 $CCCD DEFM "LD A,(MANST)"      ; #STR(#PC,$04,$0C)
 $CCD9 DEFB $0D
 $CCDA DEFM "DEC A"             ; #STR(#PC,$04,$05)
 $CCDF DEFB $0D
 $CCE0 DEFM "SLA A"             ; #STR(#PC,$04,$05)
 $CCE5 DEFB $0D
 $CCE6 DEFM "SLA A"             ; #STR(#PC,$04,$05)
 $CCEB DEFB $0D
 $CCEC DEFM "ADD A,B"           ; #STR(#PC,$04,$07)
 $CCF3 DEFB $0D
 $CCF4 DEFM "ADD A,7"           ; #STR(#PC,$04,$07)
 $CCFB DEFB $0D
 $CCFC DEFM "SUB C"             ; #STR(#PC,$04,$05)
 $CD01 DEFB $0D
 $CD02 DEFM "CP 16"             ; #STR(#PC,$04,$05)
 $CD07 DEFB $0D
 $CD08 DEFM "JR NC,MI"          ; #STR(#PC,$04,$08)
 $CD10 DEFB $0D
 $CD11 DEFM "LD "               ; #STR(#PC,$04,$03)

; Data block at CD14
b$CD14 DEFB $C3,$00,$69,$00,$01,$37,$00,$08
 $CD1C DEFB $08,$08,$08,$08,$11,$07,$10,$07
 $CD24 DEFB $F9,$C0,$28,$28,$BE,$35,$0E,$00
 $CD2C DEFB $00,$4B,$5C,$00,$29,$2B,$28,$28
 $CD34 DEFB $BE,$36,$0E,$00,$00,$4C,$5C,$00
 $CD3C DEFB $29,$2A,$32,$0E,$00,$00,$00,$01
 $CD44 DEFB $00,$29,$2D,$31,$34,$30,$0E,$00
 $CD4C DEFB $00,$74,$00,$00

; Routine at CD50
c$CD50 ADD HL,HL     ; #REGhl+=#REGhl.
 $CD51 DEC C         ; Decrease #REGc by one.
 $CD52 LD ($FFF8),A  ; Write #REGa to *#R$FFF8.
 $CD55 EI            ; Enable interrupts.
 $CD56 LD HL,$A06C   ; #REGhl=#R$A06C.
 $CD59 LD B,$80      ; #REGb=#N$80.
 $CD5B XOR A         ; {Write #N$00 to *#REGhl.
*$CD5C LD (HL),A     ; }
 $CD5D INC HL        ; Increment #REGhl by one.
 $CD5E DJNZ $CD5C    ; Decrease counter by one and loop back to #R$CD5C until
                     ; counter is zero.
 $CD60 EXX           ; Switch to the shadow registers.
 $CD61 PUSH HL       ; Stash #REGhl' on the stack.
 $CD62 EXX           ; Switch back to the normal registers.
 $CD63 XOR A         ; {#HTML(Write #N$00 to *<a rel="noopener nofollow"
 $CD64 LD ($5C6B),A  ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C6B.html">DF_SZ</a>.)
                     ; }
 $CD67 LD A,$02      ; #REGa=#N$02.
 $CD69 CALL $1601    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1601.html">CHAN_OPEN</a>.)
 $CD6C JP $CD86      ; Jump to #R$CD86.

; Set Default Keyboard Inputs
;
; Used by the routines at #R$CD86, #R$D0D4 and #R$D253.
;
; .
;
; See #R$D22C for the corresponding keymap table.
@label=SetDefaultKeyboardInputs
c$CD6F LD HL,$5BEB   ; {Write "5" (#N$04) to *#R$5BEB.
 $CD72 LD (HL),$04   ; }
 $CD74 INC HL        ; {Write "8" (#N$13) to *#R$5BEC.
 $CD75 LD (HL),$13   ; }
 $CD77 INC HL        ; {Write "7" (#N$0B) to *#R$5BED.
 $CD78 LD (HL),$0B   ; }
 $CD7A INC HL        ; {Write "6" (#N$03) to *#R$5BEE.
 $CD7B LD (HL),$03   ; }
 $CD7D INC HL        ; {Write "A" (#N$26) to *#R$5BEF.
 $CD7E LD (HL),$26   ; }
 $CD80 LD A,$24      ; {Write Keyboard Input (#N$24) to *#R$5BEA.
 $CD82 LD ($5BEA),A  ; }
 $CD85 RET           ; Return.

; Display Introduction Screen
;
; Used by the routines at #R$CD50, #R$D08A and #R$D602.
;
; .
;
; #PUSHS #UDGTABLE {
;   #SIM(start=$CD93,stop=$CDA8)
;   #FOR$01,$08||x|#SIM(start=$D0AC,stop=$D0D3)
;     #SCR$02(*title-screen-x)#PLOT(0,0,0)(title-screen-x)
;   ||
;   #UDGARRAY#(#ANIMATE$0F,$08(title-screen))
; } UDGTABLE# #POPS
@label=DisplayIntroductionScreen
c$CD86 LD A,$04      ; {Write #N$04 to *#R$5BF1.
 $CD88 LD ($5BF1),A  ; }
 $CD8B LD A,($5BEA)  ; {Call #R$CD6F if no control method has been set yet
 $CD8E CP $00        ; (as-in, game has just been loaded").
 $CD90 CALL Z,$CD6F  ; }
 $CD93 LD A,$03      ; {#HTML(Set the border to MAGENTA using <a rel="noopener
 $CD95 CALL $229B    ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/2294.html#229b">BORDER</a>.)
                     ; }
 $CD98 LD A,$03      ; {Write MAGENTA to *#R$5BD0.
 $CD9A LD ($5BD0),A  ; }
 $CD9D LD DE,$4000   ; #REGde=#R$4000(#N$4000).
 $CDA0 LD BC,$1B00   ; #REGbc=#N$1B00.
 $CDA3 LD HL,$6978   ; #REGhl=#R$6978.
 $CDA6 LDIR          ; Copy the introduction screen to the screen buffer.
; #HTML(Use <a rel="noopener nofollow"
; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a> as a counter.)
 $CDA8 LD BC,$0000   ; {#HTML(Reset *<a rel="noopener nofollow"
 $CDAB LD ($5C78),BC ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                     ; to #N($0000,$04,$04).)}
@label=IntroductionScreen_Loop
*$CDAF LD BC,($5C78) ; #HTML(#REGbc=*<a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $CDB3 LD A,B        ; {Call #R$D602 if #REGb is equal to #N$04.
 $CDB4 CP $04        ;
 $CDB6 CALL Z,$D602  ; }
 $CDB9 CALL $D0AC    ; Call #R$D0AC.
; Don't bother checking the Kempston joystick port if we don't have to.
 $CDBC LD A,($5BEA)  ; {Skip down to #R$CDC9 if *#R$5BEA is not set to Kempston
 $CDBF CP $0C        ; joystick (#N$0C).
 $CDC1 JR NZ,$CDC9   ; }
; Handle checking input from the Kempston joystick.
 $CDC3 IN A,($1F)    ; Read from the Kempston joystick port.
 $CDC5 CP $10        ; {Jump to #R$CDD1 if fire has been pressed.
 $CDC7 JR Z,$CDD1    ; }
; Even if the Kempston joystick is selected, we still check the keyboard here.
@label=IntroductionScreen_KeyboardCheck
*$CDC9 CALL $028E    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $CDCC LD A,E        ; {Loop back round to #R$CDAF if no keys have been pressed
 $CDCD CP $FF        ; (#REGe is equal to #N$FF).
 $CDCF JR Z,$CDAF    ; }
; Continue on to #R$CDD1.

; Display Title Screen
;
; Used by the routines at #R$CD86 and #R$D0E2.
;
; .
;
; #PUSHS
; #UDGTABLE
; { #SIM(start=$CDD1,stop=$CE1E)#SCR$02(title-screen) }
; UDGTABLE#
; #POPS
@label=TitleScreen
c$CDD1 LD A,$00      ; {#HTML(Write #COLOUR$00 (#N$00) to *<a rel="noopener
 $CDD3 LD ($5C8D),A  ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
                     ; }
 $CDD6 CALL $D4BE    ; Call #R$D4BE.
 $CDD9 LD A,$00      ; {#HTML(Set the border to BLACK using <a rel="noopener
 $CDDB CALL $229B    ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/2294.html#229b">BORDER</a>.)
                     ; }
 $CDDE LD A,$00      ; {Write #COLOUR$00 (#N$00) to *#R$5BD0.
 $CDE0 LD ($5BD0),A  ; }
; This entry point is used by the routines at #R$D0D4, #R$D0E2, #R$D10C,
; #R$D188 and #R$D253.
*$CDE3 LD DE,$D9FD   ; #REGde=#R$D9FD.
 $CDE6 CALL $D60E    ; Call #R$D60E.
 $CDE9 LD A,($5BEA)  ; {Call #R$D259 if *#R$5BEA is set to Keyboard Input
 $CDEC CP $24        ; (#N$24).
 $CDEE CALL Z,$D259  ; }
 $CDF1 CALL $D60E    ; Call #R$D60E with #R$DA3A.
 $CDF4 LD A,($5BEA)  ; {Call #R$D259 if *#R$5BEA is set to Interface 2 joystick
 $CDF7 CP $1C        ; (#N$1C).
 $CDF9 CALL Z,$D259  ; }
 $CDFC CALL $D60E    ; Call #R$D60E with #R$DA50.
 $CDFF LD A,($5BEA)  ; {Call #R$D259 if *#R$5BEA is set to Cursor joystick
 $CE02 CP $14        ; (#N$14).
 $CE04 CALL Z,$D259  ; }
 $CE07 CALL $D60E    ; Call #R$D60E with #R$DA6E.
; This entry point is used by the routine at #R$FE69.
*$CE0A LD A,($5BEA)  ; {Call #R$D259 if *#R$5BEA is set to Kempston joystick
 $CE0D CP $0C        ; (#N$0C).
 $CE0F CALL Z,$D259  ; }
 $CE12 CALL $D60E    ; Call #R$D60E with #R$DA87.
 $CE15 LD A,($5BEA)  ; #REGa=*#R$5BEA (unused, #REGa is overwritten immediately
                     ; by #R$D60E on the next line).
 $CE18 CALL $D60E    ; Call #R$D60E with #R$DAA2.
 $CE1B CALL $D60E    ; Call #R$D60E with #R$DAB7.
; Keep looping until we get user input.
@label=TitleScreen_InputLoop
*$CE1E CALL $D5CF    ; Call #R$D5CF.
 $CE21 CP $24        ; {Jump to #R$D253 if #REGa is set to Keyboard input
 $CE23 JP Z,$D253    ; (#N$24).}
 $CE26 CP $1C        ; {Jump to #R$D10C if #REGa is set to Interface 2 joystick
 $CE28 JP Z,$D10C    ; (#N$1C).}
 $CE2B CP $14        ; {Jump to #R$D0D4 if #REGa is set to Cursor joystick
 $CE2D JP Z,$D0D4    ; (#N$14).}
 $CE30 CP $0C        ; {Jump to #R$D0E2 if #REGa is set to Kempston joystick
 $CE32 JP Z,$D0E2    ; (#N$0C).}
 $CE35 CP $04        ; {Jump to #R$D188 if #REGa is set to User-Defined key
 $CE37 JP Z,$D188    ; input (#N$04).}
 $CE3A CP $23        ; {Jump to #R$CE1E if #REGa is NOT set to start the game
 $CE3C JR NZ,$CE1E   ; (#N$23).}
; Else, the player has selected "0" to start the game.
 $CE3E JP $D08A      ; Jump to #R$D08A.

; Hidden Goldfish Game
;
; See #POKE#goldfishGameAccess(Access Hidden Game).
;
; .
;
; #PUSHS #UDGTABLE {
;   #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CF21)
;   #FOR$01,$50(x,#SIM(start=$CF44,stop=$CF4E)#SIM(start=$CF73,stop=$CF76)
;     #SCR$02(*goldfish-gameplay-x)#PLOT(0,0,0)(goldfish-gameplay-x)
;   )
;   #UDGARRAY#(#ANIMATE$0F(goldfish-gameplay))
; } UDGTABLE# #POPS
@label=GoldfishGame
c$CE41 CALL $D4BE      ; Call #R$D4BE.
; Print up the playing instructions.
; .
; #PUSHS #UDGTABLE
; { #SIM(start=$CDD1,stop=$CE1E)#SIM(start=$CE41,stop=$CE4A)#SCR$02(goldfish-game-instructions) }
; UDGTABLE# #POPS
 $CE44 LD DE,$DD9A     ; #REGde=#R$DD9A.
 $CE47 CALL $D60E      ; Call #R$D60E.
; Pause to let the message sink in...
 $CE4A LD BC,$012C     ; #REGbc=#N$012C (pause loops).
@label=GoldfishGame_PauseLoop
*$CE4D PUSH BC         ; Stash the pause loop counter on the stack.
 $CE4E CALL $D3A6      ; Call #R$D3A6.
 $CE51 POP BC          ; Restore the pause loop counter from the stack.
 $CE52 DEC BC          ; Decrease the pause loop counter by one.
 $CE53 LD A,B          ; {Jump to #R$CE4D until the pause loop counter is zero.
 $CE54 OR C            ;
 $CE55 JR NZ,$CE4D     ; }
; Initialise the number of goldfish needed to complete this mini-game.
; .
; See #POKE#goldfishGameNumberOfFish(Fish To Be Caught (Hidden Game)).
 $CE57 LD A,$14        ; {Write #N$14 to *#R$DB44.
 $CE59 LD ($DB44),A    ; }
 $CE5C LD A,$05        ; {#HTML(Set the border to CYAN using <a rel="noopener
 $CE5E CALL $229B      ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/2294.html#229b">BORDER</a>.)
                       ; }
 $CE61 LD A,$05        ; {Write CYAN (#N$05) to *#R$5BD0.
 $CE63 LD ($5BD0),A    ; }
 $CE66 LD A,$38        ; {#HTML(Write #COLOUR$38 (#N$38) to *<a rel="noopener
 $CE68 LD ($5C8D),A    ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
                       ; }
 $CE6B CALL $D4BE      ; Call #R$D4BE.
; Start colouring the game playarea.
; .
; This is colourised in bands. First, #N$10 blue lines (from the bottom).
; .
; #PUSHS #UDGTABLE
; { #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CE78)#SCR$02(goldfish-game-01) }
; UDGTABLE# #POPS
 $CE6E LD B,$10        ; #REGb=#N$10.
 $CE70 LD A,$08        ; {#HTML(Write #COLOUR$08 (#N$08) to *<a rel="noopener
 $CE72 LD ($5C8D),A    ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
                       ; }
 $CE75 CALL $0E44      ; #HTML(Clear the bottom #N$10 lines using <a
                       ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
; Next, #N$08 yellow lines (again, from the bottom).
; .
; #PUSHS #UDGTABLE
; { #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CE82)#SCR$02(goldfish-game-02) }
; UDGTABLE# #POPS
 $CE78 LD A,$30        ; {#HTML(Write #COLOUR$30 (#N$30) to *<a rel="noopener
 $CE7A LD ($5C8D),A    ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
                       ; }
 $CE7D LD B,$03        ; {#HTML(Clear the bottom #N$08 lines using <a
 $CE7F CALL $0E44      ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                       ; }
; Finally, #N$02 cyan lines (again, from the bottom).
; .
; #PUSHS #UDGTABLE
; { #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CE8C)#SCR$02(goldfish-game-03) }
; UDGTABLE# #POPS
 $CE82 LD A,$28        ; {#HTML(Write #COLOUR$28 (#N$28) to *<a rel="noopener
 $CE84 LD ($5C8D),A    ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
                       ; }
 $CE87 LD B,$02        ; {#HTML(Clear the bottom #N$02 lines using <a
 $CE89 CALL $0E44      ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                       ; }
; This entry point is used by the routine at #R$D08A.
@label=GoldfishGame_InitialiseGame
*$CE8C LD IX,$DC0E     ; #REGix=#R$DC0E.
 $CE90 LD (IX+$00),$0F ; Write #N$0F to *#REGix+#N$00.
 $CE94 LD (IX+$01),$0A ; Write #N$0A to *#REGix+#N$01.
 $CE98 LD (IX+$02),$03 ; Write #N$03 to *#REGix+#N$02.
 $CE9C LD (IX+$03),$03 ; Write #N$03 to *#REGix+#N$03.
 $CEA0 LD (IX+$04),$00 ; Write #N$00 to *#REGix+#N$04 (player X co-ordinate).
 $CEA4 LD (IX+$05),$00 ; Write #N$00 to *#REGix+#N$05 (player Y co-ordinate).
 $CEA8 LD (IX+$06),$20 ; Write #N$20 to *#REGix+#N$06.
 $CEAC LD (IX+$07),$02 ; Write #N$02 to *#REGix+#N$07.
 $CEB0 LD (IX+$08),$01 ; Write #N$01 to *#REGix+#N$08.
 $CEB4 LD (IX+$09),$07 ; Write #N$07 to *#REGix+#N$09.
 $CEB8 LD (IX+$0A),$01 ; Write #N$01 to *#REGix+#N$0A.
 $CEBC LD (IX+$0B),$03 ; Write #N$03 to *#REGix+#N$0B.
 $CEC0 LD (IX+$0C),$03 ; Write #N$03 to *#REGix+#N$0C.
 $CEC4 LD (IX+$0D),$0F ; Write #N$0F to *#REGix+#N$0D.
 $CEC8 LD (IX+$0E),$0A ; Write #N$0A to *#REGix+#N$0E.
 $CECC LD (IX+$0F),$03 ; Write #N$03 to *#REGix+#N$0F.
 $CED0 LD BC,$0064     ; #REGbc=#N($0064,$04,$04).
 $CED3 LD DE,$DB46     ; #REGde=#R$DB46.
 $CED6 LD HL,$A06C     ; #REGhl=#R$A06C.
 $CED9 LDIR            ; LDIR.
 $CEDB LD HL,$A06C     ; #REGhl=#R$A06C.
 $CEDE LD DE,$DBAA     ; #REGde=#R$DBAA.
 $CEE1 LD BC,$0064     ; #REGbc=#N($0064,$04,$04).
 $CEE4 LDIR            ; LDIR.
; Randomly choose sand UDGs and write them into the Sand Animation Buffer. Note; the count is one screen width
; +#N$01 (so #N$21) so the animation doesn't happen on-screen.
@label=PopulateSandBuffer
 $CEE6 LD DE,$DC22     ; #REGde=#R$DC22.
 $CEE9 LD B,$21        ; #REGb=#N$21 (counter; number of sand UDGs to copy).
@label=PopulateSandBuffer_Loop
*$CEEB PUSH BC         ; {Stash the sand UDG counter and sand animation buffer
 $CEEC PUSH DE         ; pointer on the stack.}
 $CEED CALL $D8D4      ; {Fetch a semi-random number from #N$00-#N$0F and store
 $CEF0 AND %00001111   ; it in #REGa.}
 $CEF2 LD E,A          ; {#REGhl=#R$964C+(#REGa*#N$08).
 $CEF3 LD D,$00        ;
 $CEF5 SLA E           ;
 $CEF7 SLA E           ;
 $CEF9 SLA E           ;
 $CEFB LD HL,$964C     ;
 $CEFE ADD HL,DE       ; }
 $CEFF POP DE          ; Restore the sand animation buffer pointer from the
                       ; stack.
 $CF00 LD BC,$0008     ; #REGbc=#N($0008,$04,$04).
 $CF03 LDIR            ; Copy a sand UDG (#N($0008,$04,$04) bytes of data) from
 $CF05 POP BC          ; Restore the sand UDG counter from the stack.
 $CF06 DJNZ $CEEB      ; Decrease the sand UDG counter by one and loop back to
                       ; #R$CEEB until it is zero.
; See; #R$99EC and #R$9CEC.
 $CF08 CALL $D870      ; Call #R$D870.
; Set up the status bar.
; .
; Set the co-ordinates of where we're going to PRINT AT.
 $CF0B LD B,$02        ; {#HTML(Set up the screen buffer location #N$02/#N$21
 $CF0D LD C,$21        ; using <a rel="noopener nofollow"
 $CF0F CALL $0DD9      ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                       ; }
; Restore the default ZX Spectrum font.
 $CF12 LD HL,$3C00     ; #HTML(#REGhl=<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                       ; (CHARSET-#N$100).)
 $CF15 LD ($5C36),HL   ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
; Print the status bar messaging.
; .
; #PUSHS #UDGTABLE
; { #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CF1E)#SCR$02(goldfish-game-04) }
; UDGTABLE# #POPS
 $CF18 LD DE,$D9D2     ; #REGde=#R$D9D2.
 $CF1B CALL $D60E      ; Call #R$D60E.
; Draw the oxygen bar at the bottom of the screen.
; .
; #PUSHS #UDGTABLE
; { #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CF21)#SCR$02(goldfish-game-05) }
; UDGTABLE# #POPS
 $CF1E CALL $D2F8      ; Call #R$D2F8.
; Reset any bubble data.
 $CF21 LD HL,$DD2A     ; #REGhl=#R$DD2A.
 $CF24 LD A,$00        ; #REGa=#N$00.
 $CF26 LD B,$6E        ; #REGb=#N$6E.
@label=GoldfishGame_ClearBubblesLoop
*$CF28 LD (HL),A       ; Write #N$00 to *#REGhl.
 $CF29 INC HL          ; Increment #REGhl by one.
 $CF2A DJNZ $CF28      ; Decrease counter by one and loop back to #R$CF28 until
                       ; counter is zero.
; Set player game entry variables.
 $CF2C LD A,$00        ; {Write #N$00 to *#R$DB42.
 $CF2E LD ($DB42),A    ; }
 $CF31 LD A,$13        ; {Write #N$13 to *#R$D33E.
 $CF33 LD ($D33E),A    ; }
; The "normal" game just starts on completion of the Goldfish game.
@label=GoldfishGame_GameLoop
*$CF36 LD A,($DB44)    ; {Jump to #R$D08A if *#R$DB42 is equal to *#R$DB44.
 $CF39 LD B,A          ;
 $CF3A LD A,($DB42)    ;
 $CF3D CP B            ;
 $CF3E JP Z,$D08A      ; }
; Handle the player "spending" air (only every 16th frame).
 $CF41 CALL $D2F2      ; Call #R$D2F2.
 $CF44 CALL $D8E2      ; Call #R$D8E2.
 $CF47 LD A,($D93D)    ; {Increment *#R$D93D by one.
 $CF4A INC A           ;
 $CF4B LD ($D93D),A    ; }
 $CF4E CALL $D92A      ; Call #R$D92A.
; Add the "float up" effect on every fourth frame.
 $CF51 LD A,($D93D)    ; {Call #R$D5CB when #R$D93D is divisable by #N$04 (with
 $CF54 AND %00000011   ; no remainder).
 $CF56 CALL Z,$D5CB    ; }
 $CF59 LD BC,($DD98)   ; #REGbc=*#R$DD98.
 $CF5D CALL $D778      ; Call #R$D778.
 $CF60 CALL $D8D4      ; {Get a semi-random number between #N$01-#N$08 and
 $CF63 AND %00000111   ; store it in #REGb.
 $CF65 INC A           ;
 $CF66 LD B,A          ; }
 $CF67 CALL $D778      ; Call #R$D778.
 $CF6A CALL $D4CC      ; Call #R$D4CC.
 $CF6D CALL $D260      ; Call #R$D260.
 $CF70 CALL $D579      ; Call #R$D579.
 $CF73 CALL $D8A2      ; Call #R$D8A2.
 $CF76 LD A,($D33E)    ; {Jump to #R$CFA8 if *#R$D33E is equal to #N$00.
 $CF79 CP $00          ;
 $CF7B JP Z,$CFA8      ; }
 $CF7E LD A,($DD98)    ; {#REGb=*#R$DD98.
 $CF81 LD B,A          ; }
 $CF82 LD IX,$DB46     ; #REGix=#R$DB46.
@label=GoldfishGame_ProcessCreature
*$CF86 PUSH BC         ; Stash #REGbc on the stack.
 $CF87 LD A,(IX+$0A)   ; {Jump to #R$CFA0 if *#REGix+#N$0A is equal to #N$00.
 $CF8A CP $00          ;
 $CF8C JR Z,$CFA0      ; }
 $CF8E LD A,($DC0F)    ; #REGa=*#R$DC0F.
 $CF91 DEC A           ; Decrease #REGa by one.
 $CF92 ADD A,(IX+$08)  ; #REGa+=*#REGix+#N$08.
 $CF95 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $CF98 SUB B           ; #REGa-=#REGb.
 $CF99 LD B,(IX+$08)   ; #REGb=*#REGix+#N$08.
 $CF9C INC B           ; Increment #REGb by one.
 $CF9D CP B            ; {Jump to #R$CFF6 if #REGa is lower than #REGb.
 $CF9E JR C,$CFF6      ; }
; This entry point is used by the routine at #R$CFF6.
@label=GoldfishGame_NextCreature
*$CFA0 POP BC          ; Restore #REGbc from the stack.
 $CFA1 LD DE,$0018     ; #REGde=#N($0018,$04,$04).
 $CFA4 ADD IX,DE       ; #REGix+=#REGde.
 $CFA6 DJNZ $CF86      ; Decrease counter by one and loop back to #R$CF86 until
                       ; counter is zero.
; Print the number of fish the player has caught so far.
@label=GoldfishGame_PrintFishCaught
*$CFA8 LD A,$10        ; {Set INK: #N$00.
 $CFAA RST $10         ;
 $CFAB LD A,$00        ;
 $CFAD RST $10         ; }
 $CFAE LD A,$11        ; {Set PAPER: #N$05.
 $CFB0 RST $10         ;
 $CFB1 LD A,$05        ;
 $CFB3 RST $10         ; }
; Restore the default ZX Spectrum font.
 $CFB4 LD HL,$3C00     ; #HTML(#REGhl=<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                       ; (CHARSET-#N$100).)
 $CFB7 LD ($5C36),HL   ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $CFBA LD B,$02        ; {#HTML(Set up the screen buffer location #N$02/#N$1C
 $CFBC LD C,$1C        ; using <a rel="noopener nofollow"
 $CFBE CALL $0DD9      ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                       ; }
; Store *#R$DB42 in #REGbc so we can use OUT_NUM_1 to print it to the screen.
 $CFC1 LD A,($DB42)    ; {#REGbc=*#R$DB42.
 $CFC4 LD C,A          ;
 $CFC5 LD B,$00        ; }
 $CFC7 CALL $1A1B      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/1A1B.html">OUT_NUM_1</a>.)
 $CFCA LD A,$20        ; #REGa=ASCII "space" (#N$20).
 $CFCC CALL $D353      ; Call #R$D353.
 $CFCF LD A,($DC0F)    ; {Jump to #R$CF36 if *#R$DC0F is not equal to #N$10.
 $CFD2 CP $10          ;
 $CFD4 JP NZ,$CF36     ; }
 $CFD7 LD A,($DC11)    ; {Jump to #R$CF36 if *#R$DC11 is not equal to #N$03.
 $CFDA CP $03          ;
 $CFDC JP NZ,$CF36     ; }
 $CFDF LD A,($DC0E)    ; {#REGc=*#R$DC0E.
 $CFE2 LD C,A          ; }
 $CFE3 LD A,$21        ; #REGa=#N$21.
 $CFE5 SUB C           ; #REGa-=#REGc.
 $CFE6 LD HL,$47E0     ; #REGhl=#N$47E0 (screen buffer location).
 $CFE9 LD E,A          ; #REGe=#REGa.
 $CFEA LD D,$00        ; #REGd=#N$00.
 $CFEC ADD HL,DE       ; #REGhl+=#REGde.
 $CFED LD A,(HL)       ; {Jump to #R$D05B if *#REGhl is equal to #N$00.
 $CFEE CP $00          ;
 $CFF0 JP Z,$D05B      ; }
 $CFF3 JP $CF36        ; Jump to #R$CF36.

; Goldfish Game: Collision
;
; Used by the routine at #R$CE41.
;
; .
;
; The player has hit a sprite, let's see what it is.
@label=GoldfishGame_Collision
c$CFF6 LD A,($DC0E)    ; {#REGc=*#R$DC0E.
 $CFF9 LD C,A          ; }
 $CFFA LD A,(IX+$00)   ; #REGa=*#REGix+#N$00.
 $CFFD SUB (IX+$07)    ; #REGa-=*#REGix+#N$07.
 $D000 INC A           ; Increment #REGa by one.
 $D001 SUB C           ; #REGa-=#REGc.
 $D002 CP $02          ; {Jump to #R$CFA0 if #REGa is higher than #N$02.
 $D004 JR NC,$CFA0     ; }
 $D006 PUSH IX         ; Stash #REGix on the stack.
 $D008 LD HL,$0064     ; #REGhl=#N($0064,$04,$04).
 $D00B LD DE,$0064     ; #REGde=#N($0064,$04,$04).
 $D00E CALL $03B5      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/03B5.html">BEEPER</a>.)
 $D011 POP IX          ; Restore #REGix from the stack.
 $D013 LD A,(IX+$08)   ; {Jump to #R$D047 if *#REGix+#N$08 is not equal to
 $D016 CP $01          ; #N$01.
 $D018 JR NZ,$D047     ; }
; The player has caught a fish! Add it to the count and remove it from the
; screen.
@label=GoldfishGame_CaughtFish
 $D01A LD A,($DB42)    ; {Increment *#R$DB42 by one.
 $D01D INC A           ;
 $D01E LD ($DB42),A    ; }
 $D021 LD C,(IX+$00)   ; #REGc=vertical position (*#REGix+#N$00).
 $D024 LD B,(IX+$01)   ; #REGb=horizontal position (*#REGix+#N$01).
 $D027 LD E,(IX+$07)   ; #REGe=*#REGix+#N$07.
 $D02A LD D,(IX+$08)   ; #REGd=*#REGix+#N$08.
 $D02D LD A,(IX+$02)   ; {Jump to #R$D035 if *#REGix+#N$02 is equal to #N$03.
 $D030 CP $03          ;
 $D032 JR Z,$D035      ; }
 $D034 INC E           ; Increment #REGe by one.
*$D035 LD HL,$9F6C     ; {#HTML(Write #R$A06C(#N$9F6C) to *<a rel="noopener
 $D038 LD ($5C36),HL   ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $D03B LD A,$20        ; #REGa=#N$20.
 $D03D CALL $D460      ; Call #R$D460.
 $D040 LD (IX+$0A),$00 ; Write inactive (#N$00) to *#REGix+#N$0A.
 $D044 JP $CFA0        ; Jump to #R$CFA0.
; When any sea creature touches you they steal all of your fish.
@label=GoldfishGame_HitCreature
*$D047 XOR A           ; {Write #N$00 to *#R$DB42.
 $D048 LD ($DB42),A    ; }
 $D04B PUSH IX         ; Stash #REGix on the stack.
 $D04D LD HL,$00C8     ; #REGhl=#N($00C8,$04,$04).
 $D050 LD DE,$0032     ; #REGde=#N($0032,$04,$04).
 $D053 CALL $03B5      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/03B5.html">BEEPER</a>.)
 $D056 POP IX          ; Restore #REGix from the stack.
 $D058 JP $CFA0        ; Jump to #R$CFA0.

; Goldfish Game: Refill Oxygen
;
; Used by the routine at #R$CE41.
;
; .
;
; Fill the air gauge back up to maximum.
@label=GoldfishGame_RefillOxygen
c$D05B LD A,$13      ; {Write #N$13 to *#R$D33E.
 $D05D LD ($D33E),A  ; }
 $D060 CALL $D2F8    ; Call #R$D2F8.
 $D063 LD B,$0A      ; #REGb=#N$0A.
*$D065 PUSH BC       ; Stash #REGbc on the stack.
 $D066 LD A,$15      ; #REGa=#N$15.
 $D068 LD C,$FE      ; #REGc=#N$FE.
 $D06A LD B,$FF      ; #REGb=#N$FF.
 $D06C OUT (C),A     ;
 $D06E CALL $D8D4    ; Call #R$D8D4.
 $D071 LD B,A        ; #REGb=#REGa.
*$D072 DJNZ $D072    ; Decrease counter by one and loop back to #R$D072 until
                     ; counter is zero.
 $D074 CALL $D8D4    ; Call #R$D8D4.
 $D077 LD B,A        ; #REGb=#REGa.
*$D078 LD A,$05      ; #REGa=#N$05.
 $D07A PUSH BC       ; Stash #REGbc on the stack.
 $D07B LD C,$FE      ; #REGc=#N$FE.
 $D07D LD B,$FF      ; #REGb=#N$FF.
 $D07F OUT (C),A     ;
 $D081 POP BC        ; Restore #REGbc from the stack.
 $D082 DJNZ $D078    ; Decrease counter by one and loop back to #R$D078 until
                     ; counter is zero.
 $D084 POP BC        ; Restore #REGbc from the stack.
 $D085 DJNZ $D065    ; Decrease counter by one and loop back to #R$D065 until
                     ; counter is zero.
 $D087 JP $CF36      ; Jump to #R$CF36.

; Start Game
;
; Used by the routines at #R$CDD1 and #R$CE41.
@label=StartGame
c$D08A LD A,($5BF1)  ; {Jump to #R$D099 if *#R$5BF1 is equal to #N$04.
 $D08D CP $04        ;
 $D08F JR Z,$D099    ; }
 $D091 LD A,$02      ; {Write #N$02 to *#R$5BF0.
 $D093 LD ($5BF0),A  ; }
 $D096 JP $D09E      ; Jump to #R$D09E.
*$D099 LD A,$01      ; {Write #N$01 to *#R$5BF0.
 $D09B LD ($5BF0),A  ; }
*$D09E CALL $DEA8    ; Call #R$DEA8.
 $D0A1 LD A,($5BF1)  ; {Jump to #R$CD86 if *#R$5BF1 is equal to #N$FF.
 $D0A4 CP $FF        ;
 $D0A6 JP Z,$CD86    ; }
 $D0A9 JP $CE8C      ; Jump to #R$CE8C.

; Animate Title Screen
;
; Used by the routine at #R$CD86.
@label=AnimateTitleScreen
c$D0AC LD HL,$4000   ; #REGhl=#R$4000(#N$4000) (screen buffer destination).
 $D0AF LD DE,$6978   ; #REGde=#R$6978 (source).
; Find the next instance of "#N$05" in the source data.
@label=AnimateTitleScreen_Loop
*$D0B2 LD A,(DE)     ; {Jump to #R$D0C7 if *#REGde is not equal to #N$05.
 $D0B3 CP $05        ;
 $D0B5 JR NZ,$D0C7   ; }
 $D0B7 LD A,(HL)     ; {Seems to do nothing; as both #REGa and the flags are
 $D0B8 CP $00        ; overwritten in the #R$D8D4 call.}
 $D0BA CALL $D8D4    ; Call #R$D8D4.
; On returning; #REGa=(*#R$D86F*#N$05)+#N$01.
 $D0BD CP $80        ; {Jump to #R$D0C4 if #REGa is higher than #N$80.
 $D0BF JR NC,$D0C4   ; }
 $D0C1 LD (HL),A     ; Write #REGa to the screen buffer pointer address.
 $D0C2 JR $D0C7      ; Jump to #R$D0C7.
; This byte has finished its cycle, so reset it.
@label=AnimateTitleScreen_Reset
*$D0C4 LD A,$00      ; {Reset the current byte in the screen buffer back to
 $D0C6 LD (HL),A     ; #N$00.}
; Increment both source and destination pointers and loop back until the entire
; screen buffer has been processed.
@label=AnimateTitleScreen_Increment
*$D0C7 INC HL        ; Increment screen buffer pointer by one.
 $D0C8 INC DE        ; Increment source data pointer by one.
 $D0C9 LD A,H        ; {Jump to #R$D0B2 if #REGh is not equal to #N$58.
 $D0CA CP $58        ;
 $D0CC JR NZ,$D0B2   ; }
 $D0CE LD A,L        ; {Jump to #R$D0B2 if #REGl is not equal to #N$00.
 $D0CF CP $00        ;
 $D0D1 JR NZ,$D0B2   ; }
; The end of the screen buffer has been reached, so return.
 $D0D3 RET           ; Return.

; Set Cursor Joystick
;
; Used by the routine at #R$CDD1.
@label=SetCursorJoystick
c$D0D4 CALL $CD6F    ; Call #R$CD6F.
 $D0D7 LD A,$23      ; {Write #N$23 to *#REGhl.
 $D0D9 LD (HL),A     ; }
 $D0DA LD A,$14      ; {Write Cursor joystick (#N$14) to *#R$5BEA.
 $D0DC LD ($5BEA),A  ; }
 $D0DF JP $CDE3      ; Jump to #R$CDE3.

; Set Kempston Joystick
;
; Used by the routine at #R$CDD1.
@label=SetKempstonJoystick
c$D0E2 LD DE,$D9B6   ; #REGde=#R$D9B6.
 $D0E5 CALL $D60E    ; Call #R$D60E.
; Pause to let the message sink in...
 $D0E8 LD B,$64      ; #REGb=#N$64 (pause loops).
@label=SetKempstonJoystick_PauseLoop
*$D0EA PUSH BC       ; Stash the pause loop counter on the stack.
 $D0EB CALL $D3A6    ; Call #R$D3A6.
 $D0EE POP BC        ; Restore the pause loop counter from the stack.
 $D0EF DJNZ $D0EA    ; Decrease the pause loop counter by one and loop back to
                     ; #R$D0EA until the counter is zero.
; After the above loop we loop again, this gives the player the chance to abort
; setting this control method.
 $D0F1 LD BC,$03E8   ; #REGbc=#N$03E8 (counter).
@label=SetKempstonJoystick_Read
*$D0F4 IN A,($1F)    ; Read from the Kempston joystick port.
 $D0F6 CP $00        ; {Jump to #R$CDD1 if any control is being pressed.
 $D0F8 JP NZ,$CDD1   ; }
 $D0FB DEC BC        ; Decrease #REGbc by one.
 $D0FC LD A,B        ; {Jump to #R$D0F4 until #REGbc is zero.
 $D0FD OR C          ;
 $D0FE JR NZ,$D0F4   ; }
; Else, finally, set this control method.
 $D100 LD A,$0C      ; {Set Kempston joystick (#N$0C) to *#R$5BEA.
 $D102 LD ($5BEA),A  ; }
 $D105 JP $CDE3      ; Jump to #R$CDE3.

; Restart Set User-Defined Keys
;
; Used by the routine at #R$D188.
;
; .
;
; This subroutine is used when a duplicate control key has been detected. It performs housekeeping and then just
; kicks off #R$D188 again.
@label=Restart_SetUserDefinedKeys
c$D108 POP BC        ; Restore #REGbc from the stack.
 $D109 JP $D188      ; Jump to #R$D188.

; Set Interface 2 Joystick
;
; Used by the routine at #R$CDD1.
;
; .
;
; Discover which port is being used.
; .
; Ask the player to press the fire button on their joystick.
@label=SetInterface2Joystick
c$D10C LD DE,$D16F              ; #REGde=#R$D16F.
 $D10F CALL $D60E               ; Call #R$D60E.
; Pause to let the message sink in...
 $D112 LD BC,$03E8              ; #REGbc=#N$03E8 (pause loops).
@label=SetInterface2Joystick_Loop
*$D115 PUSH BC                  ; Stash the pause loop counter on the stack.
 $D116 CALL $D3A6               ; Call #R$D3A6.
 $D119 CALL $028E               ; #HTML(Call <a rel="noopener nofollow"
                                ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $D11C POP BC                   ; Restore the pause loop counter from the
                                ; stack.
 $D11D LD A,E                   ; {Jump to #R$D14D if the left-hand joystick
 $D11E CP $04                   ; port fire button was pressed (#N$04 == "5").
 $D120 JP Z,$D14D               ; }
 $D123 CP $23                   ; {Jump to #R$D135 if the right-hand joystick
 $D125 JP Z,$D135               ; port fire button was pressed (#N$23 == "0").}
 $D128 DEC BC                   ; Decrease the pause loop counter by one.
 $D129 LD A,C                   ; {Jump to #R$D115 until the pause loop counter
 $D12A OR B                     ; is zero.
 $D12B JR NZ,$D115              ; }
; No response from the player, so do nothing and return.
 $D12D LD B,$12                 ; {#HTML(Clear the bottom #N$12 lines using <a
 $D12F CALL $0E44               ; rel="noopener nofollow"
                                ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                                ; }
 $D132 JP $CDE3                 ; Jump to #R$CDE3.
; Sets the user-defined keys for the right-hand Interface 2 joystick.
@label=SetInterface2Joystick_Right
*$D135 LD DE,$5BEB              ; #REGde=#R$5BEB.
 $D138 LD HL,$D16A              ; #REGhl=#R$D16A.
 $D13B LD BC,$0005              ; #REGbc=#N($0005,$04,$04).
 $D13E LDIR                     ; Copy the keymap to the user-defined keys
                                ; store.
 $D140 LD A,$1C                 ; {Write Interface 2 joystick (#N$1C) to
 $D142 LD ($5BEA),A             ; *#R$5BEA.}
 $D145 LD B,$12                 ; {#HTML(Clear the bottom #N$12 lines using <a
 $D147 CALL $0E44               ; rel="noopener nofollow"
                                ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                                ; }
 $D14A JP $CDE3                 ; Jump to #R$CDE3.
; Sets the user-defined keys for the left-hand Interface 2 joystick.
@label=SetInterface2Joystick_Left
*$D14D LD DE,$5BEB              ; #REGde=#R$5BEB.
 $D150 LD HL,$D165              ; #REGhl=#R$D165.
 $D153 LD BC,$0005              ; #REGbc=#N($0005,$04,$04).
 $D156 LDIR                     ; Copy the keymap to the user-defined keys
                                ; store.
 $D158 LD A,$1C                 ; {Write Interface 2 joystick (#N$1C) to
 $D15A LD ($5BEA),A             ; *#R$5BEA.}
 $D15D LD B,$12                 ; {#HTML(Clear the bottom #N$12 lines using <a
 $D15F CALL $0E44               ; rel="noopener nofollow"
                                ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                                ; }
 $D162 JP $CDE3                 ; Jump to #R$CDE3.
; The key maps for left and right Interface 2 joystick ports.
@label=Interface2KeyMap_Left
 $D165 DEFB $24,$1C,$0C,$14,$04 ;
@label=Interface2KeyMap_Right
 $D16A DEFB $03,$0B,$1B,$13,$23 ;

; Messaging: Press Fire Button
@label=Messaging_PressFireButton
t$D16F DEFB $16,$14,$07         ; PRINT AT: #N(#PEEK(#PC+$01)),
                                ; #N(#PEEK(#PC+$02)).
 $D172 DEFB $12,$01             ; FLASH: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $D174 DEFM "PRESS FIRE BUTTON" ; "#STR(#PC,$04,$11)".
 $D185 DEFB $12,$00             ; FLASH: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $D187 DEFB $FF                 ; Terminator.

; Set User-Defined Keys
;
; Used by the routines at #R$CDD1 and #R$D108.
;
; .
;
; #PUSHS #UDGTABLE {
;   #SIM(start=$CDD1,stop=$CDE9)
;   #SIM(start=$CD6F,stop=$CD85)
;   #SIM(start=$D188,stop=$D19D)
;   #SIM(start=$D1A6,stop=$D1BF,cmio=1)
;   #SCR$02(user-defined-keys)
; } UDGTABLE# #POPS
@label=SetUserDefinedKeys
c$D188 LD A,$00      ; {Reset *#R$D20C to #N$00.
 $D18A LD ($D20C),A  ; }
 $D18D LD A,$24      ; {Write Keyboard Input (#N$24) to *#R$5BEA.
 $D18F LD ($5BEA),A  ; }
; Don't clear the whole screen. Leave the header from the title screen.
 $D192 LD B,$12      ; {#HTML(Clear the bottom #N$12 lines using <a
 $D194 CALL $0E44    ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                     ; }
@label=UserDefinedKeys_Loop
*$D197 LD DE,$DACB   ; #REGde=#R$DACB.
 $D19A CALL $D60E    ; Call #R$D60E.
; Pause to let the message sink in...
 $D19D LD B,$0A      ; #REGb=#N$0A (pause loops).
@label=UserDefinedKeys_PauseLoop
*$D19F PUSH BC       ; Stash #REGbc on the stack.
 $D1A0 CALL $D3A6    ; Call #R$D3A6.
 $D1A3 POP BC        ; Restore #REGbc from the stack.
 $D1A4 DJNZ $D19F    ; Decrease counter by one and loop back to #R$D19F until
                     ; counter is zero.
; Display each (current) user-defined key, and the relevant messaging.
 $D1A6 LD A,$00      ; {Call #R$D20D using key position: #N$00.
 $D1A8 CALL $D20D    ; }
 $D1AB LD A,$01      ; {Call #R$D20D using key position: #N$01.
 $D1AD CALL $D20D    ; }
 $D1B0 LD A,$02      ; {Call #R$D20D using key position: #N$02.
 $D1B2 CALL $D20D    ; }
 $D1B5 LD A,$03      ; {Call #R$D20D using key position: #N$03.
 $D1B7 CALL $D20D    ; }
 $D1BA LD A,$04      ; {Call #R$D20D using key position: #N$04.
 $D1BC CALL $D20D    ; }
; Fetch the user input.
@label=UserDefinedKeys_InputLoop
*$D1BF CALL $028E    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $D1C2 LD A,E        ; {Loop back to #R$D1BF until any key has been pressed.
 $D1C3 CP $FF        ;
 $D1C5 JR Z,$D1BF    ; }
 $D1C7 CP $20        ; {Jump to #R$D1EE if "SPACE" has been pressed (#N$20).
 $D1C9 JP Z,$D1EE    ; }
 $D1CC PUSH AF       ; Stash the keypress on the stack briefly.
; Create an offset for the currently in-focus key position using #REGde.
 $D1CD LD A,($D20C)  ; {#REGe=*#R$D20C.
 $D1D0 LD E,A        ; }
 $D1D1 POP AF        ; Restore the keypress from the stack.
 $D1D2 LD D,$00      ; #REGd=#N$00 (to finish creating the offset for the
                     ; current key position using #REGde).
 $D1D4 LD HL,$5BEB   ; {#REGhl=#R$5BEB+#REGde.
 $D1D7 ADD HL,DE     ; }
 $D1D8 LD (HL),A     ; Write the keypress code to the appropriate position in
                     ; the user-defined keys table held by *#REGhl.
; A small pause loop to give the user a chance to release the key.
 $D1D9 LD B,$02      ; #REGb=#N$02 (pause loops).
@label=UserDefinedKeys_Debounce
*$D1DB PUSH BC       ; Stash #REGbc on the stack.
 $D1DC CALL $D3A6    ; Call #R$D3A6.
 $D1DF POP BC        ; Restore #REGbc from the stack.
 $D1E0 DJNZ $D1DB    ; Decrease counter by one and loop back to #R$D1DB until
                     ; counter is zero.
; Move onto the next key position.
 $D1E2 LD A,($D20C)  ; {Increment *#R$D20C by one.
 $D1E5 INC A         ;
 $D1E6 LD ($D20C),A  ; }
 $D1E9 CP $05        ; {Loop back to #R$D197 until all #N$05 keys have been
 $D1EB JP NZ,$D197   ; defined.}
; Each value is checked against other values ahead of it. It doesn't need to check "behind" as e.g.
; consider the following table:
; #TABLE(default,centre,centre,centre,centre,centre,centre)
; { =h,r2 Cycle | =h,r2 Using | =h,c4 Positions }
; { =h #N$01 | =h #N$02 | =h #N$03 | =h #N$04 }
; { =h #N$01 | #N$01 | #N$02 | #N$03 | #N$04 | #N$05 }
; { =h #N$02 | #N$02 | #N$03 | #N$04 | #N$05 |  ---  }
; { =h #N$03 | #N$03 | #N$04 | #N$05 |  ---  |  ---  }
; { =h #N$04 | #N$04 | #N$05 |  ---  |  ---  |  ---  }
; TABLE#
; .
; On the 1st cycle; #N$01 is checked against #N$02, #N$03, #N$04 and #N$05.
; .
; So on the 2nd cycle, there's no need to check #N$02 against #N$01 as this
; already happened in the 1st cycle.
; .
; And so on...
@label=CheckForDuplicates
*$D1EE LD B,$04      ; Set a counter; there are #N$04 other keys to check at
                     ; the beginning of the cycle.
 $D1F0 LD HL,$5BEB   ; Set a pointer in #REGhl to the beginning of the key
                     ; storage: #R$5BEB.
@label=CheckForDuplicates_Loop
*$D1F3 PUSH BC       ; Stash the current key map counter on the stack (this is
                     ; reduced by one on each cycle).
 $D1F4 LD A,(HL)     ; Does nothing, this is immediately overwritten in the
                     ; loop below.
; Clone #REGhl into #REGde to prepare for the checking loop.
 $D1F5 PUSH HL       ; {#REGde=#REGhl (using the stack).
 $D1F6 POP DE        ; }
; Process this cycle. *#REGhl points to the current "checking" key map value,
; and #REGde is incremented on each cycle to check against it.
@label=CheckForDuplicates_CheckLoop
*$D1F7 INC DE        ; *#REGde will contain the comparison key map value, so
                     ; increment #REGde by one.
 $D1F8 LD A,(DE)     ; {If there's a match between *#REGde and *#REGhl, jump to
 $D1F9 CP (HL)       ; #R$D108 and get the user to try again.
 $D1FA JP Z,$D108    ; }
 $D1FD DJNZ $D1F7    ; Decrease the key map counter by one and loop back to
                     ; #R$D1F7 until all key map values have been checked.
; This cycle is finished, so prepare for the next one.
 $D1FF POP BC        ; Restore the key map counter from the stack.
 $D200 INC HL        ; Move the value pointer to the next value.
 $D201 DEC B         ; Decrease the key map counter by one, each cycle checks
                     ; one less key value.
 $D202 JR NZ,$D1F3   ; Jump to #R$D1F3 until all key map values have been
                     ; checked.
; We are good! Clear the screen and move back to the title screen.
 $D204 LD B,$12      ; {#HTML(Clear the bottom #N$12 lines using <a
 $D206 CALL $0E44    ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                     ; }
 $D209 JP $CDE3      ; Jump to #R$CDE3.

; Current In-Focus User-Defined Key
;
; Contains the currently in-focus key position; used for highlighting.
@label=Current_UserDefinedKey
g$D20C DEFB $00

; Print User-Defined Key
;
; Used by the routine at #R$D188.
;
; A The key position
; DE Pointer to the key position messaging
@label=PrintUserDefinedKey
c$D20D PUSH DE       ; Stash the key position messaging pointer on the stack.
 $D20E LD E,A        ; Store the current position in an offset...
 $D20F LD A,($D20C)  ; {Call #R$D259 to highlight this key if it's the one currently in focus
 $D212 CP E          ; (i.e. if *#R$D20C is equal to the position currently being printed).
 $D213 CALL Z,$D259  ; }
 $D216 LD D,$00      ; #REGd=#N$00 (to finish creating the offset for the
                     ; current key position using #REGde).
; Point to the key in the user-defined key table relating to the requested key
; position.
 $D218 LD HL,$5BEB   ; {#REGhl=#R$5BEB+#REGde.
 $D21B ADD HL,DE     ; }
 $D21C EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D21D LD A,(DE)     ; {Fetch the key for this position and store it in #REGde
 $D21E LD E,A        ; as an offset.
 $D21F LD D,$00      ; }
; Point to the relevant key in the keymap table.
 $D221 LD HL,$D22C   ; {#REGhl=#R$D22C+#REGde.
 $D224 ADD HL,DE     ; }
 $D225 LD A,(HL)     ; Fetch the key value from the keymap table and store it
                     ; in #REGa.
 $D226 RST $10       ; #HTML(Print it to the screen using RST <a rel="noopener
                     ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0010.html">#N$10</a>.)
; Print the "action" messaging to signify what this key is for, e.g. "LEFT",
; "RIGHT", etc...
 $D227 POP DE        ; Restore the key position messaging pointer from the
                     ; stack.
 $D228 JP $D60E      ; Jump to #R$D60E.

; Unused
u$D22B RET           ; This is never reached.

; Table: Key Map
;
; See #R$CD6F for an example of how this is used. Each key is stored as
; an offset. So a stored value of #N$05 equates to the "T" key.
@label=Table_UserDefinedKeyMap
g$D22C DEFB $42      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D22D DEFB $48      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D22E DEFB $59      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D22F DEFB $36      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D230 DEFB $35      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D231 DEFB $54      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D232 DEFB $47      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D233 DEFB $56      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D234 DEFB $4E      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D235 DEFB $4A      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D236 DEFB $55      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D237 DEFB $37      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D238 DEFB $34      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D239 DEFB $52      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D23A DEFB $46      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D23B DEFB $43      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D23C DEFB $4D      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D23D DEFB $4B      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D23E DEFB $49      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D23F DEFB $38      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D240 DEFB $33      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D241 DEFB $45      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D242 DEFB $44      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D243 DEFB $58      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D244 DEFB $20      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D245 DEFB $4C      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D246 DEFB $4F      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D247 DEFB $39      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D248 DEFB $32      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D249 DEFB $57      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D24A DEFB $53      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D24B DEFB $5A      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D24C DEFB $20      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D24D DEFB $20      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D24E DEFB $50      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D24F DEFB $30      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D250 DEFB $31      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D251 DEFB $51      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".
 $D252 DEFB $41      ; #N(#PC-$D22C): "#CHR(#PEEK(#PC))".

; Set Default Keys
;
; Used by the routine at #R$CDD1.
@label=SetDefaultKeys
c$D253 CALL $CD6F    ; Call #R$CD6F.
 $D256 JP $CDE3      ; Jump to #R$CDE3.

; Turn Inverse On
;
; Used by the routines at #R$CDD1 and #R$D20D.
@label=InverseOn
c$D259 LD A,$14      ; {INVERSE: ON.
 $D25B RST $10       ;
 $D25C LD A,$01      ;
 $D25E RST $10       ; }
 $D25F RET           ; Return.

; Goldfish Game: Handler: Bubbles
;
; Used by the routine at #R$CE41.
@label=GoldfishGame_HandlerBubbles
c$D260 LD IX,$DD2A     ; #REGix=#R$DD2A.
 $D264 LD B,$05        ; #REGb=#N$05 (counter; maximum number of bubbles).
@label=HandlerBubbles_Loop
*$D266 PUSH BC         ; Stash the bubble counter on the stack.
 $D267 LD A,(IX+$0A)   ; {Jump to #R$D2B1 if the bubble state (*#REGix+#N$0A)
 $D26A CP $00          ; is inactive (#N$00).
 $D26C JP Z,$D2B1      ; }
; A bubble exists, so we need to redraw it in a new position. Hence, we erase
; it first here.
 $D26F LD A,$14        ; {Set INVERSE: ON
 $D271 RST $10         ;
 $D272 LD A,$01        ;
 $D274 RST $10         ; }
; Fetch the current co-ordinates.
 $D275 LD C,(IX+$00)   ; #REGc=vertical position (*#REGix+#N$00).
 $D278 LD B,(IX+$01)   ; #REGb=horizontal position (*#REGix+#N$01).
; Plot while using inverse will erase the bubble (it's only a single pixel).
 $D27B CALL $22E5      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/22DC.html#22e5">PLOT_SUB</a>.)
; Prepare for drawing the new bubble.
 $D27E LD A,$14        ; {Set INVERSE: OFF
 $D280 RST $10         ;
 $D281 LD A,$00        ;
 $D283 RST $10         ; }
; Fetch the current co-ordinates.
 $D284 LD C,(IX+$00)   ; #REGc=vertical position (*#REGix+#N$00).
 $D287 LD B,(IX+$01)   ; #REGb=horizontal position (*#REGix+#N$01).
; Move the bubble to the new position.
; .
; The bubble always moves "up" three pixels and accelerates to the right
; exponentially.
 $D28A INC C           ; {Increment #REGc by three.
 $D28B INC C           ;
 $D28C INC C           ; }
 $D28D LD A,(IX+$05)   ; #REGa=horizontal velocity (*#REGix+#N$05).
 $D290 INC (IX+$05)    ; Increment the horizontal velocity (*#REGix+#N$05) by
                       ; one to simulate acceleration.
 $D293 ADD A,B         ; {#REGb+=the velocity value.
 $D294 LD B,A          ; }
 $D295 CP $70          ; {Jump to #R$D2AB if #REGa is higher than #N$70.
 $D297 JR NC,$D2AB     ; }
; Update the data table with the new co-ordinates.
 $D299 LD (IX+$00),C   ; Write #REGc to vertical position (*#REGix+#N$00).
 $D29C LD (IX+$01),B   ; Write #REGb to horizontal position (*#REGix+#N$01).
; Draw the bubble to the screen buffer.
@label=HandlerBubbles_Plot
*$D29F CALL $22E5      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/22DC.html#22e5">PLOT_SUB</a>.)
; Move onto the next bubble.
@label=HandlerBubbles_Next
*$D2A2 POP BC          ; Restore the bubble counter from the stack.
 $D2A3 LD DE,$000B     ; {#REGix+=#N($000B,$04,$04).
 $D2A6 ADD IX,DE       ; }
 $D2A8 DJNZ $D266      ; Decrease the bubble counter by one and loop back to
                       ; #R$D266 until all bubbles have been evaluated.
 $D2AA RET             ; Return.
; The bubble has finished its cycle so deactivate it.
@label=HandlerBubbles_Deactivate
*$D2AB LD (IX+$0A),$00 ; Write inactive (#N$00) to bubble state
                       ; (*#REGix+#N$0A).
 $D2AF JR $D2A2        ; Jump to #R$D2A2.
; Decide if a new bubble should be created.
@label=GoldfishGame_HandlerBubbles_Generate
*$D2B1 CALL $D8D4      ; Call #R$D8D4.
 $D2B4 CP $03          ; {Jump to #R$D2A2 if #REGa is lower than #N$03.
 $D2B6 JR C,$D2A2      ; }
; No bubbles if the players oxygen has run out.
 $D2B8 LD A,($D33E)    ; {Jump to #R$D2A2 if *#R$D33E is equal to #N$00.
 $D2BB CP $00          ;
 $D2BD JR Z,$D2A2      ; }
; Generate a new bubble.
; .
; Fetch the player co-ordinates to determine the bubbles starting position.
 $D2BF LD BC,($DC0E)   ; #REGbc=*#R$DC0E.
 $D2C3 LD A,$21        ; #REGa=#N$21.
 $D2C5 SUB C           ; #REGa-=#REGc.
 $D2C6 SLA A           ; Shift #REGa left (with carry).
 $D2C8 SLA A           ; Shift #REGa left (with carry).
 $D2CA SLA A           ; Shift #REGa left (with carry).
 $D2CC ADD A,$06       ; #REGa+=#N$06.
 $D2CE LD (IX+$00),A   ; Write #REGa to vertical position (*#REGix+#N$00).
 $D2D1 LD A,B          ; #REGa=#REGb.
 $D2D2 DEC A           ; {Decrease #REGa by two.
 $D2D3 DEC A           ; }
 $D2D4 SLA A           ; Shift #REGa left (with carry).
 $D2D6 SLA A           ; Shift #REGa left (with carry).
 $D2D8 SLA A           ; Shift #REGa left (with carry).
 $D2DA CP $70          ; {Jump to #R$D2A2 if #REGa is higher than #N$70.
 $D2DC JR NC,$D2A2     ; }
; Active the bubble.
 $D2DE LD (IX+$01),A   ; Write #REGa to horizontal position (*#REGix+#N$01).
 $D2E1 LD (IX+$0A),$01 ; Write "active" (#N$01) to bubble state
                       ; (*#REGix+#N$0A).
 $D2E5 LD (IX+$05),$01 ; Write #N$01 to the horizontal velocity
                       ; (*#REGix+#N$05).
; Fetch the current co-ordinates, and jump to plot the new bubble on the
; screen.
 $D2E9 LD C,(IX+$00)   ; #REGc=vertical position (*#REGix+#N$00).
 $D2EC LD B,(IX+$01)   ; #REGb=horizontal position (*#REGix+#N$01).
 $D2EF JP $D29F        ; Jump to #R$D29F.

; Goldfish Game: Air Bar
;
; Used by the routine at #R$CE41.
;
; .
;
; Only remove air every 16th frame.
@label=GoldfishGame_AirBar
c$D2F2 LD A,($D93D)                         ; #REGa=*#R$D93D.
 $D2F5 AND %00001111                        ; {Only proceed every 16th frame,
 $D2F7 RET NZ                               ; otherwise return.}
; This entry point is used by the routines at #R$CE41 and #R$D05B.
@label=GoldfishGame_PrintAirBar
*$D2F8 LD HL,$D22E                          ; {#HTML(Write #R$D32E(#N$D22E)
 $D2FB LD ($5C36),HL                        ; (#R$D32E) to *<a rel="noopener
                                            ; nofollow"
                                            ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                                            ; }
; Set the co-ordinates of where we're going to PRINT AT.
 $D2FE LD B,$02                             ; {#HTML(Set up the screen buffer
 $D300 LD C,$15                             ; location #N$15/#N$02 using <a
 $D302 CALL $0DD9                           ; rel="noopener nofollow"
                                            ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                                            ; }
; Set the attributes.
 $D305 LD A,$10                             ; {Set INK: RED (#N$02).
 $D307 RST $10                              ;
 $D308 LD A,$02                             ;
 $D30A RST $10                              ; }
 $D30B LD A,$11                             ; {Set PAPER: CYAN (#N$05).
 $D30D RST $10                              ;
 $D30E LD A,$05                             ;
 $D310 RST $10                              ; }
 $D311 LD A,($D33E)                         ; {Is *#R$D33E zero?
 $D314 CP $00                               ; }
 $D316 PUSH AF                              ; Stash the current oxygen level on
                                            ; the stack.
 $D317 CALL Z,$D550                         ; Call #R$D550 if the current
                                            ; oxygen level is zero.
 $D31A POP AF                               ; Restore the current oxygen level
                                            ; from the stack.
 $D31B JR Z,$D32A                           ; Jump to #R$D32A if the current
                                            ; oxygen level is zero.
; The player has air, so deplete it here.
; .
; See #POKE#goldfishGameInfiniteOxygen(Infinite Oxygen (Hidden Game)).
 $D31D DEC A                                ; {Decrease the current oxygen
 $D31E LD ($D33E),A                         ; level by one, and write it back
                                            ; to *#R$D33E.}
; Now draw a visual representation of the air level to the screen.
 $D321 LD B,A                               ; {#REGb=the current oxygen
 $D322 INC B                                ; level+#N$01 (as a counter for
                                            ; drawing the air bar).}
 $D323 LD A,$20                             ; #REGa=#R$D32E (#N$20).
@label=GoldfishGame_PrintAirBar_Loop
*$D325 PUSH AF                              ; Stash the air bar UDG reference
                                            ; on the stack.
 $D326 RST $10                              ; #HTML(Print to the screen using
                                            ; RST <a rel="noopener nofollow"
                                            ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0010.html">#N$10</a>.)
 $D327 POP AF                               ; Restore the air bar UDG reference
                                            ; from the stack.
 $D328 DJNZ $D325                           ; Decrease the air bar counter by
                                            ; one and loop back to #R$D325
                                            ; until the counter is zero.
; Print some empty space to mask off the end of the air bar.
@label=GoldfishGame_PrintNoAirBar
*$D32A LD A,$21                             ; #REGa=#R$D336 (#N$21).
 $D32C RST $10                              ; #HTML(Print to the screen using
                                            ; RST <a rel="noopener nofollow"
                                            ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0010.html">#N$10</a>.)
 $D32D RET                                  ; Return.
@label=UDG_AirBar
 $D32E DEFB $00,$00,$FF,$FF,$FF,$FF,$00,$00 ; #UDGTABLE {
                                            ; #UDG(addr=#PC,attr=$2A) }
                                            ; UDGTABLE#
@label=UDG_NoAirBar
 $D336 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE {
                                            ; #UDG(addr=#PC,attr=$2A) }
                                            ; UDGTABLE#

; Goldfish Game: Oxygen Level
@label=GoldfishGame_OxygenLevel
g$D33E DEFB $13

; Routine at D33F
;
; Used by the routine at #R$D3AF.
c$D33F LD HL,($5C36) ; {#HTML(Stash the current character set pointer at *<a
 $D342 PUSH HL       ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>
                     ; on the stack.)}
 $D343 LD HL,$9F6C   ; {#HTML(Write #R$A06C(#N$9F6C) to *<a rel="noopener
 $D346 LD ($5C36),HL ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $D349 LD A,$20      ; #REGa=#N$20.
 $D34B CALL $D460    ; Call #R$D460.
 $D34E POP HL        ; {#HTML(Restore the previous character set pointer from
 $D34F LD ($5C36),HL ; the stack, and write it to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $D352 RET           ; Return.

; Print Colour UDG
;
; Used by the routines at #R$CE41, #R$D460, #R$D647 and #R$D8E2.
;
; A Character to print
;
; Identical clone of #R$E6DC.
@label=PrintColourUDG
c$D353 EXX           ; Switch to the shadow registers.
 $D354 LD E,A        ; {#REGde'=#REGa*#N$08.
 $D355 LD D,$00      ;
 $D357 SLA E         ;
 $D359 RL D          ;
 $D35B SLA E         ;
 $D35D RL D          ;
 $D35F SLA E         ;
 $D361 RL D          ; }
 $D363 LD HL,($5C36) ; {#HTML(#REGhl'=*<a rel="noopener nofollow"
 $D366 ADD HL,DE     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>+#REGde'.)
                     ; }
 $D367 LD DE,($5C84) ; {#HTML(Increment *<a rel="noopener nofollow"
 $D36B INC DE        ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>
 $D36C LD ($5C84),DE ; by one.)}
 $D370 DEC DE        ; Decrease #REGde' by one.
; All character blocks are 1 x 8 bytes.
; .
; Copy the data from the current character set to the screen buffer.
 $D371 LD B,$08      ; #REGb'=#N$08 (byte counter).
@label=PrintColourUDG_Loop
*$D373 LD A,(HL)     ; #REGa=*#REGhl'.
 $D374 LD (DE),A     ; Write #REGa to *#REGde'.
 $D375 INC HL        ; Increment #REGhl' by one.
 $D376 INC D         ; Increment #REGd' by one.
 $D377 DJNZ $D373    ; Decrease counter by one and loop back to #R$D373 until
                     ; counter is zero.
; Calculate the attribute buffer position.
 $D379 LD BC,($5C88) ; #HTML(#REGbc'=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C88.html">S_POSN</a>.)
 $D37D LD HL,$5800   ; #REGhl'=#N$5800 (attribute buffer location).
 $D380 DEC C         ; Decrease #REGc' by one.
 $D381 LD ($5C88),BC ; #HTML(Write #REGbc' to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C88.html">S_POSN</a>.)
 $D385 INC C         ; Increment #REGc' by one.
 $D386 LD A,$21      ; {#REGe'=#N$21-#REGc'.
 $D388 SUB C         ;
 $D389 LD E,A        ; }
 $D38A LD D,$00      ; #REGd'=#N$00.
 $D38C ADD HL,DE     ; #REGhl'+=#REGde'.
 $D38D LD A,$18      ; {#REGe'=#N$18-#REGb'.
 $D38F SUB B         ;
 $D390 LD E,A        ; }
 $D391 SLA E         ; {Shift #REGe' left four positions (with carry).
 $D393 SLA E         ;
 $D395 SLA E         ;
 $D397 SLA E         ; }
 $D399 RL D          ; Rotate #REGd' left.
 $D39B SLA E         ; Shift #REGe' left (with carry).
 $D39D RL D          ; Rotate #REGd' left.
 $D39F ADD HL,DE     ; #REGhl'+=#REGde'.
 $D3A0 LD A,($5C8F)  ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8F.html">ATTR_T</a>.)
 $D3A3 LD (HL),A     ; Write #REGa to *#REGhl'.
 $D3A4 EXX           ; Switch back to the normal registers.
 $D3A5 RET           ; Return.

; Small Pause
;
; Used by the routines at #R$CE41, #R$D0E2, #R$D10C, #R$D188 and #R$D5CF.
@label=SmallPause
c$D3A6 LD BC,$1388   ; #REGbc=#N$1388.
@label=SmallPause_Loop
*$D3A9 DEC BC        ; Decrease #REGbc by one.
 $D3AA LD A,B        ; {Jump to #R$D3A9 until #REGbc is zero.
 $D3AB OR C          ;
 $D3AC JR NZ,$D3A9   ; }
 $D3AE RET           ; Return.

; Routine at D3AF
;
; Used by the routines at #R$D4CC and #R$D778.
c$D3AF LD A,C        ; #REGa=#REGc.
 $D3B0 SUB (IX+$0D)  ; #REGa-=*#REGix+#N$0D.
 $D3B3 JR Z,$D3C1    ; Jump to #R$D3C1 if the result is zero.
 $D3B5 CP $FF        ; Compare #REGa with #N$FF.
 $D3B7 PUSH AF       ; Stash #REGaf on the stack.
 $D3B8 CALL Z,$D3EA  ; Call #R$D3EA if #REGa was equal to #N$FF on line
                     ; #R$D3B3.
 $D3BB POP AF        ; Restore #REGaf from the stack.
 $D3BC CALL NZ,$D405 ; Call #R$D405 if #REGa was not equal to #N$FF on line
                     ; #R$D3B3.
 $D3BF JR $D3CC      ; Jump to #R$D3CC.
*$D3C1 LD A,E        ; {Jump to #R$D3CC if #REGe is equal to *#REGix+#N$0B.
 $D3C2 CP (IX+$0B)   ;
 $D3C5 JR Z,$D3CC    ; }
 $D3C7 CP $03        ; {Call #R$D405 if #REGe is equal to #N$03.
 $D3C9 CALL Z,$D405  ; }
*$D3CC LD A,B        ; #REGa=#REGb.
 $D3CD SUB (IX+$0E)  ; #REGa-=*#REGix+#N$0E.
 $D3D0 JR Z,$D3DE    ; Jump to #R$D3DE if the result is zero.
 $D3D2 CP $FF        ; Compare #REGa with #N$FF.
 $D3D4 PUSH AF       ; Stash #REGaf on the stack.
 $D3D5 CALL Z,$D445  ; Call #R$D445 if #REGa was equal to #N$FF on line
                     ; #R$D3D2.
 $D3D8 POP AF        ; Restore #REGaf from the stack.
 $D3D9 CALL NZ,$D425 ; Call #R$D425 if #REGa was not equal to #N$FF on line
                     ; #R$D3D2.
 $D3DC JR $D3E9      ; Jump to #R$D3E9.
*$D3DE LD A,D        ; {Jump to #R$D3E9 if #REGd is equal to *#REGix+#N$0F.
 $D3DF CP (IX+$0F)   ;
 $D3E2 JR Z,$D3E9    ; }
 $D3E4 CP $03        ; {Call #R$D425 if #REGd is equal to #N$03.
 $D3E6 CALL Z,$D425  ; }
*$D3E9 RET           ; Return.
*$D3EA PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $D3EB PUSH DE       ; }
 $D3EC LD C,(IX+$0D) ; #REGc=*#REGix+#N$0D.
 $D3EF LD B,(IX+$0E) ; #REGb=*#REGix+#N$0E.
 $D3F2 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $D3F5 LD E,$01      ; #REGe=#N$01.
 $D3F7 LD A,(IX+$03) ; {Jump to #R$D3FF if *#REGix+#N$03 is equal to #N$03.
 $D3FA CP $03        ;
 $D3FC JR Z,$D3FF    ; }
 $D3FE INC D         ; Increment #REGd by one.
*$D3FF CALL $D33F    ; Call #R$D33F.
 $D402 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $D403 POP BC        ; }
 $D404 RET           ; Return.
*$D405 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $D406 PUSH DE       ; }
 $D407 LD A,(IX+$0D) ; #REGa=*#REGix+#N$0D.
 $D40A LD C,(IX+$07) ; #REGc=*#REGix+#N$07.
 $D40D SUB C         ; #REGa-=#REGc.
 $D40E LD C,A        ; #REGc=#REGa.
 $D40F LD B,(IX+$0E) ; #REGb=*#REGix+#N$0E.
 $D412 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $D415 LD E,$01      ; #REGe=#N$01.
 $D417 LD A,(IX+$03) ; {Jump to #R$D41F if *#REGix+#N$03 is equal to #N$03.
 $D41A CP $03        ;
 $D41C JR Z,$D41F    ; }
 $D41E INC D         ; Increment #REGd by one.
*$D41F CALL $D33F    ; Call #R$D33F.
 $D422 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $D423 POP BC        ; }
 $D424 RET           ; Return.
*$D425 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $D426 PUSH DE       ; }
 $D427 LD A,(IX+$0E) ; #REGa=*#REGix+#N$0E.
 $D42A LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $D42D SUB D         ; #REGa-=#REGd.
 $D42E LD B,A        ; #REGb=#REGa.
 $D42F LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $D432 LD C,(IX+$0D) ; #REGc=*#REGix+#N$0D.
 $D435 LD D,$01      ; #REGd=#N$01.
 $D437 LD A,(IX+$02) ; {Jump to #R$D43F if *#REGix+#N$02 is equal to #N$03.
 $D43A CP $03        ;
 $D43C JR Z,$D43F    ; }
 $D43E INC E         ; Increment #REGe by one.
*$D43F CALL $D33F    ; Call #R$D33F.
 $D442 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $D443 POP BC        ; }
 $D444 RET           ; Return.
*$D445 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $D446 PUSH DE       ; }
 $D447 LD C,(IX+$0D) ; #REGc=*#REGix+#N$0D.
 $D44A LD B,(IX+$0E) ; #REGb=*#REGix+#N$0E.
 $D44D LD D,$01      ; #REGd=#N$01.
 $D44F LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $D452 LD A,(IX+$02) ; {Jump to #R$D45A if *#REGix+#N$02 is equal to #N$03.
 $D455 CP $03        ;
 $D457 JR Z,$D45A    ; }
 $D459 INC E         ; Increment #REGe by one.
*$D45A CALL $D33F    ; Call #R$D33F.
 $D45D POP DE        ; {Restore #REGde and #REGbc from the stack.
 $D45E POP BC        ; }
 $D45F RET           ; Return.

; Goldfish Game: Print Sprite
;
; Used by the routines at #R$CFF6, #R$D33F and #R$D870.
;
; A Sprite ID (where to begin)
; BC Print co-ordinates
; D Sprite height
; E Sprite width
@label=GoldfishGame_PrintSprite
c$D460 PUSH HL       ; Preserve #REGhl on the stack as it's not actively used.
; Store the Sprite ID. Note; it is incremented on each UDG character
; block being printed (see #R$D47F), hence why it's -#N$01 here.
 $D461 DEC A         ; {Decrease the Spite ID by one and store it at *#R$DB3C.
 $D462 LD ($DB3C),A  ; }
 $D465 LD A,E        ; {Store the Sprite width at *#R$DB3B.
 $D466 LD ($DB3B),A  ; }
; Ensure that we're printing within the screen boundaries.
@label=GoldfishGame_PrintSprite_Loop
*$D469 LD A,C        ; {Jump to #R$D49A if #REGc is lower than #N$02.
 $D46A CP $02        ;
 $D46C JP C,$D49A    ; }
 $D46F LD A,($DB3B)  ; {#REGe=*#R$DB3B.
 $D472 LD E,A        ; }
 $D473 LD A,C        ; {Jump to #R$D4AB if #REGc is higher than #N$22.
 $D474 CP $22        ;
 $D476 JP NC,$D4AB   ; }
@label=GoldfishGame_PrintSprite_At
*$D479 PUSH BC       ; {Stash the print co-ordinates and the sprite height/
 $D47A PUSH DE       ; width on the stack.}
; Set the current printing location.
 $D47B CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $D47E POP DE        ; Restore the sprite height/ width from the stack, they're
                     ; used here as loop counters.
; Action this sprite ID (+#N$01, and print it to the screen buffer).
@label=GoldfishGame_PrintSprite_PrintUDG
*$D47F LD A,($DB3C)  ; {Increment *#R$DB3C by one.
 $D482 INC A         ;
 $D483 LD ($DB3C),A  ; }
 $D486 CALL $D353    ; Call #R$D353.
 $D489 LD A,C        ; {Call #R$D49C if #REGc is equal to #N$02.
 $D48A CP $02        ;
 $D48C CALL Z,$D49C  ; }
; Keep track of where we're printing to on the screen.
 $D48F DEC C         ; Move right one character block.
 $D490 DEC E         ; Decrease the sprite width counter by one.
 $D491 JR NZ,$D47F   ; Jump to #R$D47F until the sprite width counter is zero.
; A row of the sprite has been printed, so restore the screen position and move
; onto the next line.
 $D493 POP BC        ; Restore the current print co-ordinates from the stack.
 $D494 DEC D         ; Decrease the sprite height counter by one.
 $D495 JR Z,$D49A    ; Jump to #R$D49A if the whole sprite has now finished
                     ; printing.
 $D497 DEC B         ; Move down one row.
 $D498 JR $D469      ; Jump to #R$D469.
; Housekeeping, and return.
@label=GoldfishGame_PrintSprite_Return
*$D49A POP HL        ; Restore #REGhl from the stack.
 $D49B RET           ; Return.
*$D49C DEC E         ; Decrease #REGe by one.
 $D49D PUSH AF       ; Stash #REGaf on the stack.
 $D49E INC E         ; Increment #REGe by one.
 $D49F LD A,($DB3C)  ; {Increment *#R$DB3C by one.
 $D4A2 INC A         ;
 $D4A3 LD ($DB3C),A  ; }
 $D4A6 POP AF        ; Restore #REGaf from the stack.
 $D4A7 RET Z         ; Return if #REGa  is zero.
 $D4A8 DEC E         ; Decrease #REGe by one.
 $D4A9 JR $D49C      ; Jump to #R$D49C.
; Try to discover the printable part of the sprite.
@label=GoldfishGame_FindViewableSprite
*$D4AB LD A,($DB3C)  ; {Increment *#R$DB3C by one.
 $D4AE INC A         ;
 $D4AF LD ($DB3C),A  ; }
 $D4B2 DEC E         ; Decrease the sprite width counter by one.
 $D4B3 JP Z,$D49A    ; Jump to #R$D49A if the sprite width counter is zero.
 $D4B6 DEC C         ; Move right one character block.
 $D4B7 LD A,C        ; {Jump to #R$D479 if #REGc is higher than #N$22.
 $D4B8 CP $22        ;
 $D4BA JR NC,$D479   ; }
 $D4BC JR $D4AB      ; Keep looping back to #R$D4AB until we either return if this is
                     ; invalid, or find a printable part of the sprite.

; Clear Screen
;
; Used by the routines at #R$CDD1 and #R$CE41.
;
; .
;
; The whole screen is #N$18 lines.
; .
; #HTML(Will use the colour set at <a rel="noopener nofollow"
; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
@label=ClearScreen
c$D4BE LD B,$18      ; {#HTML(Clear the bottom #N$18 lines using <a
 $D4C0 CALL $0E44    ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                     ; }
 $D4C3 RET           ; Return.

; Player: Move Right
;
; Used by the routines at #R$D55C and #R$D579.
@label=PlayerMoveRight
c$D4C4 DEC (IX+$04)  ; Decrease *#REGix+#N$04 by one.
 $D4C7 RET           ; Return.

; Player: Move Left
;
; Used by the routines at #R$D55C and #R$D579.
@label=PlayerMoveLeft
c$D4C8 INC (IX+$04)  ; Increment *#REGix+#N$04 by one.
 $D4CB RET           ; Return.

; Routine at D4CC
;
; Used by the routine at #R$CE41.
c$D4CC LD IX,$DC0E     ; #REGix=#R$DC0E.
 $D4D0 LD A,$11        ; {Set PAPER: #N$01.
 $D4D2 RST $10         ;
 $D4D3 LD A,$01        ;
 $D4D5 RST $10         ; }
 $D4D6 LD A,(IX+$05)   ; {Jump to #R$D4E1 if *#REGix+#N$05 is equal to #N$00.
 $D4D9 CP $00          ;
 $D4DB JR Z,$D4E1      ; }
 $D4DD LD (IX+$04),$00 ; Write #N$04 to *#REGix+#N$04.
*$D4E1 CALL $D616      ; Call #R$D616.
 $D4E4 LD A,C          ; {Jump to #R$D547 if #REGc is equal to #N$19.
 $D4E5 CP $19          ;
 $D4E7 JP Z,$D547      ; }
 $D4EA CP $0D          ; {Jump to #R$D547 if #REGc is equal to #N$0D.
 $D4EC JP Z,$D547      ; }
 $D4EF LD A,B          ; {Jump to #R$D547 if #REGb is equal to #N$11.
 $D4F0 CP $11          ;
 $D4F2 JP Z,$D547      ; }
 $D4F5 CP $05          ; {Jump to #R$D547 if #REGb is equal to #N$05.
 $D4F7 JP Z,$D547      ; }
 $D4FA LD A,C          ; {Jump to #R$D50C if #REGc is not equal to
 $D4FB CP (IX+$00)     ; *#REGix+#N$00.
 $D4FE JR NZ,$D50C     ; }
 $D500 LD A,B          ; {Jump to #R$D50C if #REGb is not equal to
 $D501 CP (IX+$01)     ; *#REGix+#N$01.
 $D504 JR NZ,$D50C     ; }
 $D506 LD A,(IX+$03)   ; {Jump to #R$D50C if *#REGix+#N$03 is equal to #REGd.
 $D509 CP D            ;
 $D50A JR Z,$D50C      ; }
*$D50C LD (IX+$00),C   ; Write #REGc to *#REGix+#N$00.
 $D50F LD (IX+$01),B   ; Write #REGb to *#REGix+#N$01.
 $D512 LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $D515 LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $D518 PUSH DE         ; Stash #REGde on the stack.
 $D519 CALL $D3AF      ; Call #R$D3AF.
 $D51C POP DE          ; Restore #REGde from the stack.
 $D51D LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $D520 LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $D523 LD HL,$934C     ; Does nothing, this is immediately overwritten on the
                       ; next line.
 $D526 LD HL,$9EEC     ; {#HTML(Write #R$9FEC(#N$9EEC) to *<a rel="noopener
 $D529 LD ($5C36),HL   ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $D52C CALL $D647      ; Call #R$D647.
 $D52F LD A,(IX+$00)   ; #REGa=*#REGix+#N$00.
 $D532 LD (IX+$0D),A   ; Write #REGa to *#REGix+#N$0D.
 $D535 LD A,(IX+$01)   ; #REGa=*#REGix+#N$01.
 $D538 LD (IX+$0E),A   ; Write #REGa to *#REGix+#N$0E.
 $D53B LD A,(IX+$03)   ; #REGa=*#REGix+#N$03.
 $D53E LD (IX+$0F),A   ; Write #REGa to *#REGix+#N$0F.
 $D541 LD A,(IX+$02)   ; #REGa=*#REGix+#N$02.
 $D544 LD (IX+$0B),A   ; Write #REGa to *#REGix+#N$0B.
*$D547 LD (IX+$04),$00 ; Write #N$00 to *#REGix+#N$04.
 $D54B LD (IX+$05),$00 ; Write #N$00 to *#REGix+#N$05.
 $D54F RET             ; Return.

; Routine at D550
;
; Used by the routine at #R$D2F2.
c$D550 LD BC,$0000   ; {Write #N($0000,$04,$04) to: #LIST { *#R$DC12/ *#R$DC13
 $D553 LD ($DC12),BC ; } { *#R$DB42 } LIST#
 $D557 LD ($DB42),BC ; }
 $D55B RET           ; Return.

; Controls: Kempston Joystick
;
; Used by the routine at #R$D579.
@label=Controls_KempstonJoystick
c$D55C IN A,($1F)    ; Read from the Kempston joystick port.
 $D55E PUSH AF       ; Stash the control on the stack.
 $D55F AND $02       ; {If left has been pressed, call #R$D4C8.
 $D561 CALL NZ,$D4C8 ; }
 $D564 POP AF        ; {Restore the current control but keep it on the stack.
 $D565 PUSH AF       ; }
 $D566 AND $04       ; {If down has been pressed, call #R$D5C7.
 $D568 CALL NZ,$D5C7 ; }
 $D56B POP AF        ; {Restore the current control but keep it on the stack.
 $D56C PUSH AF       ; }
 $D56D AND $08       ; {If up has been pressed, call #R$D5CB.
 $D56F CALL NZ,$D5CB ; }
 $D572 POP AF        ; Restore the current control from the stack.
 $D573 AND $01       ; {If right has been pressed, call #R$D4C4.
 $D575 JP NZ,$D4C4   ; }
 $D578 RET           ; Return.

; Action: Player Controls
;
; Used by the routine at #R$CE41.
@label=Action_PlayerControls
c$D579 LD IX,$DC0E   ; #REGix=#R$DC0E.
 $D57D LD A,($5BEA)  ; {Jump to #R$D55C if *#R$5BEA is set to Kempston joystick
 $D580 CP $0C        ; (#N$0C).
 $D582 JP Z,$D55C    ; }
 $D585 CALL $028E    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $D588 LD A,E        ; #REGa=the keypress.
 $D589 LD HL,$5BEB   ; {Jump to #R$D4C8 if #REGa is equal to *#R$5BEB.
 $D58C CP (HL)       ;
 $D58D JP Z,$D4C8    ; }
 $D590 INC HL        ; {Jump to #R$D4C4 if #REGa is equal to *#R$5BEC.
 $D591 CP (HL)       ;
 $D592 JP Z,$D4C4    ; }
 $D595 INC HL        ; {Jump to #R$D5CB if #REGa is equal to *#R$5BED.
 $D596 CP (HL)       ;
 $D597 JP Z,$D5CB    ; }
 $D59A INC HL        ; {Jump to #R$D5C7 if #REGa is equal to *#R$5BEE.
 $D59B CP (HL)       ;
 $D59C JP Z,$D5C7    ; }
 $D59F RET           ; Return.

; Routine at D5A0
c$D5A0 LD A,$02      ; {#HTML(Write #N$02 to <a
 $D5A2 LD ($5C6B),A  ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C6B.html">DF_SZ</a>.)
                     ; }
 $D5A5 POP BC        ; Restore #REGbc from the stack.
 $D5A6 EXX           ; Switch to the shadow registers.
 $D5A7 POP HL        ; Restore #REGhl' from the stack.
 $D5A8 EXX           ; Switch back to the normal registers.
; Restore the default ZX Spectrum font.
 $D5A9 LD HL,$3C00   ; #HTML(#REGhl=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                     ; (CHARSET-#N$100).)
 $D5AC LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $D5AF RET           ; Return.

; Toggle Sound
;
; Used by the routine at #R$D5CF.
@label=ToggleSound
c$D5B0 LD A,($FFF8)  ; {Jump to #R$D5BF if *#R$FFF8 is equal to #N$00.
 $D5B3 CP $00        ;
 $D5B5 JR Z,$D5BF    ; }
 $D5B7 LD A,$00      ; {Write OFF (#N$00) to *#R$FFF8.
 $D5B9 LD ($FFF8),A  ; }
 $D5BC JP $D5D6      ; Jump to #R$D5D6.
@label=ToggleSoundOn
*$D5BF LD A,$01      ; {Write ON (#N$01) to *#R$FFF8.
 $D5C1 LD ($FFF8),A  ; }
 $D5C4 JP $D5D6      ; Jump to #R$D5D6.

; Player: Move Down
;
; Used by the routines at #R$D55C and #R$D579.
@label=PlayerMoveDown
c$D5C7 DEC (IX+$05)  ; Decrease *#REGix+#N$05 by one.
 $D5CA RET           ; Return.

; Player: Move Up
;
; Used by the routines at #R$CE41, #R$D55C and #R$D579.
@label=PlayerMoveUp
c$D5CB INC (IX+$05)  ; Increment *#REGix+#N$05 by one.
 $D5CE RET           ; Return.

; Menu Keypress
;
; Used by the routine at #R$CDD1.
;
; .
;
; #HTML(Use <a rel="noopener nofollow"
; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a> as a timer.)
@label=MenuKeypress
c$D5CF LD BC,$0000   ; {#HTML(Reset *<a rel="noopener nofollow"
 $D5D2 LD ($5C78),BC ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                     ; to #N($0000,$04,$04).)}
; This entry point is used by the routine at #R$D5B0.
@label=MenuKeypress_Loop
*$D5D6 LD BC,($5C78) ; #HTML(#REGbc=*<a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $D5DA LD A,B        ; {#HTML(Jump to #R$D602 if the timer held by <a
 $D5DB CP $04        ; rel="noopener nofollow"
 $D5DD JP Z,$D602    ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                     ; is up.)}
 $D5E0 CALL $D3A6    ; Call #R$D3A6 (presumably to debounce).
; Fetch the players pressed key (if any) and handle it.
; .
; No keys being pressed returns a #N$FF response.
 $D5E3 CALL $028E    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $D5E6 LD A,E        ; {Jump to #R$D5B0 if the fire button has been pressed.
 $D5E7 CP $10        ;
 $D5E9 JP Z,$D5B0    ; }
 $D5EC CP $FF        ; {Return if any button has been pressed.
 $D5EE RET NZ        ; }
 $D5EF LD A,($5BEA)  ; {Jump to #R$D5F9 if *#R$5BEA is set to Kempston joystick
 $D5F2 CP $0C        ; (#N$0C).
 $D5F4 JP Z,$D5F9    ; }
 $D5F7 JR $D5D6      ; Jump to #R$D5D6.
; Handle checking if the player has pressed fire on their Kempston joystick.
@label=MenuKeypress_Kempston
*$D5F9 IN A,($1F)    ; Read from the Kempston joystick port.
 $D5FB AND %00010000 ; {Jump to #R$D5D6 if fire has not been pressed.
 $D5FD JR Z,$D5D6    ; }
 $D5FF LD A,$23      ; #REGa=#N$23.
 $D601 RET           ; Return.

; Routine at D602
;
; Used by the routines at #R$CD86 and #R$D5CF.
c$D602 POP BC        ; Restore #REGbc from the stack.
 $D603 LD A,$03      ; {Write #N$03 to #R$5BF0.
 $D605 LD ($5BF0),A  ; }
 $D608 CALL $DEA8    ; Call #R$DEA8.
 $D60B JP $CD86      ; Jump to #R$CD86.

; Print String
;
; Used by the routines at #R$CDD1, #R$CE41, #R$D0E2, #R$D10C, #R$D188 and
; #R$D20D.
;
; DE Pointer to string data
@label=PrintString
c$D60E LD A,(DE)     ; Fetch a character from the string data pointer.
 $D60F INC DE        ; Increment the string data pointer by one.
 $D610 CP $FF        ; {Return if the current character is equal to #N$FF (the
 $D612 RET Z         ; terminator).}
 $D613 RST $10       ; #HTML(Print to the screen using RST <a rel="noopener
                     ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0010.html">#N$10</a>.)
 $D614 JR $D60E      ; Jump to #R$D60E.

; Routine at D616
;
; Used by the routines at #R$D4CC and #R$D778.
c$D616 LD C,(IX+$00) ; #REGc=*#REGix+#N$00.
 $D619 LD B,(IX+$01) ; #REGb=*#REGix+#N$01.
 $D61C LD E,(IX+$02) ; #REGe=*#REGix+#N$02.
 $D61F LD D,(IX+$03) ; #REGd=*#REGix+#N$03.
 $D622 LD A,(IX+$04) ; #REGa=*#REGix+#N$04.
 $D625 ADD A,E       ; #REGa+=#REGe.
 $D626 CP $80        ; {Jump to #R$D630 if #REGa is higher than #N$80.
 $D628 JR NC,$D630   ; }
 $D62A CP $04        ; {Jump to #R$D633 if #REGa is lower than #N$04.
 $D62C JR C,$D633    ; }
 $D62E INC C         ; {Increment #REGc by two.
 $D62F INC C         ; }
*$D630 DEC C         ; Decrease #REGc by one.
 $D631 AND %00000011 ; Keep only bits 0-1.
*$D633 LD E,A        ; #REGe=#REGa.
 $D634 LD A,(IX+$05) ; #REGa=*#REGix+#N$05.
 $D637 ADD A,D       ; #REGa+=#REGd.
 $D638 CP $80        ; {Jump to #R$D642 if #REGa is higher than #N$80.
 $D63A JR NC,$D642   ; }
 $D63C CP $04        ; {Jump to #R$D645 if #REGa is lower than #N$04.
 $D63E JR C,$D645    ; }
 $D640 INC B         ; {Increment #REGb by two.
 $D641 INC B         ; }
*$D642 DEC B         ; Decrease #REGb by one.
 $D643 AND %00000011 ; Keep only bits 0-1.
*$D645 LD D,A        ; #REGd=#REGa.
 $D646 RET           ; Return.

; Routine at D647
;
; Used by the routines at #R$D4CC and #R$D778.
c$D647 LD DE,$A0EC   ; #REGde=#R$A0EC.
 $D64A LD HL,$A06C   ; #REGhl=#R$A06C.
 $D64D LD BC,$0080   ; #REGbc=#N($0080,$04,$04).
 $D650 LDIR          ; Copy #N($0080,$04,$04) bytes of data from #R$A06C to
                     ; #R$A0EC.
 $D652 LD A,$10      ; {Set INK: *#REGix+#N$09.
 $D654 RST $10       ;
 $D655 LD A,(IX+$09) ;
 $D658 RST $10       ; }
 $D659 LD HL,($5C36) ; #HTML(#REGhl=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $D65C PUSH HL       ; Stash #REGhl on the stack.
 $D65D PUSH IY       ; Stash #REGiy on the stack.
 $D65F PUSH IX       ; Stash #REGix on the stack.
 $D661 LD E,(IX+$06) ; {#REGde=(*#REGix+#N$06)*#N$08.
 $D664 LD D,$00      ;
 $D666 SLA E         ;
 $D668 RL D          ;
 $D66A SLA E         ;
 $D66C RL D          ;
 $D66E SLA E         ;
 $D670 RL D          ; }
 $D672 ADD HL,DE     ; #REGhl+=#REGde.
 $D673 LD B,(IX+$02) ; #REGb=*#REGix+#N$02.
 $D676 INC B         ; Increment #REGb by one.
 $D677 LD C,$00      ; #REGc=#N$00.
 $D679 LD ($DB38),BC ; Write #REGbc to *#R$DB38.
 $D67D LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $D680 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $D683 LD A,D        ; #REGa=#REGd.
 $D684 INC A         ; Increment #REGa by one.
 $D685 SLA A         ; {Shift #REGa left three positions (with carry).
 $D687 SLA A         ;
 $D689 SLA A         ; }
 $D68B LD C,A        ; #REGc=#REGa.
 $D68C LD B,$00      ; #REGb=#N$00.
 $D68E LD IY,$A0F4   ; #REGiy=#R$A0F4.
 $D692 ADD IY,BC     ; #REGiy+=#REGbc.
 $D694 LD C,E        ; #REGc=#REGe.
 $D695 SLA C         ; {Shift #REGc left three positions (with carry).
 $D697 SLA C         ;
 $D699 SLA C         ; }
 $D69B LD B,$00      ; #REGb=#N$00.
 $D69D LD ($DB36),BC ; Write #REGbc to *#R$DB36.
 $D6A1 LD IX,$A0F4   ; #REGix=#R$A0F4.
*$D6A5 PUSH HL       ; {Stash #REGhl, #REGde and #REGhl on the stack.
 $D6A6 PUSH DE       ;
*$D6A7 PUSH HL       ; }
 $D6A8 LD B,$08      ; #REGb=#N$08.
*$D6AA PUSH BC       ; Stash #REGbc on the stack.
 $D6AB LD A,(HL)     ; #REGa=*#REGhl.
 $D6AC LD BC,($DB38) ; #REGbc=*#R$DB38.
*$D6B0 SLA A         ; Shift #REGa left (with carry).
 $D6B2 RL C          ; Rotate #REGc left.
 $D6B4 SLA A         ; Shift #REGa left (with carry).
 $D6B6 RL C          ; Rotate #REGc left.
 $D6B8 DJNZ $D6B0    ; Decrease counter by one and loop back to #R$D6B0 until
                     ; counter is zero.
 $D6BA LD (IY+$00),A ; Write #REGa to *#REGiy+#N$00.
 $D6BD LD A,C        ; #REGa=#REGc.
 $D6BE OR (IX+$00)   ; Merge the bits from *#REGix+#N$00.
 $D6C1 LD (IX+$00),A ; Write #REGa to *#REGix+#N$00.
 $D6C4 INC HL        ; Increment #REGhl by one.
 $D6C5 INC IX        ; Increment #REGix by one.
 $D6C7 INC IY        ; Increment #REGiy by one.
 $D6C9 POP BC        ; Restore #REGbc from the stack.
 $D6CA DJNZ $D6AA    ; Decrease counter by one and loop back to #R$D6AA until
                     ; counter is zero.
 $D6CC POP HL        ; Restore #REGhl from the stack.
 $D6CD LD BC,($DB36) ; #REGbc=*#R$DB36.
 $D6D1 ADD HL,BC     ; #REGhl+=#REGbc.
 $D6D2 DEC D         ; Decrease #REGd by one.
 $D6D3 JR NZ,$D6A7   ; Jump to #R$D6A7 until #REGd is zero.
 $D6D5 POP DE        ; Restore #REGde from the stack.
 $D6D6 LD BC,$0008   ; #REGbc=#N($0008,$04,$04).
 $D6D9 ADD IX,BC     ; #REGix+=#REGbc.
 $D6DB ADD IY,BC     ; #REGiy+=#REGbc.
 $D6DD POP HL        ; Restore #REGhl from the stack.
 $D6DE ADD HL,BC     ; #REGhl+=#REGbc.
 $D6DF DEC E         ; Decrease #REGe by one.
 $D6E0 JR NZ,$D6A5   ; Jump to #R$D6A5 until #REGe is zero.
 $D6E2 LD HL,$9FEC   ; #REGhl=#R$9FEC.
 $D6E5 POP IX        ; Restore #REGix from the stack.
 $D6E7 LD A,(IX+$03) ; #REGa=*#REGix+#N$03.
 $D6EA INC A         ; Increment #REGa by one.
 $D6EB SLA A         ; Shift #REGa left (with carry).
 $D6ED LD E,A        ; #REGe=#REGa.
 $D6EE LD D,$00      ; #REGd=#N$00.
 $D6F0 ADD HL,DE     ; #REGhl+=#REGde.
 $D6F1 LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $D6F4 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $D6F7 LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $D6FA LD A,(IX+$02) ; {Jump to #R$D702 if *#REGix+#N$02 is equal to #N$03.
 $D6FD CP $03        ;
 $D6FF JR Z,$D702    ; }
 $D701 INC E         ; Increment #REGe by one.
*$D702 INC D         ; Increment #REGd by one.
 $D703 LD A,D        ; #REGa=#REGd.
 $D704 LD ($DB38),A  ; Write #REGa to *#R$DB38.
 $D707 LD A,$03      ; {Jump to #R$D70F if #N$03 is not equal to *#REGix+#N$03.
 $D709 CP (IX+$03)   ;
 $D70C JR NZ,$D70F   ; }
 $D70E DEC D         ; Decrease #REGd by one.
*$D70F LD B,(IX+$01) ; #REGb=*#REGix+#N$01.
 $D712 LD C,(IX+$00) ; #REGc=*#REGix+#N$00.
 $D715 LD A,D        ; #REGa=#REGd.
 $D716 LD A,$20      ; #REGa=#N$20.
 $D718 POP IY        ; Restore #REGiy from the stack.
 $D71A LD A,$20      ; #REGa=#N$20.
*$D71C PUSH AF       ; {Stash #REGaf, #REGde and #REGbc on the stack.
 $D71D PUSH DE       ;
 $D71E PUSH BC       ; }
 $D71F LD D,A        ; #REGd=#REGa.
 $D720 LD A,C        ; {Jump to #R$D759 if #REGc is higher than #N$22.
 $D721 CP $22        ;
 $D723 JR NC,$D759   ; }
*$D725 PUSH DE       ; Stash #REGde on the stack.
 $D726 CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $D729 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $D72A POP BC        ; }
 $D72B PUSH BC       ; Stash #REGbc on the stack.
 $D72C LD A,D        ; #REGa=#REGd.
*$D72D CALL $D353    ; Call #R$D353.
 $D730 LD A,C        ; #REGa=#REGc.
 $D731 CP $02        ; Compare #REGa with #N$02.
 $D733 CALL Z,$D74C  ; Call #R$D74C zero.
 $D736 DEC C         ; Decrease #REGc by one.
 $D737 LD A,($DB38)  ; {#REGd+=*#R$DB38.
 $D73A ADD A,D       ;
 $D73B LD D,A        ; }
 $D73C DEC E         ; Decrease #REGe by one.
 $D73D JR NZ,$D72D   ; Jump to #R$D72D until #REGe is zero.
 $D73F POP BC        ; {Restore #REGbc, #REGde and #REGaf from the stack.
 $D740 POP DE        ;
 $D741 POP AF        ; }
 $D742 DEC B         ; Decrease #REGb by one.
 $D743 INC A         ; Increment #REGa by one.
 $D744 DEC D         ; Decrease #REGd by one.
 $D745 JR NZ,$D71C   ; Jump to #R$D71C until #REGd is zero.
*$D747 POP HL        ; Restore #REGhl from the stack.
 $D748 LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $D74B RET           ; Return.
*$D74C DEC E         ; Decrease #REGe by one.
 $D74D PUSH AF       ; Stash #REGaf on the stack.
 $D74E INC E         ; Increment #REGe by one.
 $D74F POP AF        ; Restore #REGaf from the stack.
 $D750 RET Z         ; Return if #REGe is zero.
 $D751 DEC E         ; Decrease #REGe by one.
 $D752 LD A,($DB38)  ; {#REGd+=*#R$DB38.
 $D755 ADD A,D       ;
 $D756 LD D,A        ; }
 $D757 JR $D74C      ; Jump to #R$D74C.
*$D759 LD A,($DB38)  ; {#REGd+=*#R$DB38.
 $D75C ADD A,D       ;
 $D75D LD D,A        ; }
 $D75E DEC E         ; Decrease #REGe by one.
 $D75F JP Z,$D76B    ; Jump to #R$D76B if #REGe is zero.
 $D762 DEC C         ; Decrease #REGc by one.
 $D763 LD A,C        ; {Jump to #R$D759 if #REGc is higher than #N$22.
 $D764 CP $22        ;
 $D766 JR NC,$D759   ; }
 $D768 JP $D725      ; Jump to #R$D725.
*$D76B POP BC        ; {Restore #REGbc, #REGbc and #REGbc from the stack.
 $D76C POP BC        ;
 $D76D POP BC        ; }
 $D76E JP $D747      ; Jump to #R$D747.

; Routine at D771
;
; Used by the routine at #R$D778.
c$D771 LD (IX+$0A),$00 ; Write #N$00 to *#REGix+#N$0A.
 $D775 JP $D7DE        ; Jump to #R$D7DE.

; Routine at D778
;
; Used by the routine at #R$CE41.
c$D778 LD A,$11        ; {Set PAPER: #N$01.
 $D77A RST $10         ;
 $D77B LD A,$01        ;
 $D77D RST $10         ; }
 $D77E LD IX,$DB46     ; #REGix=#R$DB46.
*$D782 PUSH BC         ; Stash #REGbc on the stack.
 $D783 LD A,(IX+$0A)   ; {Jump to #R$D7E7 if *#REGix+#N$0A is equal to #N$00.
 $D786 CP $00          ;
 $D788 JP Z,$D7E7      ; }
 $D78B LD L,(IX+$10)   ; #REGl=*#REGix+#N$10.
 $D78E LD H,(IX+$11)   ; #REGh=*#REGix+#N$11.
 $D791 LD ($5C36),HL   ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $D794 LD A,$10        ; {Set PAPER: *#REGix+#N$09.
 $D796 RST $10         ;
 $D797 LD A,(IX+$09)   ;
 $D79A RST $10         ; }
 $D79B LD A,(IX+$06)   ; #REGa=*#REGix+#N$06.
 $D79E ADD A,(IX+$12)  ; #REGa+=*#REGix+#N$12.
 $D7A1 CP (IX+$13)     ; {Jump to #R$D7A8 if #REGa is not equal to
 $D7A4 JR NZ,$D7A8     ; *#REGix+#N$13.}
 $D7A6 LD A,$20        ; {Write #N$20 to *#REGix+#N$06.
*$D7A8 LD (IX+$06),A   ; }
 $D7AB CALL $D616      ; Call #R$D616.
 $D7AE LD (IX+$00),C   ; Write #REGc to *#REGix+#N$00.
 $D7B1 LD (IX+$01),B   ; Write #REGb to *#REGix+#N$01.
 $D7B4 LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $D7B7 LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $D7BA CALL $D3AF      ; Call #R$D3AF.
 $D7BD LD A,C          ; {Jump to #R$D771 if #REGc is equal to #N$01.
 $D7BE CP $01          ;
 $D7C0 JP Z,$D771      ; }
 $D7C3 CALL $D647      ; Call #R$D647.
 $D7C6 LD A,(IX+$00)   ; {Write *#REGix+#N$00 to *#REGix+#N$0D.
 $D7C9 LD (IX+$0D),A   ; }
 $D7CC LD A,(IX+$01)   ; {Write *#REGix+#N$01 to *#REGix+#N$0E.
 $D7CF LD (IX+$0E),A   ; }
 $D7D2 LD A,(IX+$02)   ; {Write *#REGix+#N$02 to *#REGix+#N$0B.
 $D7D5 LD (IX+$0B),A   ; }
 $D7D8 LD A,(IX+$03)   ; {Write *#REGix+#N$03 to *#REGix+#N$0F.
 $D7DB LD (IX+$0F),A   ; }
; This entry point is used by the routine at #R$D771.
*$D7DE LD DE,$0018     ; #REGde=#N($0018,$04,$04).
 $D7E1 ADD IX,DE       ; #REGix+=#REGde.
 $D7E3 POP BC          ; Restore #REGbc from the stack.
 $D7E4 DJNZ $D782      ; Decrease counter by one and loop back to #R$D782 until
                       ; counter is zero.
 $D7E6 RET             ; Return.
*$D7E7 CALL $D8D4      ; Call #R$D8D4.
 $D7EA AND %00000111   ; Keep only bits 0-2.
 $D7EC SUB $02         ; #REGa-=#N$02.
 $D7EE CP $05          ; {Jump to #R$D7F4 if #REGa is lower than #N$05.
 $D7F0 JR C,$D7F4      ; }
 $D7F2 LD A,$04        ; #REGa=#N$04.
*$D7F4 LD E,A          ; #REGe=#REGa.
 $D7F5 LD D,$00        ; #REGd=#N$00.
 $D7F7 SLA E           ; {Shift #REGe left three positions (with carry).
 $D7F9 SLA E           ;
 $D7FB SLA E           ; }
 $D7FD PUSH DE         ; Stash #REGde on the stack.
 $D7FE POP HL          ; Restore #REGhl from the stack.
 $D7FF SLA E           ; Shift #REGe left (with carry).
 $D801 RL D            ; Rotate #REGd left.
 $D803 ADD HL,DE       ; #REGhl+=#REGde.
 $D804 LD DE,$D93E     ; #REGde=#R$D93E.
 $D807 ADD HL,DE       ; #REGhl+=#REGde.
 $D808 PUSH IX         ; Stash #REGix on the stack.
 $D80A POP DE          ; Restore #REGde from the stack.
 $D80B LD BC,$0018     ; #REGbc=#N($0018,$04,$04).
 $D80E LDIR            ; LDIR.
*$D810 CALL $D8D4      ; Call #R$D8D4.
 $D813 AND %00001111   ; Keep only bits 0-3.
 $D815 ADD A,$06       ; #REGa+=#N$06.
 $D817 CP $11          ; {Jump to #R$D810 if #REGa is higher than #N$11.
 $D819 JR NC,$D810     ; }
 $D81B RES 0,A         ; Reset bit 0 of #REGa.
 $D81D LD (IX+$01),A   ; Write #REGa to *#REGix+#N$01.
 $D820 LD (IX+$0E),A   ; Write #REGa to *#REGix+#N$0E.
 $D823 PUSH IY         ; Stash #REGiy on the stack.
 $D825 LD IY,$DB46     ; #REGiy=#R$DB46.
 $D829 LD L,A          ; #REGl=#REGa.
 $D82A LD BC,($DD98)   ; #REGbc=*#R$DD98.
*$D82E LD A,(IY+$0A)   ; {Jump to #R$D843 if *#REGiy+#N$0A is equal to #N$00.
 $D831 CP $00          ;
 $D833 JR Z,$D843      ; }
 $D835 LD A,(IY+$01)   ; {Jump to #R$D843 if *#REGiy+#N$01 is not equal to
 $D838 CP L            ; #REGl.
 $D839 JR NZ,$D843     ; }
 $D83B LD A,(IY+$00)   ; {Jump to #R$D867 if *#REGiy+#N$00 is higher than
 $D83E CP $0F          ; #N$0F.
 $D840 JP NC,$D867     ; }
*$D843 LD DE,$0018     ; #REGde=#N($0018,$04,$04).
 $D846 ADD IY,DE       ; #REGiy+=#REGde.
 $D848 DJNZ $D82E      ; Decrease counter by one and loop back to #R$D82E until
                       ; counter is zero.
 $D84A POP IY          ; Restore #REGiy from the stack.
 $D84C LD A,$01        ; {Write #N$01 to *#REGix+#N$0A.
 $D84E LD (IX+$0A),A   ; }
 $D851 LD A,$22        ; {#REGa=#N$22+*#REGix+#N$07.
 $D853 ADD A,(IX+$07)  ; }
 $D856 LD (IX+$00),A   ; Write #REGa to *#REGix+#N$00.
 $D859 LD (IX+$0D),A   ; Write #REGa to *#REGix+#N$0D.
 $D85C LD (IX+$02),$01 ; Write #N$01 to *#REGix+#N$02.
 $D860 LD (IX+$0B),$01 ; Write #N$01 to *#REGix+#N$0B.
 $D864 JP $D7DE        ; Jump to #R$D7DE.
*$D867 POP IY          ; Restore #REGiy from the stack.
 $D869 JP $D7DE        ; Jump to #R$D7DE.
 $D86C POP IX          ; Restore #REGix from the stack.
 $D86E RET             ; Return.

; Data block at D86F
b$D86F DEFB $00

; Goldfish Game: Print Boats
;
; Used by the routine at #R$CE41.
;
; .
;
; Set attributes.
@label=GoldfishGame_PrintBoats
c$D870 LD A,$10      ; {Set INK: #N$00.
 $D872 RST $10       ;
 $D873 XOR A         ;
 $D874 RST $10       ; }
 $D875 LD A,$11      ; {Set PAPER: #N$07.
 $D877 RST $10       ;
 $D878 LD A,$07      ;
 $D87A RST $10       ; }
; Graphics are created like fonts, they are 8x8 pixel UDG character blocks
; arranged sequentially into grids.
 $D87B LD HL,$98EC   ; {#HTML(Write #R$99EC(#N$98EC) to *<a rel="noopener
 $D87E LD ($5C36),HL ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
; Start fetching UDGs from #R$99EC.
 $D881 LD A,$20      ; #REGa=initial sprite ID: #N$20.
 $D883 LD C,$0F      ; {Print co-ordinates: #N$0F/ #N$18.
 $D885 LD B,$18      ; }
 $D887 LD D,$08      ; {Width and height: #N$0C/ #N$08.
 $D889 LD E,$0C      ; }
 $D88B CALL $D460    ; Call #R$D460.
 $D88E LD HL,$9BEC   ; {#HTML(Write #R$9CEC(#N$9BEC) to *<a rel="noopener
 $D891 LD ($5C36),HL ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
; Start fetching UDGs from #R$9CEC.
 $D894 LD A,$20      ; #REGa=initial sprite ID: #N$20.
 $D896 LD C,$21      ; {Print co-ordinates: #N$21/ #N$18.
 $D898 LD B,$18      ; }
 $D89A LD D,$08      ; {Width and height: #N$0C/ #N$08.
 $D89C LD E,$0C      ; }
 $D89E CALL $D460    ; Call #R$D460.
 $D8A1 RET           ; Return.

; Goldfish Game: Animate Boats
;
; Used by the routine at #R$CE41.
;
; .
;
; #PUSHS #UDGTABLE {
;   #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CF0B)
;   #FOR$01,$50||x|#SIM(start=$CF47,stop=$CF4E)#SIM(start=$D8A8,stop=$D8D3)
;     #SCR$02,$00,$00,$20,$09(*boats-x)#PLOT(0,0,0)(boats-x)
;   ||
;   #UDGARRAY#(#ANIMATE$23(boats))
; } UDGTABLE# #POPS
@label=GoldfishGame_AnimateBoats
c$D8A2 LD A,($D93D)  ; #REGa=*#R$D93D.
 $D8A5 AND %00000001 ; Keep only bit 0.
 $D8A7 RET Z         ; Return if the result is zero.
 $D8A8 LD DE,$4000   ; #REGde=#R$4000(#N$4000) (screen buffer location).
 $D8AB LD B,$08      ; #REGb=#N$08.
*$D8AD PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $D8AE PUSH DE       ; }
 $D8AF LD B,$08      ; #REGb=#N$08.
*$D8B1 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $D8B2 PUSH DE       ; }
 $D8B3 LD A,(DE)     ; #REGa=*#REGde.
 $D8B4 RL A          ; Rotate #REGa left.
 $D8B6 PUSH AF       ; Stash #REGaf on the stack.
 $D8B7 LD HL,$001F   ; #REGhl=#N($001F,$04,$04).
 $D8BA ADD HL,DE     ; #REGhl+=#REGde.
 $D8BB LD B,$20      ; #REGb=#N$20.
*$D8BD POP AF        ; Restore #REGaf from the stack.
 $D8BE RL (HL)       ; Rotate *#REGhl left.
 $D8C0 PUSH AF       ; Stash #REGaf on the stack.
 $D8C1 DEC HL        ; Decrease #REGhl by one.
 $D8C2 DJNZ $D8BD    ; Decrease counter by one and loop back to #R$D8BD until
                     ; counter is zero.
 $D8C4 POP AF        ; {Restore #REGaf and #REGde from the stack.
 $D8C5 POP DE        ; }
 $D8C6 LD HL,$0020   ; #REGhl=#N($0020,$04,$04).
 $D8C9 ADD HL,DE     ; #REGhl+=#REGde.
 $D8CA EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D8CB POP BC        ; Restore #REGbc from the stack.
 $D8CC DJNZ $D8B1    ; Decrease counter by one and loop back to #R$D8B1 until
                     ; counter is zero.
 $D8CE POP DE        ; {Restore #REGde and #REGbc from the stack.
 $D8CF POP BC        ; }
 $D8D0 INC D         ; Increment #REGd by one.
 $D8D1 DJNZ $D8AD    ; Decrease counter by one and loop back to #R$D8AD until
                     ; counter is zero.
 $D8D3 RET           ; Return.

; Update Animation Counter
;
; Used by the routines at #R$CE41, #R$D05B, #R$D0AC, #R$D260 and #R$D778.
;
; .
;
; This routine simply updates *#R$D86F with (*#R$D86F*#N$05)+#N$01.
@label=UpdateAnimationCounter
c$D8D4 LD A,($D86F)  ; #REGa=*#R$D86F.
 $D8D7 LD B,A        ; #REGb=#REGa.
 $D8D8 INC B         ; Increment #REGb by one.
 $D8D9 SLA A         ; {Shift #REGa left two positions (with carry).
 $D8DB SLA A         ; }
 $D8DD ADD A,B       ; #REGa+=#REGb.
 $D8DE LD ($D86F),A  ; Write #REGa to *#R$D86F.
 $D8E1 RET           ; Return.

; Goldfish Game: Animate Sand
;
; Used by the routine at #R$CE41.
;
; .
;
; #PUSHS #UDGTABLE {
;   #SIM(start=$CD63,stop=$CD6C)#SIM(start=$CE61,stop=$CF08)
;   #FOR$01,$50||x|#SIM(start=$D8E2,stop=$D929)
;     #SCR$02,$00,$13,$20,$03(*sand-x)#PLOT(0,0,0)(sand-x)
;   ||
;   #UDGARRAY#(#ANIMATE$0F(sand))
; } UDGTABLE# #POPS
; .
; Set the attributes.
@label=GoldfishGame_AnimateSand
c$D8E2 LD A,$11      ; {Set PAPER: #N$01.
 $D8E4 RST $10       ;
 $D8E5 LD A,$01      ;
 $D8E7 RST $10       ; }
 $D8E8 LD HL,$DB22   ; {#HTML(Write #R$DC22(#N$DB22) (#R$DC22) to *<a
 $D8EB LD ($5C36),HL ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $D8EE LD A,$10      ; {Set INK: #N$06.
 $D8F0 RST $10       ;
 $D8F1 LD A,$06      ;
 $D8F3 RST $10       ; }
; Set the co-ordinates of where we're going to PRINT AT.
 $D8F4 LD B,$04      ; {#HTML(Set up the screen buffer location #N$21/#N$04
 $D8F6 LD C,$21      ; using <a rel="noopener nofollow"
 $D8F8 CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
; Print the current sand UDGs to the screen buffer.
 $D8FB LD A,$20      ; #REGa=#N$20 (base sprite ID).
@label=PrintSand_Loop
*$D8FD PUSH AF       ; Stash the current sand sprite ID on the stack.
 $D8FE CALL $D353    ; Call #R$D353.
 $D901 POP AF        ; Restore the current sand sprite ID from the stack.
 $D902 INC A         ; Move onto the next sand sprite ID.
 $D903 CP $40        ; {Keep looping back to #R$D8FD until the sand sprite ID
 $D905 JR NZ,$D8FD   ; is equal to #N$40.}
; Now move all the UDGs one pixel to the right. The next time this
; routine is called, the sand will appear to have moved when it's printed to
; the screen.
 $D907 LD DE,$DC22   ; #REGde=#R$DC22.
 $D90A LD B,$08      ; #REGb=#N$08 (line counter; each sand UDG is #N$08
                     ; bytes).
@label=AnimateSandLine_Loop
*$D90C PUSH BC       ; {Stash the line counter and the sand UDG buffer pointer
 $D90D PUSH DE       ; on the stack.}
 $D90E LD HL,$00F8   ; {#REGhl=#REGde+#N($00F8,$04,$04).
 $D911 ADD HL,DE     ; }
 $D912 LD A,(HL)     ; #REGa=*#REGhl.
 $D913 RRA           ; Rotate #REGa right one position.
 $D914 POP HL        ; Restore the sand buffer pointer from the stack.
 $D915 PUSH HL       ; But keep a copy of it (the sand buffer position) on the
                     ; stack still.
 $D916 LD DE,$0008   ; #REGde=#N($0008,$04,$04).
 $D919 LD B,$20      ; #REGb=#N$20 (UDG counter; the total number of sand UDGs
                     ; in the row).
 $D91B PUSH AF       ; Stash #REGaf on the stack.
@label=AnimateSandUDG_Loop
*$D91C POP AF        ; Restore #REGaf from the stack.
 $D91D RR (HL)       ; Rotate *#REGhl right.
 $D91F PUSH AF       ; Stash #REGaf on the stack.
 $D920 ADD HL,DE     ; #REGhl+=#REGde.
 $D921 DJNZ $D91C    ; Decrease counter by one and loop back to #R$D91C until
                     ; counter is zero.
 $D923 POP AF        ; {Restore #REGaf and #REGde from the stack.
 $D924 POP DE        ; }
 $D925 INC DE        ; Increment #REGde by one.
 $D926 POP BC        ; Restore the line counter from the stack.
 $D927 DJNZ $D90C    ; Decrease the line counter by one and loop back to
                     ; #R$D90C until all lines have been rotated.
 $D929 RET           ; Return.

; Routine at D92A
;
; Used by the routine at #R$CE41.
c$D92A LD IX,$DC0E   ; #REGix=#R$DC0E.
 $D92E LD A,(IX+$06) ; #REGa=*#REGix+#N$06.
 $D931 ADD A,$02     ; #REGa+=#N$02.
 $D933 CP $30        ; {Jump to #R$D939 if #REGa is not equal to #N$30.
 $D935 JR NZ,$D939   ; }
 $D937 LD A,$20      ; #REGa=#N$20.
*$D939 LD (IX+$06),A ; Write #REGa to *#REGix+#N$06.
 $D93C RET           ; Return.

; Goldfish Game: Buoyancy Counter
;
; This value is incremented every frame, and every 4th frame will cause the
; player to rise.
@label=GoldfishGame_BuoyancyCounter
g$D93D DEFB $00

; Data block at D93E
w$D93E DEFW $0A23
 $D940 DEFW $0303
 $D942 DEFW $00FF
 $D944 DEFW $0420
 $D946 DEFW $0502
 $D948 DEFW $0300
 $D94A DEFW $2303
 $D94C DEFW $030A
 $D94E DEFW $95CC
 $D950 DEFW $4008
 $D952 DEFW $0000
 $D954 DEFW $0000
 $D956 DEFW $0D23
 $D958 DEFW $0303
 $D95A DEFW $00FF
 $D95C DEFW $0320
 $D95E DEFW $0202
 $D960 DEFW $0300
 $D962 DEFW $2303
 $D964 DEFW $030D
 $D966 DEFW $96CC
 $D968 DEFW $3806
 $D96A DEFW $0000
 $D96C DEFW $0000
 $D96E DEFW $0D23
 $D970 DEFW $0303
 $D972 DEFW $00FF
 $D974 DEFW $0320
 $D976 DEFW $0302
 $D978 DEFW $0300
 $D97A DEFW $2303
 $D97C DEFW $030D
 $D97E DEFW $978C
 $D980 DEFW $3806
 $D982 DEFW $0000
 $D984 DEFW $0000
 $D986 DEFW $0D23
 $D988 DEFW $0303
 $D98A DEFW $00FF
 $D98C DEFW $0220
 $D98E DEFW $0402
 $D990 DEFW $0300
 $D992 DEFW $2303
 $D994 DEFW $030D
 $D996 DEFW $984C
 $D998 DEFW $3004
 $D99A DEFW $0000
 $D99C DEFW $0000
 $D99E DEFW $0D23
 $D9A0 DEFW $0303
 $D9A2 DEFW $00FF
 $D9A4 DEFW $0120
 $D9A6 DEFW $0601
 $D9A8 DEFW $0300
 $D9AA DEFW $2303
 $D9AC DEFW $030D
 $D9AE DEFW $98CC
 $D9B0 DEFW $2401
 $D9B2 DEFW $0000
 $D9B4 DEFW $0000

; Messaging: Release Joystick
@label=Messaging_ReleaseJoystick
t$D9B6 DEFB $16,$14,$07        ; PRINT AT: #N(#PEEK(#PC+$01)),
                               ; #N(#PEEK(#PC+$02)).
 $D9B9 DEFB $11,$00            ; PAPER: #N(#PEEK(#PC+$01)).
 $D9BB DEFB $10,$07            ; INK: #N(#PEEK(#PC+$01)).
 $D9BD DEFB $12,$01            ; FLASH: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $D9BF DEFM "RELEASE JOYSTICK" ; "#STR(#PC,$04,$10)".
 $D9CF DEFB $12,$00            ; FLASH: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $D9D1 DEFM $FF                ; Terminator.

; Messaging: Fish Game Status Bar
@label=Messaging_FishGameStatusBar
t$D9D2 DEFB $11,$05                                  ; PAPER:
                                                     ; #N(#PEEK(#PC+$01)).
 $D9D4 DEFB $10,$00                                  ; INK: #N(#PEEK(#PC+$01)).
 $D9D6 DEFM "FISH  0 AIR                           " ; "#STR(#PC,$04,$20)".
 $D9FC DEFM $FF                                      ; Terminator.

; Messaging: Title Screen
@label=Messaging_TitleScreen
t$D9FD DEFB $11,$05                        ; PAPER: #N(#PEEK(#PC+$01)).
 $D9FF DEFB $10,$00                        ; INK: #N(#PEEK(#PC+$01)).
 $DA01 DEFB $16,$01,$0C                    ; PRINT AT: #N(#PEEK(#PC+$01)),
                                           ; #N(#PEEK(#PC+$02)).
 $DA04 DEFM " BOOTY "                      ; "#STR(#PC,$04,$07)".
 $DA0B DEFB $16,$03,$07                    ; PRINT AT: #N(#PEEK(#PC+$01)),
                                           ; #N(#PEEK(#PC+$02)).
 $DA0E DEFM " BY JOHN F. CAIN. "           ; "#STR(#PC,$04,$12)".
 $DA20 DEFB $16,$05,$05                    ; PRINT AT: #N(#PEEK(#PC+$01)),
                                           ; #N(#PEEK(#PC+$02)).
 $DA23 DEFM " ",$7F," 1984 JOHN F. CAIN. " ; "#STR(#PC,$04,$16)".
 $DA39 DEFB $FF                            ; Terminator.

; Messaging: Menu Item - Keyboard
@label=Messaging_MenuKeyboard
t$DA3A DEFB $10,$07        ; INK: #N(#PEEK(#PC+$01)).
 $DA3C DEFB $11,$00        ; PAPER: #N(#PEEK(#PC+$01)).
 $DA3E DEFB $16,$08,$07    ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DA41 DEFM "1 - KEYBOARD" ; "#STR(#PC,$04,$0C)".
 $DA4D DEFB $14,$00        ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DA4F DEFB $FF            ; Terminator.

; Messaging: Menu Item - Interface 2 Joystick
@label= Messaging_MenuInterface2Joystick
t$DA50 DEFB $16,$0A,$07                ; PRINT AT: #N(#PEEK(#PC+$01)),
                                       ; #N(#PEEK(#PC+$02)).
 $DA53 DEFM "2 - INTERFACE 2 JOYSTICK" ; "#STR(#PC,$04,$18)".
 $DA6B DEFB $14,$00                    ; INVERSE:
                                       ; #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DA6D DEFB $FF                        ; Terminator.

; Messaging: Menu Item - Cursor Joystick
@label=Messaging_MenuCursorJoystick
t$DA6E DEFB $16,$0C,$07           ; PRINT AT: #N(#PEEK(#PC+$01)),
                                  ; #N(#PEEK(#PC+$02)).
 $DA71 DEFM "3 - CURSOR JOYSTICK" ; "#STR(#PC,$04,$13)".
 $DA84 DEFB $14,$00               ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DA86 DEFB $FF                   ; Terminator.

; Messaging: Menu Item - Kempston Joystick
@label=Messaging_MenuKempstonJoystick
t$DA87 DEFB $16,$0E,$07             ; PRINT AT: #N(#PEEK(#PC+$01)),
                                    ; #N(#PEEK(#PC+$02)).
 $DA8A DEFM "4 - KEMPSTON JOYSTICK" ; "#STR(#PC,$04,$15)".
 $DA9F DEFB $14,$00                 ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DAA1 DEFB $FF                     ; Terminator.

; Messaging: Menu Item - Define Keys
@label=Messaging_MenuDefineKeys
t$DAA2 DEFB $16,$10,$07       ; PRINT AT: #N(#PEEK(#PC+$01)),
                              ; #N(#PEEK(#PC+$02)).
 $DAA5 DEFM "5 - DEFINE KEYS" ; "#STR(#PC,$04,$0F)".
 $DAB4 DEFB $14,$00           ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DAB6 DEFB $FF               ; Terminator.

; Messaging: Menu Item - Start Game
@label=Messaging_MenuStartGame
t$DAB7 DEFB $16,$12,$07      ; PRINT AT: #N(#PEEK(#PC+$01)),
                             ; #N(#PEEK(#PC+$02)).
 $DABA DEFM "0 - START GAME" ; "#STR(#PC,$04,$0E)".
 $DAC8 DEFB $14,$00          ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DACA DEFB $FF              ; Terminator.

; Messaging: Define Keys
@label=Messaging_DefineKeys
t$DACB DEFB $11,$00       ; PAPER: #N(#PEEK(#PC+$01)).
 $DACD DEFB $10,$07       ; INK: #N(#PEEK(#PC+$01)).
 $DACF DEFB $16,$09,$0A   ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DAD2 DEFM "DEFINE KEYS" ; "#STR(#PC,$04,$0B)".
 $DADD DEFB $16,$0B,$0A   ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DAE0 DEFB $FF           ; Terminator.

; Messaging: Left
@label=Messaging_Left
t$DAE1 DEFB $14,$00     ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DAE3 DEFM " - LEFT"   ; "#STR(#PC,$04,$07)".
 $DAEA DEFB $16,$0D,$0A ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DAED DEFB $FF         ; Terminator.

; Messaging: Right
@label=Messaging_Right
t$DAEE DEFB $14,$00     ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DAF0 DEFM " - RIGHT"  ; "#STR(#PC,$04,$08)".
 $DAF8 DEFB $16,$0F,$0A ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DAFB DEFB $FF         ; Terminator.

; Messaging: Up
@label=Messaging_Up
t$DAFC DEFB $14,$00     ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DAFE DEFM " - UP"     ; "#STR(#PC,$04,$05)".
 $DB03 DEFB $16,$11,$0A ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DB06 DEFB $FF         ; Terminator.

; Messaging: Down
@label=Messaging_Down
t$DB07 DEFB $14,$00     ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DB09 DEFM " - DOWN"   ; "#STR(#PC,$04,$07)".
 $DB10 DEFB $16,$13,$0A ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DB13 DEFB $FF         ; Terminator.

; Messaging: Enter Room/ Space Exits
@label=Messaging_EnterRoomSpaceExits
t$DB14 DEFB $14,$00         ; INVERSE: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DB16 DEFM " - ENTER ROOM" ; "#STR(#PC,$04,$0D)".
 $DB23 DEFB $16,$15,$0A     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $DB26 DEFB $12,$01         ; FLASH: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DB28 DEFM "SPACE EXITS"   ; "#STR(#PC,$04,$0B)".
 $DB33 DEFB $12,$00         ; FLASH: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $DB35 DEFB $FF             ; Terminator.

; Game status buffer entry at DB36
g$DB36 DEFB $00,$00

; Game status buffer entry at DB38
g$DB38 DEFB $00,$00,$00

; Goldfish Game: Temporary Sprite Width
@label=GoldfishGame_TempSpriteWidth
g$DB3B DEFB $00

; Goldfish Game: Temporary Sprite ID
@label=GoldfishGame_TempSpriteID
g$DB3C DEFB $00

; Data block at DB3D
b$DB3D DEFB $00,$00,$00,$00,$00

; Goldfish Game: Numer Of Fish Caught
@label=GoldfishGame_FishCaught
g$DB42 DEFB $00

; Unused
u$DB43 DEFB $00

; Goldfish Game: Numer Of Fish Needed
;
; The number of fish needed to complete the game; see #R$CE57.
@label=GoldfishGame_FishToCollect
g$DB44 DEFB $00

; Unused
u$DB45 DEFB $00

; Data block at DB46
b$DB46 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $DB5E DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $DB76 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $DB8E DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $DBA6 DEFB $00,$00,$00,$00
 $DBAA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBB2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBBA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBC2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBCA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBD2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBDA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBE2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBEA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBF2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBFA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC02 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC0A DEFB $00,$00,$00,$00

; Goldfish Game: Player Attributes
@label=GoldfishGame_PlayerAttributes
g$DC0E DEFB $00
 $DC0F DEFB $00
 $DC10 DEFB $00
 $DC11 DEFB $00
@label=Player_X
 $DC12 DEFB $00                 ; X co-ordinate.
@label=Player_Y
 $DC13 DEFB $00                 ; Y co-ordinate.
 $DC14 DEFB $00
 $DC15 DEFB $00
 $DC16 DEFB $00
 $DC17 DEFB $00
 $DC18 DEFB $00
 $DC19 DEFB $00
 $DC1A DEFB $00
 $DC1B DEFB $00
 $DC1C DEFB $00
 $DC1D DEFB $00,$00,$00,$00,$00

; Buffer: Sand Animation (Goldfish Game)
;
; Populated by #R$CEE6.
@label=Buffer_SandAnimation
g$DC22 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC2A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC32 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC3A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC42 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC4A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC52 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC5A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC62 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC6A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC72 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC7A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC82 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC8A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC92 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC9A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCA2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCAA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCB2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCBA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCC2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCCA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCD2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCDA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCE2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCEA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCF2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DCFA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD02 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD0A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD12 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD1A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD22 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Data: Bubbles (Goldfish Game)
@label=Data_Bubbles
g$DD2A DEFB $00             ; X Position.
 $DD2B DEFB $00             ; Y Position.
 $DD2C DEFB $00,$00,$00
 $DD2F DEFB $00             ; Horizontal velocity.
 $DD30 DEFB $00,$00,$00,$00
 $DD34 DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD35 DEFB $00             ; X Position.
 $DD36 DEFB $00             ; Y Position.
 $DD37 DEFB $00,$00,$00
 $DD3A DEFB $00             ; Horizontal velocity.
 $DD3B DEFB $00,$00,$00,$00
 $DD3F DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD40 DEFB $00             ; X Position.
 $DD41 DEFB $00             ; Y Position.
 $DD42 DEFB $00,$00,$00
 $DD45 DEFB $00             ; Horizontal velocity.
 $DD46 DEFB $00,$00,$00,$00
 $DD4A DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD4B DEFB $00             ; X Position.
 $DD4C DEFB $00             ; Y Position.
 $DD4D DEFB $00,$00,$00
 $DD50 DEFB $00             ; Horizontal velocity.
 $DD51 DEFB $00,$00,$00,$00
 $DD55 DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD56 DEFB $00             ; X Position.
 $DD57 DEFB $00             ; Y Position.
 $DD58 DEFB $00,$00,$00
 $DD5B DEFB $00             ; Horizontal velocity.
 $DD5C DEFB $00,$00,$00,$00
 $DD60 DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD61 DEFB $00             ; X Position.
 $DD62 DEFB $00             ; Y Position.
 $DD63 DEFB $00,$00,$00
 $DD66 DEFB $00             ; Horizontal velocity.
 $DD67 DEFB $00,$00,$00,$00
 $DD6B DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD6C DEFB $00             ; X Position.
 $DD6D DEFB $00             ; Y Position.
 $DD6E DEFB $00,$00,$00
 $DD71 DEFB $00             ; Horizontal velocity.
 $DD72 DEFB $00,$00,$00,$00
 $DD76 DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD77 DEFB $00             ; X Position.
 $DD78 DEFB $00             ; Y Position.
 $DD79 DEFB $00,$00,$00
 $DD7C DEFB $00             ; Horizontal velocity.
 $DD7D DEFB $00,$00,$00,$00
 $DD81 DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD82 DEFB $00             ; X Position.
 $DD83 DEFB $00             ; Y Position.
 $DD84 DEFB $00,$00,$00
 $DD87 DEFB $00             ; Horizontal velocity.
 $DD88 DEFB $00,$00,$00,$00
 $DD8C DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#
 $DD8D DEFB $00             ; X Position.
 $DD8E DEFB $00             ; Y Position.
 $DD8F DEFB $00,$00,$00
 $DD92 DEFB $00             ; Horizontal velocity.
 $DD93 DEFB $00,$00,$00,$00
 $DD97 DEFB $00             ; State: #TABLE(default,centre,centre) { =h Byte |
                            ; =h State } { #N$00 | Inactive } { #N$01 | Active
                            ; } TABLE#

; Data block at DD98
b$DD98 DEFB $08,$08

; Messaging: Goldfish Game
@label=Messaging_GoldfishGame
t$DD9A DEFB $16,$04,$02                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $DD9D DEFM "   BOOTY BY JOHN F CAIN   "       ; "#STR(#PC,$04,$1A)".
 $DDB7 DEFB $16,$0C,$07                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $DDBA DEFM "CATCH 20 GOLDFISH"                ; "#STR(#PC,$04,$11)".
 $DDCB DEFB $16,$0E,$04                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $DDCE DEFM "BUT DONT RUN OUT OF AIR"          ; "#STR(#PC,$04,$17)".
 $DDE5 DEFB $16,$10,$00                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $DDE8 DEFM "OR GET TOO CLOSE TO THE BIG FISH" ; "#STR(#PC,$04,$20)".
 $DE08 DEFB $FF                                ; Terminator.

; Unused
u$DE09 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE11 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE19 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE21 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE29 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE31 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE39 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE41 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE49 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE51 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE59 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE61 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE69 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE71 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE79 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE81 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE89 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE91 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE99 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEA1 DEFB $00,$00,$00,$00,$00,$00,$00

; Initialise Game
;
; Used by the routines at #R$D08A and #R$D602.
@label=InitialiseGame
c$DEA8 LD A,($5BF0)  ; {Jump to #R$DEBC if *#R$5BF0 is equal to #N$02.
 $DEAB CP $02        ;
 $DEAD JP Z,$DEBC    ; }
 $DEB0 LD A,$03      ; {Write #N$03 to *#R$5BF1.
 $DEB2 LD ($5BF1),A  ; }
 $DEB5 LD BC,$0000   ; {Write #N($0000,$04,$04) to *#R$5BF4.
 $DEB8 LD ($5BF4),BC ; }
*$DEBC XOR A         ; {Write #N$00 to *#R$5BD3.
 $DEBD LD ($5BD3),A  ; }
 $DEC0 LD BC,$007D   ; {Write #N($007D,$04,$04) to *#R$5BF2.
 $DEC3 LD ($5BF2),BC ; }
 $DEC7 JR $DECE      ; Jump to #R$DECE.
; This entry point is used by the routine at #R$E361.
*$DEC9 LD A,$01      ; {Write #N$01 to *#R$5BD3.
 $DECB LD ($5BD3),A  ; }
*$DECE LD DE,$F231   ; #REGde=#R$F231.
 $DED1 LD HL,$F245   ; #REGhl=#R$F245.
 $DED4 LD BC,$0014   ; #REGbc=#N($0014,$04,$04).
 $DED7 LDIR          ; LDIR.
 $DED9 LD A,$00      ; #REGa=#N$00.
 $DEDB LD ($F33A),A  ; Write #REGa to *#R$F33A.
 $DEDE LD ($F33F),A  ; Write #REGa to *#R$F33F.
 $DEE1 LD ($E479),A  ; Write #REGa to *#R$E479.
 $DEE4 LD A,$00      ; {Write #N$00 to *#R$F2DB.
 $DEE6 LD ($F2DB),A  ; }
 $DEE9 LD A,$00      ; #REGa=#N$00.
 $DEEB LD ($F31C),A  ; Write #REGa to *#R$F31C.
 $DEEE LD ($5C78),A  ; #HTML(Write #REGa to *<a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $DEF1 LD ($5C79),A  ; #HTML(Write #REGa to *<a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES+#N$01</a>.)
 $DEF4 LD ($F340),A  ; Write #REGa to *#R$F340.
 $DEF7 CALL $E0A9    ; Call #R$E0A9.
; Restore the default ZX Spectrum font.
 $DEFA LD HL,$3C00   ; #HTML(#REGhl=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                     ; (CHARSET-#N$100).)
 $DEFD LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $DF00 LD A,$10      ; {Set INK: #N$06.
 $DF02 RST $10       ;
 $DF03 LD A,$06      ;
 $DF05 RST $10       ; }
 $DF06 LD A,$11      ; {Set PAPER: *#R$5BD0.
 $DF08 RST $10       ;
 $DF09 LD A,($5BD0)  ;
 $DF0C RST $10       ; }
 $DF0D CALL $E064    ; Call #R$E064.
 $DF10 CALL $E058    ; Call #R$E058.
*$DF13 LD A,$11      ; {Set PAPER: *#R$5BD1.
 $DF15 RST $10       ;
 $DF16 LD A,($5BD1)  ;
 $DF19 RST $10       ; }
 $DF1A CALL $E22D    ; Call #R$E22D.
 $DF1D CALL $F1FC    ; Call #R$F1FC.
 $DF20 CALL $E47A    ; Call #R$E47A.
 $DF23 CALL $E3E0    ; Call #R$E3E0.
 $DF26 CALL $F001    ; Call #R$F001.
 $DF29 CALL $E9D9    ; Call #R$E9D9.
 $DF2C CALL $E821    ; Call #R$E821.
 $DF2F LD A,($5BF0)  ; {Call #R$EBD8 if *#R$5BF0 is not equal to #N$03.
 $DF32 CP $03        ;
 $DF34 CALL NZ,$EBD8 ; }
 $DF37 CALL $E4F1    ; Call #R$E4F1.
 $DF3A LD A,($E820)  ; {Jump to #R$DF45 if *#R$E820 is equal to #N$00.
 $DF3D CP $00        ;
 $DF3F JR Z,$DF45    ; }
 $DF41 DEC A         ; Decrease #REGa by one.
 $DF42 LD ($E820),A  ; Write #REGa to *#R$E820.
*$DF45 LD A,($5BEA)  ; {Call #R$E30B if *#R$5BEA is set to Kempston joystick
 $DF48 CP $0C        ; (#N$0C).
 $DF4A CALL Z,$E30B  ; }
 $DF4D LD A,($5BEA)  ; {Call #R$ED35 if *#R$5BEA is not set to Kempston
 $DF50 CP $0C        ; joystick (#N$0C).
 $DF52 CALL NZ,$ED35 ; }
 $DF55 CALL $E5F4    ; Call #R$E5F4.
 $DF58 CALL $E581    ; Call #R$E581.
 $DF5B LD A,$10      ; {Set INK: #N$06.
 $DF5D RST $10       ;
 $DF5E LD A,$06      ;
 $DF60 RST $10       ; }
 $DF61 LD A,$11      ; {Set PAPER: *#R$5BD0.
 $DF63 RST $10       ;
 $DF64 LD A,($5BD0)  ;
 $DF67 RST $10       ; }
 $DF68 LD C,$1B      ; {#HTML(Set up the screen buffer location #N$01/#N$1B
 $DF6A LD B,$01      ; using <a rel="noopener nofollow"
 $DF6C CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
; Restore the default ZX Spectrum font.
 $DF6F LD HL,$3C00   ; #HTML(#REGhl=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                     ; (CHARSET-#N$100).)
 $DF72 LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $DF75 LD IX,$F231   ; #REGix=#R$F231.
 $DF79 LD A,(IX+$10) ; #REGa=*#REGix+#N$10.
 $DF7C ADD A,$30     ; #REGa+=#N$30.
 $DF7E CALL $E6DC    ; Call #R$E6DC.
 $DF81 LD BC,($5BF2) ; #REGbc=*#R$5BF2.
 $DF85 LD A,C        ; {Call #R$DFD3 if #REGbc is zero.
 $DF86 OR B          ;
 $DF87 CALL Z,$DFD3  ; }
 $DF8A LD A,($5BF0)  ; {Jump to #R$DF13 if *#R$5BF0 is not equal to #N$03.
 $DF8D CP $03        ;
 $DF8F JP NZ,$DF13   ; }
 $DF92 LD A,($5C79)  ; {#HTML(Jump to #R$DF13 if *<a rel="noopener nofollow"
 $DF95 CP $03        ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES+#N$01</a>
 $DF97 JP NZ,$DF13   ; is not equal to #N$03.)}
 $DF9A LD A,($F340)  ; {Increment *#R$F340 by one.
 $DF9D INC A         ;
 $DF9E LD ($F340),A  ; }
 $DFA1 CP $02        ; {Call #R$ED8F if #REGa is equal to #N$02.
 $DFA3 CALL Z,$ED8F  ; }
 $DFA6 CALL $E349    ; Call #R$E349.
 $DFA9 AND %00001111 ; Keep only bits 0-3.
 $DFAB ADD A,$02     ; #REGa+=#N$02.
 $DFAD CALL $EE84    ; Call #R$EE84.
 $DFB0 LD A,$00      ; #REGa=#N$00.
 $DFB2 LD ($5C78),A  ; #HTML(Write #REGa to *<a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $DFB5 LD ($5C79),A  ; #HTML(Write #REGa to *<a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES+#N$01</a>.)
 $DFB8 JP $DF13      ; Jump to #R$DF13.
 $DFBB LD A,(HL)     ;
 $DFBC RST $38       ;
 $DFBD JP $FFC3      ;
 $DFC0 LD A,(HL)     ;
 $DFC1 JR $DFDB      ;
 $DFC3 JR $DFDD      ;
 $DFC5 JR $DFE6      ;
 $DFC7 LD E,$1F      ;
 $DFC9 LD E,$1F      ;
*$DFCB LD A,$00      ;
 $DFCD LD ($5BF1),A  ;
 $DFD0 JP $E3A4      ;
*$DFD3 LD HL,$3C00   ;
 $DFD6 LD ($5C36),HL ;
 $DFD9 LD A,$10      ;
*$DFDB RST $10       ;
 $DFDC LD A,$07      ;
 $DFDE RST $10       ;
 $DFDF LD A,$11      ;
 $DFE1 RST $10       ;
 $DFE2 LD A,($5BD1)  ;
 $DFE5 RST $10       ;
*$DFE6 LD BC,($5BFA) ;
 $DFEA DEC BC        ;
 $DFEB LD ($5BFA),BC ;
 $DFEF LD A,B        ;
 $DFF0 OR C          ;
 $DFF1 JR NZ,$E004   ;
 $DFF3 LD BC,$0014   ;
 $DFF6 LD ($5BFA),BC ;
 $DFFA LD A,($5BFF)  ;
 $DFFD DEC A         ;
 $DFFE LD ($5BFF),A  ;
 $E001 JP Z,$DFCB    ;
*$E004 LD C,$0C      ;
 $E006 LD B,$02      ;
 $E008 CALL $0DD9    ;
 $E00B LD B,$00      ;
 $E00D LD A,($5BFF)  ;
 $E010 LD C,A        ;
 $E011 CALL $1A1B    ;
 $E014 LD A,$20      ;
 $E016 CALL $E6DC    ;
 $E019 LD A,($5BD3)  ;
 $E01C LD HL,$5BFC   ;
 $E01F CP (HL)       ;
 $E020 RET NZ        ;
 $E021 LD BC,($5BFD) ;
 $E025 LD HL,$DEBB   ;
 $E028 LD ($5C36),HL ;
 $E02B LD A,$10      ;
 $E02D RST $10       ;
 $E02E LD A,$06      ;
 $E030 RST $10       ;
 $E031 LD A,$20      ;
 $E033 LD DE,$0201   ;
 $E036 CALL $EA93    ;
 $E039 LD IX,$F231   ;
 $E03D LD BC,($5BFD) ;
 $E041 LD A,(IX+$00) ;
 $E044 CP C          ;
 $E045 RET NZ        ;
 $E046 LD A,(IX+$01) ;
 $E049 CP B          ;
 $E04A RET NZ        ;
 $E04B LD DE,$00C8   ;
 $E04E LD HL,$00C8   ;
 $E051 CALL $03B5    ;
 $E054 POP BC        ;
 $E055 JP $DEBC      ;

; Routine at E058
;
; Used by the routines at #R$DEA8 and #R$ED35.
c$E058 LD HL,$A06C   ; #REGhl=#R$A06C.
 $E05B LD DE,$FFFB   ; #REGde=#R$FFFB.
 $E05E LD BC,$0064   ; #REGbc=#N($0064,$04,$04).
 $E061 LDIR          ; LDIR.
 $E063 RET           ; Return.

; Print Status Bar Icons
;
; Used by the routines at #R$DEA8 and #R$E0A9.
@label=PrintStatusBarIcons
c$E064 LD HL,$F15B   ; {#HTML(Write #R$F25B(#N$F15B) to *<a rel="noopener
 $E067 LD ($5C36),HL ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
; Set up the screen buffer position.
 $E06A LD C,$21      ; {#HTML(Set up the screen buffer location #N$01/#N$21
 $E06C LD B,$01      ; using <a rel="noopener nofollow"
 $E06E CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
 $E071 LD A,($5BF1)  ; {Jump to #R$E080 if *#R$5BF1 is equal to #N$00.
 $E074 CP $00        ;
 $E076 JR Z,$E080    ; }
; Display a life icon for each life the player has.
; .
; #HTML(<img alt="udg62051_56x4" src="../images/udgs/udg62051_56x4.png">)
 $E078 LD B,A        ; #REGb=#R$5BF1 (number of lives counter).
@label=PrintLifeIcon_Loop
*$E079 LD A,$21      ; #REGa=Player life icon (#N$21).
 $E07B CALL $E6DC    ; Call #R$E6DC.
 $E07E DJNZ $E079    ; Decrease lives counter by one and loop back to #R$E079
                     ; until all lives have been printed.
; Put a space between the lives and the key icon.
; .
; Restore the default ZX Spectrum font.
@label=PrintKeyIcon
*$E080 LD HL,$3C00   ; #HTML(#REGhl=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                     ; (CHARSET-#N$100).)
 $E083 LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $E086 LD A,$20      ; #REGa=ASCII "space" (#N$20).
 $E088 CALL $E6DC    ; Call #R$E6DC.
; Set up the screen buffer position.
 $E08B LD C,$1D      ; {#HTML(Set up the screen buffer location #N$01/#N$1D
 $E08D LD B,$01      ; using <a rel="noopener nofollow"
 $E08F CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
 $E092 LD HL,$F15B   ; {#HTML(Write #R$F25B(#N$F15B) to *<a rel="noopener
 $E095 LD ($5C36),HL ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
; Display the key icon.
; .
; #HTML(<img alt="udg62051_56x4" src="../images/udgs/udg62059_56x4.png"><img
; alt="udg62051_56x4" src="../images/udgs/udg62067_56x4.png">)
 $E098 LD A,$22      ; #REGa=Key icon left (#N$22).
 $E09A CALL $E6DC    ; Call #R$E6DC.
 $E09D LD A,$23      ; #REGa=Key icon right (#N$23).
 $E09F CALL $E6DC    ; Call #R$E6DC.
; Restore the default ZX Spectrum font.
 $E0A2 LD HL,$3C00   ; #HTML(#REGhl=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                     ; (CHARSET-#N$100).)
 $E0A5 LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $E0A8 RET           ; Return.

; Print Status Bar
;
; Used by the routines at #R$DEA8 and #R$ED35.
@label=PrintStatusBar
c$E0A9 CALL $A804    ; Call #R$A804.
; Restore the default ZX Spectrum font.
 $E0AC LD HL,$3C00   ; {#HTML(Write <a rel="noopener nofollow"
 $E0AF LD ($5C36),HL ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>
                     ; (CHARSET-#N$100) to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
; Set up the attributes.
 $E0B2 LD A,$10      ; {Set INK: YELLOW (#N$06).
 $E0B4 RST $10       ;
 $E0B5 LD A,$06      ;
 $E0B7 RST $10       ; }
 $E0B8 LD A,$11      ; {Set PAPER: *#R$5BD0.
 $E0BA RST $10       ;
 $E0BB LD A,($5BD0)  ;
 $E0BE RST $10       ; }
; Set up the screen buffer position.
 $E0BF LD C,$21      ; {#HTML(Set up the screen buffer location #N$01/#N$21
 $E0C1 LD B,$01      ; using <a rel="noopener nofollow"
 $E0C3 CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
; Print the status bar text at the bottom of the screen.
 $E0C6 LD B,$20      ; #REGb=#N$20 (length of status bar string).
 $E0C8 LD DE,$F2BB   ; #REGde=#R$F2BB.
@label=PrintStatusBar_Loop
*$E0CB LD A,(DE)     ; Fetch a character from *#REGde and store it in the
                     ; accumulator.
 $E0CC INC DE        ; Increment the string pointer by one.
 $E0CD CALL $E6DC    ; Call #R$E6DC.
 $E0D0 DJNZ $E0CB    ; Decrease the string length counter by one and loop back
                     ; to #R$E0CB until the string is printed.
; Prints the "Booty" count.
 $E0D2 LD C,$13      ; {#HTML(Set up the screen buffer location #N$01/#N$13
 $E0D4 LD B,$01      ; using <a rel="noopener nofollow"
 $E0D6 CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
 $E0D9 LD BC,($5BF4) ; #REGbc=*#R$5BF4.
 $E0DD CALL $1A1B    ; #HTML(Call <a
                     ; href="https://skoolkid.github.io/rom/asm/1A1B.html">OUT_NUM_1</a>.)
; Prints the "Treasure" count.
 $E0E0 LD C,$05      ; {#HTML(Set up the screen buffer location #N$01/#N$05
 $E0E2 LD B,$01      ; using <a rel="noopener nofollow"
 $E0E4 CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
 $E0E7 LD BC,($5BF2) ; #REGbc=*#R$5BF2.
 $E0EB CALL $1A1B    ; #HTML(Call <a
                     ; href="https://skoolkid.github.io/rom/asm/1A1B.html">OUT_NUM_1</a>.)
 $E0EE CALL $E064    ; Call #R$E064.
 $E0F1 LD A,($5BF2)  ; {Return if *#R$5BF2 is not equal to #N$00.
 $E0F4 CP $00        ;
 $E0F6 RET NZ        ; }
; This entry point is used by the routine at #R$E3E0.
@label=PrintFindTheGoldKey
*$E0F7 LD A,$10      ; {Set INK: #N$07.
 $E0F9 RST $10       ;
 $E0FA LD A,$07      ;
 $E0FC RST $10       ; }
 $E0FD LD A,$11      ; {Set PAPER: *#R$5BD1.
 $E0FF RST $10       ;
 $E100 LD A,($5BD1)  ;
 $E103 RST $10       ; }
 $E104 LD B,$02      ; {#HTML(Set up the screen buffer location #N$02/#N$21
 $E106 LD C,$21      ; using <a rel="noopener nofollow"
 $E108 CALL $0DD9    ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
                     ; }
 $E10B LD B,$20      ; #HTML(#REGb=#N$20 (length of "find the gold key in
                     ; <em>xx</em> seconds" string).)
 $E10D LD DE,$E6BC   ; #REGde=#R$E6BC.
@label=PrintFindTheGoldKey_Loop
*$E110 LD A,(DE)     ; Fetch a character from *#REGde and store it in the
                     ; accumulator.
 $E111 CALL $E6DC    ; Call #R$E6DC.
 $E114 INC DE        ; Increment the string pointer by one.
 $E115 DJNZ $E110    ; Decrease the string length counter by one and loop back
                     ; to #R$E110 until the string is printed.
 $E117 RET           ; Return.

; Routine at E118
;
; Used by the routine at #R$E12A.
c$E118 POP HL        ; Restore #REGhl from the stack.
 $E119 LD A,$00      ; {Write #N$00 to *#R$F31C.
 $E11B LD ($F31C),A  ; }
 $E11E RET           ; Return.

; Routine at E11F
;
; Used by the routine at #R$E12A.
c$E11F LD HL,($5C78) ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES</a>.)
 $E122 LD DE,$0352   ; #REGde=#N$0352.
 $E125 SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $E127 JR NC,$E13C   ; Jump to #R$E13C if {} is higher.
 $E129 RET           ; Return.

; Routine at E12A
c$E12A LD BC,($5BF4)   ; #REGbc=*#R$5BF4.
 $E12E LD A,C          ; {Jump to #R$E11F if #REGc is higher than #N$64.
 $E12F CP $64          ;
 $E131 JR NC,$E11F     ; }
 $E133 LD HL,($5C78)   ; #HTML(#REGhl=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES</a>.)
 $E136 LD DE,$0578     ; #REGde=#N$0578.
 $E139 SBC HL,DE       ; #REGhl-=#REGde (with carry).
 $E13B RET C           ; Return if {} is lower.
; #HTML(Use <a rel="noopener nofollow"
; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a> as a counter.)
*$E13C LD HL,$0000     ; {#HTML(Reset *<a rel="noopener nofollow"
 $E13F LD ($5C78),HL   ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                       ; to #N($0000,$04,$04).)}
 $E142 CALL $E349      ; Call #R$E349.
 $E145 AND %00000011   ; Keep only bits 0-1.
 $E147 LD HL,$F317     ; #REGhl=#R$F317.
 $E14A LD E,A          ; #REGe=#REGa.
 $E14B LD D,$00        ; #REGd=#N$00.
 $E14D ADD HL,DE       ; #REGhl+=#REGde.
 $E14E PUSH HL         ; Stash #REGhl on the stack.
 $E14F INC HL          ; Increment #REGhl by one.
 $E150 LD A,(HL)       ; #REGa=*#REGhl.
 $E151 LD IX,($5BDA)   ; #REGix=#R$5BDA.
 $E155 LD B,A          ; #REGb=#REGa.
*$E156 LD A,(IX+$00)   ; {Jump to #R$E172 if *#REGix+#N$00 is equal to #N$FF.
 $E159 CP $FF          ;
 $E15B JR Z,$E172      ; }
 $E15D LD A,(IX+$01)   ; {Jump to #R$E16B if *#REGix+#N$01 is not equal to
 $E160 CP B            ; #REGb.
 $E161 JR NZ,$E16B     ; }
 $E163 LD A,(IX+$05)   ; {Jump to #R$E118 if *#REGix+#N$05 is not equal to
 $E166 CP $00          ; #N$00.
 $E168 JP NZ,$E118     ; }
*$E16B LD DE,$0006     ; #REGde=#N($0006,$04,$04).
 $E16E ADD IX,DE       ; #REGix+=#REGde.
 $E170 JR $E156        ; Jump to #R$E156.
*$E172 LD IX,$F31C     ; #REGix=#R$F31C.
 $E176 CALL $E349      ; Call #R$E349.
 $E179 BIT 3,A         ; Test bit 3 of #REGa.
 $E17B JR Z,$E197      ; Jump to #R$E197 if {} is zero.
 $E17D LD (IX+$00),$02 ; Write #N$02 to *#REGix+#N$00.
 $E181 LD (IX+$02),$01 ; Write #N$01 to *#REGix+#N$02.
 $E185 LD (IX+$04),$01 ; Write #N$01 to *#REGix+#N$04.
 $E189 LD (IX+$05),$00 ; Write #N$00 to *#REGix+#N$05.
 $E18D LD (IX+$0B),$01 ; Write #N$01 to *#REGix+#N$0B.
 $E191 LD (IX+$0D),$02 ; Write #N$02 to *#REGix+#N$0D.
 $E195 JR $E1AF        ; Jump to #R$E1AF.
*$E197 LD (IX+$00),$25 ; Write #N$25 to *#REGix+#N$00.
 $E19B LD (IX+$02),$00 ; Write #N$00 to *#REGix+#N$02.
 $E19F LD (IX+$04),$FF ; Write #N$FF to *#REGix+#N$04.
 $E1A3 LD (IX+$05),$00 ; Write #N$00 to *#REGix+#N$05.
 $E1A7 LD (IX+$0B),$00 ; Write #N$00 to *#REGix+#N$0B.
 $E1AB LD (IX+$0D),$24 ; Write #N$24 to *#REGix+#N$0D.
*$E1AF CALL $E349      ; Call #R$E349.
 $E1B2 BIT 5,A         ; Test bit 5 of #REGa.
 $E1B4 JR Z,$E1FE      ; Jump to #R$E1FE if {} is zero.
 $E1B6 POP HL          ; Restore #REGhl from the stack.
 $E1B7 PUSH HL         ; Stash #REGhl on the stack.
 $E1B8 LD A,(HL)       ; {#HTML(Set up the screen buffer location #N$21/*#REGhl
 $E1B9 LD B,A          ; using <a rel="noopener nofollow"
 $E1BA LD C,$21        ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E1BC CALL $0DD9      ; }
 $E1BF LD HL,($5C84)   ; #HTML(#REGhl=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $E1C2 LD B,$20        ; #REGb=#N$20.
*$E1C4 LD A,(HL)       ; #REGa=*#REGhl.
 $E1C5 INC HL          ; Increment #REGhl by one.
 $E1C6 CP $FF          ; {Jump to #R$E118 if #REGa is not equal to #N$FF.
 $E1C8 JP NZ,$E118     ; }
 $E1CB DJNZ $E1C4      ; Decrease counter by one and loop back to #R$E1C4 until
                       ; counter is zero.
 $E1CD POP HL          ; Restore #REGhl from the stack.
 $E1CE LD A,(HL)       ; #REGa=*#REGhl.
 $E1CF INC A           ; Increment #REGa by one.
 $E1D0 LD (IX+$01),A   ; Write #REGa to *#REGix+#N$01.
 $E1D3 LD (IX+$0E),A   ; Write #REGa to *#REGix+#N$0E.
 $E1D6 LD (IX+$03),$03 ; Write #N$03 to *#REGix+#N$03.
 $E1DA LD (IX+$0F),$03 ; Write #N$03 to *#REGix+#N$0F.
 $E1DE LD (IX+$06),$20 ; Write #N$20 to *#REGix+#N$06.
 $E1E2 LD (IX+$09),$03 ; Write #N$03 to *#REGix+#N$09.
 $E1E6 LD (IX+$07),$04 ; Write #N$04 to *#REGix+#N$07.
 $E1EA LD (IX+$08),$01 ; Write #N$01 to *#REGix+#N$08.
 $E1EE LD A,$01        ; {Write #N$01 to *#R$FFFF.
 $E1F0 LD ($FFFF),A    ; }
 $E1F3 LD A,(IX+$04)   ; {Return if *#REGix+#N$04 is equal to #N$01.
 $E1F6 CP $01          ;
 $E1F8 RET Z           ; }
 $E1F9 LD (IX+$06),$24 ; Write #N$24 to *#REGix+#N$06.
 $E1FD RET             ; Return.
*$E1FE POP HL          ; Restore #REGhl from the stack.
 $E1FF LD A,(HL)       ; #REGa=*#REGhl.
 $E200 INC A           ; {Increment #REGa by three.
 $E201 INC A           ;
 $E202 INC A           ; }
 $E203 LD (IX+$01),A   ; Write #REGa to *#REGix+#N$01.
 $E206 LD (IX+$0E),A   ; Write #REGa to *#REGix+#N$0E.
 $E209 LD (IX+$03),$03 ; Write #N$03 to *#REGix+#N$03.
 $E20D LD (IX+$06),$28 ; Write #N$28 to *#REGix+#N$06.
 $E211 LD (IX+$09),$06 ; Write #N$06 to *#REGix+#N$09.
 $E215 LD (IX+$07),$02 ; Write #N$02 to *#REGix+#N$07.
 $E219 LD (IX+$08),$02 ; Write #N$02 to *#REGix+#N$08.
 $E21D LD A,$02        ; {Write #N$02 to *#R$FFFF.
 $E21F LD ($FFFF),A    ; }
 $E222 LD A,(IX+$04)   ; {Return if *#REGix+#N$04 is equal to #N$FF.
 $E225 CP $FF          ;
 $E227 RET Z           ; }
 $E228 LD (IX+$06),$2C ; Write #N$2C to *#REGix+#N$06.
 $E22C RET             ; Return.
; This entry point is used by the routine at #R$DEA8.
*$E22D LD IX,$F31C     ; #REGix=#R$F31C.
 $E231 LD A,(IX+$00)   ; {Jump to #R$E12A if *#REGix+#N$00 is equal to #N$00.
 $E234 CP $00          ;
 $E236 JP Z,$E12A      ; }
 $E239 LD HL,$934C     ; {#HTML(Write #R$944C(#N$934C) to *<a rel="noopener
 $E23C LD ($5C36),HL   ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $E23F CALL $EEA6      ; Call #R$EEA6.
 $E242 LD (IX+$00),C   ; Write #REGc to *#REGix+#N$00.
 $E245 LD (IX+$01),B   ; Write #REGb to *#REGix+#N$01.
 $E248 LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $E24B LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $E24E LD A,E          ; {Jump to #R$E283 if #REGe is not equal to #N$03.
 $E24F CP $03          ;
 $E251 JR NZ,$E283     ; }
 $E253 LD A,(IX+$04)   ; {Jump to #R$E271 if *#REGix+#N$04 is equal to #N$FF.
 $E256 CP $FF          ;
 $E258 JR Z,$E271      ; }
 $E25A LD A,C          ; #REGa=#REGc.
 $E25B SUB (IX+$07)    ; #REGa-=*#REGix+#N$07.
 $E25E CP $02          ; {Jump to #R$E283 if #REGa is lower than #N$02.
 $E260 JR C,$E283      ; }
 $E262 CP $22          ; {Jump to #R$E283 if #REGa is higher than #N$22.
 $E264 JR NC,$E283     ; }
 $E266 LD C,A          ; #REGc=#REGa.
 $E267 LD E,$01        ; #REGe=#N$01.
 $E269 LD D,(IX+$08)   ; #REGd=*#REGix+#N$08.
 $E26C CALL $E787      ; Call #R$E787.
 $E26F JR $E283        ; Jump to #R$E283.
*$E271 INC C           ; Increment #REGc by one.
 $E272 LD A,C          ; {Jump to #R$E283 if #REGc is higher than #N$22.
 $E273 CP $22          ;
 $E275 JR NC,$E283     ; }
 $E277 CP $02          ; {Jump to #R$E283 if #REGc is lower than #N$02.
 $E279 JR C,$E283      ; }
 $E27B LD E,$01        ; #REGe=#N$01.
 $E27D LD D,(IX+$08)   ; #REGd=*#REGix+#N$08.
 $E280 CALL $E787      ; Call #R$E787.
*$E283 LD A,(IX+$00)   ; {Jump to #R$E301 if *#REGix+#N$00 is equal to #N$26.
 $E286 CP $26          ;
 $E288 JP Z,$E301      ; }
 $E28B CP $01          ; {Jump to #R$E301 if *#REGix+#N$00 is equal to #N$01.
 $E28D JP Z,$E301      ; }
 $E290 LD A,(IX+$06)   ; {Jump to #R$E29F if *#REGix+#N$06 is lower than #N$25.
 $E293 CP $25          ;
 $E295 JR C,$E29F      ; }
 $E297 ADD A,$08       ; #REGa+=#N$08.
 $E299 CP $47          ; {Jump to #R$E29F if #REGa is lower than #N$47.
 $E29B JR C,$E29F      ; }
 $E29D SUB $20         ; #REGa-=#N$20.
*$E29F LD (IX+$06),A   ; Write #REGa to *#REGix+#N$06.
 $E2A2 CALL $EED7      ; Call #R$EED7.
 $E2A5 LD A,(IX+$00)   ; {Write *#REGix+#N$00 to *#REGix+#N$0D.
 $E2A8 LD (IX+$0D),A   ; }
 $E2AB LD A,(IX+$01)   ; {Write *#REGix+#N$01 to *#REGix+#N$0E.
 $E2AE LD (IX+$0E),A   ; }
 $E2B1 LD A,(IX+$02)   ; {Write *#REGix+#N$02 to *#REGix+#N$0B.
 $E2B4 LD (IX+$0B),A   ; }
 $E2B7 LD A,(IX+$03)   ; {Write *#REGix+#N$03 to *#REGix+#N$0F.
 $E2BA LD (IX+$0F),A   ; }
 $E2BD LD A,(IX+$08)   ; #REGa=*#REGix+#N$08.
 $E2C0 ADD A,$03       ; #REGa+=#N$03.
 $E2C2 LD C,A          ; #REGc=#REGa.
 $E2C3 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $E2C6 LD A,($F232)    ; #REGa=*#R$F232.
 $E2C9 DEC A           ; Decrease #REGa by one.
 $E2CA ADD A,(IX+$08)  ; #REGa+=*#REGix+#N$08.
 $E2CD SUB B           ; #REGa-=#REGb.
 $E2CE CP C            ; {Return if #REGa is higher than #REGc.
 $E2CF RET NC          ; }
 $E2D0 LD A,(IX+$07)   ; #REGa=*#REGix+#N$07.
 $E2D3 ADD A,$02       ; #REGa+=#N$02.
 $E2D5 SLA A           ; Shift #REGa left (with carry).
 $E2D7 SLA A           ; Shift #REGa left (with carry).
 $E2D9 LD B,A          ; #REGb=#REGa.
 $E2DA LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $E2DD LD A,($F233)    ; #REGa=*#R$F233.
 $E2E0 LD D,A          ; #REGd=#REGa.
 $E2E1 LD A,C          ; #REGa=#REGc.
 $E2E2 SLA A           ; Shift #REGa left (with carry).
 $E2E4 SLA A           ; Shift #REGa left (with carry).
 $E2E6 ADD A,(IX+$02)  ; #REGa+=*#REGix+#N$02.
 $E2E9 LD C,A          ; #REGc=#REGa.
 $E2EA LD A,($F231)    ; #REGa=*#R$F231.
 $E2ED ADD A,(IX+$07)  ; #REGa+=*#REGix+#N$07.
 $E2F0 SLA A           ; Shift #REGa left (with carry).
 $E2F2 SLA A           ; Shift #REGa left (with carry).
 $E2F4 ADD A,D         ; #REGa+=#REGd.
 $E2F5 DEC A           ; Decrease #REGa by one.
 $E2F6 SUB C           ; #REGa-=#REGc.
 $E2F7 CP B            ; {Return if #REGa is higher than #REGb.
 $E2F8 RET NC          ; }
 $E2F9 LD A,$01        ; {Write #N$01 to *#R$FFFE.
 $E2FB LD ($FFFE),A    ; }
 $E2FE JP $E3A4        ; Jump to #R$E3A4.
*$E301 LD (IX+$00),$00 ; Write #N$00 to *#REGix+#N$00.
 $E305 LD A,$00        ; {Write ##N$00 to *#R$FFFF.
 $E307 LD ($FFFF),A    ; }
 $E30A RET             ; Return.
; This entry point is used by the routine at #R$DEA8.
*$E30B LD IX,$F231     ; #REGix=#R$F231.
 $E30F LD A,($5BF0)    ; {Jump to #R$E31E if *#R$5BF0 is not equal to #N$03.
 $E312 CP $03          ;
 $E314 JR NZ,$E31E     ; }
 $E316 IN A,($1F)      ; Read from the Kempston joystick port.
 $E318 AND %00011111   ; Keep only bits 0-4.
 $E31A JP NZ,$ED8F     ; Jump to #R$ED8F if the result is not zero.
 $E31D RET             ; Return.
*$E31E IN A,($1F)      ; Read from the Kempston joystick port.
 $E320 LD ($F342),A    ; Write #REGa to *#R$F342.
 $E323 AND %00010000   ; Keep only bit 4.
 $E325 JP NZ,$EE5B     ; Jump to #R$EE5B if the result is not zero.
 $E328 LD A,($F342)    ; #REGa=*#R$F342.
 $E32B AND %00000001   ; Keep only bit 0.
 $E32D JP NZ,$EB05     ; Jump to #R$EB05 if the result is not zero.
 $E330 LD A,($F342)    ; #REGa=*#R$F342.
 $E333 AND %00000010   ; Keep only bit 1.
 $E335 JP NZ,$EB49     ; Jump to #R$EB49 if the result is not zero.
 $E338 LD A,($F342)    ; #REGa=*#R$F342.
 $E33B AND %00000100   ; Keep only bit 2.
 $E33D JP NZ,$ED9A     ; Jump to #R$ED9A if the result is not zero.
 $E340 LD A,($F342)    ; #REGa=*#R$F342.
 $E343 AND %00001000   ; Keep only bit 3.
 $E345 JP NZ,$EE08     ; Jump to #R$EE08 if the result is not zero.
 $E348 RET             ; Return.
; This entry point is used by the routines at #R$DEA8 and #R$E361.
*$E349 PUSH BC         ; Stash #REGbc on the stack.
 $E34A LD BC,($F343)   ; #REGbc=*#R$F343.
 $E34E XOR A           ; #REGa=#N$00.
 $E34F LD A,C          ; #REGa=#REGc.
 $E350 ADD A,B         ; #REGa+=#REGb.
 $E351 LD B,A          ; #REGb=#REGa.
 $E352 XOR A           ; #REGa=#N$00.
 $E353 LD A,$CD        ; #REGa=#N$CD.
 $E355 ADD A,C         ; #REGa+=#REGc.
 $E356 LD C,A          ; #REGc=#REGa.
 $E357 LD A,$AB        ; #REGa=#N$AB.
 $E359 ADC A,B         ; #REGa+=#REGb.
 $E35A LD B,A          ; #REGb=#REGa.
 $E35B LD ($F343),BC   ; Write #REGbc to *#R$F343.
 $E35F POP BC          ; Restore #REGbc from the stack.
 $E360 RET             ; Return.

; Routine at E361
;
; Used by the routine at #R$ED35.
c$E361 LD A,$07      ; {Write #N$07 to *#R$FFFE.
 $E363 LD ($FFFE),A  ; }
 $E366 LD HL,$5AA0   ; #REGhl=#N$5AA0 (attribute buffer location).
 $E369 LD B,$15      ; #REGb=#N$15.
*$E36B PUSH HL       ; {Stash #REGhl and #REGbc on the stack.
 $E36C PUSH BC       ; }
 $E36D LD B,$20      ; #REGb=#N$20.
*$E36F LD A,$29      ; #REGa=#COLOUR$29 (#N$29).
 $E371 LD (HL),A     ; Write #REGa to *#REGhl.
 $E372 INC HL        ; Increment #REGhl by one.
 $E373 DJNZ $E36F    ; Decrease counter by one and loop back to #R$E36F until
                     ; counter is zero.
 $E375 LD B,$C8      ; #REGb=#N$C8.
*$E377 PUSH BC       ; Stash #REGbc on the stack.
 $E378 LD BC,$FFFE   ; #REGbc=#R$FFFE.
 $E37B LD A,($5BD0)  ; #REGa=*#R$5BD0.
 $E37E ADD A,$10     ; #REGa+=#N$10.
 $E380 OUT (C),A     ;
 $E382 CALL $E349    ; Call #R$E349.
 $E385 LD B,A        ; #REGb=#REGa.
*$E386 DJNZ $E386    ; Decrease counter by one and loop back to #R$E386 until
                     ; counter is zero.
 $E388 LD BC,$FFFE   ; #REGbc=#R$FFFE.
 $E38B LD A,($5BD0)  ; #REGa=*#R$5BD0.
 $E38E OUT (C),A     ;
 $E390 CALL $E349    ; Call #R$E349.
 $E393 LD B,A        ; #REGb=#REGa.
*$E394 DJNZ $E394    ; Decrease counter by one and loop back to #R$E394 until
                     ; counter is zero.
 $E396 POP BC        ; Restore #REGbc from the stack.
 $E397 DJNZ $E377    ; Decrease counter by one and loop back to #R$E377 until
                     ; counter is zero.
 $E399 POP BC        ; {Restore #REGbc and #REGhl from the stack.
 $E39A POP HL        ; }
 $E39B LD DE,$0020   ; #REGde=#N($0020,$04,$04).
 $E39E XOR A         ; #REGa=#N$00.
 $E39F SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $E3A1 DJNZ $E36B    ; Decrease counter by one and loop back to #R$E36B until
                     ; counter is zero.
; This entry point is used by the routine at #R$E3E0.
*$E3A3 POP BC        ; Restore #REGbc from the stack.
; This entry point is used by the routines at #R$DEA8, #R$E12A, #R$EBD8 and
; #R$F001.
*$E3A4 LD A,$01      ; {Write #N$01 to *#R$FFFB.
 $E3A6 LD ($FFFB),A  ; }
 $E3A9 POP BC        ; Restore #REGbc from the stack.
 $E3AA LD HL,$0064   ; #REGhl=#N($0064,$04,$04).
 $E3AD LD DE,$00C8   ; #REGde=#N($00C8,$04,$04).
 $E3B0 CALL $03B5    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/03B5.html">BEEPER</a>.)
 $E3B3 LD A,($5BF1)  ; {Decrease *#R$5BF1 by one.
 $E3B6 DEC A         ;
 $E3B7 LD ($5BF1),A  ; }
 $E3BA CP $FF        ; {Call #R$ED8F is *#R$5BF1 is equal to #N$FF.
 $E3BC CALL Z,$ED8F  ; }
 $E3BF JP $DEC9      ; Jump to #R$DEC9.
; This entry point is used by the routine at #R$E3E0.
*$E3C2 CALL $E349    ; Call #R$E349.
 $E3C5 CP $40        ; {Return if #REGa is higher than #N$40.
 $E3C7 RET NC        ; }
 $E3C8 LD A,($E479)  ; {Return if *#R$E479 is not equal to #N$00.
 $E3CB CP $00        ;
 $E3CD RET NZ        ; }
 $E3CE LD A,$20      ; {Write #N$20 to *#R$E475.
 $E3D0 LD ($E475),A  ; }
 $E3D3 LD ($E46F),BC ; Write #REGbc to *#R$E46F.
 $E3D7 LD A,$01      ; {Write #N$01 to: #LIST { *#R$E479 } { *#R$FFFD } LIST#
 $E3D9 LD ($E479),A  ;
 $E3DC LD ($FFFD),A  ; }
 $E3DF RET           ; Return.

; Routine at E3E0
;
; Used by the routine at #R$DEA8.
c$E3E0 LD A,($F2DB)    ;
 $E3E3 CP $00          ;
 $E3E5 RET Z           ;
 $E3E6 LD IX,$F2DB     ;
 $E3EA LD HL,$F15B     ;
 $E3ED LD ($5C36),HL   ;
 $E3F0 LD A,$10        ;
 $E3F2 RST $10         ;
 $E3F3 LD A,$07        ;
 $E3F5 RST $10         ;
 $E3F6 LD B,$05        ;
*$E3F8 PUSH BC         ;
 $E3F9 LD B,(IX+$01)   ;
 $E3FC LD DE,$0101     ;
 $E3FF LD C,(IX+$00)   ;
 $E402 LD A,C          ;
 $E403 CP $22          ;
 $E405 JR NC,$E412     ;
 $E407 CP $02          ;
 $E409 JR C,$E412      ;
 $E40B PUSH BC         ;
 $E40C PUSH DE         ;
 $E40D CALL $E787      ;
 $E410 POP DE          ;
 $E411 POP BC          ;
*$E412 LD A,(IX+$03)   ;
 $E415 ADD A,B         ;
 $E416 LD B,A          ;
 $E417 LD A,(IX+$02)   ;
 $E41A ADD A,C         ;
 $E41B LD C,A          ;
 $E41C INC (IX+$05)    ;
 $E41F LD A,(IX+$05)   ;
 $E422 CP $04          ;
 $E424 JR Z,$E464      ;
 $E426 LD A,C          ;
 $E427 CP $22          ;
 $E429 JR NC,$E45B     ;
 $E42B CP $02          ;
 $E42D JR C,$E45B      ;
 $E42F LD (IX+$00),C   ;
 $E432 LD (IX+$01),B   ;
 $E435 LD DE,$0101     ;
 $E438 LD A,$20        ;
 $E43A CALL $EA93      ;
 $E43D LD B,(IX+$01)   ;
 $E440 LD A,($F232)    ;
 $E443 SUB B           ;
 $E444 CP $02          ;
 $E446 JR NC,$E45B     ;
 $E448 LD C,(IX+$00)   ;
 $E44B LD A,($F231)    ;
 $E44E SUB C           ;
 $E44F CP $02          ;
 $E451 JR NC,$E45B     ;
 $E453 LD A,$03        ;
 $E455 LD ($FFFE),A    ;
 $E458 JP $E3A3        ;
*$E45B LD DE,$0006     ;
 $E45E ADD IX,DE       ;
 $E460 POP BC          ;
 $E461 DJNZ $E3F8      ;
 $E463 RET             ;
*$E464 LD (IX+$00),$00 ;
 $E468 LD A,$00        ;
 $E46A LD ($FFFD),A    ;
 $E46D JR $E45B        ;
 $E46F DEFW $0000      ;
 $E471 DEFB $00        ;
 $E472 DEFB $00        ;
 $E473 DEFB $00        ;
 $E474 DEFB $00        ;
 $E475 DEFB $00        ;
 $E476 DEFB $00        ;
 $E477 DEFB $00        ;
 $E478 DEFB $00        ;
 $E479 DEFB $00        ;
; This entry point is used by the routine at #R$DEA8.
*$E47A LD A,($E479)    ;
 $E47D CP $00          ;
 $E47F RET Z           ;
 $E480 LD A,($F341)    ;
 $E483 INC A           ;
 $E484 AND $01         ;
 $E486 LD ($F341),A    ;
 $E489 CP $00          ;
 $E48B RET NZ          ;
 $E48C LD HL,$924C     ;
 $E48F LD ($5C36),HL   ;
 $E492 LD A,$10        ;
 $E494 RST $10         ;
 $E495 LD A,$06        ;
 $E497 RST $10         ;
 $E498 LD A,($E475)    ;
 $E49B ADD A,$04       ;
 $E49D CP $40          ;
 $E49F JR Z,$E4AF      ;
 $E4A1 LD ($E475),A    ;
 $E4A4 LD BC,($E46F)   ;
 $E4A8 LD DE,$0202     ;
 $E4AB CALL $EA93      ;
 $E4AE RET             ;
*$E4AF LD BC,($E46F)   ;
 $E4B3 LD DE,$0202     ;
 $E4B6 CALL $E787      ;
 $E4B9 LD A,$00        ;
 $E4BB LD ($FFFD),A    ;
 $E4BE LD ($E479),A    ;
 $E4C1 LD A,($F2DB)    ;
 $E4C4 CP $00          ;
 $E4C6 RET NZ          ;
 $E4C7 LD DE,$F2DB     ;
 $E4CA LD HL,$F2F9     ;
 $E4CD LD BC,$001E     ;
 $E4D0 LDIR            ;
 $E4D2 LD BC,($E46F)   ;
 $E4D6 DEC B           ;
 $E4D7 LD IX,$F2DB     ;
 $E4DB LD L,$05        ;
*$E4DD LD (IX+$00),C   ;
 $E4E0 LD (IX+$01),B   ;
 $E4E3 LD DE,$0006     ;
 $E4E6 ADD IX,DE       ;
 $E4E8 DEC L           ;
 $E4E9 JR NZ,$E4DD     ;
 $E4EB LD A,$02        ;
 $E4ED LD ($FFFD),A    ;
 $E4F0 RET             ;
; This entry point is used by the routine at #R$DEA8.
*$E4F1 LD IX,($5BE4)   ;
*$E4F5 LD A,(IX+$00)   ;
 $E4F8 CP $FF          ;
 $E4FA RET Z           ;
 $E4FB LD A,(IX+$05)   ;
 $E4FE CP $00          ;
 $E500 JR Z,$E531      ;
 $E502 LD C,(IX+$00)   ;
 $E505 LD B,(IX+$01)   ;
 $E508 LD A,(IX+$03)   ;
 $E50B CP $03          ;
 $E50D JR Z,$E547      ;
 $E50F CP $02          ;
 $E511 JR Z,$E538      ;
 $E513 CP $01          ;
 $E515 JR Z,$E554      ;
 $E517 DEC B           ;
 $E518 CALL $0DD9      ;
*$E51B LD D,$04        ;
*$E51D LD B,(IX+$07)   ;
 $E520 LD A,$FF        ;
 $E522 LD HL,($5C84)   ;
 $E525 INC H           ;
 $E526 LD ($5C84),HL   ;
 $E529 DEC H           ;
*$E52A LD (HL),A       ;
 $E52B INC HL          ;
 $E52C DJNZ $E52A      ;
 $E52E DEC D           ;
 $E52F JR NZ,$E51D     ;
*$E531 LD DE,$0010     ;
 $E534 ADD IX,DE       ;
 $E536 JR $E4F5        ;
*$E538 CALL $0DD9      ;
 $E53B LD HL,($5C84)   ;
 $E53E INC H           ;
 $E53F INC H           ;
 $E540 INC H           ;
 $E541 INC H           ;
 $E542 LD ($5C84),HL   ;
 $E545 JR $E51B        ;
*$E547 CALL $0DD9      ;
 $E54A LD HL,($5C84)   ;
 $E54D INC H           ;
 $E54E INC H           ;
 $E54F LD ($5C84),HL   ;
 $E552 JR $E51B        ;
*$E554 PUSH BC         ;
 $E555 CALL $0DD9      ;
 $E558 LD HL,($5C84)   ;
 $E55B LD A,H          ;
 $E55C ADD A,$06       ;
 $E55E LD H,A          ;
 $E55F LD ($5C84),HL   ;
 $E562 LD D,$02        ;
*$E564 LD HL,($5C84)   ;
 $E567 INC H           ;
 $E568 LD ($5C84),HL   ;
 $E56B DEC H           ;
 $E56C LD A,$FF        ;
 $E56E LD B,(IX+$07)   ;
*$E571 LD (HL),A       ;
 $E572 INC HL          ;
 $E573 DJNZ $E571      ;
 $E575 DEC D           ;
 $E576 JR NZ,$E564     ;
 $E578 POP BC          ;
 $E579 DEC B           ;
 $E57A CALL $0DD9      ;
 $E57D LD D,$02        ;
 $E57F JR $E51D        ;
; This entry point is used by the routine at #R$DEA8.
*$E581 LD IX,($5BE6)   ;
*$E585 LD A,(IX+$00)   ;
 $E588 CP $FF          ;
 $E58A RET Z           ;
 $E58B LD A,(IX+$02)   ;
 $E58E AND $80         ;
 $E590 JP Z,$E5C5      ;
 $E593 LD HL,$9F6C     ;
 $E596 LD ($5C36),HL   ;
 $E599 INC (IX+$05)    ;
 $E59C LD A,(IX+$04)   ;
 $E59F CP (IX+$05)     ;
 $E5A2 JR NZ,$E5B0     ;
 $E5A4 LD A,(IX+$02)   ;
 $E5A7 AND $7F         ;
 $E5A9 LD (IX+$02),A   ;
 $E5AC LD (IX+$05),$00 ;
*$E5B0 LD C,(IX+$00)   ;
 $E5B3 LD B,(IX+$01)   ;
 $E5B6 LD A,(IX+$02)   ;
 $E5B9 AND $7F         ;
 $E5BB LD E,A          ;
 $E5BC LD D,$01        ;
 $E5BE LD A,$20        ;
 $E5C0 CALL $EA93      ;
 $E5C3 JR $E5ED        ;
*$E5C5 LD A,(IX+$03)   ;
 $E5C8 INC (IX+$05)    ;
 $E5CB CP (IX+$05)     ;
 $E5CE JR NZ,$E5DC     ;
 $E5D0 LD A,(IX+$02)   ;
 $E5D3 OR $80          ;
 $E5D5 LD (IX+$02),A   ;
 $E5D8 LD (IX+$05),$00 ;
*$E5DC LD C,(IX+$00)   ;
 $E5DF LD B,(IX+$01)   ;
 $E5E2 LD A,(IX+$02)   ;
 $E5E5 AND $7F         ;
 $E5E7 LD E,A          ;
 $E5E8 LD D,$01        ;
 $E5EA CALL $E787      ;
*$E5ED LD DE,$0006     ;
 $E5F0 ADD IX,DE       ;
 $E5F2 JR $E585        ;
; This entry point is used by the routine at #R$DEA8.
*$E5F4 LD IX,($5BE0)   ;
*$E5F8 LD A,(IX+$00)   ;
 $E5FB CP $FF          ;
 $E5FD RET Z           ;
 $E5FE LD C,A          ;
 $E5FF LD B,(IX+$01)   ;
 $E602 LD A,(IX+$05)   ;
 $E605 CP $00          ;
 $E607 JR Z,$E61A      ;
 $E609 LD A,($F232)    ;
 $E60C DEC A           ;
 $E60D CP B            ;
 $E60E JR NZ,$E61A     ;
 $E610 LD A,($F231)    ;
 $E613 SUB C           ;
 $E614 JR Z,$E621      ;
 $E616 CP $FF          ;
 $E618 JR Z,$E621      ;
*$E61A LD DE,$0007     ;
 $E61D ADD IX,DE       ;
 $E61F JR $E5F8        ;
*$E621 CALL $E3C2      ;
 $E624 LD A,$04        ;
 $E626 LD ($FFFE),A    ;
 $E629 LD A,$00        ;
 $E62B LD D,$02        ;
 $E62D LD E,$02        ;
 $E62F PUSH DE         ;
 $E630 CALL $E72F      ;
 $E633 CALL $0DD9      ;
 $E636 POP DE          ;
 $E637 LD HL,$9F6C     ;
 $E63A LD ($5C36),HL   ;
 $E63D LD A,$20        ;
 $E63F CALL $EA93      ;
 $E642 LD (IX+$05),$00 ;
 $E646 LD A,$10        ;
 $E648 RST $10         ;
 $E649 LD A,$06        ;
 $E64B RST $10         ;
 $E64C LD A,$11        ;
 $E64E RST $10         ;
 $E64F LD A,($5BD0)    ;
 $E652 RST $10         ;
 $E653 LD HL,$3C00     ;
 $E656 LD ($5C36),HL   ;
 $E659 LD C,$13        ;
 $E65B LD B,$01        ;
 $E65D CALL $0DD9      ;
 $E660 LD BC,($5BF4)   ;
 $E664 INC BC          ;
 $E665 LD ($5BF4),BC   ;
 $E669 CALL $1A1B      ;
 $E66C LD C,$05        ;
 $E66E LD B,$01        ;
 $E670 CALL $0DD9      ;
 $E673 LD BC,($5BF2)   ;
 $E677 DEC BC          ;
 $E678 LD ($5BF2),BC   ;
 $E67C LD A,B          ;
 $E67D CP $00          ;
 $E67F JR NZ,$E699     ;
 $E681 LD A,C          ;
 $E682 CP $32          ;
 $E684 JR NZ,$E699     ;
 $E686 LD A,($5BD3)    ;
 $E689 LD ($5BFC),A    ;
 $E68C LD A,(IX+$00)   ;
 $E68F LD ($5BFD),A    ;
 $E692 LD A,(IX+$01)   ;
 $E695 INC A           ;
 $E696 LD ($5BFE),A    ;
*$E699 LD A,C          ;
 $E69A CP $00          ;
 $E69C PUSH AF         ;
 $E69D CALL NZ,$1A1B   ;
 $E6A0 LD A,$20        ;
 $E6A2 CALL $E6DC      ;
 $E6A5 POP AF          ;
 $E6A6 RET NZ          ;
 $E6A7 LD A,$2D        ;
 $E6A9 LD ($5BFF),A    ;
 $E6AC LD BC,$0014     ;
 $E6AF LD ($5BFA),BC   ;
 $E6B3 LD HL,$3C00     ;
 $E6B6 LD ($5C36),HL   ;
 $E6B9 JP $E0F7        ;

; Messaging: Find The Gold Key
@label=Messaging_FindTheGoldKey
t$E6BC DEFM "FIND THE GOLD KEY IN    SECONDS!" ; "#STR(#PC,$04,$20)".

; Print Colour Character
;
; Used by the routines at #R$DEA8, #R$E064, #R$E0A9, #R$E3E0, #R$E762, #R$EA93
; and #R$EED7.
;
; A Character to print
@label=PrintColourCharacter
c$E6DC EXX           ; Switch to the shadow registers.
 $E6DD LD E,A        ; {#REGde'=#REGa*#N$08.
 $E6DE LD D,$00      ;
 $E6E0 SLA E         ;
 $E6E2 RL D          ;
 $E6E4 SLA E         ;
 $E6E6 RL D          ;
 $E6E8 SLA E         ;
 $E6EA RL D          ; }
 $E6EC LD HL,($5C36) ; {#HTML(#REGhl'=*<a rel="noopener nofollow"
 $E6EF ADD HL,DE     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>+#REGde'.)
                     ; }
 $E6F0 LD DE,($5C84) ; {#HTML(Increment *<a rel="noopener nofollow"
 $E6F4 INC DE        ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>
 $E6F5 LD ($5C84),DE ; by one.)}
 $E6F9 DEC DE        ; Decrease #REGde' by one.
; All character blocks are 1 x 8 bytes.
; .
; Copy the data from the current character set to the screen buffer.
 $E6FA LD B,$08      ; #REGb'=#N$08 (byte counter).
@label=PrintColourCharacter_Loop
*$E6FC LD A,(HL)     ; Fetch the byte from the character set.
 $E6FD LD (DE),A     ; Write the byte to the screen buffer.
 $E6FE INC HL        ; Increment the character set data pointer in #REGhl' by
                     ; one.
 $E6FF INC D         ; Move down one line in the screen buffer.
 $E700 DJNZ $E6FC    ; Decrease the byte counter by one and loop back to
                     ; #R$E6FC until all lines of the letter have been written
                     ; to the screen buffer.
; Calculate the attribute buffer position.
 $E702 LD BC,($5C88) ; #HTML(#REGbc'=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C88.html">S_POSN</a>.)
 $E706 LD HL,$5800   ; #REGhl'=#N$5800 (attribute buffer location).
 $E709 DEC C         ; Decrease #REGc' by one.
 $E70A LD ($5C88),BC ; #HTML(Write #REGbc' to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C88.html">S_POSN</a>.)
 $E70E INC C         ; Increment #REGc' by one.
 $E70F LD A,$21      ; {#REGe'=#N$21-#REGc'.
 $E711 SUB C         ;
 $E712 LD E,A        ; }
 $E713 LD D,$00      ; #REGd'=#N$00.
 $E715 ADD HL,DE     ; #REGhl'+=#REGde'.
 $E716 LD A,$18      ; {#REGe'=#N$18-#REGb'.
 $E718 SUB B         ;
 $E719 LD E,A        ; }
 $E71A SLA E         ; {Shift #REGe' left four positions (with carry).
 $E71C SLA E         ;
 $E71E SLA E         ;
 $E720 SLA E         ; }
 $E722 RL D          ; Rotate #REGd' left.
 $E724 SLA E         ; Shift #REGe' left (with carry).
 $E726 RL D          ; Rotate #REGd' left.
 $E728 ADD HL,DE     ; #REGhl'+=#REGde'.
 $E729 LD A,($5C8F)  ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8F.html">ATTR_T</a>.)
 $E72C LD (HL),A     ; Write #REGa to *#REGhl'.
 $E72D EXX           ; Switch back to the normal registers.
 $E72E RET           ; Return.

; Routine at E72F
;
; Used by the routines at #R$E3E0, #R$EB8D and #R$F107.
c$E72F PUSH AF       ; {Stash #REGaf, #REGbc, #REGde and #REGhl on the stack.
 $E730 PUSH BC       ;
 $E731 PUSH DE       ;
 $E732 PUSH HL       ; }
 $E733 DEC A         ; Decrease #REGa by one.
 $E734 LD ($F336),A  ; Write #REGa to *#R$F336.
 $E737 LD A,E        ; #REGa=#REGe.
 $E738 LD ($F335),A  ; Write #REGa to *#R$F335.
*$E73B LD A,($F335)  ; #REGa=*#R$F335.
 $E73E LD E,A        ; #REGe=#REGa.
 $E73F PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $E740 PUSH DE       ; }
 $E741 CALL $E762    ; Call #R$E762.
 $E744 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $E745 POP BC        ; }
*$E746 LD A,($F336)  ; #REGa=*#R$F336.
 $E749 INC A         ; Increment #REGa by one.
 $E74A CP $00        ; Compare #REGa with #N$00.
 $E74C JR Z,$E751    ; Jump to #R$E751 if {} is zero.
 $E74E LD ($F336),A  ; Write #REGa to *#R$F336.
*$E751 CALL $E804    ; Call #R$E804.
 $E754 DEC E         ; Decrease #REGe by one.
 $E755 JR NZ,$E746   ; Jump to #R$E746 if {} is not zero.
 $E757 DEC D         ; Decrease #REGd by one.
 $E758 JR Z,$E75D    ; Jump to #R$E75D if {} is zero.
 $E75A DEC B         ; Decrease #REGb by one.
 $E75B JR $E73B      ; Jump to #R$E73B.
*$E75D POP HL        ; {Restore #REGhl, #REGde, #REGbc and #REGaf from the
 $E75E POP DE        ; stack.
 $E75F POP BC        ;
 $E760 POP AF        ; }
 $E761 RET           ; Return.

; Routine at E762
;
; Used by the routines at #R$E72F, #R$F001 and #R$F107.
c$E762 LD A,$18      ; {#REGe=#N$18-#REGb.
 $E764 SUB B         ;
 $E765 LD E,A        ; }
 $E766 LD D,$00      ; #REGd=#N$00.
 $E768 SLA E         ; Shift #REGe left (with carry).
 $E76A RL D          ; Rotate #REGd left.
 $E76C SLA E         ; Shift #REGe left (with carry).
 $E76E RL D          ; Rotate #REGd left.
 $E770 SLA E         ; Shift #REGe left (with carry).
 $E772 RL D          ; Rotate #REGd left.
 $E774 SLA E         ; Shift #REGe left (with carry).
 $E776 RL D          ; Rotate #REGd left.
 $E778 SLA E         ; Shift #REGe left (with carry).
 $E77A RL D          ; Rotate #REGd left.
 $E77C LD A,$21      ; #REGa=#N$21.
 $E77E SUB C         ; #REGa-=#REGc.
 $E77F LD L,A        ; #REGl=#REGa.
 $E780 LD H,$00      ; #REGh=#N$00.
 $E782 ADD HL,DE     ; #REGhl+=#REGde.
 $E783 LD ($F330),HL ; Write #REGhl to *#R$F330.
 $E786 RET           ; Return.
; This entry point is used by the routines at #R$E12A, #R$E3E0 and #R$E9E2.
*$E787 LD HL,($5C36) ; #HTML(#REGhl=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $E78A PUSH HL       ; Stash #REGhl on the stack.
 $E78B LD HL,$8378   ; {#HTML(Write #R$8478(#N$8378) to *<a rel="noopener
 $E78E LD ($5C36),HL ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $E791 LD A,E        ; {Write #REGe to *#R$F335.
 $E792 LD ($F335),A  ; }
*$E795 LD A,($F335)  ; {#REGe=*#R$F335.
 $E798 LD E,A        ; }
 $E799 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $E79A PUSH DE       ; }
 $E79B CALL $E762    ; Call #R$E762.
 $E79E CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $E7A1 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $E7A2 POP BC        ; }
*$E7A3 PUSH DE       ; Stash #REGde on the stack.
 $E7A4 LD HL,($F330) ; #REGhl=*#R$F330.
 $E7A7 INC HL        ; Increment #REGhl by one.
 $E7A8 LD ($F330),HL ; Write #REGhl to *#R$F330.
 $E7AB DEC HL        ; Decrease #REGhl by one.
 $E7AC LD DE,$A1C4   ; #REGde=#R$A1C4.
 $E7AF ADD HL,DE     ; #REGhl+=#REGde.
 $E7B0 LD A,(HL)     ; #REGa=*#REGhl.
 $E7B1 POP DE        ; Restore #REGde from the stack.
 $E7B2 CP $00        ; Compare #REGa with #N$00.
 $E7B4 JR NZ,$E7BD   ; Jump to #R$E7BD if {} is not zero.
 $E7B6 LD A,$20      ; #REGa=#N$20.
 $E7B8 CALL $E6DC    ; Call #R$E6DC.
 $E7BB JR $E7D3      ; Jump to #R$E7D3.
*$E7BD PUSH AF       ; {Stash #REGaf and #REGaf on the stack.
 $E7BE PUSH AF       ; }
 $E7BF AND %10000000 ; Keep only bits 7.
 $E7C1 CALL NZ,$E7FB ; Call #R$E7FB not zero.
 $E7C4 POP AF        ; Restore #REGaf from the stack.
 $E7C5 AND %01111111 ; Keep only bits 0-6.
 $E7C7 RST $10       ;
 $E7C8 POP AF        ; Restore #REGaf from the stack.
 $E7C9 JR Z,$E7D3    ; Jump to #R$E7D3 if {} is zero.
 $E7CB PUSH HL       ; Stash #REGhl on the stack.
 $E7CC LD HL,$8378   ; {#HTML(Write #R$8478(#N$8378) to *<a rel="noopener
 $E7CF LD ($5C36),HL ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $E7D2 POP HL        ; Restore #REGhl from the stack.
*$E7D3 PUSH DE       ; {Stash #REGde and #REGhl on the stack.
 $E7D4 PUSH HL       ; }
 $E7D5 LD HL,($F330) ; #REGhl=*#R$F330.
 $E7D8 DEC HL        ; Decrease #REGhl by one.
 $E7D9 LD DE,$A4E4   ; #REGde=#R$A4E4.
 $E7DC ADD HL,DE     ; #REGhl+=#REGde.
 $E7DD LD A,(HL)     ; #REGa=*#REGhl.
 $E7DE CP $00        ; Compare #REGa with #N$00.
 $E7E0 JR Z,$E7EB    ; Jump to #R$E7EB if {} is zero.
 $E7E2 LD DE,$5800   ; #REGde=#N$5800 (screen buffer location).
 $E7E5 LD HL,($F330) ; #REGhl=*#R$F330.
 $E7E8 DEC HL        ; Decrease #REGhl by one.
 $E7E9 ADD HL,DE     ; #REGhl+=#REGde.
 $E7EA LD (HL),A     ; Write #REGa to *#REGhl.
*$E7EB POP HL        ; {Restore #REGhl and #REGde from the stack.
 $E7EC POP DE        ; }
 $E7ED DEC E         ; Decrease #REGe by one.
 $E7EE JR NZ,$E7A3   ; Jump to #R$E7A3 if {} is not zero.
 $E7F0 DEC D         ; Decrease #REGd by one.
 $E7F1 JR Z,$E7F6    ; Jump to #R$E7F6 if {} is zero.
 $E7F3 DEC B         ; Decrease #REGb by one.
 $E7F4 JR $E795      ; Jump to #R$E795.
*$E7F6 POP HL        ; Restore #REGhl from the stack.
 $E7F7 LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $E7FA RET           ; Return.
*$E7FB PUSH HL       ; Stash #REGhl on the stack.
 $E7FC LD HL,$8678   ; {#HTML(Write #R$8778(#N$8678) to *<a rel="noopener
 $E7FF LD ($5C36),HL ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $E802 POP HL        ; Restore #REGhl from the stack.
 $E803 RET           ; Return.
; This entry point is used by the routines at #R$E72F and #R$F107.
*$E804 PUSH AF       ; {Stash #REGaf, #REGde and #REGhl on the stack.
 $E805 PUSH DE       ;
 $E806 PUSH HL       ; }
 $E807 LD HL,($F330) ; #REGhl=*#R$F330.
 $E80A INC HL        ; Increment #REGhl by one.
 $E80B LD ($F330),HL ; Write #REGhl to *#R$F330.
 $E80E DEC HL        ; Decrease #REGhl by one.
 $E80F LD DE,$A1C4   ; #REGde=#R$A1C4.
 $E812 ADD HL,DE     ; #REGhl+=#REGde.
 $E813 LD (HL),A     ; Write #REGa to *#REGhl.
 $E814 LD DE,$0320   ; #REGde=#N$0320.
 $E817 ADD HL,DE     ; #REGhl+=#REGde.
 $E818 LD A,($5C8F)  ; #HTML(#REGa=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8F.html">ATTR_T</a>.)
 $E81B LD (HL),A     ; Write #REGa to *#REGhl.
 $E81C POP HL        ; {Restore #REGhl, #REGde and #REGaf from the stack.
 $E81D POP DE        ;
 $E81E POP AF        ; }
 $E81F RET           ; Return.

; Data block at E820
b$E820 DEFB $00

; Routine at E821
;
; Used by the routine at #R$DEA8.
c$E821 LD A,($F334)    ;
 $E824 INC A           ;
 $E825 AND $01         ;
 $E827 LD ($F334),A    ;
 $E82A CP $01          ;
 $E82C RET NZ          ;
 $E82D LD HL,$F17B     ;
 $E830 LD ($5C36),HL   ;
 $E833 LD IX,($5BE4)   ;
*$E837 LD A,(IX+$00)   ;
 $E83A CP $FF          ;
 $E83C RET Z           ;
 $E83D LD A,(IX+$04)   ;
 $E840 CP $00          ;
 $E842 JP Z,$E946      ;
 $E845 LD A,($F240)    ;
 $E848 CP $03          ;
 $E84A JR NZ,$E8B5     ;
 $E84C LD E,(IX+$07)   ;
 $E84F LD C,(IX+$00)   ;
 $E852 LD B,(IX+$01)   ;
 $E855 LD A,($F23F)    ;
 $E858 SUB $03         ;
 $E85A CP B            ;
 $E85B JR NZ,$E8B5     ;
 $E85D LD C,(IX+$00)   ;
 $E860 LD B,(IX+$01)   ;
 $E863 PUSH BC         ;
 $E864 CALL $0DD9      ;
 $E867 LD HL,($5C84)   ;
 $E86A POP BC          ;
 $E86B INC B           ;
 $E86C PUSH HL         ;
 $E86D CALL $0DD9      ;
 $E870 POP HL          ;
 $E871 LD DE,($5C84)   ;
 $E875 LD A,D          ;
 $E876 ADD A,$07       ;
 $E878 LD D,A          ;
 $E879 LD B,(IX+$07)   ;
 $E87C LD A,(IX+$02)   ;
 $E87F CP $02          ;
 $E881 JR NC,$E884     ;
 $E883 INC B           ;
*$E884 LD A,(DE)       ;
 $E885 AND (HL)        ;
 $E886 JR NZ,$E88E     ;
 $E888 INC HL          ;
 $E889 INC DE          ;
 $E88A DJNZ $E884      ;
 $E88C JR $E8B5        ;
*$E88E LD A,$02        ;
 $E890 LD ($E820),A    ;
 $E893 LD A,(IX+$04)   ;
 $E896 CP $00          ;
 $E898 JR Z,$E8A4      ;
 $E89A CP $FF          ;
 $E89C PUSH AF         ;
 $E89D CALL Z,$E92E    ;
 $E8A0 POP AF          ;
 $E8A1 CALL NZ,$E926   ;
*$E8A4 LD A,(IX+$05)   ;
 $E8A7 CP $00          ;
 $E8A9 JR Z,$E8B5      ;
 $E8AB CP $FF          ;
 $E8AD PUSH AF         ;
 $E8AE CALL Z,$E93E    ;
 $E8B1 POP AF          ;
 $E8B2 CALL NZ,$E936   ;
*$E8B5 CALL $EEA6      ;
 $E8B8 LD A,(IX+$04)   ;
 $E8BB CP $00          ;
 $E8BD PUSH AF         ;
 $E8BE CALL Z,$E901    ;
 $E8C1 POP AF          ;
 $E8C2 CALL NZ,$E8DC   ;
 $E8C5 LD (IX+$00),C   ;
 $E8C8 LD (IX+$01),B   ;
 $E8CB LD (IX+$02),E   ;
 $E8CE LD (IX+$03),D   ;
 $E8D1 CALL $EED7      ;
 $E8D4 LD DE,$0010     ;
 $E8D7 ADD IX,DE       ;
 $E8D9 JP $E837        ;
*$E8DC LD A,(IX+$04)   ;
 $E8DF CP $FF          ;
 $E8E1 JR Z,$E8F2      ;
 $E8E3 LD A,(IX+$0A)   ;
 $E8E6 CP C            ;
 $E8E7 RET NZ          ;
 $E8E8 LD A,(IX+$0B)   ;
 $E8EB CP E            ;
 $E8EC RET NZ          ;
 $E8ED LD (IX+$04),$FF ;
 $E8F1 RET             ;
*$E8F2 LD A,(IX+$0C)   ;
 $E8F5 CP C            ;
 $E8F6 RET NZ          ;
 $E8F7 LD A,(IX+$0D)   ;
 $E8FA CP E            ;
 $E8FB RET NZ          ;
 $E8FC LD (IX+$04),$01 ;
 $E900 RET             ;
*$E901 LD A,(IX+$05)   ;
 $E904 CP $FF          ;
 $E906 JR Z,$E917      ;
 $E908 LD A,(IX+$0A)   ;
 $E90B CP B            ;
 $E90C RET NZ          ;
 $E90D LD A,(IX+$0B)   ;
 $E910 CP D            ;
 $E911 RET NZ          ;
 $E912 LD (IX+$05),$FF ;
 $E916 RET             ;
*$E917 LD A,(IX+$0C)   ;
 $E91A CP B            ;
 $E91B RET NZ          ;
 $E91C LD A,(IX+$0D)   ;
 $E91F CP D            ;
 $E920 RET NZ          ;
 $E921 LD (IX+$05),$01 ;
 $E925 RET             ;
*$E926 LD A,($F235)    ;
 $E929 INC A           ;
 $E92A LD ($F235),A    ;
 $E92D RET             ;
*$E92E LD A,($F235)    ;
 $E931 DEC A           ;
 $E932 LD ($F235),A    ;
 $E935 RET             ;
*$E936 LD A,($F236)    ;
 $E939 INC A           ;
 $E93A LD ($F236),A    ;
 $E93D RET             ;
*$E93E LD A,($F236)    ;
 $E941 DEC A           ;
 $E942 LD ($F236),A    ;
 $E945 RET             ;
*$E946 LD A,($F240)    ;
 $E949 INC A           ;
 $E94A AND $03         ;
 $E94C CP (IX+$03)     ;
 $E94F JP NZ,$E8B5     ;
 $E952 LD C,(IX+$00)   ;
 $E955 LD B,(IX+$01)   ;
 $E958 LD A,(IX+$03)   ;
 $E95B CP $00          ;
 $E95D LD A,($F23F)    ;
 $E960 JR Z,$E963      ;
 $E962 DEC A           ;
*$E963 SUB $02         ;
 $E965 CP B            ;
 $E966 JP NZ,$E8B5     ;
 $E969 LD A,(IX+$03)   ;
 $E96C LD C,(IX+$00)   ;
 $E96F LD B,(IX+$01)   ;
 $E972 PUSH AF         ;
 $E973 CP $03          ;
 $E975 CALL Z,$E9B7    ;
 $E978 POP AF          ;
 $E979 PUSH AF         ;
 $E97A CP $02          ;
 $E97C CALL Z,$E9AA    ;
 $E97F POP AF          ;
 $E980 PUSH AF         ;
 $E981 CP $01          ;
 $E983 CALL Z,$E99B    ;
 $E986 POP AF          ;
 $E987 CP $00          ;
 $E989 CALL Z,$E9C2    ;
 $E98C LD B,(IX+$07)   ;
*$E98F LD A,(DE)       ;
 $E990 AND (HL)        ;
 $E991 JP NZ,$E88E     ;
 $E994 INC HL          ;
 $E995 INC DE          ;
 $E996 DJNZ $E98F      ;
 $E998 JP $E8B5        ;
*$E99B CALL $0DD9      ;
 $E99E LD HL,($5C84)   ;
 $E9A1 INC H           ;
 $E9A2 INC H           ;
 $E9A3 INC H           ;
 $E9A4 INC H           ;
 $E9A5 INC H           ;
 $E9A6 PUSH HL         ;
 $E9A7 POP DE          ;
 $E9A8 INC H           ;
 $E9A9 RET             ;
*$E9AA CALL $0DD9      ;
 $E9AD LD HL,($5C84)   ;
 $E9B0 INC H           ;
 $E9B1 INC H           ;
 $E9B2 INC H           ;
 $E9B3 PUSH HL         ;
 $E9B4 POP DE          ;
 $E9B5 INC H           ;
 $E9B6 RET             ;
*$E9B7 CALL $0DD9      ;
 $E9BA LD HL,($5C84)   ;
 $E9BD INC H           ;
 $E9BE PUSH HL         ;
 $E9BF POP DE          ;
 $E9C0 INC H           ;
 $E9C1 RET             ;
*$E9C2 PUSH BC         ;
 $E9C3 CALL $0DD9      ;
 $E9C6 POP BC          ;
 $E9C7 LD DE,($5C84)   ;
 $E9CB LD A,D          ;
 $E9CC ADD A,$07       ;
 $E9CE LD D,A          ;
 $E9CF PUSH DE         ;
 $E9D0 DEC B           ;
 $E9D1 CALL $0DD9      ;
 $E9D4 POP DE          ;
 $E9D5 LD HL,($5C84)   ;
 $E9D8 RET             ;

; Routine at E9D9
;
; Used by the routines at #R$DEA8 and #R$ED35.
c$E9D9 LD BC,$07D0   ; #REGbc=#N$07D0.
*$E9DC DEC BC        ; Decrease #REGbc by one.
 $E9DD LD A,B        ; {Jump to #R$E9DC until #REGbc is zero.
 $E9DE OR C          ;
 $E9DF JR NZ,$E9DC   ; }
 $E9E1 RET           ; Return.

; Routine at E9E2
;
; Used by the routines at #R$EBD8 and #R$F001.
c$E9E2 LD A,C        ; #REGa=#REGc.
 $E9E3 SUB (IX+$0D)  ; #REGa-=*#REGix+#N$0D.
 $E9E6 JR Z,$E9F4    ; Jump to #R$E9F4 if the result is zero.
 $E9E8 CP $FF        ; Compare #REGa with #N$FF.
 $E9EA PUSH AF       ; Stash #REGaf on the stack.
 $E9EB CALL Z,$EA1D  ; Call #R$EA1D was equal to #N$FF (on line #R$E9E8).
 $E9EE POP AF        ; Restore #REGaf from the stack.
 $E9EF CALL NZ,$EA38 ; Call #R$EA38 was not equal to #N$FF (on line #R$E9E8).
 $E9F2 JR $E9FF      ; Jump to #R$E9FF.
*$E9F4 LD A,E        ; {Jump to #R$E9FF if #REGe is equal to *#REGix+#N$0B.
 $E9F5 CP (IX+$0B)   ;
 $E9F8 JR Z,$E9FF    ; }
 $E9FA CP $03        ; {Call #R$EA38 if #REGe is equal to #N$03.
 $E9FC CALL Z,$EA38  ; }
*$E9FF LD A,B        ; #REGa=#REGb.
 $EA00 SUB (IX+$0E)  ; #REGa-=*#REGix+#N$0E.
 $EA03 JR Z,$EA11    ; Jump to #R$EA11 if the result is zero.
 $EA05 CP $FF        ; Compare #REGa with #N$FF.
 $EA07 PUSH AF       ; Stash #REGaf on the stack.
 $EA08 CALL Z,$EA78  ; Call #R$EA78 if #REGa was equal to #N$FF (on line
                     ; #R$EA05).
 $EA0B POP AF        ; Restore #REGaf from the stack.
 $EA0C CALL NZ,$EA58 ; Call #R$EA58 if #REGa was not equal to #N$FF (on line
                     ; #R$EA05).
 $EA0F JR $EA1C      ; Jump to #R$EA1C.
*$EA11 LD A,D        ; {Jump to #R$EA1C if #REGd is equal to *#REGix+#N$0F.
 $EA12 CP (IX+$0F)   ;
 $EA15 JR Z,$EA1C    ; }
 $EA17 CP $03        ; {Call #R$EA58 if #REGd is equal to #N$03.
 $EA19 CALL Z,$EA58  ; }
*$EA1C RET           ; Return.
*$EA1D PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $EA1E PUSH DE       ; }
 $EA1F LD C,(IX+$0D) ; #REGc=*#REGix+#N$0D.
 $EA22 LD B,(IX+$0E) ; #REGb=*#REGix+#N$0E.
 $EA25 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $EA28 LD E,$01      ; #REGe=#N$01.
 $EA2A LD A,(IX+$0F) ; {Jump to #R$EA32 if *#REGix+#N$0F is equal to #N$03.
 $EA2D CP $03        ;
 $EA2F JR Z,$EA32    ; }
 $EA31 INC D         ; Increment #REGd by one.
*$EA32 CALL $E787    ; Call #R$E787.
 $EA35 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $EA36 POP BC        ; }
 $EA37 RET           ; Return.
*$EA38 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $EA39 PUSH DE       ; }
 $EA3A LD A,(IX+$0D) ; #REGa=*#REGix+#N$0D.
 $EA3D LD C,(IX+$07) ; #REGc=*#REGix+#N$07.
 $EA40 SUB C         ; #REGa-=#REGc.
 $EA41 LD C,A        ; #REGc=#REGa.
 $EA42 LD B,(IX+$0E) ; #REGb=*#REGix+#N$0E.
 $EA45 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $EA48 LD E,$01      ; #REGe=#N$01.
 $EA4A LD A,(IX+$03) ; {Jump to #R$EA52 if *#REGix+#N$03 is equal to #N$03.
 $EA4D CP $03        ;
 $EA4F JR Z,$EA52    ; }
 $EA51 INC D         ; Increment #REGd by one.
*$EA52 CALL $E787    ; Call #R$E787.
 $EA55 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $EA56 POP BC        ; }
 $EA57 RET           ; Return.
*$EA58 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $EA59 PUSH DE       ; }
 $EA5A LD A,(IX+$0E) ; #REGa=*#REGix+#N$0E.
 $EA5D LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $EA60 SUB D         ; #REGa-=#REGd.
 $EA61 LD B,A        ; #REGb=#REGa.
 $EA62 LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $EA65 LD C,(IX+$0D) ; #REGc=*#REGix+#N$0D.
 $EA68 LD D,$01      ; #REGd=#N$01.
 $EA6A LD A,(IX+$02) ; {Jump to #R$EA72 if *#REGix+#N$02 is equal to #N$03.
 $EA6D CP $03        ;
 $EA6F JR Z,$EA72    ; }
 $EA71 INC E         ; Increment #REGe by one.
*$EA72 CALL $E787    ; Call #R$E787.
 $EA75 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $EA76 POP BC        ; }
 $EA77 RET           ; Return.
*$EA78 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $EA79 PUSH DE       ; }
 $EA7A LD C,(IX+$0D) ; #REGc=*#REGix+#N$0D.
 $EA7D LD B,(IX+$0E) ; #REGb=*#REGix+#N$0E.
 $EA80 LD D,$01      ; #REGd=#N$01.
 $EA82 LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $EA85 LD A,(IX+$0B) ; {Jump to #R$EA8D if *#REGix+#N$0B is equal to #N$03.
 $EA88 CP $03        ;
 $EA8A JR Z,$EA8D    ; }
 $EA8C INC E         ; Increment #REGe by one.
*$EA8D CALL $E787    ; Call #R$E787.
 $EA90 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $EA91 POP BC        ; }
 $EA92 RET           ; Return.

; Routine at EA93
;
; Used by the routines at #R$DEA8, #R$E3E0, #R$EB8D, #R$F107 and #R$F1FC.
c$EA93 PUSH HL       ; Stash #REGhl on the stack.
 $EA94 DEC A         ; Decrease #REGa by one.
 $EA95 LD ($F336),A  ; Write #REGa to *#R$F336.
 $EA98 LD A,E        ; {Write #REGe to *#R$F335.
 $EA99 LD ($F335),A  ; }
*$EA9C LD A,C        ; {Jump to #R$EACD if #REGc is lower than #N$02.
 $EA9D CP $02        ;
 $EA9F JP C,$EACD    ; }
 $EAA2 LD A,($F335)  ; #REGa=*#R$F335.
 $EAA5 LD E,A        ; #REGe=#REGa.
 $EAA6 LD A,C        ; {Jump to #R$EADE if #REGc is higher than #N$22.
 $EAA7 CP $22        ;
 $EAA9 JP NC,$EADE   ; }
*$EAAC PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $EAAD PUSH DE       ; }
 $EAAE CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $EAB1 POP DE        ; Restore #REGde from the stack.
*$EAB2 LD A,($F336)  ; {Increment *#R$F336 by one.
 $EAB5 INC A         ;
 $EAB6 LD ($F336),A  ; }
 $EAB9 CALL $E6DC    ; Call #R$E6DC.
 $EABC LD A,C        ; {Call #R$EACF if #REGc is equal to #N$02.
 $EABD CP $02        ;
 $EABF CALL Z,$EACF  ; }
 $EAC2 DEC C         ; Decrease #REGc by one.
 $EAC3 DEC E         ; Decrease #REGe by one.
 $EAC4 JR NZ,$EAB2   ; Jump to #R$EAB2 until #REGe is zero.
 $EAC6 POP BC        ; Restore #REGbc from the stack.
 $EAC7 DEC D         ; Decrease #REGd by one.
 $EAC8 JR Z,$EACD    ; Jump to #R$EACD if #REGd is zero.
 $EACA DEC B         ; Decrease #REGb by one.
 $EACB JR $EA9C      ; Jump to #R$EA9C.
*$EACD POP HL        ; Restore #REGhl from the stack.
 $EACE RET           ; Return.
*$EACF DEC E         ; Decrease #REGe by one.
 $EAD0 PUSH AF       ; Stash #REGaf on the stack.
 $EAD1 INC E         ; Increment #REGe by one.
 $EAD2 LD A,($F336)  ; {Increment *#R$F336 by one.
 $EAD5 INC A         ;
 $EAD6 LD ($F336),A  ; }
 $EAD9 POP AF        ; Restore #REGaf from the stack.
 $EADA RET Z         ; Return if *#R$F336 is zero.
 $EADB DEC E         ; Decrease #REGe by one.
 $EADC JR $EACF      ; Jump to #R$EACF.
*$EADE LD A,($F336)  ; {Increment *#R$F336 by one.
 $EAE1 INC A         ;
 $EAE2 LD ($F336),A  ; }
 $EAE5 DEC E         ; Decrease #REGe by one.
 $EAE6 JP Z,$EACD    ; Jump to #R$EACD if #REGe is zero.
 $EAE9 DEC C         ; Decrease #REGc by one.
 $EAEA LD A,C        ; {Jump to #R$EAAC if #REGc is higher than #N$22.
 $EAEB CP $22        ;
 $EAED JR NC,$EAAC   ; }
 $EAEF JR $EADE      ; Jump to #R$EADE.
 $EAF1 LD B,$18      ; {#HTML(Clear the bottom #N$18 lines using <a
 $EAF3 CALL $0E44    ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                     ; }
 $EAF6 LD BC,$0640   ; #REGbc=#N$0640.
 $EAF9 LD HL,$A1C4   ; #REGhl=#R$A1C4.
*$EAFC XOR A         ; {Write #N$00 to *#REGhl.
 $EAFD LD (HL),A     ; }
 $EAFE INC HL        ; Increment #REGhl by one.
 $EAFF DEC BC        ; Decrease #REGbc by one.
 $EB00 LD A,B        ; {Jump to #R$EAFC until #REGbc is zero.
 $EB01 OR C          ;
 $EB02 JR NZ,$EAFC   ; }
 $EB04 RET           ; Return.

; Routine at EB05
;
; Used by the routines at #R$E12A and #R$ED35.
c$EB05 LD A,(IX+$11)   ; {Return if *#REGix+#N$11 is equal to #N$02.
 $EB08 CP $02          ;
 $EB0A RET Z           ; }
 $EB0B CP $03          ; {Jump to #R$EB26 if *#REGix+#N$11 is not equal to
 $EB0D JR NZ,$EB26     ; #N$03.}
 $EB0F LD A,(IX+$03)   ; {Return if *#REGix+#N$03 is not equal to #N$03.
 $EB12 CP $03          ;
 $EB14 RET NZ          ; }
 $EB15 LD A,$FF        ; {Write #N$FF to *#R$F32D.
 $EB17 LD ($F32D),A    ; }
 $EB1A LD A,(IX+$01)   ; {Jump to #R$EB26 if *#REGix+#N$01 is equal to
 $EB1D CP (IX+$12)     ; *#REGix+#N$12.
 $EB20 JR Z,$EB26      ; }
 $EB22 CP (IX+$13)     ; {Return if *#REGix+#N$01 is not equal to
 $EB25 RET NZ          ; *#REGix+#N$13.}
*$EB26 LD A,(IX+$11)   ; {Jump to #R$EB35 if *#REGix+#N$11 is equal to #N$13.
 $EB29 CP $13          ;
 $EB2B JR Z,$EB35      ; }
 $EB2D LD (IX+$11),$13 ; Write #N$13 to *#REGix+#N$11.
 $EB31 LD (IX+$06),$1A ; Write #N$1A to *#REGix+#N$06.
*$EB35 LD A,(IX+$06)   ; #REGa=*#REGix+#N$06.
 $EB38 ADD A,$06       ; #REGa+=#N$06.
 $EB3A LD (IX+$06),A   ; Write #REGa to *#REGix+#N$06.
 $EB3D CP $50          ; {Jump to #R$EB45 if #REGa is not equal to #N$50.
 $EB3F JR NZ,$EB45     ; }
 $EB41 LD (IX+$06),$20 ; Write #N$20 to *#REGix+#N$06.
*$EB45 DEC (IX+$04)    ; Decrease *#REGix+#N$04 by one.
 $EB48 RET             ; Return.

; Routine at EB49
;
; Used by the routines at #R$E12A and #R$ED35.
c$EB49 LD A,(IX+$11)   ; {Return if *#REGix+#N$11 is equal to #N$02.
 $EB4C CP $02          ;
 $EB4E RET Z           ; }
 $EB4F CP $03          ; {Jump to #R$EB6A if *#REGix+#N$11 is not equal to
 $EB51 JR NZ,$EB6A     ; #N$03.}
 $EB53 LD A,(IX+$03)   ; {Return if *#REGix+#N$03 is not equal to #N$03.
 $EB56 CP $03          ;
 $EB58 RET NZ          ; }
 $EB59 LD A,$FF        ; {Write #N$FF to *#R$F32D.
 $EB5B LD ($F32D),A    ; }
 $EB5E LD A,(IX+$01)   ; {Jump to #R$EB6A if *#REGix+#N$01 is equal to
 $EB61 CP (IX+$12)     ; *#REGix+#N$12.
 $EB64 JR Z,$EB6A      ; }
 $EB66 CP (IX+$13)     ; {Return if *#REGix+#N$01 is not equal to
 $EB69 RET NZ          ; *#REGix+#N$13.}
*$EB6A LD A,(IX+$11)   ; {Jump to #R$EB79 if *#REGix+#N$11 is equal to #N$04.
 $EB6D CP $04          ;
 $EB6F JR Z,$EB79      ; }
 $EB71 LD (IX+$11),$04 ; Write #N$04 to *#REGix+#N$11.
 $EB75 LD (IX+$06),$4A ; Write #N$4A to *#REGix+#N$06.
*$EB79 LD A,(IX+$06)   ; #REGa=*#REGix+#N$06.
 $EB7C ADD A,$06       ; #REGa+=#N$06.
 $EB7E LD (IX+$06),A   ; Write #REGa to *#REGix+#N$06.
 $EB81 CP $80          ; {Jump to #R$EB89 if #REGa is not equal to #N$80.
 $EB83 JR NZ,$EB89     ; }
 $EB85 LD (IX+$06),$50 ; Write #N$50 to *#REGix+#N$06.
*$EB89 INC (IX+$04)    ; Increment *#REGix+#N$04 by one.
 $EB8C RET             ; Return.

; Routine at EB8D
;
; Used by the routine at #R$EBD8.
c$EB8D LD A,$05        ; {Write #N$05 to *#R$FFFE.
 $EB8F LD ($FFFE),A    ; }
 $EB92 PUSH IX         ; Stash #REGix on the stack.
 $EB94 PUSH HL         ; {#REGix=#REGhl (using the stack).
 $EB95 POP IX          ; }
 $EB97 PUSH BC         ; {Stash #REGbc and #REGde on the stack.
 $EB98 PUSH DE         ; }
 $EB99 LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $EB9C LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $EB9F DEC B           ; Decrease #REGb by one.
 $EBA0 LD (IX+$05),$00 ; Write #N$00 to *#REGix+#N$05.
 $EBA4 PUSH BC         ; Stash #REGbc on the stack.
 $EBA5 PUSH IX         ; Stash #REGix on the stack.
 $EBA7 LD DE,$0032     ; #REGde=#N($0032,$04,$04).
 $EBAA LD HL,$00C8     ; #REGhl=#N($00C8,$04,$04).
 $EBAD CALL $03B5      ; #HTML(Call <a
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/03B5.html">BEEPER</a>.)
 $EBB0 POP IX          ; Restore #REGix from the stack.
 $EBB2 POP BC          ; Restore #REGbc from the stack.
 $EBB3 LD HL,($5C36)   ; #HTML(#REGhl=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $EBB6 PUSH HL         ; Stash #REGhl on the stack.
 $EBB7 LD HL,$9F6C     ; {#HTML(Write #R$A06C(#N$9F6C) to *<a rel="noopener
 $EBBA LD ($5C36),HL   ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $EBBD LD D,$04        ; #REGd=#N$04.
 $EBBF LD E,$01        ; #REGe=#N$01.
 $EBC1 LD A,$00        ; #REGa=#N$00.
 $EBC3 CALL $E72F      ; Call #R$E72F.
 $EBC6 LD A,$20        ; #REGa=#N$20.
 $EBC8 CALL $EA93      ; Call #R$EA93.
 $EBCB POP HL          ; Restore #REGhl from the stack.
 $EBCC LD ($5C36),HL   ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $EBCF POP DE          ; {Restore #REGde and #REGbc from the stack.
 $EBD0 POP BC          ; }
 $EBD1 POP IX          ; Restore #REGix from the stack.
 $EBD3 LD (IX+$10),$00 ; Write #N$00 to *#REGix+#N$10.
 $EBD7 RET             ; Return.

; Routine at EBD8
;
; Used by the routine at #R$DEA8.
c$EBD8 LD IX,$F231     ; #REGix=#R$F231.
 $EBDC LD A,$10        ; {Set INK: #N$05.
 $EBDE RST $10         ;
 $EBDF LD A,$05        ;
 $EBE1 RST $10         ; }
 $EBE2 XOR A           ; {Write #N$00 to *#R$F32F.
 $EBE3 LD ($F32F),A    ; }
 $EBE6 LD A,($E820)    ; {Jump to #R$EC49 if *#R$E820 is not equal to #N$00.
 $EBE9 CP $00          ;
 $EBEB JR NZ,$EC49     ; }
 $EBED LD A,(IX+$11)   ; {Jump to #R$EC49 if *#REGix+#N$11 is equal to #N$03.
 $EBF0 CP $03          ;
 $EBF2 JR Z,$EC49      ; }
 $EBF4 LD A,(IX+$05)   ; {Jump to #R$EC49 if *#REGix+#N$05 is not equal to
 $EBF7 CP $00          ; #N$00.
 $EBF9 JR NZ,$EC49     ; }
 $EBFB LD A,(IX+$03)   ; {Jump to #R$EC3D if *#REGix+#N$03 is not equal to
 $EBFE CP $03          ; #N$03.
 $EC00 JP NZ,$EC3D     ; }
 $EC03 LD A,(IX+$01)   ; {Jump to #R$EC1A if *#REGix+#N$01 is equal to #N$1A.
 $EC06 CP $1A          ;
 $EC08 JR Z,$EC1A      ; }
 $EC0A CP $15          ; {Jump to #R$EC1A if *#REGix+#N$01 is equal to #N$15.
 $EC0C JR Z,$EC1A      ; }
 $EC0E CP $10          ; {Jump to #R$EC1A if *#REGix+#N$01 is equal to #N$10.
 $EC10 JR Z,$EC1A      ; }
 $EC12 CP $0B          ; {Jump to #R$EC1A if *#REGix+#N$01 is equal to #N$0B.
 $EC14 JR Z,$EC1A      ; }
 $EC16 CP $06          ; {Jump to #R$EC3D if *#REGix+#N$01 is not equal to
 $EC18 JR NZ,$EC3D     ; #N$06.}
*$EC1A LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $EC1D LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $EC20 DEC B           ; {Decrease #REGb by three.
 $EC21 DEC B           ;
 $EC22 DEC B           ; }
 $EC23 CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $EC26 LD HL,($5C84)   ; #HTML(#REGhl=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C84.html">DF_CC</a>.)
 $EC29 LD A,($F32C)    ; #REGa=*#R$F32C.
 $EC2C AND (HL)        ; Merge the bits from *#REGhl.
 $EC2D JR NZ,$EC49     ; Jump to #R$EC49 if {} is not zero.
 $EC2F INC HL          ; Increment #REGhl by one.
 $EC30 LD A,($F32D)    ; #REGa=*#R$F32D.
 $EC33 AND (HL)        ; Merge the bits from *#REGhl.
 $EC34 JR NZ,$EC49     ; Jump to #R$EC49 if {} is not zero.
 $EC36 INC HL          ; Increment #REGhl by one.
 $EC37 LD A,($F32E)    ; #REGa=*#R$F32E.
 $EC3A AND (HL)        ; Merge the bits from *#REGhl.
 $EC3B JR NZ,$EC49     ; Jump to #R$EC49 if {} is not zero.
*$EC3D DEC (IX+$05)    ; Decrease *#REGix+#N$05 by one.
 $EC40 LD A,($F33A)    ; {Increment *#R$F33A by one.
 $EC43 INC A           ;
 $EC44 LD ($F33A),A    ; }
 $EC47 JR $EC59        ; Jump to #R$EC59.
*$EC49 LD A,($F33F)    ; #REGa=*#R$F33F.
 $EC4C LD ($FFFC),A    ; Write #REGa to *#R$FFFC.
 $EC4F CP $00          ; {Jump to #R$E3A4 if #REGa is not equal to #N$00.
 $EC51 JP NZ,$E3A4     ; }
 $EC54 LD A,$00        ; {Write #N$00 to *#R$F33A.
 $EC56 LD ($F33A),A    ; }
*$EC59 CALL $EEA6      ; Call #R$EEA6.
 $EC5C LD A,C          ; {Jump to #R$ED10 if #REGc is equal to #N$22.
 $EC5D CP $22          ;
 $EC5F JP Z,$ED10      ; }
 $EC62 CP $03          ; {Jump to #R$ED10 if #REGc is equal to #N$03.
 $EC64 JP Z,$ED10      ; }
 $EC67 LD A,B          ; {Jump to #R$ED10 if #REGb is equal to #N$18.
 $EC68 CP $18          ;
 $EC6A JP Z,$ED10      ; }
 $EC6D CP $04          ; {Jump to #R$E3A4 if #REGb is equal to #N$04.
 $EC6F JP Z,$E3A4      ; }
 $EC72 LD A,C          ; {Jump to #R$EC84 if #REGc is not equal to
 $EC73 CP (IX+$00)     ; *#REGix+#N$00.
 $EC76 JR NZ,$EC84     ; }
 $EC78 LD A,B          ; {Jump to #R$EC84 if #REGb is not equal to
 $EC79 CP (IX+$01)     ; *#REGix+#N$01.
 $EC7C JR NZ,$EC84     ; }
 $EC7E LD A,(IX+$03)   ; {Jump to #R$ECA5 if *#REGix+#N$03 is equal to #REGd.
 $EC81 CP D            ;
 $EC82 JR Z,$ECA5      ; }
*$EC84 LD A,$01        ; {Write #N$01 to *#R$F32F.
 $EC86 LD ($F32F),A    ; }
 $EC89 PUSH DE         ; {Stash #REGde and #REGbc on the stack.
 $EC8A PUSH BC         ; }
 $EC8B LD A,(IX+$11)   ; {Jump to #R$EC94 if *#REGix+#N$11 is not equal to
 $EC8E CP $13          ; #N$13.
 $EC90 JR NZ,$EC94     ; }
 $EC92 DEC C           ; {Decrease #REGc by two.
 $EC93 DEC C           ; }
*$EC94 CALL $F1AF      ; Call #R$F1AF.
 $EC97 POP BC          ; {Restore #REGbc and #REGde from the stack.
 $EC98 POP DE          ; }
 $EC99 CP $FF          ; {Jump to #R$ECA5 if #REGa is equal to #N$FF.
 $EC9B JR Z,$ECA5      ; }
 $EC9D CP (IX+$10)     ; {Jump to #R$ED10 if #REGa is not equal to
 $ECA0 JR NZ,$ED10     ; *#REGix+#N$10.}
 $ECA2 CALL $EB8D      ; Call #R$EB8D.
*$ECA5 LD (IX+$00),C   ; Write #REGc to *#REGix+#N$00.
 $ECA8 LD (IX+$01),B   ; Write #REGb to *#REGix+#N$01.
 $ECAB LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $ECAE LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $ECB1 PUSH DE         ; Stash #REGde on the stack.
 $ECB2 CALL $E9E2      ; Call #R$E9E2.
 $ECB5 POP DE          ; Restore #REGde from the stack.
 $ECB6 LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $ECB9 LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $ECBC LD A,($F33A)    ; {Call #R$ED19 if *#R$F33A is higher than #N$08.
 $ECBF CP $08          ;
 $ECC1 CALL NC,$ED19   ; }
 $ECC4 LD HL,$8978     ; {#HTML(Write #R$8A78(#N$8978) to *<a rel="noopener
 $ECC7 LD ($5C36),HL   ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $ECCA CALL $EED7      ; Call #R$EED7.
 $ECCD LD A,($A10B)    ; {Write *#R$A10B to *#R$F32C.
 $ECD0 LD ($F32C),A    ; }
 $ECD3 LD A,($A12B)    ; {Write *#R$A12B to *#R$F32D.
 $ECD6 LD ($F32D),A    ; }
 $ECD9 LD A,($A14B)    ; {Write *#R$A14B to *#R$F32E.
 $ECDC LD ($F32E),A    ; }
 $ECDF LD A,(IX+$00)   ; {Write *#REGix+#N$00 to *#REGix+#N$0D.
 $ECE2 LD (IX+$0D),A   ; }
 $ECE5 LD A,(IX+$01)   ; {Write *#REGix+#N$01 to *#REGix+#N$0E.
 $ECE8 LD (IX+$0E),A   ; }
 $ECEB LD A,(IX+$03)   ; {Write *#REGix+#N$03 to *#REGix+#N$0F.
 $ECEE LD (IX+$0F),A   ; }
 $ECF1 LD A,(IX+$02)   ; {Write *#REGix+#N$02 to *#REGix+#N$0B.
 $ECF4 LD (IX+$0B),A   ; }
 $ECF7 LD A,($F32F)    ; {Jump to #R$ED10 if *#R$F32F is equal to #N$00.
 $ECFA CP $00          ;
 $ECFC JR Z,$ED10      ; }
 $ECFE LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $ED01 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $ED04 LD A,(IX+$11)   ; {Jump to #R$ED0D if *#REGix+#N$11 is not equal to
 $ED07 CP $13          ; #N$13.
 $ED09 JR NZ,$ED0D     ; }
 $ED0B DEC C           ; {Decrease #REGc by two.
 $ED0C DEC C           ; }
*$ED0D CALL $F107      ; Call #R$F107.
*$ED10 LD (IX+$04),$00 ; Write #N$00 to *#REGix+#N$04.
 $ED14 LD (IX+$05),$00 ; Write #N$00 to *#REGix+#N$05.
 $ED18 RET             ; Return.
*$ED19 LD A,$01        ; {Write #N$01 to *#R$F33F.
 $ED1B LD ($F33F),A    ; }
 $ED1E LD (IX+$11),$02 ; Write #N$02 to *#REGix+#N$11.
 $ED22 LD A,(IX+$06)   ; {Jump to #R$ED2F if *#REGix+#N$06 is lower than #N$9E.
 $ED25 CP $9E          ;
 $ED27 JR C,$ED2F      ; }
 $ED29 ADD A,$06       ; #REGa+=#N$06.
 $ED2B CP $B0          ; {Jump to #R$ED31 if #REGa is not equal to #N$B0.
 $ED2D JR NZ,$ED31     ; }
*$ED2F LD A,$9E        ; {Write #N$9E to *#REGix+#N$06.
*$ED31 LD (IX+$06),A   ; }
 $ED34 RET             ; Return.

; Routine at ED35
;
; Used by the routine at #R$DEA8.
c$ED35 CALL $028E      ;
 $ED38 LD A,($5BF0)    ;
 $ED3B CP $03          ;
 $ED3D JR NZ,$ED46     ;
 $ED3F LD A,E          ;
 $ED40 CP $FF          ;
 $ED42 RET Z           ;
 $ED43 JP $ED8F        ;
*$ED46 LD IX,$F231     ;
 $ED4A LD A,E          ;
 $ED4B LD HL,$5BEB     ;
 $ED4E CP (HL)         ;
 $ED4F JP Z,$EB49      ;
 $ED52 INC HL          ;
 $ED53 CP (HL)         ;
 $ED54 JP Z,$EB05      ;
 $ED57 INC HL          ;
 $ED58 CP (HL)         ;
 $ED59 JP Z,$EE08      ;
 $ED5C INC HL          ;
 $ED5D CP (HL)         ;
 $ED5E JP Z,$ED9A      ;
 $ED61 INC HL          ;
 $ED62 CP (HL)         ;
 $ED63 JP Z,$EE5B      ;
 $ED66 CP $10          ;
 $ED68 JP Z,$ED7D      ;
 $ED6B CP $22          ;
 $ED6D RET NZ          ;
 $ED6E DI              ;
*$ED6F CALL $E9D9      ;
 $ED72 CALL $028E      ;
 $ED75 LD A,E          ;
 $ED76 CP $FF          ;
 $ED78 JP Z,$ED6F      ;
 $ED7B EI              ;
 $ED7C RET             ;
*$ED7D LD A,($FFF8)    ;
 $ED80 CP $01          ;
 $ED82 JR Z,$ED8A      ;
 $ED84 LD A,$01        ;
 $ED86 LD ($FFF8),A    ;
 $ED89 RET             ;
*$ED8A XOR A           ;
 $ED8B LD ($FFF8),A    ;
 $ED8E RET             ;
; This entry point is used by the routines at #R$DEA8, #R$E12A and #R$E361.
*$ED8F POP BC          ;
 $ED90 LD HL,$3C00     ;
 $ED93 LD ($5C36),HL   ;
 $ED96 CALL $E058      ;
 $ED99 RET             ;
; This entry point is used by the routine at #R$E12A.
*$ED9A LD A,(IX+$11)   ;
 $ED9D CP $03          ;
 $ED9F JR Z,$EDED      ;
 $EDA1 LD C,(IX+$00)   ;
 $EDA4 LD B,(IX+$01)   ;
 $EDA7 LD HL,($5BD8)   ;
*$EDAA LD A,(HL)       ;
 $EDAB CP $FF          ;
 $EDAD RET Z           ;
 $EDAE INC HL          ;
 $EDAF CP C            ;
 $EDB0 JR Z,$EDB5      ;
 $EDB2 INC HL          ;
 $EDB3 JR $EDAA        ;
*$EDB5 LD A,(HL)       ;
 $EDB6 DEC A           ;
 $EDB7 DEC A           ;
 $EDB8 LD (IX+$13),A   ;
 $EDBB ADD A,$05       ;
 $EDBD LD (IX+$12),A   ;
 $EDC0 INC HL          ;
 $EDC1 SUB B           ;
 $EDC2 CP $04          ;
 $EDC4 JR NC,$EDAA     ;
 $EDC6 LD A,(IX+$11)   ;
 $EDC9 CP $03          ;
 $EDCB JR Z,$EDD5      ;
 $EDCD LD (IX+$06),$7A ;
 $EDD1 LD (IX+$11),$03 ;
*$EDD5 LD A,(IX+$06)   ;
 $EDD8 ADD A,$06       ;
 $EDDA LD (IX+$06),A   ;
 $EDDD CP $98          ;
 $EDDF JR NZ,$EDE5     ;
 $EDE1 LD (IX+$06),$80 ;
*$EDE5 DEC (IX+$05)    ;
 $EDE8 LD (IX+$02),$03 ;
 $EDEC RET             ;
*$EDED LD A,(IX+$01)   ;
 $EDF0 CP (IX+$13)     ;
 $EDF3 JR NZ,$EDD5     ;
 $EDF5 RET             ;
*$EDF6 LD A,(IX+$12)   ;
 $EDF9 LD B,A          ;
 $EDFA LD A,(IX+$01)   ;
 $EDFD CP B            ;
 $EDFE JR NZ,$EE42     ;
 $EE00 LD A,(IX+$03)   ;
 $EE03 CP $03          ;
 $EE05 JR NZ,$EE42     ;
 $EE07 RET             ;
; This entry point is used by the routine at #R$E12A.
*$EE08 LD A,(IX+$11)   ;
 $EE0B CP $03          ;
 $EE0D JR Z,$EDF6      ;
 $EE0F LD C,(IX+$00)   ;
 $EE12 LD B,(IX+$01)   ;
 $EE15 LD HL,($5BD8)   ;
*$EE18 LD A,(HL)       ;
 $EE19 CP $FF          ;
 $EE1B RET Z           ;
 $EE1C INC HL          ;
 $EE1D CP C            ;
 $EE1E JR Z,$EE23      ;
 $EE20 INC HL          ;
 $EE21 JR $EE18        ;
*$EE23 LD A,(HL)       ;
 $EE24 INC HL          ;
 $EE25 DEC A           ;
 $EE26 DEC A           ;
 $EE27 CP B            ;
 $EE28 JR NZ,$EE18     ;
 $EE2A LD (IX+$13),A   ;
 $EE2D ADD A,$05       ;
 $EE2F LD (IX+$12),A   ;
 $EE32 INC HL          ;
 $EE33 LD A,(IX+$11)   ;
 $EE36 CP $03          ;
 $EE38 JR Z,$EE42      ;
 $EE3A LD (IX+$06),$98 ;
 $EE3E LD (IX+$11),$03 ;
*$EE42 LD A,(IX+$06)   ;
 $EE45 SUB $06         ;
 $EE47 LD (IX+$06),A   ;
 $EE4A CP $7A          ;
 $EE4C JR NZ,$EE52     ;
 $EE4E LD (IX+$06),$92 ;
*$EE52 LD (IX+$05),$01 ;
 $EE56 LD (IX+$02),$03 ;
 $EE5A RET             ;
; This entry point is used by the routine at #R$E12A.
*$EE5B LD IX,($5BD6)   ;
 $EE5F LD BC,($F231)   ;
*$EE63 LD A,(IX+$00)   ;
 $EE66 CP $FF          ;
 $EE68 RET Z           ;
 $EE69 SUB C           ;
 $EE6A CP $02          ;
 $EE6C JR NC,$EE75     ;
 $EE6E LD A,(IX+$01)   ;
 $EE71 DEC A           ;
 $EE72 CP B            ;
 $EE73 JR Z,$EE7C      ;
*$EE75 LD DE,$0004     ;
 $EE78 ADD IX,DE       ;
 $EE7A JR $EE63        ;
*$EE7C LD A,(IX+$03)   ;
 $EE7F CP $15          ;
 $EE81 CALL Z,$E361    ;
; This entry point is used by the routine at #R$DEA8.
*$EE84 LD ($5BD3),A    ;
 $EE87 LD A,$00        ;
 $EE89 LD ($F241),A    ;
 $EE8C LD ($F2DB),A    ;
 $EE8F LD ($E479),A    ;
 $EE92 LD ($F31C),A    ;
 $EE95 LD A,$01        ;
 $EE97 LD ($F242),A    ;
 $EE9A LD A,$98        ;
 $EE9C LD ($F237),A    ;
 $EE9F CALL $E0A9      ;
 $EEA2 CALL $E058      ;
 $EEA5 RET             ;

; Routine at EEA6
;
; Used by the routines at #R$E12A, #R$E821, #R$EBD8 and #R$F001.
c$EEA6 LD C,(IX+$00) ; #REGc=*#REGix+#N$00.
 $EEA9 LD B,(IX+$01) ; #REGb=*#REGix+#N$01.
 $EEAC LD E,(IX+$02) ; #REGe=*#REGix+#N$02.
 $EEAF LD D,(IX+$03) ; #REGd=*#REGix+#N$03.
 $EEB2 LD A,(IX+$04) ; #REGa=*#REGix+#N$04.
 $EEB5 ADD A,E       ; #REGa+=#REGe.
 $EEB6 CP $80        ; {Jump to #R$EEC0 if #REGa is higher than #N$80.
 $EEB8 JR NC,$EEC0   ; }
 $EEBA CP $04        ; {Jump to #R$EEC3 if #REGa is lower than #N$04.
 $EEBC JR C,$EEC3    ; }
 $EEBE INC C         ; {Increment #REGc by two.
 $EEBF INC C         ; }
*$EEC0 DEC C         ; Decrease #REGc by one.
 $EEC1 AND %00000011 ; Keep only bits 0-1.
*$EEC3 LD E,A        ; #REGe=#REGa.
 $EEC4 LD A,(IX+$05) ; #REGa=*#REGix+#N$05.
 $EEC7 ADD A,D       ; #REGa+=#REGd.
 $EEC8 CP $80        ; {Jump to #R$EED2 if #REGa is higher than #N$80.
 $EECA JR NC,$EED2   ; }
 $EECC CP $04        ; {Jump to #R$EED5 if #REGa is lower than #N$04.
 $EECE JR C,$EED5    ; }
 $EED0 INC B         ; {Increment #REGb by two.
 $EED1 INC B         ; }
*$EED2 DEC B         ; Decrease #REGb by one.
 $EED3 AND %00000011 ; Keep only bits 0-1.
*$EED5 LD D,A        ; #REGd=#REGa.
 $EED6 RET           ; Return.

; Routine at EED7
;
; Used by the routines at #R$E12A, #R$E821, #R$EBD8 and #R$F001.
c$EED7 LD DE,$A0EC   ; #REGde=#R$A0EC.
 $EEDA LD HL,$A06C   ; #REGhl=#R$A06C.
 $EEDD LD BC,$0080   ; #REGbc=#N($0080,$04,$04).
 $EEE0 LDIR          ; Copy #N($0080,$04,$04) bytes of data from *#REGhl to
                     ; *#REGde.
 $EEE2 LD A,$10      ; {Set INK: *#REGix+#N$09.
 $EEE4 RST $10       ;
 $EEE5 LD A,(IX+$09) ;
 $EEE8 RST $10       ; }
 $EEE9 LD HL,($5C36) ; #HTML(#REGhl=*<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $EEEC PUSH HL       ; Stash #REGhl on the stack.
 $EEED PUSH IY       ; Stash #REGiy on the stack.
 $EEEF PUSH IX       ; Stash #REGix on the stack.
 $EEF1 LD E,(IX+$06) ; #REGe=*#REGix+#N$06.
 $EEF4 LD D,$00      ; #REGd=#N$00.
 $EEF6 SLA E         ; Shift #REGe left (with carry).
 $EEF8 RL D          ; Rotate #REGd left.
 $EEFA SLA E         ; Shift #REGe left (with carry).
 $EEFC RL D          ; Rotate #REGd left.
 $EEFE SLA E         ; Shift #REGe left (with carry).
 $EF00 RL D          ; Rotate #REGd left.
 $EF02 ADD HL,DE     ; #REGhl+=#REGde.
 $EF03 LD B,(IX+$02) ; #REGb=*#REGix+#N$02.
 $EF06 INC B         ; Increment #REGb by one.
 $EF07 LD C,$00      ; #REGc=#N$00.
 $EF09 LD ($F332),BC ; Write #REGbc to *#R$F332.
 $EF0D LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $EF10 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $EF13 LD A,D        ; #REGa=#REGd.
 $EF14 INC A         ; Increment #REGa by one.
 $EF15 SLA A         ; {Shift #REGa left three positions (with carry).
 $EF17 SLA A         ;
 $EF19 SLA A         ; }
 $EF1B LD C,A        ; #REGc=#REGa.
 $EF1C LD B,$00      ; #REGb=#N$00.
 $EF1E LD IY,$A0F4   ; #REGiy=#R$A0F4.
 $EF22 ADD IY,BC     ; #REGiy+=#REGbc.
 $EF24 LD C,E        ; #REGc=#REGe.
 $EF25 SLA C         ; Shift #REGc left (with carry).
 $EF27 SLA C         ; Shift #REGc left (with carry).
 $EF29 SLA C         ; Shift #REGc left (with carry).
 $EF2B LD B,$00      ; #REGb=#N$00.
 $EF2D LD ($F33C),BC ; Write #REGbc to *#R$F33C.
 $EF31 LD IX,$A0F4   ; #REGix=#R$A0F4.
*$EF35 PUSH HL       ; {Stash #REGhl, #REGde and #REGhl on the stack.
 $EF36 PUSH DE       ;
*$EF37 PUSH HL       ; }
 $EF38 LD B,$08      ; #REGb=#N$08.
*$EF3A PUSH BC       ; Stash #REGbc on the stack.
 $EF3B LD A,(HL)     ; #REGa=*#REGhl.
 $EF3C LD BC,($F332) ; #REGbc=*#R$F332.
*$EF40 SLA A         ; Shift #REGa left (with carry).
 $EF42 RL C          ; Rotate #REGc left.
 $EF44 SLA A         ; Shift #REGa left (with carry).
 $EF46 RL C          ; Rotate #REGc left.
 $EF48 DJNZ $EF40    ; Decrease counter by one and loop back to #R$EF40 until
                     ; counter is zero.
 $EF4A LD (IY+$00),A ; Write #REGa to *#REGiy+#N$00.
 $EF4D LD A,C        ; #REGa=#REGc.
 $EF4E OR (IX+$00)   ; Set the bits of #REGa with *#REGix+#N$00.
 $EF51 LD (IX+$00),A ; Write #REGa to *#REGix+#N$00.
 $EF54 INC HL        ; Increment #REGhl by one.
 $EF55 INC IX        ; Increment #REGix by one.
 $EF57 INC IY        ; Increment #REGiy by one.
 $EF59 POP BC        ; Restore #REGbc from the stack.
 $EF5A DJNZ $EF3A    ; Decrease counter by one and loop back to #R$EF3A until
                     ; counter is zero.
 $EF5C POP HL        ; Restore #REGhl from the stack.
 $EF5D LD BC,($F33C) ; #REGbc=*#R$F33C.
 $EF61 ADD HL,BC     ; #REGhl+=#REGbc.
 $EF62 DEC D         ; Decrease #REGd by one.
 $EF63 JR NZ,$EF37   ; Jump to #R$EF37 until #REGd is zero.
 $EF65 POP DE        ; Restore #REGde from the stack.
 $EF66 LD BC,$0008   ; #REGbc=#N($0008,$04,$04).
 $EF69 ADD IX,BC     ; #REGix+=#REGbc.
 $EF6B ADD IY,BC     ; #REGiy+=#REGbc.
 $EF6D POP HL        ; Restore #REGhl from the stack.
 $EF6E ADD HL,BC     ; #REGhl+=#REGbc.
 $EF6F DEC E         ; Decrease #REGe by one.
 $EF70 JR NZ,$EF35   ; Jump to #R$EF35 until #REGe is zero.
 $EF72 LD HL,$9FEC   ; #REGhl=#R$9FEC.
 $EF75 POP IX        ; Restore #REGix from the stack.
 $EF77 LD A,(IX+$03) ; #REGa=*#REGix+#N$03.
 $EF7A INC A         ; Increment #REGa by one.
 $EF7B SLA A         ; Shift #REGa left (with carry).
 $EF7D LD E,A        ; #REGe=#REGa.
 $EF7E LD D,$00      ; #REGd=#N$00.
 $EF80 ADD HL,DE     ; #REGhl+=#REGde.
 $EF81 LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $EF84 LD D,(IX+$08) ; #REGd=*#REGix+#N$08.
 $EF87 LD E,(IX+$07) ; #REGe=*#REGix+#N$07.
 $EF8A LD A,(IX+$02) ; {Jump to #R$EF92 if *#REGix+#N$02 is equal to #N$03.
 $EF8D CP $03        ;
 $EF8F JR Z,$EF92    ; }
 $EF91 INC E         ; Increment #REGe by one.
*$EF92 INC D         ; Increment #REGd by one.
 $EF93 LD A,D        ; #REGa=#REGd.
 $EF94 LD ($F33E),A  ; Write #REGa to *#R$F33E.
 $EF97 LD A,$03      ; {Jump to #R$EF9F if #N$03 is not equal to *#REGix+#N$03.
 $EF99 CP (IX+$03)   ;
 $EF9C JR NZ,$EF9F   ; }
 $EF9E DEC D         ; Decrease #REGd by one.
*$EF9F LD B,(IX+$01) ; #REGb=*#REGix+#N$01.
 $EFA2 LD C,(IX+$00) ; #REGc=*#REGix+#N$00.
 $EFA5 LD A,D        ; #REGa=#REGd.
 $EFA6 LD A,$20      ; #REGa=#N$20.
 $EFA8 POP IY        ; Restore #REGiy from the stack.
 $EFAA LD A,$20      ; #REGa=#N$20.
*$EFAC PUSH AF       ; {Stash #REGaf, #REGde and #REGbc on the stack.
 $EFAD PUSH DE       ;
 $EFAE PUSH BC       ; }
 $EFAF LD D,A        ; #REGd=#REGa.
 $EFB0 LD A,C        ; {Jump to #R$EFE9 if #REGc is higher than #N$22.
 $EFB1 CP $22        ;
 $EFB3 JR NC,$EFE9   ; }
*$EFB5 PUSH DE       ; Stash #REGde on the stack.
 $EFB6 CALL $0DD9    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $EFB9 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $EFBA POP BC        ; }
 $EFBB PUSH BC       ; Stash #REGbc on the stack.
 $EFBC LD A,D        ; #REGa=#REGd.
*$EFBD CALL $E6DC    ; Call #R$E6DC.
 $EFC0 LD A,C        ; {Call #R$EFDC if #REGc is equal to #N$02.
 $EFC1 CP $02        ;
 $EFC3 CALL Z,$EFDC  ; }
 $EFC6 DEC C         ; Decrease #REGc by one.
 $EFC7 LD A,($F33E)  ; #REGa=*#R$F33E.
 $EFCA ADD A,D       ; #REGa+=#REGd.
 $EFCB LD D,A        ; #REGd=#REGa.
 $EFCC DEC E         ; Decrease #REGe by one.
 $EFCD JR NZ,$EFBD   ; Jump to #R$EFBD until #REGe is zero.
 $EFCF POP BC        ; {Restore #REGbc, #REGde and #REGaf from the stack.
 $EFD0 POP DE        ;
 $EFD1 POP AF        ; }
 $EFD2 DEC B         ; Decrease #REGb by one.
 $EFD3 INC A         ; Increment #REGa by one.
 $EFD4 DEC D         ; Decrease #REGd by one.
 $EFD5 JR NZ,$EFAC   ; Jump to #R$EFAC until #REGd is zero.
*$EFD7 POP HL        ; Restore #REGhl from the stack.
 $EFD8 LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $EFDB RET           ; Return.
*$EFDC DEC E         ; Decrease #REGe by one.
 $EFDD PUSH AF       ; Stash #REGaf on the stack.
 $EFDE INC E         ; Increment #REGe by one.
 $EFDF POP AF        ; Restore #REGaf from the stack.
 $EFE0 RET Z         ; Return if #REGe is zero.
 $EFE1 DEC E         ; Decrease #REGe by one.
 $EFE2 LD A,($F33E)  ; #REGa=*#R$F33E.
 $EFE5 ADD A,D       ; #REGa+=#REGd.
 $EFE6 LD D,A        ; #REGd=#REGa.
 $EFE7 JR $EFDC      ; Jump to #R$EFDC.
*$EFE9 LD A,($F33E)  ; #REGa=*#R$F33E.
 $EFEC ADD A,D       ; #REGa+=#REGd.
 $EFED LD D,A        ; #REGd=#REGa.
 $EFEE DEC E         ; Decrease #REGe by one.
 $EFEF JP Z,$EFFB    ; Jump to #R$EFFB if #REGe is zero.
 $EFF2 DEC C         ; Decrease #REGc by one.
 $EFF3 LD A,C        ; {Jump to #R$EFE9 if #REGc is higher than #N$22.
 $EFF4 CP $22        ;
 $EFF6 JR NC,$EFE9   ; }
 $EFF8 JP $EFB5      ; Jump to #R$EFB5.
*$EFFB POP BC        ; {Restore #REGbc, #REGbc and #REGbc from the stack.
 $EFFC POP BC        ;
 $EFFD POP BC        ; }
 $EFFE JP $EFD7      ; Jump to #R$EFD7.

; Handler: Pirates
;
; Used by the routine at #R$DEA8.
@label=HandlerPirates
c$F001 LD A,($F334)    ; {Return if *#R$F334 is equal to #N$00.
 $F004 CP $00          ;
 $F006 RET Z           ; }
 $F007 LD HL,$8E28     ; {#HTML(Write #R$8F28(#N$8E28) (#R$8F28) to *<a
 $F00A LD ($5C36),HL   ; rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $F00D LD IX,($5BDE)   ; #REGix=*#R$5BDE.
@label=HandlerPirates_Loop
*$F011 LD A,(IX+$00)   ; {Return if Pirate state (*#REGix+#N$00) is equal to
 $F014 CP $FF          ; OFF (#N$FF).
 $F016 RET Z           ; }
 $F017 LD A,$10        ; {Set INK: Pirate attribute (*#REGix+#N$09).
 $F019 RST $10         ;
 $F01A LD A,(IX+$09)   ;
 $F01D RST $10         ; }
; Update the sprite frame.
 $F01E LD A,(IX+$06)   ; Fetch the current Pirate sprite reference
                       ; (*#REGix+#N$06).
 $F021 ADD A,$06       ; Add #N$06.
 $F023 LD (IX+$06),A   ; Write it back to the current Pirate sprite reference
                       ; (*#REGix+#N$06).
 $F026 CP $4A          ; {Jump to #R$F02E if #REGa is not equal to #N$4A.
 $F028 JR NZ,$F02E     ; }
 $F02A LD (IX+$06),$20 ; Write #N$20 (facing right) to Pirate sprite reference
                       ; (*#REGix+#N$06).
@label=HandlerPirates_CheckSpriteFrames
*$F02E CP $80          ; {Jump to #R$F036 if #REGa is not equal to #N$80.
 $F030 JR NZ,$F036     ; }
 $F032 LD (IX+$06),$50 ; Write #N$50 (facing left) to Pirate sprite reference
                       ; (*#REGix+#N$06).
@label=HandlerPirates_SkipSpriteFrames
*$F036 CALL $EEA6      ; Call #R$EEA6.
 $F039 LD A,C          ; {Jump to #R$F0EE if #REGc is equal to #N$22.
 $F03A CP $22          ;
 $F03C JP Z,$F0EE      ; }
 $F03F CP $03          ; {Jump to #R$F0E3 if #REGc is equal to #N$03.
 $F041 JP Z,$F0E3      ; }
 $F044 PUSH DE         ; {Stash #REGde and #REGbc on the stack.
 $F045 PUSH BC         ; }
 $F046 LD A,(IX+$04)   ; {Jump to #R$F04F if the direction the Pirate is moving
 $F049 CP $FF          ; (*#REGix+#N$04) is not right (#N$FF).
 $F04B JR NZ,$F04F     ; }
 $F04D DEC C           ; {Decrease #REGc by two.
 $F04E DEC C           ; }
*$F04F CALL $F1AF      ; Call #R$F1AF.
 $F052 POP BC          ; {Restore #REGbc and #REGde from the stack.
 $F053 POP DE          ; }
 $F054 CP $FF          ; {Jump to #R$F0F9 if #REGa is not equal to #N$FF.
 $F056 JP NZ,$F0F9     ; }
 $F059 PUSH BC         ; {Stash #REGbc and #REGde on the stack.
 $F05A PUSH DE         ; }
 $F05B DEC B           ; {Decrease #REGb by three.
 $F05C DEC B           ;
 $F05D DEC B           ; }
 $F05E LD A,(IX+$04)   ; {Jump to #R$F067 if the direction the Pirate is moving
 $F061 CP $FF          ; (*#REGix+#N$04) is not right (#N$FF).
 $F063 JR NZ,$F067     ; }
 $F065 DEC C           ; {Decrease #REGc by two.
 $F066 DEC C           ; }
*$F067 CALL $E762      ; Call #R$E762.
 $F06A LD HL,$A1C4     ; #REGhl=#R$A1C4.
 $F06D LD DE,($F330)   ; #REGde=*#R$F330.
 $F071 ADD HL,DE       ; #REGhl+=#REGde.
 $F072 POP DE          ; {Restore #REGde and #REGbc from the stack.
 $F073 POP BC          ; }
 $F074 LD A,(HL)       ; {Jump to #R$F0F9 if *#REGhl is lower than #N$21.
 $F075 CP $21          ;
 $F077 JP C,$F0F9      ; }
 $F07A LD (IX+$00),C   ; Write #REGc to *#REGix+#N$00.
 $F07D LD (IX+$01),B   ; Write #REGb to *#REGix+#N$01.
 $F080 LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $F083 LD (IX+$03),D   ; Write #REGd to *#REGix+#N$03.
 $F086 CALL $E9E2      ; Call #R$E9E2.
*$F089 CALL $EED7      ; Call #R$EED7.
 $F08C LD A,(IX+$00)   ; {Write *#REGix+#N$00 to *#REGix+#N$0D.
 $F08F LD (IX+$0D),A   ; }
 $F092 LD A,(IX+$01)   ; {Write *#REGix+#N$01 to *#REGix+#N$0E.
 $F095 LD (IX+$0E),A   ; }
 $F098 LD A,(IX+$02)   ; {Write *#REGix+#N$02 to *#REGix+#N$0B.
 $F09B LD (IX+$0B),A   ; }
 $F09E LD A,(IX+$03)   ; {Write *#REGix+#N$03 to *#REGix+#N$0F.
 $F0A1 LD (IX+$0F),A   ; }
 $F0A4 LD C,(IX+$00)   ; #REGc=*#REGix+#N$00.
 $F0A7 DEC C           ; Decrease #REGc by one.
 $F0A8 SLA C           ; {Shift #REGc left two positions (with carry).
 $F0AA SLA C           ; }
 $F0AC LD A,(IX+$02)   ; #REGa=*#REGix+#N$02.
 $F0AF ADD A,C         ; #REGa+=#REGc.
 $F0B0 LD C,A          ; #REGc=#REGa.
 $F0B1 LD A,($F233)    ; {#REGb=*#R$F233.
 $F0B4 LD B,A          ; }
 $F0B5 LD A,($F231)    ; #REGa=*#R$F231.
 $F0B8 DEC A           ; Decrease #REGa by one.
 $F0B9 SLA A           ; {Shift #REGa left two positions (with carry).
 $F0BB SLA A           ; }
 $F0BD ADD A,B         ; #REGa+=#REGb.
 $F0BE ADD A,$07       ; #REGa+=#N$07.
 $F0C0 SUB C           ; #REGa-=#REGc.
 $F0C1 CP $10          ; {Jump to #R$F0DB if #REGa is higher than #N$10.
 $F0C3 JR NC,$F0DB     ; }
 $F0C5 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $F0C8 LD A,($F232)    ; #REGa=*#R$F232.
 $F0CB ADD A,$02       ; #REGa+=#N$02.
 $F0CD SUB B           ; #REGa-=#REGb.
 $F0CE CP $06          ; {Jump to #R$F0DB if #REGa is higher than #N$06.
 $F0D0 JP NC,$F0DB     ; }
 $F0D3 LD A,$02        ; {Write #N$02 to *#R$FFFE.
 $F0D5 LD ($FFFE),A    ; }
 $F0D8 JP $E3A4        ; Jump to #R$E3A4.
; Move onto the next Pirate.
@label=HandlerPirate_Next
*$F0DB LD DE,$0010     ; {#REGix+=#N($0010,$04,$04).
 $F0DE ADD IX,DE       ; }
 $F0E0 JP $F011        ; Jump to #R$F011.
; Alters the direction of the Pirate to now face and move left.
@label=HandlerPirate_TurnLeft
*$F0E3 LD (IX+$04),$01 ; Write #N$01 (move left) to Pirate direction
                       ; (*#REGix+#N$04).
 $F0E7 LD (IX+$06),$50 ; Write #N$50 (facing left) to Pirate sprite reference
                       ; (*#REGix+#N$06).
 $F0EB JP $F089        ; Jump to #R$F089.
; Alters the direction of the Pirate to now face and move right.
@label=HandlerPirate_TurnRight
*$F0EE LD (IX+$04),$FF ; Write #N$FF (move right) to Pirate direction
                       ; (*#REGix+#N$04).
 $F0F2 LD (IX+$06),$20 ; Write #N$20 (facing right) to Pirate sprite reference
                       ; (*#REGix+#N$06).
 $F0F6 JP $F089        ; Jump to #R$F089.
; Handle making the Pirate about-turn.
@label=Pirate_TurnController
*$F0F9 LD A,(IX+$04)   ; {Jump to #R$F0E3 if the direction the Pirate is moving
 $F0FC CP $FF          ; (*#REGix+#N$04) is right (#N$FF).
 $F0FE JP Z,$F0E3      ; }
 $F101 JP $F0EE        ; Jump to #R$F0EE.
; Clear the pirate data reference from the stack before returning.
@label=HandlerPirate_Housekeeping
*$F104 POP IX          ; Restore the current pirate data reference from the
                       ; stack.
 $F106 RET             ; Return.

; Routine at F107
;
; Used by the routine at #R$EBD8.
c$F107 PUSH IX         ; Stash #REGix on the stack.
 $F109 LD IX,($5BDA)   ; #REGix=*#R$5BDA.
*$F10D LD A,(IX+$00)   ; {Jump to #R$F104 if *#REGix+#N$00 is equal to #N$FF.
 $F110 CP $FF          ;
 $F112 JR Z,$F104      ; }
 $F114 LD A,(IX+$05)   ; #REGa=*#REGix+#N$05.
 $F117 AND %00000010   ; Keep only bits 1.
 $F119 JR Z,$F127      ; Jump to #R$F127 if the result is zero.
 $F11B LD A,(IX+$02)   ; {Jump to #R$F127 if *#REGix+#N$02 is not equal to
 $F11E CP C            ; #REGc.
 $F11F JR NZ,$F127     ; }
 $F121 LD A,(IX+$03)   ; {Jump to #R$F12E if *#REGix+#N$03 is equal to #REGb.
 $F124 CP B            ;
 $F125 JR Z,$F12E      ; }
*$F127 LD DE,$0006     ; #REGde=#N($0006,$04,$04).
 $F12A ADD IX,DE       ; #REGix+=#REGde.
 $F12C JR $F10D        ; Jump to #R$F10D.
*$F12E LD A,$06        ; {Write #N$06 to *#R$FFFE.
 $F130 LD ($FFFE),A    ; }
 $F133 LD (IX+$05),$01 ; Write #N$01 to *#REGix+#N$05.
 $F137 LD C,(IX+$02)   ; #REGc=*#REGix+#N$02.
 $F13A LD B,(IX+$03)   ; #REGb=*#REGix+#N$03.
 $F13D LD E,$01        ; #REGe=#N$01.
 $F13F LD D,$02        ; #REGd=#N$02.
 $F141 LD A,$00        ; #REGa=#N$00.
 $F143 CALL $E72F      ; Call #R$E72F.
 $F146 LD HL,($5C36)   ; #HTML(#REGhl=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $F149 PUSH HL         ; Stash #REGhl on the stack.
 $F14A LD HL,$9F6C     ; {#HTML(Write #R$A06C(#N$9F6C) to *<a rel="noopener
 $F14D LD ($5C36),HL   ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $F150 LD A,$20        ; #REGa=#N$20.
 $F152 CALL $EA93      ; Call #R$EA93.
 $F155 POP HL          ; Restore #REGhl from the stack.
 $F156 LD ($5C36),HL   ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $F159 LD A,(IX+$04)   ; #REGa=*#REGix+#N$04.
 $F15C POP IX          ; Restore #REGix from the stack.
 $F15E PUSH AF         ; Stash #REGaf on the stack.
 $F15F LD A,(IX+$10)   ; {Jump to #R$F1AA if *#REGix+#N$10 is equal to #N$00.
 $F162 CP $00          ;
 $F164 JR Z,$F1AA      ; }
 $F166 PUSH IX         ; Stash #REGix on the stack.
 $F168 CALL $F1E5      ; Call #R$F1E5.
 $F16B LD HL,($5C36)   ; #HTML(#REGhl=*<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $F16E PUSH HL         ; Stash #REGhl on the stack.
 $F16F LD HL,$8378     ; {#HTML(Write #R$8478(#N$8378) to *<a rel="noopener
 $F172 LD ($5C36),HL   ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                       ; }
 $F175 LD A,$10        ; {Set INK: *#R$5BCC.
 $F177 RST $10         ;
 $F178 LD A,($5BCC)    ;
 $F17B RST $10         ; }
 $F17C LD (IX+$05),$03 ; Write #N$03 to *#REGix+#N$05.
 $F180 LD C,(IX+$02)   ; #REGc=*#REGix+#N$02.
 $F183 LD B,(IX+$03)   ; #REGb=*#REGix+#N$03.
 $F186 PUSH BC         ; Stash #REGbc on the stack.
 $F187 CALL $E762      ; Call #R$E762.
 $F18A CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $F18D LD A,(IX+$04)   ; #REGa=*#REGix+#N$04.
 $F190 ADD A,$41       ; #REGa+=#N$41.
 $F192 CALL $E804      ; Call #R$E804.
 $F195 RST $10         ; #HTML(Print to the screen using RST <a rel="noopener
                       ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0010.html">#N$10</a>.)
 $F196 POP BC          ; Restore #REGbc from the stack.
 $F197 DEC B           ; Decrease #REGb by one.
 $F198 CALL $E762      ; Call #R$E762.
 $F19B CALL $0DD9      ; #HTML(Call <a rel="noopener nofollow"
                       ; href="https://skoolkid.github.io/rom/asm/0DD9.html">CL_SET</a>.)
 $F19E LD A,$4B        ; #REGa=#N$4B.
 $F1A0 CALL $E804      ; Call #R$E804.
 $F1A3 RST $10         ; #HTML(Print to the screen using RST <a rel="noopener
                       ; nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0010.html">#N$10</a>.)
 $F1A4 POP HL          ; Restore #REGhl from the stack.
 $F1A5 LD ($5C36),HL   ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $F1A8 POP IX          ; Restore #REGix from the stack.
*$F1AA POP AF          ; Restore #REGaf from the stack.
 $F1AB LD (IX+$10),A   ; Write #REGa to *#REGix+#N$10.
 $F1AE RET             ; Return.

; Routine at F1AF
;
; Used by the routines at #R$EBD8 and #R$F001.
c$F1AF PUSH IX       ; Stash #REGix on the stack.
 $F1B1 LD IX,($5BDA) ; #REGix=*#R$5BDA.
 $F1B5 LD DE,$0006   ; #REGde=#N($0006,$04,$04).
*$F1B8 LD A,$FF      ; {Jump to #R$F104 if *#REGix+#N$00 is equal to #N$FF.
 $F1BA CP (IX+$00)   ;
 $F1BD JP Z,$F104    ; }
 $F1C0 LD A,C        ; {Jump to #R$F1E1 if #REGc is not equal to *#REGix+#N$00.
 $F1C1 CP (IX+$00)   ;
 $F1C4 JR NZ,$F1E1   ; }
 $F1C6 LD A,(IX+$01) ; #REGa=*#REGix+#N$01.
 $F1C9 DEC A         ; {Decrease #REGa by two.
 $F1CA DEC A         ; }
 $F1CB CP B          ; {Jump to #R$F1E1 if #REGa is not equal to #REGb.
 $F1CC JR NZ,$F1E1   ; }
 $F1CE LD A,(IX+$05) ; {Compare *#REGix+#N$05 with #N$00.
 $F1D1 CP $00        ; }
 $F1D3 LD A,$FF      ; #REGa=#N$FF.
 $F1D5 JP Z,$F104    ; Jump to #R$F104 if *#REGix+#N$05 was equal to #N$00 on
                     ; line #R$F1CE.
 $F1D8 LD A,(IX+$04) ; #REGa=*#REGix+#N$04.
 $F1DB PUSH IX       ; {#REGhl=#REGix (using the stack).
 $F1DD POP HL        ; }
 $F1DE POP IX        ; Restore #REGix from the stack.
 $F1E0 RET           ; Return.
*$F1E1 ADD IX,DE     ; #REGix+=#REGde.
 $F1E3 JR $F1B8      ; Jump to #R$F1B8.

; Routine at F1E5
;
; Used by the routine at #R$F107.
c$F1E5 LD DE,$0006   ; #REGde=#N($0006,$04,$04).
 $F1E8 LD C,A        ; #REGc=#REGa.
 $F1E9 LD IX,($5BDA) ; #REGix=#R$5BDA.
*$F1ED LD A,(IX+$00) ; {Return if *#REGix+#N$00 is equal to #N$FF.
 $F1F0 CP $FF        ;
 $F1F2 RET Z         ; }
 $F1F3 LD A,C        ; {Return if #REGc is equal to *#REGix+#N$04.
 $F1F4 CP (IX+$04)   ;
 $F1F7 RET Z         ; }
 $F1F8 ADD IX,DE     ; #REGix+=#REGde.
 $F1FA JR $F1ED      ; Jump to #R$F1ED.

; Routine at F1FC
;
; Used by the routine at #R$DEA8.
c$F1FC LD HL,$914C   ; {#HTML(Write #R$924C(#N$914C) to *<a rel="noopener
 $F1FF LD ($5C36),HL ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $F202 LD A,$10      ; {Set INK: #N$05.
 $F204 RST $10       ;
 $F205 LD A,$05      ;
 $F207 RST $10       ; }
 $F208 LD A,($F259)  ; #REGa=*#R$F259.
 $F20B INC A         ; Increment #REGa by one.
 $F20C AND %00000011 ; Keep only bits 0-1.
 $F20E LD ($F259),A  ; Write #REGa to *#R$F259.
 $F211 RET NZ        ; Return if #REGa is not zero.
 $F212 LD HL,($5BDC) ; #REGhl=*#R$5BDC.
*$F215 LD C,(HL)     ; #REGc=*#REGhl.
 $F216 INC HL        ; Increment #REGhl by one.
 $F217 LD B,(HL)     ; #REGb=*#REGhl.
 $F218 INC HL        ; Increment #REGhl by one.
 $F219 LD A,$FF      ; {Return if #REGc is equal to #N$FF.
 $F21B CP C          ;
 $F21C RET Z         ; }
 $F21D LD A,(HL)     ; #REGa=*#REGhl.
 $F21E ADD A,$04     ; #REGa+=#N$04.
 $F220 CP $40        ; {Jump to #R$F226 if #REGa is not equal to #N$40.
 $F222 JR NZ,$F226   ; }
 $F224 LD A,$20      ; {Write #N$20 to *#REGhl.
*$F226 LD (HL),A     ; }
 $F227 INC HL        ; Increment #REGhl by one.
 $F228 LD D,$02      ; #REGd=#N$02.
 $F22A LD E,$02      ; #REGe=#N$02.
 $F22C CALL $EA93    ; Call #R$EA93.
 $F22F JR $F215      ; Jump to #R$F215.

; Data block at F231
b$F231 DEFB $00
 $F232 DEFB $00
 $F233 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F23B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F243 DEFB $00,$00
 $F245 DEFB $10,$16,$03,$03,$00,$00,$20,$02
 $F24D DEFB $03,$05,$01,$00,$00,$10,$16,$03
 $F255 DEFB $00,$00,$00,$00
 $F259 DEFB $FF,$00

; Data block at F25B
b$F25B DEFB $10,$1B,$3E,$1C,$F8,$30,$12,$10 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F263 DEFB $38,$38,$10,$FE,$38,$38,$28,$6C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F26B DEFB $00,$70,$88,$8F,$8F,$88,$70,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F273 DEFB $00,$00,$00,$FE,$FE,$3E,$2A,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F27B DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F283 DEFB $3F,$3F,$3F,$3F,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F28B DEFB $FF,$FF,$FF,$FF,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F293 DEFB $FC,$FC,$FC,$FC,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F29B DEFB $00,$00,$FF,$FF,$FF,$FF,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F2A3 DEFB $00,$00,$FF,$FF,$FF,$FF,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F2AB DEFB $00,$00,$FF,$FF,$FF,$FF,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $F2B3 DEFB $00,$00,$FF,$FF,$FF,$FF,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#

; Messaging: Game Status Bar
@label=Messaging_GameStatusBar
t$F2BB DEFM "        BOOTY      TREASURE     " ; "#STR(#PC,$04,$20)".

; Data block at F2DB
b$F2DB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F2E3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F2EB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F2F3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F2FB DEFB $01,$00,$00,$00,$00,$00,$01,$01
 $F303 DEFB $00,$00,$00,$00,$00,$01,$00,$00
 $F30B DEFB $00,$00,$FF,$01,$00,$00,$00,$00
 $F313 DEFB $FF,$00,$00,$00
 $F317 DEFB $03,$08,$0D,$12,$17
 $F31C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F324 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F32C DEFB $FF
 $F32D DEFB $FF
 $F32E DEFB $FF
 $F32F DEFB $00
 $F330 DEFB $00,$00
 $F332 DEFB $00,$00
 $F334 DEFB $00
 $F335 DEFB $00
 $F336 DEFB $00,$00,$00,$00
 $F33A DEFB $00,$00
 $F33C DEFB $00,$00
 $F33E DEFB $00
 $F33F DEFB $00
 $F340 DEFB $00,$00
 $F342 DEFB $00
 $F343 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F34B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F353 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F35B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F363 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F36B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F373 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F37B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F383 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F38B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F393 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F39B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3A3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3AB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3B3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3BB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3C3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3CB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3D3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3DB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3E3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3EB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3F3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F3FB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F403 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F40B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F413 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F41B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F423 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F42B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F433 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F43B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F443 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F44B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F453 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F45B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F463 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F46B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F473 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F47B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F483 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F48B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F493 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F49B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F4A3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F4AB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F4B3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F4BB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F4C3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F4CB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F4D3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F4DB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F4E3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F4EB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F4F3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F4FB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F503 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F50B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F513 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F51B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F523 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F52B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F533 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F53B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F543 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F54B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F553 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F55B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F563 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F56B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F573 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F57B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F583 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F58B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F593 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F59B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5A3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5AB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5B3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5BB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5C3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5CB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5D3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5DB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5E3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5EB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5F3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5FB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F603 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F60B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F613 DEFB $00,$00,$00,$00,$00

; Routine at F618
;
; Used by the routines at #R$F7D8 and #R$F7F6.
c$F618 PUSH BC       ; {Stash #REGbc and #REGbc on the stack.
 $F619 PUSH BC       ; }
 $F61A CALL $F63A    ; Call #R$F63A.
 $F61D LD BC,$FFFE   ; #REGbc=#N$FFFE.
 $F620 LD A,($5BD0)  ; #REGa=*#R$5BD0.
 $F623 OUT (C),A     ;
 $F625 POP BC        ; Restore #REGbc from the stack.
 $F626 CALL $F63A    ; Call #R$F63A.
 $F629 LD BC,$FFFE   ; #REGbc=#N$FFFE.
 $F62C LD A,($5BD0)  ; #REGa=*#R$5BD0.
 $F62F OR %00010000  ; Set bit 4.
 $F631 OUT (C),A     ;
 $F633 POP BC        ; Restore #REGbc from the stack.
 $F634 DEC DE        ; Decrease #REGde by one.
 $F635 LD A,D        ; {Jump to #R$F618 until #REGde is zero.
 $F636 OR E          ;
 $F637 JR NZ,$F618   ; }
 $F639 RET           ; Return.
*$F63A PUSH BC       ; Stash #REGbc on the stack.
 $F63B CALL $F8AF    ; Call #R$F8AF.
 $F63E AND B         ; Merge the bits from #REGb.
 $F63F LD B,A        ; #REGb=#REGa.
 $F640 CP $00        ; {Jump to #R$F646 if #REGa is zero.
 $F642 JR Z,$F646    ; }
*$F644 DJNZ $F644    ; Decrease counter by one and loop back to #R$F644 until
                     ; counter is zero.
*$F646 POP BC        ; Restore #REGbc from the stack.
 $F647 RET           ; Return.

; Routine at F648
;
; Used by the routines at #R$F6DB, #R$F7C2 and #R$F80D.
c$F648 PUSH BC       ; Stash #REGbc on the stack.
 $F649 LD A,($5BD0)  ; #REGa=*#R$5BD0.
 $F64C LD BC,$FFFE   ; #REGbc=#R$FFFE.
 $F64F OUT (C),A     ; Send #REGa to port *#REGc.
 $F651 POP BC        ; Restore #REGbc from the stack.
 $F652 PUSH BC       ; Stash #REGbc on the stack.
 $F653 CALL $F8C0    ; Call #R$F8C0.
 $F656 LD A,($5BD0)  ; #REGa=*#R$5BD0.
 $F659 LD BC,$FFFE   ; #REGbc=#R$FFFE.
 $F65C OR %00010000  ; Set bit 4.
 $F65E OUT (C),A     ; Send #REGa to port *#REGc.
 $F660 POP BC        ; Restore #REGbc from the stack.
 $F661 PUSH BC       ; Stash #REGbc on the stack.
 $F662 CALL $F8C0    ; Call #R$F8C0.
 $F665 POP BC        ; Restore #REGbc from the stack.
 $F666 DEC DE        ; Decrease #REGde by one.
 $F667 LD A,E        ; {Jump to #R$F648 until #REGde is zero.
 $F668 OR D          ;
 $F669 JR NZ,$F648   ; }
 $F66B RET           ; Return.

; Routine at F66C
;
; Used by the routines at #R$F723, #R$F753, #R$F774, #R$F7A4 and #R$F888.
c$F66C PUSH BC       ;
 $F66D PUSH BC       ;
 $F66E CALL $F8C0    ;
 $F671 LD BC,$FFFE   ;
 $F674 LD A,($5BD0)  ;
 $F677 OUT (C),A     ;
 $F679 POP BC        ;
 $F67A CALL $F8C0    ;
 $F67D LD BC,$FFFE   ;
 $F680 LD A,($5BD0)  ;
 $F683 OR $10        ;
 $F685 OUT (C),A     ;
 $F687 POP BC        ;
 $F688 INC BC        ;
 $F689 DEC DE        ;
 $F68A LD A,E        ;
 $F68B OR D          ;
 $F68C JR NZ,$F66C   ;
 $F68E RET           ;
*$F68F PUSH BC       ;
 $F690 PUSH BC       ;
 $F691 CALL $F8C0    ;
 $F694 LD BC,$FFFE   ;
 $F697 LD A,($5BD0)  ;
 $F69A OUT (C),A     ;
 $F69C POP BC        ;
 $F69D CALL $F8C0    ;
 $F6A0 LD BC,($FFFE) ;
 $F6A4 LD A,($5BD0)  ;
 $F6A7 OR $10        ;
 $F6A9 OUT (C),A     ;
 $F6AB POP BC        ;
 $F6AC DEC BC        ;
 $F6AD DEC BC        ;
 $F6AE DEC BC        ;
 $F6AF DEC DE        ;
 $F6B0 LD A,D        ;
 $F6B1 OR E          ;
 $F6B2 JR NZ,$F68F   ;
 $F6B4 RET           ;

; Routine at F6B5
;
; Used by the routines at #R$F73B, #R$F753 and #R$F78C.
c$F6B5 PUSH BC       ;
 $F6B6 PUSH BC       ;
 $F6B7 CALL $F8C0    ;
 $F6BA LD BC,$FFFE   ;
 $F6BD LD A,($5BD0)  ;
 $F6C0 OUT (C),A     ;
 $F6C2 POP BC        ;
 $F6C3 CALL $F8C0    ;
 $F6C6 LD BC,$FFFE   ;
 $F6C9 LD A,($5BD0)  ;
 $F6CC OR $10        ;
 $F6CE OUT (C),A     ;
 $F6D0 POP BC        ;
 $F6D1 DEC BC        ;
 $F6D2 LD A,C        ;
 $F6D3 OR B          ;
 $F6D4 RET Z         ;
 $F6D5 DEC DE        ;
 $F6D6 LD A,D        ;
 $F6D7 OR E          ;
 $F6D8 JR NZ,$F6B5   ;
 $F6DA RET           ;

; Routine at F6DB
;
; Used by the routine at #R$FE69.
c$F6DB LD A,($FFF8)  ;
 $F6DE CP $00        ;
 $F6E0 JR Z,$F712    ;
 $F6E2 PUSH BC       ;
 $F6E3 LD A,($FE88)  ;
 $F6E6 LD C,A        ;
 $F6E7 LD A,($FFF7)  ;
 $F6EA AND C         ;
 $F6EB POP BC        ;
 $F6EC JR NZ,$F712   ;
 $F6EE PUSH BC       ;
 $F6EF PUSH DE       ;
 $F6F0 PUSH HL       ;
 $F6F1 LD HL,($FFF9) ;
 $F6F4 LD A,(HL)     ;
 $F6F5 CP $FF        ;
 $F6F7 JP Z,$F71B    ;
 $F6FA LD E,A        ;
 $F6FB INC HL        ;
 $F6FC LD A,(HL)     ;
 $F6FD LD D,A        ;
 $F6FE INC HL        ;
 $F6FF LD A,(HL)     ;
 $F700 LD C,A        ;
 $F701 INC HL        ;
 $F702 LD A,(HL)     ;
 $F703 LD B,A        ;
 $F704 INC HL        ;
 $F705 LD ($FFF9),HL ;
 $F708 LD A,E        ;
 $F709 OR D          ;
 $F70A JR Z,$F70F    ;
 $F70C CALL $F648    ;
*$F70F POP HL        ;
 $F710 POP DE        ;
 $F711 POP BC        ;
*$F712 POP AF        ;
 $F713 POP AF        ;
 $F714 CALL $0038    ;
 $F717 POP IY        ;
 $F719 EI            ;
 $F71A RET           ;
*$F71B LD HL,$FA00   ;
 $F71E LD ($FFF9),HL ;
 $F721 JR $F70F      ;

; Routine at F723
;
; Used by the routine at #R$F863.
c$F723 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $F724 PUSH DE       ; }
 $F725 LD DE,$0019   ; #REGde=#N($0019,$04,$04).
 $F728 LD BC,$0032   ; #REGbc=#N($0032,$04,$04).
 $F72B CALL $F66C    ; Call #R$F66C.
 $F72E POP DE        ; {Restore #REGde, #REGbc and #REGaf from the stack.
 $F72F POP BC        ;
 $F730 POP AF        ; }
 $F731 LD A,$00      ; #REGa=#N$00.
 $F733 LD ($FFFE),A  ; Write #REGa to *#N$FFFE.
 $F736 POP AF        ; Restore #REGaf from the stack.
 $F737 POP IY        ; Restore #REGiy from the stack.
 $F739 EI            ; Enable interrupts.
 $F73A RET           ; Return.

; Routine at F73B
;
; Used by the routine at #R$F863.
c$F73B PUSH DE       ; {Stash #REGde and #REGbc on the stack.
 $F73C PUSH BC       ; }
 $F73D LD DE,$0032   ; #REGde=#N($0032,$04,$04).
 $F740 LD BC,$0064   ; #REGbc=#N($0064,$04,$04).
 $F743 CALL $F6B5    ; Call #R$F6B5.
 $F746 POP BC        ; {Restore #REGbc, #REGde and #REGaf from the stack.
 $F747 POP DE        ;
 $F748 POP AF        ; }
 $F749 LD A,$00      ; #REGa=#N$00.
 $F74B LD ($FFFE),A  ; Write #REGa to *#N$FFFE.
 $F74E POP AF        ; Restore #REGaf from the stack.
 $F74F POP IY        ; Restore #REGiy from the stack.
 $F751 EI            ; Enable interrupts.
 $F752 RET           ; Return.

; Routine at F753
;
; Used by the routine at #R$F863.
c$F753 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $F754 PUSH DE       ; }
 $F755 LD BC,$0096   ; #REGbc=#N($0096,$04,$04).
 $F758 LD DE,$0064   ; #REGde=#N($0064,$04,$04).
 $F75B CALL $F6B5    ; Call #R$F6B5.
 $F75E LD DE,$0064   ; #REGde=#N($0064,$04,$04).
 $F761 LD BC,$0001   ; #REGbc=#N($0001,$04,$04).
 $F764 CALL $F66C    ; Call #R$F66C.
 $F767 POP DE        ; {Restore #REGde, #REGbc and #REGaf from the stack.
 $F768 POP BC        ;
 $F769 POP AF        ; }
 $F76A LD A,$00      ; {Write #N$00 to *#N$FFFE.
 $F76C LD ($FFFE),A  ; }
 $F76F POP AF        ; Restore #REGaf from the stack.
 $F770 EI            ; Enable interrupts.
 $F771 POP IY        ; Restore #REGiy from the stack.
 $F773 RET           ; Return.

; Routine at F774
;
; Used by the routine at #R$F863.
c$F774 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $F775 PUSH DE       ; }
 $F776 LD DE,$00C8   ; #REGde=#N($00C8,$04,$04).
 $F779 LD BC,$0014   ; #REGbc=#N($0014,$04,$04).
 $F77C CALL $F66C    ; Call #R$F66C.
 $F77F POP DE        ; {Restore #REGde, #REGbc and #REGaf from the stack.
 $F780 POP BC        ;
 $F781 POP AF        ; }
 $F782 LD A,$00      ; {Write #N$00 to *#N$FFFE.
 $F784 LD ($FFFE),A  ; }
 $F787 POP AF        ; Restore #REGaf from the stack.
 $F788 EI            ; Enable interrupts.
 $F789 POP IY        ; Restore #REGiy from the stack.
 $F78B RET           ; Return.

; Routine at F78C
;
; Used by the routine at #R$F863.
c$F78C PUSH DE       ; {Stash #REGde and #REGbc on the stack.
 $F78D PUSH BC       ; }
 $F78E LD BC,$0032   ; #REGbc=#N($0032,$04,$04).
 $F791 LD DE,$0019   ; #REGde=#N($0019,$04,$04).
 $F794 CALL $F6B5    ; Call #R$F6B5.
 $F797 POP BC        ; {Restore #REGbc, #REGde and #REGaf from the stack.
 $F798 POP DE        ;
 $F799 POP AF        ; }
 $F79A LD A,$00      ; {Write #N$00 to *#N$FFFE.
 $F79C LD ($FFFE),A  ; }
 $F79F POP AF        ; Restore #REGaf from the stack.
 $F7A0 POP IY        ; Restore #REGiy from the stack.
 $F7A2 EI            ; Enable interrupts.
 $F7A3 RET           ; Return.

; Routine at F7A4
;
; Used by the routine at #R$F863.
c$F7A4 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $F7A5 PUSH DE       ; }
 $F7A6 LD B,$0A      ; #REGb=#N$0A.
*$F7A8 PUSH BC       ; Stash #REGbc on the stack.
 $F7A9 LD BC,$0064   ; #REGbc=#N($0064,$04,$04).
 $F7AC LD DE,$0032   ; #REGde=#N($0032,$04,$04).
 $F7AF CALL $F66C    ; Call #R$F66C.
 $F7B2 POP BC        ; Restore #REGbc from the stack.
 $F7B3 DJNZ $F7A8    ; Decrease counter by one and loop back to #R$F7A8 until
                     ; counter is zero.
 $F7B5 POP DE        ; {Restore #REGde, #REGbc and #REGaf from the stack.
 $F7B6 POP BC        ;
 $F7B7 POP AF        ; }
 $F7B8 LD A,$00      ; {Write #N$00 to *#N$FFFE.
 $F7BA LD ($FFFE),A  ; }
 $F7BD POP AF        ; Restore #REGaf from the stack.
 $F7BE POP IY        ; Restore #REGiy from the stack.
 $F7C0 EI            ; Enable interrupts.
 $F7C1 RET           ; Return.

; Routine at F7C2
;
; Used by the routine at #R$F7D8.
c$F7C2 LD BC,$0005   ; #REGbc=#N($0005,$04,$04).
 $F7C5 LD DE,$0032   ; #REGde=#N($0032,$04,$04).
 $F7C8 CALL $F648    ; Call #R$F648.
 $F7CB POP DE        ; {Restore #REGde, #REGbc, #REGaf and #REGaf from the
 $F7CC POP BC        ; stack.
 $F7CD POP AF        ;
 $F7CE POP AF        ; }
 $F7CF CALL $0038    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0038.html">MASK_INT</a>.)
 $F7D2 POP IY        ; Restore #REGiy from the stack.
 $F7D4 RET           ; Return.
 $F7D5 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $F7D6 POP BC        ; }
 $F7D7 RET           ; Return.

; Routine at F7D8
;
; Used by the routine at #R$F855.
c$F7D8 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $F7D9 PUSH DE       ; }
 $F7DA LD A,($FE88)  ; #REGa=*#R$FE88.
 $F7DD AND %00000111 ; Keep only bits 0-2.
 $F7DF JP Z,$F7C2    ; Jump to #R$F7C2 if the result is zero.
 $F7E2 PUSH HL       ; Stash #REGhl on the stack.
 $F7E3 LD DE,$000A   ; #REGde=#N($000A,$04,$04).
 $F7E6 LD B,$1F      ; #REGb=#N$1F.
 $F7E8 CALL $F618    ; Call #R$F618.
 $F7EB POP HL        ; {Restore #REGhl, #REGde, #REGbc, #REGaf and #REGaf from
 $F7EC POP DE        ; the stack.
 $F7ED POP BC        ;
 $F7EE POP AF        ;
 $F7EF POP AF        ; }
 $F7F0 CALL $0038    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0038.html">MASK_INT</a>.)
 $F7F3 POP IY        ; Restore #REGiy from the stack.
 $F7F5 RET           ; Return.

; Routine at F7F6
;
; Used by the routine at #R$F855.
c$F7F6 PUSH BC       ; {Stash #REGbc, #REGde and #REGhl on the stack.
 $F7F7 PUSH DE       ;
 $F7F8 PUSH HL       ; }
 $F7F9 LD B,$FF      ; #REGb=#N$FF.
 $F7FB LD DE,$0014   ; #REGde=#N($0014,$04,$04).
 $F7FE CALL $F618    ; Call #R$F618.
 $F801 POP HL        ; {Restore #REGhl, #REGde, #REGbc, #REGaf and #REGaf from
 $F802 POP DE        ; the stack.
 $F803 POP BC        ;
 $F804 POP AF        ;
 $F805 POP AF        ; }
 $F806 CALL $0038    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0038.html">MASK_INT</a>.)
 $F809 POP IY        ; Restore #REGiy from the stack.
 $F80B EI            ; Enable interrupts.
 $F80C RET           ; Return.

; Routine at F80D
;
; Used by the routine at #R$FE69.
c$F80D LD A,($FFFF)  ;
 $F810 CP $00        ;
 $F812 RET Z         ;
 $F813 CP $02        ;
 $F815 JP Z,$F837    ;
 $F818 LD A,($FE88)  ;
 $F81B AND $07       ;
 $F81D JR NZ,$F82E   ;
 $F81F PUSH BC       ;
 $F820 PUSH DE       ;
 $F821 PUSH HL       ;
 $F822 LD BC,$0032   ;
 $F825 LD DE,$003C   ;
 $F828 CALL $F648    ;
 $F82B POP HL        ;
 $F82C POP DE        ;
 $F82D POP BC        ;
*$F82E POP AF        ;
 $F82F POP AF        ;
 $F830 CALL $0038    ;
 $F833 POP IY        ;
 $F835 EI            ;
 $F836 RET           ;
*$F837 LD A,($FE88)  ;
 $F83A AND $0F       ;
 $F83C JP NZ,$F82E   ;
 $F83F PUSH BC       ;
 $F840 PUSH DE       ;
 $F841 LD DE,$000A   ;
 $F844 LD BC,$000A   ;
 $F847 CALL $F648    ;
 $F84A POP DE        ;
 $F84B POP BC        ;
 $F84C POP AF        ;
 $F84D POP AF        ;
 $F84E CALL $0038    ;
 $F851 POP IY        ;
 $F853 EI            ;
 $F854 RET           ;

; Routine at F855
;
; Used by the routine at #R$FE69.
c$F855 LD A,($FFFD)  ;
 $F858 CP $00        ;
 $F85A RET Z         ;
 $F85B CP $01        ;
 $F85D JP Z,$F7D8    ;
 $F860 JP $F7F6      ;

; Routine at F863
;
; Used by the routine at #R$FE69.
c$F863 LD A,($FFFE)  ;
 $F866 CP $00        ;
 $F868 RET Z         ;
 $F869 CP $01        ;
 $F86B JP Z,$F7A4    ;
 $F86E CP $02        ;
 $F870 JP Z,$F753    ;
 $F873 CP $03        ;
 $F875 JP Z,$F774    ;
 $F878 CP $04        ;
 $F87A JP Z,$F78C    ;
 $F87D CP $05        ;
 $F87F JP Z,$F73B    ;
 $F882 CP $06        ;
 $F884 JP Z,$F723    ;
 $F887 RET           ;

; Routine at F888
;
; Used by the routine at #R$FE69.
c$F888 LD A,($FFFB)  ;
 $F88B CP $00        ;
 $F88D RET Z         ;
 $F88E LD A,($FFFC)  ;
 $F891 CP $00        ;
 $F893 RET Z         ;
 $F894 PUSH BC       ;
 $F895 PUSH DE       ;
 $F896 LD DE,$00C8   ;
 $F899 LD BC,$0064   ;
 $F89C CALL $F66C    ;
 $F89F POP DE        ;
 $F8A0 POP BC        ;
 $F8A1 POP AF        ;
 $F8A2 LD A,$00      ;
 $F8A4 LD ($FFFB),A  ;
 $F8A7 LD ($FFFC),A  ;
 $F8AA POP AF        ;
 $F8AB POP IY        ;
 $F8AD EI            ;
 $F8AE RET           ;

; Routine at F8AF
;
; Used by the routine at #R$F618.
c$F8AF LD HL,($FE86) ;
 $F8B2 INC HL        ;
 $F8B3 LD A,H        ;
 $F8B4 CP $20        ;
 $F8B6 JR NZ,$F8BB   ;
 $F8B8 LD HL,$0000   ;
*$F8BB LD ($FE86),HL ;
 $F8BE LD A,(HL)     ;
 $F8BF RET           ; Return.

; Routine at F8C0
;
; Used by the routines at #R$F648, #R$F66C and #R$F6B5.
c$F8C0 DEC BC        ;
 $F8C1 LD A,B        ;
 $F8C2 OR C          ;
 $F8C3 JR NZ,$F8C0   ;
 $F8C5 RET           ; Return.

; Unused
u$F8C6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8CE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8D6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8DE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8E6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8EE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8F6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8FE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F906 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F90E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F916 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F91E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F926 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F92E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F936 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F93E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F946 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F94E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F956 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F95E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F966 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F96E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F976 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F97E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F986 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F98E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F996 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F99E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9A6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9AE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9B6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9BE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9C6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9CE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9D6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9DE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9E6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9EE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9F6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9FE DEFB $00,$00

; Data block at FA00
b$FA00 DEFB $26,$00,$2B,$00,$22,$00,$30,$00
 $FA08 DEFB $26,$00,$2B,$00,$00,$00,$00,$00
 $FA10 DEFB $16,$00,$49,$00,$00,$00,$00,$00
 $FA18 DEFB $16,$00,$49,$00,$00,$00,$00,$00
 $FA20 DEFB $22,$00,$30,$00,$1E,$00,$35,$00
 $FA28 DEFB $1C,$00,$3A,$00,$2E,$00,$23,$00
 $FA30 DEFB $2E,$00,$23,$00,$2B,$00,$26,$00
 $FA38 DEFB $2E,$00,$23,$00,$00,$00,$00,$00
 $FA40 DEFB $35,$00,$1E,$00,$2E,$00,$23,$00
 $FA48 DEFB $35,$00,$1E,$00,$00,$00,$00,$00
 $FA50 DEFB $19,$00,$41,$00,$00,$00,$00,$00
 $FA58 DEFB $19,$00,$41,$00,$00,$00,$00,$00
 $FA60 DEFB $19,$00,$41,$00,$16,$00,$49,$00
 $FA68 DEFB $15,$00,$4E,$00,$22,$00,$30,$00
 $FA70 DEFB $22,$00,$30,$00,$20,$00,$32,$00
 $FA78 DEFB $22,$00,$30,$00,$00,$00,$00,$00
 $FA80 DEFB $26,$00,$2B,$00,$2B,$00,$26,$00
 $FA88 DEFB $2E,$00,$23,$00,$2B,$00,$26,$00
 $FA90 DEFB $26,$00,$2B,$00,$22,$00,$30,$00
 $FA98 DEFB $26,$00,$2B,$00,$22,$00,$30,$00
 $FAA0 DEFB $1E,$00,$35,$00,$1C,$00,$3A,$00
 $FAA8 DEFB $1E,$00,$35,$00,$1C,$00,$3A,$00
 $FAB0 DEFB $19,$00,$41,$00,$16,$00,$49,$00
 $FAB8 DEFB $16,$00,$49,$00,$14,$00,$50,$00
 $FAC0 DEFB $12,$00,$5A,$00,$10,$00,$67,$00
 $FAC8 DEFB $00,$00,$00,$00,$12,$00,$5A,$00
 $FAD0 DEFB $16,$00,$49,$00,$15,$00,$4E,$00
 $FAD8 DEFB $19,$00,$41,$00,$16,$00,$49,$00
 $FAE0 DEFB $1C,$00,$3A,$00,$19,$00,$41,$00
 $FAE8 DEFB $1E,$00,$35,$00,$1C,$00,$3A,$00
 $FAF0 DEFB $00,$00,$00,$00,$16,$00,$49,$00
 $FAF8 DEFB $00,$00,$00,$00,$16,$00,$49,$00
 $FB00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB08 DEFB $22,$00,$30,$00,$1E,$00,$35,$00
 $FB10 DEFB $1C,$00,$3A,$00,$2E,$00,$23,$00
 $FB18 DEFB $2E,$00,$23,$00,$22,$00,$30,$00
 $FB20 DEFB $1C,$00,$3A,$00,$2E,$00,$23,$00
 $FB28 DEFB $2E,$00,$23,$00,$22,$00,$30,$00
 $FB30 DEFB $26,$00,$2B,$00,$00,$00,$00,$00
 $FB38 DEFB $1D,$00,$37,$00,$00,$00,$00,$00
 $FB40 DEFB $1D,$00,$37,$00,$00,$00,$00,$00
 $FB48 DEFB $26,$00,$2B,$00,$22,$00,$30,$00
 $FB50 DEFB $1D,$00,$37,$00,$35,$00,$1E,$00
 $FB58 DEFB $35,$00,$1E,$00,$26,$00,$2B,$00
 $FB60 DEFB $1D,$00,$37,$00,$35,$00,$1E,$00
 $FB68 DEFB $35,$00,$1E,$00,$26,$00,$2B,$00
 $FB70 DEFB $2B,$00,$26,$00,$00,$00,$00,$00
 $FB78 DEFB $22,$00,$30,$00,$00,$00,$00,$00
 $FB80 DEFB $22,$00,$30,$00,$00,$00,$00,$00
 $FB88 DEFB $26,$00,$2B,$00,$2B,$00,$26,$00
 $FB90 DEFB $2E,$00,$23,$00,$2B,$00,$26,$00
 $FB98 DEFB $26,$00,$2B,$00,$22,$00,$30,$00
 $FBA0 DEFB $26,$00,$2B,$00,$22,$00,$30,$00
 $FBA8 DEFB $1E,$00,$35,$00,$1C,$00,$3A,$00
 $FBB0 DEFB $1E,$00,$35,$00,$1C,$00,$3A,$00
 $FBB8 DEFB $19,$00,$41,$00,$16,$00,$49,$00
 $FBC0 DEFB $16,$00,$49,$00,$14,$00,$50,$00
 $FBC8 DEFB $12,$00,$5A,$00,$10,$00,$67,$00
 $FBD0 DEFB $00,$00,$00,$00,$12,$00,$5A,$00
 $FBD8 DEFB $16,$00,$49,$00,$15,$00,$4E,$00
 $FBE0 DEFB $19,$00,$41,$00,$16,$00,$49,$00
 $FBE8 DEFB $1C,$00,$3A,$00,$19,$00,$41,$00
 $FBF0 DEFB $1E,$00,$35,$00,$1C,$00,$3A,$00
 $FBF8 DEFB $00,$00,$00,$00,$16,$00,$49,$00
 $FC00 DEFB $00,$00,$00,$00,$16,$00,$49,$00
 $FC08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC10 DEFB $FF,$FF,$FF,$FF,$FF,$00,$00,$00
 $FC18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE68 DEFB $00

; Routine at FE69
c$FE69 PUSH IY       ;
 $FE6B LD IY,$5C3A   ;
 $FE6F PUSH AF       ;
 $FE70 LD A,($FE88)  ;
 $FE73 INC A         ;
 $FE74 LD ($FE88),A  ;
 $FE77 CALL $F888    ;
 $FE7A CALL $F80D    ;
 $FE7D CALL $F855    ;
 $FE80 CALL $F863    ;
 $FE83 CALL $F6DB    ;
 $FE86 NOP           ;
 $FE87 NOP           ;
 $FE88 NOP           ;
 $FE89 NOP           ;
 $FE8A NOP           ;
 $FE8B NOP           ;
 $FE8C NOP           ;
 $FE8D NOP           ;
 $FE8E NOP           ;
 $FE8F NOP           ;
 $FE90 NOP           ;
 $FE91 NOP           ;
 $FE92 NOP           ;
 $FE93 NOP           ;
 $FE94 NOP           ;
 $FE95 NOP           ;
 $FE96 NOP           ;
 $FE97 NOP           ;
 $FE98 NOP           ;
 $FE99 NOP           ;
 $FE9A NOP           ;
 $FE9B NOP           ;
 $FE9C NOP           ;
 $FE9D NOP           ;
 $FE9E NOP           ;
 $FE9F NOP           ;
 $FEA0 NOP           ;
 $FEA1 NOP           ;
 $FEA2 NOP           ;
 $FEA3 NOP           ;
 $FEA4 NOP           ;
 $FEA5 NOP           ;
 $FEA6 NOP           ;
 $FEA7 NOP           ;
 $FEA8 NOP           ;
 $FEA9 NOP           ;
 $FEAA NOP           ;
 $FEAB NOP           ;
 $FEAC NOP           ;
 $FEAD NOP           ;
 $FEAE NOP           ;
 $FEAF NOP           ;
 $FEB0 NOP           ;
 $FEB1 NOP           ;
 $FEB2 NOP           ;
 $FEB3 NOP           ;
 $FEB4 NOP           ;
 $FEB5 NOP           ;
 $FEB6 NOP           ;
 $FEB7 NOP           ;
 $FEB8 NOP           ;
 $FEB9 NOP           ;
 $FEBA NOP           ;
 $FEBB NOP           ;
 $FEBC NOP           ;
 $FEBD NOP           ;
 $FEBE NOP           ;
 $FEBF NOP           ;
 $FEC0 NOP           ;
 $FEC1 NOP           ;
 $FEC2 NOP           ;
 $FEC3 NOP           ;
 $FEC4 NOP           ;
 $FEC5 NOP           ;
 $FEC6 NOP           ;
 $FEC7 NOP           ;
 $FEC8 NOP           ;
 $FEC9 NOP           ;
 $FECA NOP           ;
 $FECB NOP           ;
 $FECC NOP           ;
 $FECD NOP           ;
 $FECE NOP           ;
 $FECF NOP           ;
 $FED0 NOP           ;
 $FED1 NOP           ;
 $FED2 NOP           ;
 $FED3 NOP           ;
 $FED4 NOP           ;
 $FED5 NOP           ;
 $FED6 NOP           ;
 $FED7 NOP           ;
 $FED8 NOP           ;
 $FED9 NOP           ;
 $FEDA NOP           ;
 $FEDB NOP           ;
 $FEDC NOP           ;
 $FEDD NOP           ;
 $FEDE NOP           ;
 $FEDF NOP           ;
 $FEE0 NOP           ;
 $FEE1 NOP           ;
*$FEE2 NOP           ;
 $FEE3 NOP           ;
 $FEE4 NOP           ;
 $FEE5 NOP           ;
 $FEE6 NOP           ;
 $FEE7 NOP           ;
 $FEE8 NOP           ;
 $FEE9 NOP           ;
 $FEEA NOP           ;
 $FEEB NOP           ;
 $FEEC NOP           ;
 $FEED NOP           ;
 $FEEE NOP           ;
 $FEEF NOP           ;
 $FEF0 NOP           ;
 $FEF1 NOP           ;
 $FEF2 NOP           ;
 $FEF3 NOP           ;
 $FEF4 NOP           ;
 $FEF5 NOP           ;
 $FEF6 NOP           ;
 $FEF7 NOP           ;
 $FEF8 NOP           ;
 $FEF9 NOP           ;
 $FEFA NOP           ;
 $FEFB NOP           ;
 $FEFC NOP           ;
 $FEFD NOP           ;
 $FEFE NOP           ;
 $FEFF NOP           ;
 $FF00 NOP           ;
 $FF01 NOP           ;
 $FF02 NOP           ;
 $FF03 NOP           ;
 $FF04 NOP           ;
 $FF05 NOP           ;
 $FF06 NOP           ;
 $FF07 NOP           ;
 $FF08 NOP           ;
 $FF09 NOP           ;
 $FF0A NOP           ;
 $FF0B NOP           ;
 $FF0C IN A,($02)    ;
 $FF0E IN A,($02)    ;
 $FF10 LD C,L        ;
 $FF11 NOP           ;
 $FF12 LD A,B        ;
 $FF13 LD A,$00      ;
 $FF15 NOP           ;
 $FF16 POP DE        ;
 $FF17 LD D,B        ;
 $FF18 DI            ;
 $FF19 DEC C         ;
 $FF1A ADC A,$0B     ;
 $FF1C CALL PO,$CE50 ;
 $FF1F DEC BC        ;
 $FF20 PUSH HL       ;
 $FF21 LD D,B        ;
 $FF22 INC E         ;
 $FF23 RLA           ;
 $FF24 CALL C,$CE0A  ;
 $FF27 DEC BC        ;
 $FF28 EX DE,HL      ;
 $FF29 LD D,B        ;
 $FF2A LD D,$17      ;
 $FF2C CALL C,$D70A  ;
 $FF2F JR $FEE2      ;
 $FF31 INC SP        ;
 $FF32 LD C,B        ;
 $FF33 LD (HL),C     ;
 $FF34 DEC B         ;
 $FF35 NOP           ;
 $FF36 IN A,($02)    ;
 $FF38 LD C,L        ;
 $FF39 NOP           ;
 $FF3A IN A,($02)    ;
 $FF3C LD C,L        ;
 $FF3D NOP           ;
 $FF3E NOP           ;
 $FF3F LD D,$21      ;
 $FF41 LD (BC),A     ;
 $FF42 RET NZ        ;
 $FF43 LD E,H        ;
 $FF44 SUB H         ;
 $FF45 LD D,$C0      ;
 $FF47 LD D,A        ;
 $FF48 LD (HL),C     ;
 $FF49 LD C,$F3      ;
 $FF4B DEC C         ;
 $FF4C LD HL,$C617   ;
 $FF4F LD E,$40      ;
 $FF51 SBC A,H       ;
 $FF52 HALT          ;
 $FF53 DEC DE        ;
 $FF54 INC BC        ;
 $FF55 INC DE        ;
 $FF56 NOP           ;
 $FF57 LD A,$00      ;
 $FF59 INC A         ;
 $FF5A LD B,D        ;
 $FF5B LD B,D        ;
 $FF5C LD A,(HL)     ;
 $FF5D LD B,D        ;
 $FF5E LD B,D        ;
 $FF5F NOP           ;
 $FF60 NOP           ;
 $FF61 LD A,H        ;
 $FF62 LD B,D        ;
 $FF63 LD A,H        ;
 $FF64 LD B,D        ;
 $FF65 LD B,D        ;
 $FF66 LD A,H        ;
 $FF67 NOP           ;
 $FF68 NOP           ;
 $FF69 INC A         ;
 $FF6A LD B,D        ;
 $FF6B LD B,B        ;
 $FF6C LD B,B        ;
 $FF6D LD B,D        ;
 $FF6E INC A         ;
 $FF6F NOP           ;
 $FF70 NOP           ;
 $FF71 LD A,B        ;
 $FF72 LD B,H        ;
 $FF73 LD B,D        ;
 $FF74 LD B,D        ;
 $FF75 LD B,H        ;
 $FF76 LD A,B        ;
 $FF77 NOP           ;
 $FF78 NOP           ;
 $FF79 LD A,(HL)     ;
 $FF7A LD B,B        ;
 $FF7B LD A,H        ;
 $FF7C LD B,B        ;
 $FF7D LD B,B        ;
 $FF7E LD A,(HL)     ;
 $FF7F NOP           ;
 $FF80 NOP           ;
 $FF81 LD A,(HL)     ;
 $FF82 LD B,B        ;
 $FF83 LD A,H        ;
 $FF84 LD B,B        ;
 $FF85 LD B,B        ;
 $FF86 LD B,B        ;
 $FF87 NOP           ;
 $FF88 NOP           ;
 $FF89 INC A         ;
 $FF8A LD B,D        ;
 $FF8B LD B,B        ;
 $FF8C LD C,(HL)     ;
 $FF8D LD B,D        ;
 $FF8E INC A         ;
 $FF8F NOP           ;
 $FF90 NOP           ;
 $FF91 LD B,D        ;
 $FF92 LD B,D        ;
 $FF93 LD A,(HL)     ;
 $FF94 LD B,D        ;
 $FF95 LD B,D        ;
 $FF96 LD B,D        ;
 $FF97 NOP           ;
 $FF98 NOP           ;
 $FF99 LD A,$08      ;
 $FF9B EX AF,AF'     ;
 $FF9C EX AF,AF'     ;
 $FF9D EX AF,AF'     ;
 $FF9E LD A,$00      ;
 $FFA0 NOP           ;
 $FFA1 LD (BC),A     ;
 $FFA2 LD (BC),A     ;
 $FFA3 LD (BC),A     ;
 $FFA4 LD B,D        ;
 $FFA5 LD B,D        ;
 $FFA6 INC A         ;
 $FFA7 NOP           ;
 $FFA8 NOP           ;
 $FFA9 LD B,H        ;
 $FFAA LD C,B        ;
 $FFAB LD (HL),B     ;
 $FFAC LD C,B        ;
 $FFAD LD B,H        ;
 $FFAE LD B,D        ;
 $FFAF NOP           ;
 $FFB0 NOP           ;
 $FFB1 LD B,B        ;
 $FFB2 LD B,B        ;
 $FFB3 LD B,B        ;
 $FFB4 LD B,B        ;
 $FFB5 LD B,B        ;
 $FFB6 LD A,(HL)     ;
 $FFB7 NOP           ;
 $FFB8 NOP           ;
 $FFB9 LD B,D        ;
 $FFBA LD H,(HL)     ;
 $FFBB LD E,D        ;
 $FFBC LD B,D        ;
 $FFBD LD B,D        ;
 $FFBE LD B,D        ;
 $FFBF NOP           ;
 $FFC0 NOP           ;
 $FFC1 LD B,D        ;
 $FFC2 LD H,D        ;
; This entry point is used by the routine at #R$DEA8.
*$FFC3 LD D,D        ;
 $FFC4 LD C,D        ;
 $FFC5 LD B,(HL)     ;
 $FFC6 LD B,D        ;
 $FFC7 NOP           ;
 $FFC8 NOP           ;
 $FFC9 INC A         ;
 $FFCA LD B,D        ;
 $FFCB LD B,D        ;
 $FFCC LD B,D        ;
 $FFCD LD B,D        ;
 $FFCE INC A         ;
 $FFCF NOP           ;
 $FFD0 NOP           ;
 $FFD1 LD A,H        ;
 $FFD2 LD B,D        ;
 $FFD3 LD B,D        ;
 $FFD4 LD A,H        ;
 $FFD5 LD B,B        ;
 $FFD6 LD B,B        ;
 $FFD7 NOP           ;
 $FFD8 NOP           ;
 $FFD9 INC A         ;
 $FFDA LD B,D        ;
 $FFDB LD B,D        ;
 $FFDC LD BC,$02FF   ;
 $FFDF LD HL,$5800   ;
*$FFE2 LD (HL),$38   ;
 $FFE4 INC HL        ;
 $FFE5 DEC BC        ;
 $FFE6 LD A,B        ;
 $FFE7 OR C          ;
 $FFE8 RET Z         ;
 $FFE9 JR $FFE2      ;
 $FFEB INC A         ;
 $FFEC LD (BC),A     ;
 $FFED LD B,D        ;
 $FFEE INC A         ;
 $FFEF NOP           ;
 $FFF0 NOP           ;
 $FFF1 CP $10        ;
 $FFF3 DEFB $10,$10  ;
 $FFF5 DEFB $10,$10  ;
 $FFF7 NOP           ;

; Sound: On/ Off
@label=SoundOnOff
g$FFF8 DEFB $00

; Data block at FFF9
b$FFF9 DEFB $42
 $FFFA DEFB $42
 $FFFB DEFB $42
 $FFFC DEFB $42
 $FFFD DEFB $42
 $FFFE DEFB $3C
 $FFFF DEFB $00
